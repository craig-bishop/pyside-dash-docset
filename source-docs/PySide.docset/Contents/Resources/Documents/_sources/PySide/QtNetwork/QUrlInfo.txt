.. module:: PySide.QtNetwork
.. _QUrlInfo:

QUrlInfo
********

.. inheritance-diagram:: QUrlInfo
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtNetwork.QUrlInfo.__eq__>` (i)
*    def :meth:`__ne__<PySide.QtNetwork.QUrlInfo.__ne__>` (i)
*    def :meth:`group<PySide.QtNetwork.QUrlInfo.group>` ()
*    def :meth:`isDir<PySide.QtNetwork.QUrlInfo.isDir>` ()
*    def :meth:`isExecutable<PySide.QtNetwork.QUrlInfo.isExecutable>` ()
*    def :meth:`isFile<PySide.QtNetwork.QUrlInfo.isFile>` ()
*    def :meth:`isReadable<PySide.QtNetwork.QUrlInfo.isReadable>` ()
*    def :meth:`isSymLink<PySide.QtNetwork.QUrlInfo.isSymLink>` ()
*    def :meth:`isValid<PySide.QtNetwork.QUrlInfo.isValid>` ()
*    def :meth:`isWritable<PySide.QtNetwork.QUrlInfo.isWritable>` ()
*    def :meth:`lastModified<PySide.QtNetwork.QUrlInfo.lastModified>` ()
*    def :meth:`lastRead<PySide.QtNetwork.QUrlInfo.lastRead>` ()
*    def :meth:`name<PySide.QtNetwork.QUrlInfo.name>` ()
*    def :meth:`owner<PySide.QtNetwork.QUrlInfo.owner>` ()
*    def :meth:`permissions<PySide.QtNetwork.QUrlInfo.permissions>` ()
*    def :meth:`setLastRead<PySide.QtNetwork.QUrlInfo.setLastRead>` (dt)
*    def :meth:`size<PySide.QtNetwork.QUrlInfo.size>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`setDir<PySide.QtNetwork.QUrlInfo.setDir>` (b)
*    def :meth:`setFile<PySide.QtNetwork.QUrlInfo.setFile>` (b)
*    def :meth:`setGroup<PySide.QtNetwork.QUrlInfo.setGroup>` (s)
*    def :meth:`setLastModified<PySide.QtNetwork.QUrlInfo.setLastModified>` (dt)
*    def :meth:`setName<PySide.QtNetwork.QUrlInfo.setName>` (name)
*    def :meth:`setOwner<PySide.QtNetwork.QUrlInfo.setOwner>` (s)
*    def :meth:`setPermissions<PySide.QtNetwork.QUrlInfo.setPermissions>` (p)
*    def :meth:`setReadable<PySide.QtNetwork.QUrlInfo.setReadable>` (b)
*    def :meth:`setSize<PySide.QtNetwork.QUrlInfo.setSize>` (size)
*    def :meth:`setSymLink<PySide.QtNetwork.QUrlInfo.setSymLink>` (b)
*    def :meth:`setWritable<PySide.QtNetwork.QUrlInfo.setWritable>` (b)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`equal<PySide.QtNetwork.QUrlInfo.equal>` (i1, i2, sortBy)
*    def :meth:`greaterThan<PySide.QtNetwork.QUrlInfo.greaterThan>` (i1, i2, sortBy)
*    def :meth:`lessThan<PySide.QtNetwork.QUrlInfo.lessThan>` (i1, i2, sortBy)


Detailed Description
--------------------



    The :class:`PySide.QtNetwork.QUrlInfo` class stores information about URLs.

    The information about a URL that can be retrieved includes :meth:`PySide.QtNetwork.QUrlInfo.name` , :meth:`PySide.QtNetwork.QUrlInfo.permissions` , :meth:`PySide.QtNetwork.QUrlInfo.owner` , :meth:`PySide.QtNetwork.QUrlInfo.group` , :meth:`PySide.QtNetwork.QUrlInfo.size` , :meth:`PySide.QtNetwork.QUrlInfo.lastModified` , :meth:`PySide.QtNetwork.QUrlInfo.lastRead` , :meth:`PySide.QtNetwork.QUrlInfo.isDir` , :meth:`PySide.QtNetwork.QUrlInfo.isFile` , :meth:`PySide.QtNetwork.QUrlInfo.isSymLink` , :meth:`PySide.QtNetwork.QUrlInfo.isWritable` , :meth:`PySide.QtNetwork.QUrlInfo.isReadable` and :meth:`PySide.QtNetwork.QUrlInfo.isExecutable` .

    You can create your own :class:`PySide.QtNetwork.QUrlInfo` objects passing in all the relevant information in the constructor, and you can modify a :class:`PySide.QtNetwork.QUrlInfo` ; for each getter mentioned above there is an equivalent setter. Note that setting values does not affect the underlying resource that the :class:`PySide.QtNetwork.QUrlInfo` provides information about; for example if you call setWritable(true) on a read-only resource the only thing changed is the :class:`PySide.QtNetwork.QUrlInfo` object, not the resource.

    .. seealso::  :class:`PySide.QtCore.QUrl`  :ref:`FTP Example<network/qftp>` 

.. class:: QUrlInfo()
           QUrlInfo(name, permissions, owner, group, size, lastModified, lastRead, isDir, isFile, isSymLink, isWritable, isReadable, isExecutable)
           QUrlInfo(url, permissions, owner, group, size, lastModified, lastRead, isDir, isFile, isSymLink, isWritable, isReadable, isExecutable)
           QUrlInfo(ui)

    :param size: :class:`PySide.QtCore.qint64`
    :param isFile: :class:`PySide.QtCore.bool`
    :param lastRead: :class:`PySide.QtCore.QDateTime`
    :param isExecutable: :class:`PySide.QtCore.bool`
    :param ui: :class:`PySide.QtNetwork.QUrlInfo`
    :param permissions: :class:`PySide.QtCore.int`
    :param isWritable: :class:`PySide.QtCore.bool`
    :param isSymLink: :class:`PySide.QtCore.bool`
    :param url: :class:`PySide.QtCore.QUrl`
    :param group: unicode
    :param name: unicode
    :param owner: unicode
    :param isReadable: :class:`PySide.QtCore.bool`
    :param lastModified: :class:`PySide.QtCore.QDateTime`
    :param isDir: :class:`PySide.QtCore.bool`

    Constructs an invalid :class:`PySide.QtNetwork.QUrlInfo` object with default values.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 

    Constructs a :class:`PySide.QtNetwork.QUrlInfo` object by specifying all the URL's information.

    The information that is passed is the ``name`` , file ``permissions`` , ``owner`` and ``group`` and the file's ``size`` . Also passed is the ``lastModified`` date/time and the ``lastRead`` date/time. Flags are also passed, specifically, ``isDir`` , ``isFile`` , ``isSymLink`` , ``isWritable`` , ``isReadable`` and ``isExecutable`` .


    Constructs a :class:`PySide.QtNetwork.QUrlInfo` object by specifying all the URL's information.

    The information that is passed is the ``url`` , file ``permissions`` , ``owner`` and ``group`` and the file's ``size`` . Also passed is the ``lastModified`` date/time and the ``lastRead`` date/time. Flags are also passed, specifically, ``isDir`` , ``isFile`` , ``isSymLink`` , ``isWritable`` , ``isReadable`` and ``isExecutable`` .


    Copy constructor, copies ``ui`` to this URL info object.


.. attribute:: PySide.QtNetwork.QUrlInfo.PermissionSpec

    This enum is used by the :meth:`PySide.QtNetwork.QUrlInfo.permissions` function to report the permissions of a file.

    +-------------------+------------------------------------------------+
    |Constant           |Description                                     |
    +===================+================================================+
    |QUrlInfo.ReadOwner |The file is readable by the owner of the file.  |
    +-------------------+------------------------------------------------+
    |QUrlInfo.WriteOwner|The file is writable by the owner of the file.  |
    +-------------------+------------------------------------------------+
    |QUrlInfo.ExeOwner  |The file is executable by the owner of the file.|
    +-------------------+------------------------------------------------+
    |QUrlInfo.ReadGroup |The file is readable by the group.              |
    +-------------------+------------------------------------------------+
    |QUrlInfo.WriteGroup|The file is writable by the group.              |
    +-------------------+------------------------------------------------+
    |QUrlInfo.ExeGroup  |The file is executable by the group.            |
    +-------------------+------------------------------------------------+
    |QUrlInfo.ReadOther |The file is readable by anyone.                 |
    +-------------------+------------------------------------------------+
    |QUrlInfo.WriteOther|The file is writable by anyone.                 |
    +-------------------+------------------------------------------------+
    |QUrlInfo.ExeOther  |The file is executable by anyone.               |
    +-------------------+------------------------------------------------+


.. staticmethod:: PySide.QtNetwork.QUrlInfo.equal(i1, i2, sortBy)


    :param i1: :class:`PySide.QtNetwork.QUrlInfo`
    :param i2: :class:`PySide.QtNetwork.QUrlInfo`
    :param sortBy: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``i1`` equals to ``i2`` ; otherwise returns false. The objects are compared by the value, which is specified by ``sortBy`` . This must be one of :attr:`QDir.Name<QDir.SortFlag>` , :attr:`QDir.Time<QDir.SortFlag>` or :attr:`QDir.Size<QDir.SortFlag>` .



.. staticmethod:: PySide.QtNetwork.QUrlInfo.greaterThan(i1, i2, sortBy)


    :param i1: :class:`PySide.QtNetwork.QUrlInfo`
    :param i2: :class:`PySide.QtNetwork.QUrlInfo`
    :param sortBy: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``i1`` is greater than ``i2`` ; otherwise returns false. The objects are compared by the value, which is specified by ``sortBy`` . This must be one of :attr:`QDir.Name<QDir.SortFlag>` , :attr:`QDir.Time<QDir.SortFlag>` or :attr:`QDir.Size<QDir.SortFlag>` .



.. method:: PySide.QtNetwork.QUrlInfo.group()


    :rtype: unicode




    Returns the group of the URL.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.setGroup`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.isDir()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the URL is a directory; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.isExecutable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the URL is executable; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.isFile()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the URL is a file; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.isReadable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the URL is readable; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.isSymLink()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the URL is a symbolic link; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the URL info is valid; otherwise returns false. Valid means that the :class:`PySide.QtNetwork.QUrlInfo` contains real information.

    You should always check if the URL info is valid before relying on the values.



.. method:: PySide.QtNetwork.QUrlInfo.isWritable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the URL is writable; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.lastModified()


    :rtype: :class:`PySide.QtCore.QDateTime`




    Returns the last modification date of the URL.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.setLastModified`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.lastRead()


    :rtype: :class:`PySide.QtCore.QDateTime`




    Returns the date when the URL was last read.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.setLastRead`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. staticmethod:: PySide.QtNetwork.QUrlInfo.lessThan(i1, i2, sortBy)


    :param i1: :class:`PySide.QtNetwork.QUrlInfo`
    :param i2: :class:`PySide.QtNetwork.QUrlInfo`
    :param sortBy: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``i1`` is less than ``i2`` ; otherwise returns false. The objects are compared by the value, which is specified by ``sortBy`` . This must be one of :attr:`QDir.Name<QDir.SortFlag>` , :attr:`QDir.Time<QDir.SortFlag>` or :attr:`QDir.Size<QDir.SortFlag>` .



.. method:: PySide.QtNetwork.QUrlInfo.name()


    :rtype: unicode




    Returns the file name of the URL.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.setName`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.__ne__(i)


    :param i: :class:`PySide.QtNetwork.QUrlInfo`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtNetwork.QUrlInfo` is not equal to ``other`` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.lessThan`  :meth:`PySide.QtNetwork.QUrlInfo.equal` 


.. method:: PySide.QtNetwork.QUrlInfo.__eq__(i)


    :param i: :class:`PySide.QtNetwork.QUrlInfo`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtNetwork.QUrlInfo` is equal to ``other`` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.lessThan`  :meth:`PySide.QtNetwork.QUrlInfo.equal` 


.. method:: PySide.QtNetwork.QUrlInfo.owner()


    :rtype: unicode




    Returns the owner of the URL.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.setOwner`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.permissions()


    :rtype: :class:`PySide.QtCore.int`




    Returns the permissions of the URL. You can use the ``PermissionSpec`` flags to test for certain permissions.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.setPermissions`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setDir(b)


    :param b: :class:`PySide.QtCore.bool`




    If ``b`` is true then the URL is set to be a directory; if ``b`` is false then the URL is set not to be a directory (which normally means it is a file). (Note that a URL can refer to both a file and a directory even though most file systems do not support this.)

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isDir`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setFile(b)


    :param b: :class:`PySide.QtCore.bool`




    If ``b`` is true then the URL is set to be a file; if \b is false then the URL is set not to be a file (which normally means it is a directory). (Note that a URL can refer to both a file and a directory even though most file systems do not support this.)

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isFile`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setGroup(s)


    :param s: unicode




    Specifies that the owning group of the URL is called ``s`` .

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.group`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setLastModified(dt)


    :param dt: :class:`PySide.QtCore.QDateTime`




    Specifies that the object the URL refers to was last modified at ``dt`` .

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.lastModified`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setLastRead(dt)


    :param dt: :class:`PySide.QtCore.QDateTime`




    Specifies that the object the URL refers to was last read at ``dt`` .

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.lastRead`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setName(name)


    :param name: unicode




    Sets the name of the URL to ``name`` . The name is the full text, for example, "http://qt.nokia.com/doc/qurlinfo.html".

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.name`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setOwner(s)


    :param s: unicode




    Specifies that the owner of the URL is called ``s`` .

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.owner`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setPermissions(p)


    :param p: :class:`PySide.QtCore.int`




    Specifies that the URL has access permissions ``p`` .

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.permissions`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setReadable(b)


    :param b: :class:`PySide.QtCore.bool`




    Specifies that the URL is readable if ``b`` is true and not readable if ``b`` is false.

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isReadable`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setSize(size)


    :param size: :class:`PySide.QtCore.qint64`




    Specifies the ``size`` of the URL.

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.size`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setSymLink(b)


    :param b: :class:`PySide.QtCore.bool`




    Specifies that the URL refers to a symbolic link if ``b`` is true and that it does not if ``b`` is false.

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isSymLink`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.setWritable(b)


    :param b: :class:`PySide.QtCore.bool`




    Specifies that the URL is writable if ``b`` is true and not writable if ``b`` is false.

    If you call this function for an invalid URL info, this function turns it into a valid one.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.isWritable`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 


.. method:: PySide.QtNetwork.QUrlInfo.size()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the size of the URL.

    .. seealso::  :meth:`PySide.QtNetwork.QUrlInfo.setSize`  :meth:`PySide.QtNetwork.QUrlInfo.isValid` 



