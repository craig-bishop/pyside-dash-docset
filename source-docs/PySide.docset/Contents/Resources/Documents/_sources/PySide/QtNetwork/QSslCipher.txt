.. module:: PySide.QtNetwork
.. _QSslCipher:

QSslCipher
**********

.. inheritance-diagram:: QSslCipher
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtNetwork.QSslCipher.__eq__>` (other)
*    def :meth:`__ne__<PySide.QtNetwork.QSslCipher.__ne__>` (other)
*    def :meth:`authenticationMethod<PySide.QtNetwork.QSslCipher.authenticationMethod>` ()
*    def :meth:`encryptionMethod<PySide.QtNetwork.QSslCipher.encryptionMethod>` ()
*    def :meth:`isNull<PySide.QtNetwork.QSslCipher.isNull>` ()
*    def :meth:`keyExchangeMethod<PySide.QtNetwork.QSslCipher.keyExchangeMethod>` ()
*    def :meth:`name<PySide.QtNetwork.QSslCipher.name>` ()
*    def :meth:`protocol<PySide.QtNetwork.QSslCipher.protocol>` ()
*    def :meth:`protocolString<PySide.QtNetwork.QSslCipher.protocolString>` ()
*    def :meth:`supportedBits<PySide.QtNetwork.QSslCipher.supportedBits>` ()
*    def :meth:`usedBits<PySide.QtNetwork.QSslCipher.usedBits>` ()


Detailed Description
--------------------



    The :class:`PySide.QtNetwork.QSslCipher` class represents an SSL cryptographic cipher.

    :class:`PySide.QtNetwork.QSslCipher` stores information about one cryptographic cipher. It is most commonly used with :class:`PySide.QtNetwork.QSslSocket` , either for configuring which ciphers the socket can use, or for displaying the socket's ciphers to the user.

    .. seealso::  :class:`PySide.QtNetwork.QSslSocket`  :class:`PySide.QtNetwork.QSslKey` 

.. class:: QSslCipher()
           QSslCipher(other)
           QSslCipher(name, protocol)

    :param protocol: :attr:`PySide.QtNetwork.QSsl.SslProtocol`
    :param other: :class:`PySide.QtNetwork.QSslCipher`
    :param name: unicode

    Constructs an empty :class:`PySide.QtNetwork.QSslCipher` object.


    Constructs an identical copy of the ``other`` cipher.




.. method:: PySide.QtNetwork.QSslCipher.authenticationMethod()


    :rtype: unicode




    Returns the cipher's authentication method as a :class:`PySide.QtCore.QString` .



.. method:: PySide.QtNetwork.QSslCipher.encryptionMethod()


    :rtype: unicode




    Returns the cipher's encryption method as a :class:`PySide.QtCore.QString` .



.. method:: PySide.QtNetwork.QSslCipher.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this is a null cipher; otherwise returns false.



.. method:: PySide.QtNetwork.QSslCipher.keyExchangeMethod()


    :rtype: unicode




    Returns the cipher's key exchange method as a :class:`PySide.QtCore.QString` .



.. method:: PySide.QtNetwork.QSslCipher.name()


    :rtype: unicode




    Returns the name of the cipher, or an empty :class:`PySide.QtCore.QString` if this is a null cipher.

    .. seealso::  :meth:`PySide.QtNetwork.QSslCipher.isNull` 


.. method:: PySide.QtNetwork.QSslCipher.__ne__(other)


    :param other: :class:`PySide.QtNetwork.QSslCipher`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this cipher is not the same as ``other`` ; otherwise, false is returned.



.. method:: PySide.QtNetwork.QSslCipher.__eq__(other)


    :param other: :class:`PySide.QtNetwork.QSslCipher`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this cipher is the same as ``other`` ; otherwise, false is returned.



.. method:: PySide.QtNetwork.QSslCipher.protocol()


    :rtype: :attr:`PySide.QtNetwork.QSsl.SslProtocol`




    Returns the cipher's protocol type, or :attr:`QSsl.UnknownProtocol<QSsl.SslProtocol>` if :class:`PySide.QtNetwork.QSslCipher` is unable to determine the protocol ( :meth:`PySide.QtNetwork.QSslCipher.protocolString` may contain more information).

    .. seealso::  :meth:`PySide.QtNetwork.QSslCipher.protocolString` 


.. method:: PySide.QtNetwork.QSslCipher.protocolString()


    :rtype: unicode




    Returns the cipher's protocol as a :class:`PySide.QtCore.QString` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslCipher.protocol` 


.. method:: PySide.QtNetwork.QSslCipher.supportedBits()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of bits supported by the cipher.

    .. seealso::  :meth:`PySide.QtNetwork.QSslCipher.usedBits` 


.. method:: PySide.QtNetwork.QSslCipher.usedBits()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of bits used by the cipher.

    .. seealso::  :meth:`PySide.QtNetwork.QSslCipher.supportedBits` 



