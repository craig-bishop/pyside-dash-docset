.. module:: PySide.QtCore
.. _QXmlStreamAttributes:

QXmlStreamAttributes
********************

.. inheritance-diagram:: QXmlStreamAttributes
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtCore.QXmlStreamAttributes.__add__>` (l)
*    def :meth:`__eq__<PySide.QtCore.QXmlStreamAttributes.__eq__>` (v)
*    def :meth:`__iadd__<PySide.QtCore.QXmlStreamAttributes.__iadd__>` (t)
*    def :meth:`__lshift__<PySide.QtCore.QXmlStreamAttributes.__lshift__>` (l)
*    def :meth:`__lshift__<PySide.QtCore.QXmlStreamAttributes.__lshift__>` (t)
*    def :meth:`__ne__<PySide.QtCore.QXmlStreamAttributes.__ne__>` (v)
*    def :meth:`alignOfTypedData<PySide.QtCore.QXmlStreamAttributes.alignOfTypedData>` ()
*    def :meth:`append<PySide.QtCore.QXmlStreamAttributes.append>` (attribute)
*    def :meth:`append<PySide.QtCore.QXmlStreamAttributes.append>` (namespaceUri, name, value)
*    def :meth:`append<PySide.QtCore.QXmlStreamAttributes.append>` (qualifiedName, value)
*    def :meth:`at<PySide.QtCore.QXmlStreamAttributes.at>` (i)
*    def :meth:`capacity<PySide.QtCore.QXmlStreamAttributes.capacity>` ()
*    def :meth:`clear<PySide.QtCore.QXmlStreamAttributes.clear>` ()
*    def :meth:`constData<PySide.QtCore.QXmlStreamAttributes.constData>` ()
*    def :meth:`contains<PySide.QtCore.QXmlStreamAttributes.contains>` (t)
*    def :meth:`count<PySide.QtCore.QXmlStreamAttributes.count>` ()
*    def :meth:`count<PySide.QtCore.QXmlStreamAttributes.count>` (t)
*    def :meth:`data<PySide.QtCore.QXmlStreamAttributes.data>` ()
*    def :meth:`detach_helper<PySide.QtCore.QXmlStreamAttributes.detach_helper>` ()
*    def :meth:`empty<PySide.QtCore.QXmlStreamAttributes.empty>` ()
*    def :meth:`endsWith<PySide.QtCore.QXmlStreamAttributes.endsWith>` (t)
*    def :meth:`erase<PySide.QtCore.QXmlStreamAttributes.erase>` (abegin, aend)
*    def :meth:`fill<PySide.QtCore.QXmlStreamAttributes.fill>` (t[, size=-1])
*    def :meth:`first<PySide.QtCore.QXmlStreamAttributes.first>` ()
*    def :meth:`front<PySide.QtCore.QXmlStreamAttributes.front>` ()
*    def :meth:`hasAttribute<PySide.QtCore.QXmlStreamAttributes.hasAttribute>` (namespaceUri, name)
*    def :meth:`hasAttribute<PySide.QtCore.QXmlStreamAttributes.hasAttribute>` (qualifiedName)
*    def :meth:`indexOf<PySide.QtCore.QXmlStreamAttributes.indexOf>` (t[, from=0])
*    def :meth:`insert<PySide.QtCore.QXmlStreamAttributes.insert>` (before, n, t)
*    def :meth:`insert<PySide.QtCore.QXmlStreamAttributes.insert>` (i, n, t)
*    def :meth:`insert<PySide.QtCore.QXmlStreamAttributes.insert>` (i, t)
*    def :meth:`isEmpty<PySide.QtCore.QXmlStreamAttributes.isEmpty>` ()
*    def :meth:`isSharedWith<PySide.QtCore.QXmlStreamAttributes.isSharedWith>` (other)
*    def :meth:`last<PySide.QtCore.QXmlStreamAttributes.last>` ()
*    def :meth:`lastIndexOf<PySide.QtCore.QXmlStreamAttributes.lastIndexOf>` (t[, from=-1])
*    def :meth:`mid<PySide.QtCore.QXmlStreamAttributes.mid>` (pos[, length=-1])
*    def :meth:`operator[]<PySide.QtCore.QXmlStreamAttributes.operator[]>` (i)
*    def :meth:`prepend<PySide.QtCore.QXmlStreamAttributes.prepend>` (t)
*    def :meth:`realloc<PySide.QtCore.QXmlStreamAttributes.realloc>` (size, alloc)
*    def :meth:`remove<PySide.QtCore.QXmlStreamAttributes.remove>` (i)
*    def :meth:`remove<PySide.QtCore.QXmlStreamAttributes.remove>` (i, n)
*    def :meth:`replace<PySide.QtCore.QXmlStreamAttributes.replace>` (i, t)
*    def :meth:`reserve<PySide.QtCore.QXmlStreamAttributes.reserve>` (size)
*    def :meth:`resize<PySide.QtCore.QXmlStreamAttributes.resize>` (size)
*    def :meth:`setSharable<PySide.QtCore.QXmlStreamAttributes.setSharable>` (sharable)
*    def :meth:`size<PySide.QtCore.QXmlStreamAttributes.size>` ()
*    def :meth:`sizeOfTypedData<PySide.QtCore.QXmlStreamAttributes.sizeOfTypedData>` ()
*    def :meth:`squeeze<PySide.QtCore.QXmlStreamAttributes.squeeze>` ()
*    def :meth:`startsWith<PySide.QtCore.QXmlStreamAttributes.startsWith>` (t)
*    def :meth:`value<PySide.QtCore.QXmlStreamAttributes.value>` (namespaceUri, name)
*    def :meth:`value<PySide.QtCore.QXmlStreamAttributes.value>` (qualifiedName)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QXmlStreamAttributes` class represents a vector of :class:`PySide.QtCore.QXmlStreamAttribute` .

    Attributes are returned by a :class:`PySide.QtCore.QXmlStreamReader` in :meth:`PySide.QtCore.QXmlStreamReader.attributes` when the reader reports a :attr:`start element<QXmlStreamReader.TokenType>` . The class can also be used with a :class:`PySide.QtCore.QXmlStreamWriter` as an argument to :meth:`PySide.QtCore.QXmlStreamWriter.writeAttributes` .

    The convenience function :meth:`PySide.QtCore.QXmlStreamAttributes.value` loops over the vector and returns an attribute value for a given namespaceUri and an attribute's name.

    New attributes can be added with :meth:`PySide.QtCore.QXmlStreamAttributes.append` .


.. class:: QXmlStreamAttributes()
           QXmlStreamAttributes(QXmlStreamAttributes)

    :param QXmlStreamAttributes: :class:`PySide.QtCore.QXmlStreamAttributes`





.. method:: PySide.QtCore.QXmlStreamAttributes.alignOfTypedData()


    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QXmlStreamAttributes.append(attribute)


    :param attribute: :class:`PySide.QtCore.QXmlStreamAttribute`




    Appends the given ``attribute`` to the end of the vector.

    .. seealso::  :meth:`QVector.append` 


.. method:: PySide.QtCore.QXmlStreamAttributes.append(qualifiedName, value)


    :param qualifiedName: unicode
    :param value: unicode




    This is an overloaded function.

    Appends a new attribute with qualified name ``qualifiedName`` and value ``value`` .



.. method:: PySide.QtCore.QXmlStreamAttributes.append(namespaceUri, name, value)


    :param namespaceUri: unicode
    :param name: unicode
    :param value: unicode




    Appends a new attribute with ``name`` in the namespace described with ``namespaceUri`` , and value ``value`` . The ``namespaceUri`` can be empty.



.. method:: PySide.QtCore.QXmlStreamAttributes.at(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.capacity()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.clear()









.. method:: PySide.QtCore.QXmlStreamAttributes.constData()


    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.contains(t)


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.count(t)


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.count()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.data()


    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.detach_helper()








.. method:: PySide.QtCore.QXmlStreamAttributes.empty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.endsWith(t)


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.erase(abegin, aend)


    :param abegin: :class:`PySide.QtCore.QXmlStreamAttribute`
    :param aend: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.fill(t[, size=-1])


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :param size: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtCore.QXmlStreamAttributes.first()


    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.front()


    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.hasAttribute(qualifiedName)


    :param qualifiedName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtCore.QXmlStreamAttributes` has an attribute whose qualified name is ``qualifiedName`` ; otherwise returns false.

    Note that this is not namespace aware. For instance, if this :class:`PySide.QtCore.QXmlStreamAttributes` contains an attribute whose lexical name is "xlink:href" this doesn't tell that an attribute named ``href`` in the XLink namespace is present, since the ``xlink`` prefix can be bound to any namespace. Use the overload that takes a namespace URI and a local name as parameter, for namespace aware code.



.. method:: PySide.QtCore.QXmlStreamAttributes.hasAttribute(namespaceUri, name)


    :param namespaceUri: unicode
    :param name: unicode
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Returns true if this :class:`PySide.QtCore.QXmlStreamAttributes` has an attribute whose namespace URI and name correspond to ``namespaceUri`` and ``name`` ; otherwise returns false.



.. method:: PySide.QtCore.QXmlStreamAttributes.indexOf(t[, from=0])


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.insert(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.insert(i, n, t)


    :param i: :class:`PySide.QtCore.int`
    :param n: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.insert(before, n, t)


    :param before: :class:`PySide.QtCore.QXmlStreamAttribute`
    :param n: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.isSharedWith(other)


    :param other: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.last()


    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.lastIndexOf(t[, from=-1])


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.mid(pos[, length=-1])


    :param pos: :class:`PySide.QtCore.int`
    :param length: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtCore.QXmlStreamAttributes.__ne__(v)


    :param v: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.__add__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtCore.QXmlStreamAttributes.__iadd__(t)


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: 







.. method:: PySide.QtCore.QXmlStreamAttributes.__lshift__(t)


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: 







.. method:: PySide.QtCore.QXmlStreamAttributes.__lshift__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtCore.QXmlStreamAttributes.__eq__(v)


    :param v: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.operator[](i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.prepend(t)


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.realloc(size, alloc)


    :param size: :class:`PySide.QtCore.int`
    :param alloc: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QXmlStreamAttributes.remove(i, n)


    :param i: :class:`PySide.QtCore.int`
    :param n: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.remove(i)


    :param i: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.replace(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`







.. method:: PySide.QtCore.QXmlStreamAttributes.reserve(size)


    :param size: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.resize(size)


    :param size: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.setSharable(sharable)


    :param sharable: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.size()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QXmlStreamAttributes.sizeOfTypedData()


    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QXmlStreamAttributes.squeeze()









.. method:: PySide.QtCore.QXmlStreamAttributes.startsWith(t)


    :param t: :class:`PySide.QtCore.QXmlStreamAttribute`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QXmlStreamAttributes.value(namespaceUri, name)


    :param namespaceUri: unicode
    :param name: unicode
    :rtype: :class:`PySide.QtCore.QStringRef`




    Returns the value of the attribute ``name`` in the namespace described with ``namespaceUri`` , or an empty string reference if the attribute is not defined. The ``namespaceUri`` can be empty.



.. method:: PySide.QtCore.QXmlStreamAttributes.value(qualifiedName)


    :param qualifiedName: unicode
    :rtype: :class:`PySide.QtCore.QStringRef`




    This is an overloaded function.

    Returns the value of the attribute with qualified name ``qualifiedName`` , or an empty string reference if the attribute is not defined. A qualified name is the raw name of an attribute in the XML data. It consists of the namespace prefix, followed by colon, followed by the attribute's local name. Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn't use qualified names, but a resolved namespaceUri and the attribute's local name.




