.. module:: PySide.QtCore
.. _QDir:

QDir
****

.. inheritance-diagram:: QDir
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtCore.QDir.__eq__>` (dir)
*    def :meth:`__ne__<PySide.QtCore.QDir.__ne__>` (dir)
*    def :meth:`__reduce__<PySide.QtCore.QDir.__reduce__>` ()
*    def :meth:`absoluteFilePath<PySide.QtCore.QDir.absoluteFilePath>` (fileName)
*    def :meth:`absolutePath<PySide.QtCore.QDir.absolutePath>` ()
*    def :meth:`canonicalPath<PySide.QtCore.QDir.canonicalPath>` ()
*    def :meth:`cd<PySide.QtCore.QDir.cd>` (dirName)
*    def :meth:`cdUp<PySide.QtCore.QDir.cdUp>` ()
*    def :meth:`count<PySide.QtCore.QDir.count>` ()
*    def :meth:`dirName<PySide.QtCore.QDir.dirName>` ()
*    def :meth:`entryInfoList<PySide.QtCore.QDir.entryInfoList>` ([filters=QDir.NoFilter[, sort=QDir.NoSort]])
*    def :meth:`entryInfoList<PySide.QtCore.QDir.entryInfoList>` (nameFilters[, filters=QDir.NoFilter[, sort=QDir.NoSort]])
*    def :meth:`entryList<PySide.QtCore.QDir.entryList>` ([filters=QDir.NoFilter[, sort=QDir.NoSort]])
*    def :meth:`entryList<PySide.QtCore.QDir.entryList>` (nameFilters[, filters=QDir.NoFilter[, sort=QDir.NoSort]])
*    def :meth:`exists<PySide.QtCore.QDir.exists>` ()
*    def :meth:`exists<PySide.QtCore.QDir.exists>` (name)
*    def :meth:`filePath<PySide.QtCore.QDir.filePath>` (fileName)
*    def :meth:`filter<PySide.QtCore.QDir.filter>` ()
*    def :meth:`isAbsolute<PySide.QtCore.QDir.isAbsolute>` ()
*    def :meth:`isReadable<PySide.QtCore.QDir.isReadable>` ()
*    def :meth:`isRelative<PySide.QtCore.QDir.isRelative>` ()
*    def :meth:`isRoot<PySide.QtCore.QDir.isRoot>` ()
*    def :meth:`makeAbsolute<PySide.QtCore.QDir.makeAbsolute>` ()
*    def :meth:`mkdir<PySide.QtCore.QDir.mkdir>` (dirName)
*    def :meth:`mkpath<PySide.QtCore.QDir.mkpath>` (dirPath)
*    def :meth:`nameFilters<PySide.QtCore.QDir.nameFilters>` ()
*    def :meth:`operator[]<PySide.QtCore.QDir.operator[]>` (arg__1)
*    def :meth:`path<PySide.QtCore.QDir.path>` ()
*    def :meth:`refresh<PySide.QtCore.QDir.refresh>` ()
*    def :meth:`relativeFilePath<PySide.QtCore.QDir.relativeFilePath>` (fileName)
*    def :meth:`remove<PySide.QtCore.QDir.remove>` (fileName)
*    def :meth:`rename<PySide.QtCore.QDir.rename>` (oldName, newName)
*    def :meth:`rmdir<PySide.QtCore.QDir.rmdir>` (dirName)
*    def :meth:`rmpath<PySide.QtCore.QDir.rmpath>` (dirPath)
*    def :meth:`setFilter<PySide.QtCore.QDir.setFilter>` (filter)
*    def :meth:`setNameFilters<PySide.QtCore.QDir.setNameFilters>` (nameFilters)
*    def :meth:`setPath<PySide.QtCore.QDir.setPath>` (path)
*    def :meth:`setSorting<PySide.QtCore.QDir.setSorting>` (sort)
*    def :meth:`sorting<PySide.QtCore.QDir.sorting>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`addResourceSearchPath<PySide.QtCore.QDir.addResourceSearchPath>` (path)
*    def :meth:`addSearchPath<PySide.QtCore.QDir.addSearchPath>` (prefix, path)
*    def :meth:`cleanPath<PySide.QtCore.QDir.cleanPath>` (path)
*    def :meth:`convertSeparators<PySide.QtCore.QDir.convertSeparators>` (pathName)
*    def :meth:`current<PySide.QtCore.QDir.current>` ()
*    def :meth:`currentPath<PySide.QtCore.QDir.currentPath>` ()
*    def :meth:`drives<PySide.QtCore.QDir.drives>` ()
*    def :meth:`fromNativeSeparators<PySide.QtCore.QDir.fromNativeSeparators>` (pathName)
*    def :meth:`home<PySide.QtCore.QDir.home>` ()
*    def :meth:`homePath<PySide.QtCore.QDir.homePath>` ()
*    def :meth:`isAbsolutePath<PySide.QtCore.QDir.isAbsolutePath>` (path)
*    def :meth:`isRelativePath<PySide.QtCore.QDir.isRelativePath>` (path)
*    def :meth:`match<PySide.QtCore.QDir.match>` (filter, fileName)
*    def :meth:`match<PySide.QtCore.QDir.match>` (filters, fileName)
*    def :meth:`nameFiltersFromString<PySide.QtCore.QDir.nameFiltersFromString>` (nameFilter)
*    def :meth:`root<PySide.QtCore.QDir.root>` ()
*    def :meth:`rootPath<PySide.QtCore.QDir.rootPath>` ()
*    def :meth:`searchPaths<PySide.QtCore.QDir.searchPaths>` (prefix)
*    def :meth:`separator<PySide.QtCore.QDir.separator>` ()
*    def :meth:`setCurrent<PySide.QtCore.QDir.setCurrent>` (path)
*    def :meth:`setSearchPaths<PySide.QtCore.QDir.setSearchPaths>` (prefix, searchPaths)
*    def :meth:`temp<PySide.QtCore.QDir.temp>` ()
*    def :meth:`tempPath<PySide.QtCore.QDir.tempPath>` ()
*    def :meth:`toNativeSeparators<PySide.QtCore.QDir.toNativeSeparators>` (pathName)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QDir` class provides access to directory structures and their contents.

    A :class:`PySide.QtCore.QDir` is used to manipulate path names, access information regarding paths and files, and manipulate the underlying file system. It can also be used to access Qt's :ref:`resource system<resources.html>` .

    Qt uses "/" as a universal directory separator in the same way that "/" is used as a path separator in URLs. If you always use "/" as a directory separator, Qt will translate your paths to conform to the underlying operating system.

    A :class:`PySide.QtCore.QDir` can point to a file using either a relative or an absolute path. Absolute paths begin with the directory separator (optionally preceded by a drive specification under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory.

    Examples of absolute paths:

    ::

        QDir("/home/user/Documents")
        QDir("C:/Documents and Settings")


    On Windows, the second example above will be translated to ``C:\Documents and Settings`` when used to access files.

    Examples of relative paths:

    ::

        QDir("images/landscape.png")


    You can use the :meth:`PySide.QtCore.QDir.isRelative` or :meth:`PySide.QtCore.QDir.isAbsolute` functions to check if a :class:`PySide.QtCore.QDir` is using a relative or an absolute file path. Call :meth:`PySide.QtCore.QDir.makeAbsolute` to convert a relative :class:`PySide.QtCore.QDir` to an absolute one.

    .. _PySide.QtCore.QDir_navigation-and-directory-operations:



Navigation and Directory Operations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    A directory's path can be obtained with the :meth:`PySide.QtCore.QDir.path` function, and a new path set with the :meth:`PySide.QtCore.QDir.setPath` function. The absolute path to a directory is found by calling :meth:`PySide.QtCore.QDir.absolutePath` .

    The name of a directory is found using the :meth:`PySide.QtCore.QDir.dirName` function. This typically returns the last element in the absolute path that specifies the location of the directory. However, it can also return "." if the :class:`PySide.QtCore.QDir` represents the current directory.

    ::

        QDir("Documents/Letters/Applications").dirName() # "Applications"
        QDir().dirName()                                 # "."


    The path for a directory can also be changed with the :meth:`PySide.QtCore.QDir.cd` and :meth:`PySide.QtCore.QDir.cdUp` functions, both of which operate like familiar shell commands. When :meth:`PySide.QtCore.QDir.cd` is called with the name of an existing directory, the :class:`PySide.QtCore.QDir` object changes directory so that it represents that directory instead. The :meth:`PySide.QtCore.QDir.cdUp` function changes the directory of the :class:`PySide.QtCore.QDir` object so that it refers to its parent directory; i.e. cd("..") is equivalent to :meth:`PySide.QtCore.QDir.cdUp` .

    Directories can be created with :meth:`PySide.QtCore.QDir.mkdir` , renamed with :meth:`PySide.QtCore.QDir.rename` , and removed with :meth:`PySide.QtCore.QDir.rmdir` .

    You can test for the presence of a directory with a given name by using :meth:`PySide.QtCore.QDir.exists` , and the properties of a directory can be tested with :meth:`PySide.QtCore.QDir.isReadable` , :meth:`PySide.QtCore.QDir.isAbsolute` , :meth:`PySide.QtCore.QDir.isRelative` , and :meth:`PySide.QtCore.QDir.isRoot` .

    The :meth:`PySide.QtCore.QDir.refresh` function re-reads the directory's data from disk.

    .. _PySide.QtCore.QDir_files-and-directory-contents:



Files and Directory Contents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Directories contain a number of entries, representing files, directories, and symbolic links. The number of entries in a directory is returned by :meth:`PySide.QtCore.QDir.count` . A string list of the names of all the entries in a directory can be obtained with :meth:`PySide.QtCore.QDir.entryList` . If you need information about each entry, use :meth:`PySide.QtCore.QDir.entryInfoList` to obtain a list of :class:`PySide.QtCore.QFileInfo` objects.

    Paths to files and directories within a directory can be constructed using :meth:`PySide.QtCore.QDir.filePath` and :meth:`PySide.QtCore.QDir.absoluteFilePath` . The :meth:`PySide.QtCore.QDir.filePath` function returns a path to the specified file or directory relative to the path of the :class:`PySide.QtCore.QDir` object; :meth:`PySide.QtCore.QDir.absoluteFilePath` returns an absolute path to the specified file or directory. Neither of these functions checks for the existence of files or directory; they only construct paths.

    ::

        directory = QDir("Documents/Letters")
        path = directory.filePath("contents.txt")
        absolutePath = directory.absoluteFilePath("contents.txt")


    Files can be removed by using the :meth:`PySide.QtCore.QDir.remove` function. Directories cannot be removed in the same way as files; use :meth:`PySide.QtCore.QDir.rmdir` to remove them instead.

    It is possible to reduce the number of entries returned by :meth:`PySide.QtCore.QDir.entryList` and :meth:`PySide.QtCore.QDir.entryInfoList` by applying filters to a :class:`PySide.QtCore.QDir` object. You can apply a name filter to specify a pattern with wildcards that file names need to match, an attribute filter that selects properties of entries and can distinguish between files and directories, and a sort order.

    Name filters are lists of strings that are passed to :meth:`PySide.QtCore.QDir.setNameFilters` . Attribute filters consist of a bitwise OR combination of Filters, and these are specified when calling :meth:`PySide.QtCore.QDir.setFilter` . The sort order is specified using :meth:`PySide.QtCore.QDir.setSorting` with a bitwise OR combination of :class:`~PySide.QtCore.SortFlags` .

    You can test to see if a filename matches a filter using the :meth:`PySide.QtCore.QDir.match` function.

    Filter and sort order flags may also be specified when calling :meth:`PySide.QtCore.QDir.entryList` and :meth:`PySide.QtCore.QDir.entryInfoList` in order to override previously defined behavior.

    .. _PySide.QtCore.QDir_the-current-directory-and-other-special-paths:



The Current Directory and Other Special Paths
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Access to some common directories is provided with a number of static functions that return :class:`PySide.QtCore.QDir` objects. There are also corresponding functions for these that return strings:

    +----------------------------------+--------------------------------------+-----------------------------------+
    |:class:`PySide.QtCore.QDir`       |:class:`PySide.QtCore.QString`        |Return Value                       |
    +----------------------------------+--------------------------------------+-----------------------------------+
    |:meth:`PySide.QtCore.QDir.current`|:meth:`PySide.QtCore.QDir.currentPath`|The application's working directory|
    +----------------------------------+--------------------------------------+-----------------------------------+
    |:meth:`PySide.QtCore.QDir.home`   |:meth:`PySide.QtCore.QDir.homePath`   |The user's home directory          |
    +----------------------------------+--------------------------------------+-----------------------------------+
    |:meth:`PySide.QtCore.QDir.root`   |:meth:`PySide.QtCore.QDir.rootPath`   |The root directory                 |
    +----------------------------------+--------------------------------------+-----------------------------------+
    |:meth:`PySide.QtCore.QDir.temp`   |:meth:`PySide.QtCore.QDir.tempPath`   |The system's temporary directory   |
    +----------------------------------+--------------------------------------+-----------------------------------+

    The :meth:`PySide.QtCore.QDir.setCurrent` static function can also be used to set the application's working directory.

    If you want to find the directory containing the application's executable, see :meth:`QCoreApplication.applicationDirPath()<PySide.QtCore.QCoreApplication.applicationDirPath>` .

    The :meth:`PySide.QtCore.QDir.drives` static function provides a list of root directories for each device that contains a filing system. On Unix systems this returns a list containing a single root directory "/"; on Windows the list will usually contain ``C:/`` , and possibly other drive letters such as ``D:/`` , depending on the configuration of the user's system.

    .. _PySide.QtCore.QDir_path-manipulation-and-strings:



Path Manipulation and Strings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Paths containing "." elements that reference the current directory at that point in the path, ".." elements that reference the parent directory, and symbolic links can be reduced to a canonical form using the :meth:`PySide.QtCore.QDir.canonicalPath` function.

    Paths can also be simplified by using :meth:`PySide.QtCore.QDir.cleanPath` to remove redundant "/" and ".." elements.

    It is sometimes necessary to be able to show a path in the native representation for the user's platform. The static :meth:`PySide.QtCore.QDir.toNativeSeparators` function returns a copy of the specified path in which each directory separator is replaced by the appropriate separator for the underlying operating system.

    .. _PySide.QtCore.QDir_examples:



Examples
^^^^^^^^

    Check if a directory exists:

    ::

        dir = QDir("example")
        if not dir.exists():
            print "Cannot find the example directory"


    (We could also use the static convenience function :meth:`QFile.exists()<PySide.QtCore.QFile.exists>` .)

    Traversing directories and reading a file:

    ::

        dir = QDir.root()                 # "/"
        if not dir.cd("tmp"):             # "/tmp"
            print "Cannot find the \"/tmp\" directory"
        else:
            file = QFile(dir.filePath("ex1.txt"))   # "/tmp/ex1.txt"
            if !file.open(QIODevice.ReadWrite):
                print "Cannot create the file %s" % (file.name())


    A program that lists all the files in the current directory (excluding symbolic links), sorted by size, smallest first:

    ::


        from PySide.QtCore import QDir, QCoreApplication
        import sys

        app = QCoreApplication(sys.argv)
        directory = QDir()
        directory.setFilter(QDir.Files | QDir.Hidden | QDir.NoSymLinks)
        directory.setSorting(QDir.Size | QDir.Reversed)

        for entry in directory.entryInfoList():
            print "%s %s" % (entry.size(), entry.fileName())



    .. seealso::  :class:`PySide.QtCore.QFileInfo`  :class:`PySide.QtCore.QFile`  :class:`PySide.QtGui.QFileDialog`  :meth:`QApplication.applicationDirPath()<PySide.QtGui.QApplication.applicationDirPath>`  :ref:`Find Files Example<dialogs/findfiles>` 

.. class:: QDir(arg__1)
           QDir([path=""])
           QDir(path, nameFilter[, sort=QDir.SortFlags(Name | IgnoreCase)[, filter=QDir.AllEntries]])

    :param path: unicode
    :param filter: :class:`PySide.QtCore.QDir.Filters`
    :param nameFilter: unicode
    :param arg__1: :class:`PySide.QtCore.QDir`
    :param sort: :class:`PySide.QtCore.QDir.SortFlags`

    Constructs a :class:`PySide.QtCore.QDir` object that is a copy of the :class:`PySide.QtCore.QDir` object for directory ``dir`` .

    .. seealso::  :meth:`PySide.QtCore.QDir.operator=` 

    Constructs a :class:`PySide.QtCore.QDir` pointing to the given directory ``path`` . If path is empty the program's working directory, ("."), is used.

    .. seealso::  :meth:`PySide.QtCore.QDir.currentPath` 



.. attribute:: PySide.QtCore.QDir.Filter

    This enum describes the filtering options available to :class:`PySide.QtCore.QDir` ; e.g. for :meth:`PySide.QtCore.QDir.entryList` and :meth:`PySide.QtCore.QDir.entryInfoList` . The filter value is specified by combining values from the following list using the bitwise OR operator:

    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |Constant           |Description                                                                                                           |
    +===================+======================================================================================================================+
    |QDir.Dirs          |List directories that match the filters.                                                                              |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.AllDirs       |List all directories; i.e. don't apply the filters to directory names.                                                |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.Files         |List files.                                                                                                           |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.Drives        |List disk drives (ignored under Unix).                                                                                |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.NoSymLinks    |Do not list symbolic links (ignored by operating systems that don't support symbolic links).                          |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.NoDotAndDotDot|Do not list the special entries "." and "..".                                                                         |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.NoDot         |Do not list the special entry ".".                                                                                    |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.NoDotDot      |Do not list the special entry "..".                                                                                   |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.AllEntries    |List directories, files, drives and symlinks (this does not list broken symlinks unless you specify System).          |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.Readable      |List files for which the application has read access. The Readable value needs to be combined with Dirs or Files.     |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.Writable      |List files for which the application has write access. The Writable value needs to be combined with Dirs or Files.    |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.Executable    |List files for which the application has execute access. The Executable value needs to be combined with Dirs or Files.|
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.Modified      |Only list files that have been modified (ignored on Unix).                                                            |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.Hidden        |List hidden files (on Unix, files starting with a ".").                                                               |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.System        |List system files (on Unix, FIFOs, sockets and device files are included; on Windows, ``.lnk`` files are included)    |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+
    |QDir.CaseSensitive |The filter should be case sensitive.                                                                                  |
    +-------------------+----------------------------------------------------------------------------------------------------------------------+

    Functions that use Filter enum values to filter lists of files and directories will include symbolic links to files and directories unless you set the :attr:`NoSymLinks<QDir.Filter>` value.

    A default constructed :class:`PySide.QtCore.QDir` will not filter out files based on their permissions, so :meth:`PySide.QtCore.QDir.entryList` and :meth:`PySide.QtCore.QDir.entryInfoList` will return all files that are readable, writable, executable, or any combination of the three. This makes the default easy to write, and at the same time useful.

    For example, setting the ``Readable`` , ``Writable`` , and ``Files`` flags allows all files to be listed for which the application has read access, write access or both. If the ``Dirs`` and ``Drives`` flags are also included in this combination then all drives, directories, all files that the application can read, write, or execute, and symlinks to such files/directories can be listed.

    To retrieve the permissons for a directory, use the :meth:`PySide.QtCore.QDir.entryInfoList` function to get the associated :class:`PySide.QtCore.QFileInfo` objects and then use the QFileInfo::permissons() to obtain the permissions and ownership for each file.


.. attribute:: PySide.QtCore.QDir.SortFlag

    This enum describes the sort options available to :class:`PySide.QtCore.QDir` , e.g. for :meth:`PySide.QtCore.QDir.entryList` and :meth:`PySide.QtCore.QDir.entryInfoList` . The sort value is specified by OR-ing together values from the following list:

    +----------------+-----------------------------------------------------------+
    |Constant        |Description                                                |
    +================+===========================================================+
    |QDir.Name       |Sort by name.                                              |
    +----------------+-----------------------------------------------------------+
    |QDir.Time       |Sort by time (modification time).                          |
    +----------------+-----------------------------------------------------------+
    |QDir.Size       |Sort by file size.                                         |
    +----------------+-----------------------------------------------------------+
    |QDir.Type       |Sort by file type (extension).                             |
    +----------------+-----------------------------------------------------------+
    |QDir.Unsorted   |Do not sort.                                               |
    +----------------+-----------------------------------------------------------+
    |QDir.NoSort     |Not sorted by default.                                     |
    +----------------+-----------------------------------------------------------+
    |QDir.DirsFirst  |Put the directories first, then the files.                 |
    +----------------+-----------------------------------------------------------+
    |QDir.DirsLast   |Put the files first, then the directories.                 |
    +----------------+-----------------------------------------------------------+
    |QDir.Reversed   |Reverse the sort order.                                    |
    +----------------+-----------------------------------------------------------+
    |QDir.IgnoreCase |Sort case-insensitively.                                   |
    +----------------+-----------------------------------------------------------+
    |QDir.LocaleAware|Sort items appropriately using the current locale settings.|
    +----------------+-----------------------------------------------------------+

    You can only specify one of the first four.

    If you specify both :attr:`DirsFirst<QDir.SortFlag>` and Reversed, directories are still put first, but in reverse order; the files will be listed after the directories, again in reverse order.


.. method:: PySide.QtCore.QDir.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QDir.absoluteFilePath(fileName)


    :param fileName: unicode
    :rtype: unicode




    Returns the absolute path name of a file in the directory. Does *not* check if the file actually exists in the directory; but see :meth:`PySide.QtCore.QDir.exists` . Redundant multiple separators or "." and ".." directories in ``fileName`` are not removed (see :meth:`PySide.QtCore.QDir.cleanPath` ).

    .. seealso::  :meth:`PySide.QtCore.QDir.relativeFilePath`  :meth:`PySide.QtCore.QDir.filePath`  :meth:`PySide.QtCore.QDir.canonicalPath` 


.. method:: PySide.QtCore.QDir.absolutePath()


    :rtype: unicode




    Returns the absolute path (a path that starts with "/" or with a drive specification), which may contain symbolic links, but never contains redundant ".", ".." or multiple separators.

    .. seealso::  :meth:`PySide.QtCore.QDir.setPath`  :meth:`PySide.QtCore.QDir.canonicalPath`  :meth:`PySide.QtCore.QDir.exists`  :meth:`PySide.QtCore.QDir.cleanPath`  :meth:`PySide.QtCore.QDir.dirName`  :meth:`PySide.QtCore.QDir.absoluteFilePath` 


.. staticmethod:: PySide.QtCore.QDir.addResourceSearchPath(path)


    :param path: unicode




    Use :meth:`QDir.addSearchPath()<PySide.QtCore.QDir.addSearchPath>` with a prefix instead.

    Adds ``path`` to the search paths searched in to find resources that are not specified with an absolute path. The default search path is to search only in the root (``:/`` ).

    .. seealso::  :ref:`The Qt Resource System<resources.html>` 


.. staticmethod:: PySide.QtCore.QDir.addSearchPath(prefix, path)


    :param prefix: unicode
    :param path: unicode




    Adds ``path`` to the search path for ``prefix`` .

    .. seealso::  :meth:`PySide.QtCore.QDir.setSearchPaths` 


.. method:: PySide.QtCore.QDir.canonicalPath()


    :rtype: unicode




    Returns the canonical path, i.e. a path without symbolic links or redundant "." or ".." elements.

    On systems that do not have symbolic links this function will always return the same string that :meth:`PySide.QtCore.QDir.absolutePath` returns. If the canonical path does not exist (normally due to dangling symbolic links) :meth:`PySide.QtCore.QDir.canonicalPath` returns an empty string.

    Example:

    ::

        bin = "/local/bin"         # where /local/bin is a symlink to /usr/bin
        binDir = QDir(bin)
        canonicalBin = binDir.canonicalPath()
        # canonicalBin now equals "/usr/bin"

        ls = "/local/bin/ls"       # where ls is the executable "ls"
        lsDir = QDir(ls)
        canonicalLs = lsDir.canonicalPath()
        # canonicalLS now equals "/usr/bin/ls".


    .. seealso::  :meth:`PySide.QtCore.QDir.path`  :meth:`PySide.QtCore.QDir.absolutePath`  :meth:`PySide.QtCore.QDir.exists`  :meth:`PySide.QtCore.QDir.cleanPath`  :meth:`PySide.QtCore.QDir.dirName`  :meth:`PySide.QtCore.QDir.absoluteFilePath` 


.. method:: PySide.QtCore.QDir.cd(dirName)


    :param dirName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Changes the :class:`PySide.QtCore.QDir` 's directory to ``dirName`` .

    Returns true if the new directory exists and is readable; otherwise returns false. Note that the logical :meth:`PySide.QtCore.QDir.cd` operation is not performed if the new directory does not exist.

    Calling cd("..") is equivalent to calling :meth:`PySide.QtCore.QDir.cdUp` .

    .. seealso::  :meth:`PySide.QtCore.QDir.cdUp`  :meth:`PySide.QtCore.QDir.isReadable`  :meth:`PySide.QtCore.QDir.exists`  :meth:`PySide.QtCore.QDir.path` 


.. method:: PySide.QtCore.QDir.cdUp()


    :rtype: :class:`PySide.QtCore.bool`




    Changes directory by moving one directory up from the :class:`PySide.QtCore.QDir` 's current directory.

    Returns true if the new directory exists and is readable; otherwise returns false. Note that the logical :meth:`PySide.QtCore.QDir.cdUp` operation is not performed if the new directory does not exist.

    .. seealso::  :meth:`PySide.QtCore.QDir.cd`  :meth:`PySide.QtCore.QDir.isReadable`  :meth:`PySide.QtCore.QDir.exists`  :meth:`PySide.QtCore.QDir.path` 


.. staticmethod:: PySide.QtCore.QDir.cleanPath(path)


    :param path: unicode
    :rtype: unicode




    Removes all multiple directory separators "/" and resolves any "."s or ".."s found in the path, ``path`` .

    Symbolic links are kept. This function does not return the canonical path, but rather the simplest version of the input. For example, "./local" becomes "local", "local/../bin" becomes "bin" and "/local/usr/../bin" becomes "/local/bin".

    .. seealso::  :meth:`PySide.QtCore.QDir.absolutePath`  :meth:`PySide.QtCore.QDir.canonicalPath` 


.. staticmethod:: PySide.QtCore.QDir.convertSeparators(pathName)


    :param pathName: unicode
    :rtype: unicode




    Use :meth:`QDir.toNativeSeparators()<PySide.QtCore.QDir.toNativeSeparators>` instead.



.. method:: PySide.QtCore.QDir.count()


    :rtype: :class:`PySide.QtCore.uint`




    Returns the total number of directories and files in the directory.

    Equivalent to :meth:`PySide.QtCore.QDir.entryList` . :meth:`PySide.QtCore.QDir.count` .

    .. seealso::  :meth:`PySide.QtCore.QDir.operator[]`  :meth:`PySide.QtCore.QDir.entryList` 


.. staticmethod:: PySide.QtCore.QDir.current()


    :rtype: :class:`PySide.QtCore.QDir`




    Returns the application's current directory.

    The directory is constructed using the absolute path of the current directory, ensuring that its :meth:`PySide.QtCore.QDir.path` will be the same as its :meth:`PySide.QtCore.QDir.absolutePath` .

    .. seealso::  :meth:`PySide.QtCore.QDir.currentPath`  :meth:`PySide.QtCore.QDir.setCurrent`  :meth:`PySide.QtCore.QDir.home`  :meth:`PySide.QtCore.QDir.root`  :meth:`PySide.QtCore.QDir.temp` 


.. staticmethod:: PySide.QtCore.QDir.currentPath()


    :rtype: unicode




    Returns the absolute path of the application's current directory.

    .. seealso::  :meth:`PySide.QtCore.QDir.current`  :meth:`PySide.QtCore.QDir.setCurrent`  :meth:`PySide.QtCore.QDir.homePath`  :meth:`PySide.QtCore.QDir.rootPath`  :meth:`PySide.QtCore.QDir.tempPath` 


.. method:: PySide.QtCore.QDir.dirName()


    :rtype: unicode




    Returns the name of the directory; this is *not* the same as the path, e.g. a directory with the name "mail", might have the path "/var/spool/mail". If the directory has no name (e.g. it is the root directory) an empty string is returned.

    No check is made to ensure that a directory with this name actually exists; but see :meth:`PySide.QtCore.QDir.exists` .

    .. seealso::  :meth:`PySide.QtCore.QDir.path`  :meth:`PySide.QtCore.QDir.filePath`  :meth:`PySide.QtCore.QDir.absolutePath`  :meth:`PySide.QtCore.QDir.absoluteFilePath` 


.. staticmethod:: PySide.QtCore.QDir.drives()


    :rtype: 




    Returns a list of the root directories on this system.

    On Windows this returns a list of :class:`PySide.QtCore.QFileInfo` objects containing "C:/", "D:/", etc. On other operating systems, it returns a list containing just one root directory (i.e. "/").

    .. seealso::  :meth:`PySide.QtCore.QDir.root`  :meth:`PySide.QtCore.QDir.rootPath` 


.. method:: PySide.QtCore.QDir.entryInfoList([filters=QDir.NoFilter[, sort=QDir.NoSort]])


    :param filters: :class:`PySide.QtCore.QDir.Filters`
    :param sort: :class:`PySide.QtCore.QDir.SortFlags`
    :rtype: 







.. method:: PySide.QtCore.QDir.entryInfoList(nameFilters[, filters=QDir.NoFilter[, sort=QDir.NoSort]])


    :param nameFilters: list of strings
    :param filters: :class:`PySide.QtCore.QDir.Filters`
    :param sort: :class:`PySide.QtCore.QDir.SortFlags`
    :rtype: 







.. method:: PySide.QtCore.QDir.entryList(nameFilters[, filters=QDir.NoFilter[, sort=QDir.NoSort]])


    :param nameFilters: list of strings
    :param filters: :class:`PySide.QtCore.QDir.Filters`
    :param sort: :class:`PySide.QtCore.QDir.SortFlags`
    :rtype: list of strings







.. method:: PySide.QtCore.QDir.entryList([filters=QDir.NoFilter[, sort=QDir.NoSort]])


    :param filters: :class:`PySide.QtCore.QDir.Filters`
    :param sort: :class:`PySide.QtCore.QDir.SortFlags`
    :rtype: list of strings







.. method:: PySide.QtCore.QDir.exists(name)


    :param name: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the file called ``name`` exists; otherwise returns false.

    Unless ``name`` contains an absolute file path, the file name is assumed to be relative to the directory itself, so this function is typically used to check for the presence of files within a directory.

    .. seealso::  :meth:`QFileInfo.exists()<PySide.QtCore.QFileInfo.exists>`  :meth:`QFile.exists()<PySide.QtCore.QFile.exists>` 


.. method:: PySide.QtCore.QDir.exists()


    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Returns true if the directory exists; otherwise returns false. (If a file with the same name is found this function will return false).

    The overload of this function that accepts an argument is used to test for the presence of files and directories within a directory.

    .. seealso::  :meth:`QFileInfo.exists()<PySide.QtCore.QFileInfo.exists>`  :meth:`QFile.exists()<PySide.QtCore.QFile.exists>` 


.. method:: PySide.QtCore.QDir.filePath(fileName)


    :param fileName: unicode
    :rtype: unicode




    Returns the path name of a file in the directory. Does *not* check if the file actually exists in the directory; but see :meth:`PySide.QtCore.QDir.exists` . If the :class:`PySide.QtCore.QDir` is relative the returned path name will also be relative. Redundant multiple separators or "." and ".." directories in ``fileName`` are not removed (see :meth:`PySide.QtCore.QDir.cleanPath` ).

    .. seealso::  :meth:`PySide.QtCore.QDir.dirName`  :meth:`PySide.QtCore.QDir.absoluteFilePath`  :meth:`PySide.QtCore.QDir.isRelative`  :meth:`PySide.QtCore.QDir.canonicalPath` 


.. method:: PySide.QtCore.QDir.filter()


    :rtype: :class:`PySide.QtCore.QDir.Filters`




    Returns the value set by :meth:`PySide.QtCore.QDir.setFilter`

    .. seealso::  :meth:`PySide.QtCore.QDir.setFilter` 


.. staticmethod:: PySide.QtCore.QDir.fromNativeSeparators(pathName)


    :param pathName: unicode
    :rtype: unicode




    Returns ``pathName`` using '/' as file separator. On Windows, for instance, fromNativeSeparators("``c:\\winnt\\system32`` ") returns "c:/winnt/system32".

    The returned string may be the same as the argument on some operating systems, for example on Unix.

    .. seealso::  :meth:`PySide.QtCore.QDir.toNativeSeparators`  :meth:`PySide.QtCore.QDir.separator` 


.. staticmethod:: PySide.QtCore.QDir.home()


    :rtype: :class:`PySide.QtCore.QDir`




    Returns the user's home directory.

    The directory is constructed using the absolute path of the home directory, ensuring that its :meth:`PySide.QtCore.QDir.path` will be the same as its :meth:`PySide.QtCore.QDir.absolutePath` .

    See :meth:`PySide.QtCore.QDir.homePath` for details.

    .. seealso::  :meth:`PySide.QtCore.QDir.drives`  :meth:`PySide.QtCore.QDir.current`  :meth:`PySide.QtCore.QDir.root`  :meth:`PySide.QtCore.QDir.temp` 


.. staticmethod:: PySide.QtCore.QDir.homePath()


    :rtype: unicode




    Returns the absolute path of the user's home directory.

    Under Windows this function will return the directory of the current user's profile. Typically, this is:

    ::

        C:/Documents and Settings/Username


    Use the :meth:`PySide.QtCore.QDir.toNativeSeparators` function to convert the separators to the ones that are appropriate for the underlying operating system.

    If the directory of the current user's profile does not exist or cannot be retrieved, the following alternatives will be checked (in the given order) until an existing and available path is found:

    Under non-Windows operating systems the ``HOME`` environment variable is used if it exists, otherwise the path returned by the :meth:`PySide.QtCore.QDir.rootPath` . On Symbian always the same as the path returned by the :meth:`PySide.QtCore.QDir.rootPath` .

    .. seealso::  :meth:`PySide.QtCore.QDir.home`  :meth:`PySide.QtCore.QDir.currentPath`  :meth:`PySide.QtCore.QDir.rootPath`  :meth:`PySide.QtCore.QDir.tempPath` 


.. method:: PySide.QtCore.QDir.isAbsolute()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the directory's path is absolute; otherwise returns false. See :meth:`PySide.QtCore.QDir.isAbsolutePath` .

    .. seealso::  :meth:`PySide.QtCore.QDir.isRelative`  :meth:`PySide.QtCore.QDir.makeAbsolute`  :meth:`PySide.QtCore.QDir.cleanPath` 


.. staticmethod:: PySide.QtCore.QDir.isAbsolutePath(path)


    :param path: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``path`` is absolute; returns false if it is relative.

    .. seealso::  :meth:`PySide.QtCore.QDir.isAbsolute`  :meth:`PySide.QtCore.QDir.isRelativePath`  :meth:`PySide.QtCore.QDir.makeAbsolute`  :meth:`PySide.QtCore.QDir.cleanPath` 


.. method:: PySide.QtCore.QDir.isReadable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the directory is readable *and* we can open files by name; otherwise returns false.

    .. warning::  A false value from this function is not a guarantee that files in the directory are not accessible.

    .. seealso::  :meth:`QFileInfo.isReadable()<PySide.QtCore.QFileInfo.isReadable>` 


.. method:: PySide.QtCore.QDir.isRelative()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the directory path is relative; otherwise returns false. (Under Unix a path is relative if it does not start with a "/").

    .. seealso::  :meth:`PySide.QtCore.QDir.makeAbsolute`  :meth:`PySide.QtCore.QDir.isAbsolute`  :meth:`PySide.QtCore.QDir.isAbsolutePath`  :meth:`PySide.QtCore.QDir.cleanPath` 


.. staticmethod:: PySide.QtCore.QDir.isRelativePath(path)


    :param path: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``path`` is relative; returns false if it is absolute.

    .. seealso::  :meth:`PySide.QtCore.QDir.isRelative`  :meth:`PySide.QtCore.QDir.isAbsolutePath`  :meth:`PySide.QtCore.QDir.makeAbsolute` 


.. method:: PySide.QtCore.QDir.isRoot()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the directory is the root directory; otherwise returns false.

    Note: If the directory is a symbolic link to the root directory this function returns false. If you want to test for this use :meth:`PySide.QtCore.QDir.canonicalPath` , e.g.

    ::

        dir = QDir("/tmp/root_link")
        dir = dir.canonicalPath()
        if dir.isRoot():
            print "It is a root link"


    .. seealso::  :meth:`PySide.QtCore.QDir.root`  :meth:`PySide.QtCore.QDir.rootPath` 


.. method:: PySide.QtCore.QDir.makeAbsolute()


    :rtype: :class:`PySide.QtCore.bool`




    Converts the directory path to an absolute path. If it is already absolute nothing happens. Returns true if the conversion succeeded; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QDir.isAbsolute`  :meth:`PySide.QtCore.QDir.isAbsolutePath`  :meth:`PySide.QtCore.QDir.isRelative`  :meth:`PySide.QtCore.QDir.cleanPath` 


.. staticmethod:: PySide.QtCore.QDir.match(filters, fileName)


    :param filters: list of strings
    :param fileName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Returns true if the ``fileName`` matches any of the wildcard (glob) patterns in the list of ``filters`` ; otherwise returns false. The matching is case insensitive.

    .. seealso::  :class:`~PySide.QtCore.QRegExp wildcard matching`  :meth:`QRegExp.exactMatch()<PySide.QtCore.QRegExp.exactMatch>`  :meth:`PySide.QtCore.QDir.entryList`  :meth:`PySide.QtCore.QDir.entryInfoList` 


.. staticmethod:: PySide.QtCore.QDir.match(filter, fileName)


    :param filter: unicode
    :param fileName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the ``fileName`` matches the wildcard (glob) pattern ``filter`` ; otherwise returns false. The ``filter`` may contain multiple patterns separated by spaces or semicolons. The matching is case insensitive.

    .. seealso::  :class:`~PySide.QtCore.QRegExp wildcard matching`  :meth:`QRegExp.exactMatch()<PySide.QtCore.QRegExp.exactMatch>`  :meth:`PySide.QtCore.QDir.entryList`  :meth:`PySide.QtCore.QDir.entryInfoList` 


.. method:: PySide.QtCore.QDir.mkdir(dirName)


    :param dirName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Creates a sub-directory called ``dirName`` .

    Returns true on success; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QDir.rmdir` 


.. method:: PySide.QtCore.QDir.mkpath(dirPath)


    :param dirPath: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Creates the directory path ``dirPath`` .

    The function will create all parent directories necessary to create the directory.

    Returns true if successful; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QDir.rmpath` 


.. method:: PySide.QtCore.QDir.nameFilters()


    :rtype: list of strings




    Returns the string list set by :meth:`PySide.QtCore.QDir.setNameFilters`

    .. seealso::  :meth:`PySide.QtCore.QDir.setNameFilters` 


.. staticmethod:: PySide.QtCore.QDir.nameFiltersFromString(nameFilter)


    :param nameFilter: unicode
    :rtype: list of strings




    Returns a list of name filters from the given ``nameFilter`` . (If there is more than one filter, each pair of filters is separated by a space or by a semicolon.)



.. method:: PySide.QtCore.QDir.__ne__(dir)


    :param dir: :class:`PySide.QtCore.QDir`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if directory ``dir`` and this directory have different paths or different sort or filter settings; otherwise returns false.

    Example:

    ::

        // The current directory is "/usr/local"
        d1 = QDir("/usr/local/bin")
        d1.setFilter(QDir.Executable)
        d2 = QDir("bin")
        if d1 != d2:
            print "They differ"




.. method:: PySide.QtCore.QDir.__eq__(dir)


    :param dir: :class:`PySide.QtCore.QDir`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if directory ``dir`` and this directory have the same path and their sort and filter settings are the same; otherwise returns false.

    Example:

    ::

        # The current directory is "/usr/local"
        d1 = QDir("/usr/local/bin")
        d2 = QDir("bin")
        if d1 == d2:
            print "They're the same"




.. method:: PySide.QtCore.QDir.operator[](arg__1)


    :param arg__1: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the file name at position ``pos`` in the list of file names. Equivalent to :meth:`PySide.QtCore.QDir.entryList` .at(index). ``pos`` must be a valid index position in the list (i.e., 0 <= pos < :meth:`PySide.QtCore.QDir.count` ).

    .. seealso::  :meth:`PySide.QtCore.QDir.count`  :meth:`PySide.QtCore.QDir.entryList` 


.. method:: PySide.QtCore.QDir.path()


    :rtype: unicode




    Returns the path. This may contain symbolic links, but never contains redundant ".", ".." or multiple separators.

    The returned path can be either absolute or relative (see :meth:`PySide.QtCore.QDir.setPath` ).

    .. seealso::  :meth:`PySide.QtCore.QDir.setPath`  :meth:`PySide.QtCore.QDir.absolutePath`  :meth:`PySide.QtCore.QDir.exists`  :meth:`PySide.QtCore.QDir.cleanPath`  :meth:`PySide.QtCore.QDir.dirName`  :meth:`PySide.QtCore.QDir.absoluteFilePath`  :meth:`PySide.QtCore.QDir.toNativeSeparators`  :meth:`PySide.QtCore.QDir.makeAbsolute` 


.. method:: PySide.QtCore.QDir.refresh()






    Refreshes the directory information.



.. method:: PySide.QtCore.QDir.relativeFilePath(fileName)


    :param fileName: unicode
    :rtype: unicode




    Returns the path to ``fileName`` relative to the directory.

    ::

        dir = QDir("/home/bob")

        s = dir.relativeFilePath("images/file.jpg")         # s is "images/file.jpg"
        s = dir.relativeFilePath("/home/mary/file.txt")     # s is "../mary/file.txt"


    .. seealso::  :meth:`PySide.QtCore.QDir.absoluteFilePath`  :meth:`PySide.QtCore.QDir.filePath`  :meth:`PySide.QtCore.QDir.canonicalPath` 


.. method:: PySide.QtCore.QDir.remove(fileName)


    :param fileName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Removes the file, ``fileName`` .

    Returns true if the file is removed successfully; otherwise returns false.



.. method:: PySide.QtCore.QDir.rename(oldName, newName)


    :param oldName: unicode
    :param newName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Renames a file or directory from ``oldName`` to ``newName`` , and returns true if successful; otherwise returns false.

    On most file systems, :meth:`PySide.QtCore.QDir.rename` fails only if ``oldName`` does not exist, if ``newName`` and ``oldName`` are not on the same partition or if a file with the new name already exists. However, there are also other reasons why :meth:`PySide.QtCore.QDir.rename` can fail. For example, on at least one file system :meth:`PySide.QtCore.QDir.rename` fails if ``newName`` points to an open file.



.. method:: PySide.QtCore.QDir.rmdir(dirName)


    :param dirName: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Removes the directory specified by ``dirName`` .

    The directory must be empty for :meth:`PySide.QtCore.QDir.rmdir` to succeed.

    Returns true if successful; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QDir.mkdir` 


.. method:: PySide.QtCore.QDir.rmpath(dirPath)


    :param dirPath: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Removes the directory path ``dirPath`` .

    The function will remove all parent directories in ``dirPath`` , provided that they are empty. This is the opposite of mkpath(dirPath).

    Returns true if successful; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QDir.mkpath` 


.. staticmethod:: PySide.QtCore.QDir.root()


    :rtype: :class:`PySide.QtCore.QDir`




    Returns the root directory.

    The directory is constructed using the absolute path of the root directory, ensuring that its :meth:`PySide.QtCore.QDir.path` will be the same as its :meth:`PySide.QtCore.QDir.absolutePath` .

    See :meth:`PySide.QtCore.QDir.rootPath` for details.

    .. seealso::  :meth:`PySide.QtCore.QDir.drives`  :meth:`PySide.QtCore.QDir.current`  :meth:`PySide.QtCore.QDir.home`  :meth:`PySide.QtCore.QDir.temp` 


.. staticmethod:: PySide.QtCore.QDir.rootPath()


    :rtype: unicode




    Returns the absolute path of the root directory.

    For Unix operating systems this returns "/". For Windows file systems this normally returns "c:/". On Symbian this typically returns "c:/data", i.e. the same as native PathInfo::PhoneMemoryRootPath().

    .. seealso::  :meth:`PySide.QtCore.QDir.root`  :meth:`PySide.QtCore.QDir.drives`  :meth:`PySide.QtCore.QDir.currentPath`  :meth:`PySide.QtCore.QDir.homePath`  :meth:`PySide.QtCore.QDir.tempPath` 


.. staticmethod:: PySide.QtCore.QDir.searchPaths(prefix)


    :param prefix: unicode
    :rtype: list of strings




    Returns the search paths for ``prefix`` .

    .. seealso::  :meth:`PySide.QtCore.QDir.setSearchPaths`  :meth:`PySide.QtCore.QDir.addSearchPath` 


.. staticmethod:: PySide.QtCore.QDir.separator()


    :rtype: :class:`PySide.QtCore.QChar`




    Returns the native directory separator: "/" under Unix (including Mac OS X) and "\" under Windows.

    You do not need to use this function to build file paths. If you always use "/", Qt will translate your paths to conform to the underlying operating system. If you want to display paths to the user using their operating system's separator use :meth:`PySide.QtCore.QDir.toNativeSeparators` .



.. staticmethod:: PySide.QtCore.QDir.setCurrent(path)


    :param path: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Sets the application's current working directory to ``path`` . Returns true if the directory was successfully changed; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QDir.current`  :meth:`PySide.QtCore.QDir.currentPath`  :meth:`PySide.QtCore.QDir.home`  :meth:`PySide.QtCore.QDir.root`  :meth:`PySide.QtCore.QDir.temp` 


.. method:: PySide.QtCore.QDir.setFilter(filter)


    :param filter: :class:`PySide.QtCore.QDir.Filters`







.. method:: PySide.QtCore.QDir.setNameFilters(nameFilters)


    :param nameFilters: list of strings




    Sets the name filters used by :meth:`PySide.QtCore.QDir.entryList` and :meth:`PySide.QtCore.QDir.entryInfoList` to the list of filters specified by ``nameFilters`` .

    Each name filter is a wildcard (globbing) filter that understands ``*`` and ``?`` wildcards. (See :class:`~PySide.QtCore.QRegExp wildcard matching` .)

    For example, the following code sets three name filters on a :class:`PySide.QtCore.QDir` to ensure that only files with extensions typically used for C++ source files are listed:

    ::

            filters = ["*.cpp", "*.cxx", "*.cc"]
            dir_.setNameFilters(filters)


    .. seealso::  :meth:`PySide.QtCore.QDir.nameFilters`  :meth:`PySide.QtCore.QDir.setFilter` 


.. method:: PySide.QtCore.QDir.setPath(path)


    :param path: unicode




    Sets the path of the directory to ``path`` . The path is cleaned of redundant ".", ".." and of multiple separators. No check is made to see whether a directory with this path actually exists; but you can check for yourself using :meth:`PySide.QtCore.QDir.exists` .

    The path can be either absolute or relative. Absolute paths begin with the directory separator "/" (optionally preceded by a drive specification under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory. An example of an absolute path is the string "/tmp/quartz", a relative path might look like "src/fatlib".

    .. seealso::  :meth:`PySide.QtCore.QDir.path`  :meth:`PySide.QtCore.QDir.absolutePath`  :meth:`PySide.QtCore.QDir.exists`  :meth:`PySide.QtCore.QDir.cleanPath`  :meth:`PySide.QtCore.QDir.dirName`  :meth:`PySide.QtCore.QDir.absoluteFilePath`  :meth:`PySide.QtCore.QDir.isRelative`  :meth:`PySide.QtCore.QDir.makeAbsolute` 


.. staticmethod:: PySide.QtCore.QDir.setSearchPaths(prefix, searchPaths)


    :param prefix: unicode
    :param searchPaths: list of strings




    Sets or replaces Qt's search paths for file names with the prefix ``prefix`` to ``searchPaths`` .

    To specify a prefix for a file name, prepend the prefix followed by a single colon (e.g., "images:undo.png", "xmldocs:books.xml"). ``prefix`` can only contain letters or numbers (e.g., it cannot contain a colon, nor a slash).

    Qt uses this search path to locate files with a known prefix. The search path entries are tested in order, starting with the first entry.

    ::

        QDir.setSearchPaths("icons", [QDir.homePath() + "/images"])
        QDir.setSearchPaths("docs", [":/embeddedDocuments"])
        ...
        pixmap = QPixmap("icons:undo.png")  # will look for undo.png in QDir::homePath() + "/images"
        file = QFile("docs:design.odf")     # will look in the :/embeddedDocuments resource path


    File name prefix must be at least 2 characters long to avoid conflicts with Windows drive letters.

    Search paths may contain paths to :ref:`The Qt Resource System<resources.html>` .

    .. seealso::  :meth:`PySide.QtCore.QDir.searchPaths` 


.. method:: PySide.QtCore.QDir.setSorting(sort)


    :param sort: :class:`PySide.QtCore.QDir.SortFlags`







.. method:: PySide.QtCore.QDir.sorting()


    :rtype: :class:`PySide.QtCore.QDir.SortFlags`




    Returns the value set by :meth:`PySide.QtCore.QDir.setSorting`

    .. seealso::  :meth:`PySide.QtCore.QDir.setSorting`  :attr:`QDir.SortFlag` 


.. staticmethod:: PySide.QtCore.QDir.temp()


    :rtype: :class:`PySide.QtCore.QDir`




    Returns the system's temporary directory.

    The directory is constructed using the absolute path of the temporary directory, ensuring that its :meth:`PySide.QtCore.QDir.path` will be the same as its :meth:`PySide.QtCore.QDir.absolutePath` .

    See :meth:`PySide.QtCore.QDir.tempPath` for details.

    .. seealso::  :meth:`PySide.QtCore.QDir.drives`  :meth:`PySide.QtCore.QDir.current`  :meth:`PySide.QtCore.QDir.home`  :meth:`PySide.QtCore.QDir.root` 


.. staticmethod:: PySide.QtCore.QDir.tempPath()


    :rtype: unicode




    Returns the absolute path of the system's temporary directory.

    On Unix/Linux systems this is usually ``/tmp`` ; on Windows this is usually the path in the ``TEMP`` or ``TMP`` environment variable. Whether a directory separator is added to the end or not, depends on the operating system.

    .. seealso::  :meth:`PySide.QtCore.QDir.temp`  :meth:`PySide.QtCore.QDir.currentPath`  :meth:`PySide.QtCore.QDir.homePath`  :meth:`PySide.QtCore.QDir.rootPath` 


.. staticmethod:: PySide.QtCore.QDir.toNativeSeparators(pathName)


    :param pathName: unicode
    :rtype: unicode




    Returns ``pathName`` with the '/' separators converted to separators that are appropriate for the underlying operating system.

    On Windows, toNativeSeparators("c:/winnt/system32") returns "c:\winnt\system32".

    The returned string may be the same as the argument on some operating systems, for example on Unix.

    .. seealso::  :meth:`PySide.QtCore.QDir.fromNativeSeparators`  :meth:`PySide.QtCore.QDir.separator` 



