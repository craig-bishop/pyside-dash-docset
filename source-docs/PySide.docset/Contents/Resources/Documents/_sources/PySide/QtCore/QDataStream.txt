.. module:: PySide.QtCore
.. _QDataStream:

QDataStream
***********

.. inheritance-diagram:: QDataStream
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, arg__2)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, array)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, cursor)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, history)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, item)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, item)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, item)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, item)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, ks)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, p)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, polygon)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (, regExp)
*    def :meth:`__lshift__<PySide.QtCore.QDataStream.__lshift__>` (arg__1)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, arg__2)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, array)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, cursor)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, history)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, item)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, item)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, item)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, item)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, ks)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, p)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, polygon)
*    def :meth:`__rshift__<PySide.QtCore.QDataStream.__rshift__>` (, regExp)
*    def :meth:`atEnd<PySide.QtCore.QDataStream.atEnd>` ()
*    def :meth:`byteOrder<PySide.QtCore.QDataStream.byteOrder>` ()
*    def :meth:`device<PySide.QtCore.QDataStream.device>` ()
*    def :meth:`floatingPointPrecision<PySide.QtCore.QDataStream.floatingPointPrecision>` ()
*    def :meth:`readBool<PySide.QtCore.QDataStream.readBool>` ()
*    def :meth:`readDouble<PySide.QtCore.QDataStream.readDouble>` ()
*    def :meth:`readFloat<PySide.QtCore.QDataStream.readFloat>` ()
*    def :meth:`readInt16<PySide.QtCore.QDataStream.readInt16>` ()
*    def :meth:`readInt32<PySide.QtCore.QDataStream.readInt32>` ()
*    def :meth:`readInt64<PySide.QtCore.QDataStream.readInt64>` ()
*    def :meth:`readInt8<PySide.QtCore.QDataStream.readInt8>` ()
*    def :meth:`readQChar<PySide.QtCore.QDataStream.readQChar>` ()
*    def :meth:`readQString<PySide.QtCore.QDataStream.readQString>` ()
*    def :meth:`readQStringList<PySide.QtCore.QDataStream.readQStringList>` ()
*    def :meth:`readQVariant<PySide.QtCore.QDataStream.readQVariant>` ()
*    def :meth:`readRawData<PySide.QtCore.QDataStream.readRawData>` (, len)
*    def :meth:`readString<PySide.QtCore.QDataStream.readString>` ()
*    def :meth:`readUInt16<PySide.QtCore.QDataStream.readUInt16>` ()
*    def :meth:`readUInt32<PySide.QtCore.QDataStream.readUInt32>` ()
*    def :meth:`readUInt64<PySide.QtCore.QDataStream.readUInt64>` ()
*    def :meth:`readUInt8<PySide.QtCore.QDataStream.readUInt8>` ()
*    def :meth:`resetStatus<PySide.QtCore.QDataStream.resetStatus>` ()
*    def :meth:`setByteOrder<PySide.QtCore.QDataStream.setByteOrder>` (arg__1)
*    def :meth:`setDevice<PySide.QtCore.QDataStream.setDevice>` (arg__1)
*    def :meth:`setFloatingPointPrecision<PySide.QtCore.QDataStream.setFloatingPointPrecision>` (precision)
*    def :meth:`setStatus<PySide.QtCore.QDataStream.setStatus>` (status)
*    def :meth:`setVersion<PySide.QtCore.QDataStream.setVersion>` (arg__1)
*    def :meth:`skipRawData<PySide.QtCore.QDataStream.skipRawData>` (len)
*    def :meth:`status<PySide.QtCore.QDataStream.status>` ()
*    def :meth:`unsetDevice<PySide.QtCore.QDataStream.unsetDevice>` ()
*    def :meth:`version<PySide.QtCore.QDataStream.version>` ()
*    def :meth:`writeBool<PySide.QtCore.QDataStream.writeBool>` (arg__1)
*    def :meth:`writeDouble<PySide.QtCore.QDataStream.writeDouble>` (arg__1)
*    def :meth:`writeFloat<PySide.QtCore.QDataStream.writeFloat>` (arg__1)
*    def :meth:`writeInt16<PySide.QtCore.QDataStream.writeInt16>` (arg__1)
*    def :meth:`writeInt32<PySide.QtCore.QDataStream.writeInt32>` (arg__1)
*    def :meth:`writeInt64<PySide.QtCore.QDataStream.writeInt64>` (arg__1)
*    def :meth:`writeInt8<PySide.QtCore.QDataStream.writeInt8>` (arg__1)
*    def :meth:`writeQChar<PySide.QtCore.QDataStream.writeQChar>` (arg__1)
*    def :meth:`writeQString<PySide.QtCore.QDataStream.writeQString>` (arg__1)
*    def :meth:`writeQStringList<PySide.QtCore.QDataStream.writeQStringList>` (arg__1)
*    def :meth:`writeQVariant<PySide.QtCore.QDataStream.writeQVariant>` (arg__1)
*    def :meth:`writeRawData<PySide.QtCore.QDataStream.writeRawData>` (arg__1)
*    def :meth:`writeString<PySide.QtCore.QDataStream.writeString>` (arg__1)
*    def :meth:`writeUInt16<PySide.QtCore.QDataStream.writeUInt16>` (arg__1)
*    def :meth:`writeUInt32<PySide.QtCore.QDataStream.writeUInt32>` (arg__1)
*    def :meth:`writeUInt64<PySide.QtCore.QDataStream.writeUInt64>` (arg__1)
*    def :meth:`writeUInt8<PySide.QtCore.QDataStream.writeUInt8>` (arg__1)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QDataStream` class provides serialization of binary data to a :class:`PySide.QtCore.QIODevice` .

    A data stream is a binary stream of encoded information which is 100% independent of the host computer's operating system, CPU or byte order. For example, a data stream that is written by a PC under Windows can be read by a Sun SPARC running Solaris.

    You can also use a data stream to read/write :class:`raw unencoded binary data<~PySide.QtCore.raw>` . If you want a "parsing" input stream, see :class:`PySide.QtCore.QTextStream` .

    The :class:`PySide.QtCore.QDataStream` class implements the serialization of C++'s basic data types, like ``char`` , ``short`` , ``int`` , ``char *`` , etc. Serialization of more complex data is accomplished by breaking up the data into primitive units.

    A data stream cooperates closely with a :class:`PySide.QtCore.QIODevice` . A :class:`PySide.QtCore.QIODevice` represents an input/output medium one can read data from and write data to. The :class:`PySide.QtCore.QFile` class is an example of an I/O device.

    Example (write binary data to a stream):

    ::

        file_ = QFile("file.dat")
        file_.open(QIODevice.WriteOnly)
        # we will serialize the data into the file
        out = QDataStream(file_)
        # serialize a string
        out.writeQString("the answer is")
        # serialize an integer
        out.writeInt32(42)


    Example (read binary data from a stream):

    ::

        file_ = QFile("file.dat")
        file_.open(QIODevice.ReadOnly)
        # read the data serialized from the file
        i = QDataStream(file_)
        string = ''
        a = 0
        # extract "the answer is" and 42
        string = i.readQString()
        a = i.readInt32()


    Each item written to the stream is written in a predefined binary format that varies depending on the item's type. Supported Qt types include :class:`PySide.QtGui.QBrush` , :class:`PySide.QtGui.QColor` , :class:`PySide.QtCore.QDateTime` , :class:`PySide.QtGui.QFont` , :class:`PySide.QtGui.QPixmap` , :class:`PySide.QtCore.QString` , :class:`PySide.QtCore.QVariant` and many others. For the complete list of all Qt types supporting data streaming see :ref:`Serializing Qt Data Types<datastreamformat.html>` .

    For integers it is best to always cast to a Qt integer type for writing, and to read back into the same Qt integer type. This ensures that you get integers of the size you want and insulates you from compiler and platform differences.

    To take one example, a ``char *`` string is written as a 32-bit integer equal to the length of the string including the '\0' byte, followed by all the characters of the string including the '\0' byte. When reading a ``char *`` string, 4 bytes are read to create the 32-bit length value, then that many characters for the ``char *`` string including the '\0' terminator are read.

    The initial I/O device is usually set in the constructor, but can be changed with :meth:`PySide.QtCore.QDataStream.setDevice` . If you've reached the end of the data (or if there is no I/O device set) :meth:`PySide.QtCore.QDataStream.atEnd` will return true.

    .. _PySide.QtCore.QDataStream_versioning:



Versioning
^^^^^^^^^^

    :class:`PySide.QtCore.QDataStream` 's binary format has evolved since Qt 1.0, and is likely to continue evolving to reflect changes done in Qt. When inputting or outputting complex types, it's very important to make sure that the same version of the stream ( :meth:`PySide.QtCore.QDataStream.version` ) is used for reading and writing. If you need both forward and backward compatibility, you can hardcode the version number in the application:

    ::

        stream.setVersion(QDataStream.Qt_4_0)


    If you are producing a new binary data format, such as a file format for documents created by your application, you could use a :class:`PySide.QtCore.QDataStream` to write the data in a portable format. Typically, you would write a brief header containing a magic string and a version number to give yourself room for future expansion. For example:

    ::

        file_ = QFile("file.xxx")
        file_.open(QIODevice.WriteOnly)
        out = QDataStream(file_)

        # Write a header with a "magic number" and a version
        out.writeInt32(0xA0B0C0D0)
        out.writeInt32(123)

        out.setVersion(QDataStream.Qt_4_0)

        // Write the data
        out << lots_of_interesting_data


    Then read it in with:

    ::

        file_ = QFile("file.xxx")
        file_.open(QIODevice.ReadOnly)
        i = QDataStream(file_)

        // Read and check the header
        magic = i.readInt32()
        if magic != 0xA0B0C0D0:
            return XXX_BAD_FILE_FORMAT

        // Read the version
        version = i.readInt32()
        if version < 100:
            return XXX_BAD_FILE_TOO_OLD
        if version > 123:
            return XXX_BAD_FILE_TOO_NEW

        if version <= 110:
            in_.setVersion(QDataStream.Qt_3_2)
        else:
            in_.setVersion(QDataStream.Qt_4_0)

        // Read the data
        in_ >> lots_of_interesting_data
        if version >= 120:
            in_ >> data_new_in_XXX_version_1_2
        in_ >> other_interesting_data


    You can select which byte order to use when serializing data. The default setting is big endian (MSB first). Changing it to little endian breaks the portability (unless the reader also changes to little endian). We recommend keeping this setting unless you have special requirements.

    .. _PySide.QtCore.QDataStream_reading-and-writing-raw-binary-data:



Reading and writing raw binary data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    You may wish to read/write your own raw binary data to/from the data stream directly. Data may be read from the stream into a preallocated ``char *`` using :meth:`PySide.QtCore.QDataStream.readRawData` . Similarly data can be written to the stream using :meth:`PySide.QtCore.QDataStream.writeRawData` . Note that any encoding/decoding of the data must be done by you.

    A similar pair of functions is :meth:`PySide.QtCore.QDataStream.readBytes` and :meth:`PySide.QtCore.QDataStream.writeBytes` . These differ from their *raw* counterparts as follows: :meth:`PySide.QtCore.QDataStream.readBytes` reads a quint32 which is taken to be the length of the data to be read, then that number of bytes is read into the preallocated ``char *`` ; :meth:`PySide.QtCore.QDataStream.writeBytes` writes a quint32 containing the length of the data, followed by the data. Note that any encoding/decoding of the data (apart from the length quint32) must be done by you.

    .. _PySide.QtCore.QDataStream_reading-and-writing-qt-collection-classes:



Reading and writing Qt collection classes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    The Qt container classes can also be serialized to a :class:`PySide.QtCore.QDataStream` . These include :class:`QList` , :class:`QLinkedList` , :class:`QVector` , :class:`QSet` , :class:`QHash` , and :class:`QMap` . The stream operators are declared as non-members of the classes.

    .. _PySide.QtCore.QDataStream_reading-and-writing-other-qt-classes:



Reading and writing other Qt classes.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    In addition to the overloaded stream operators documented here, any Qt classes that you might want to serialize to a :class:`PySide.QtCore.QDataStream` will have appropriate stream operators declared as non-member of the class:

    ::

                QDataStream &operator<<(QDataStream &, const QXxx &);
                QDataStream &operator>>(QDataStream &, QXxx &);


    For example, here are the stream operators declared as non-members of the :class:`PySide.QtGui.QImage` class:

    ::

                QDataStream & operator<< (QDataStream& stream, const QImage& image);
                QDataStream & operator>> (QDataStream& stream, QImage& image);


    To see if your favorite Qt class has similar stream operators defined, check the **Related Non-Members** section of the class's documentation page.

    .. seealso::  :class:`PySide.QtCore.QTextStream`  :class:`PySide.QtCore.QVariant` 

.. class:: QDataStream()
           QDataStream(arg__1, flags)
           QDataStream(arg__1)
           QDataStream(arg__1)

    :param flags: :class:`PySide.QtCore.QIODevice.OpenMode`
    :param arg__1: :class:`PySide.QtCore.QByteArray`

    Constructs a data stream that has no I/O device.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.setDevice` 



    Constructs a data stream that uses the I/O device ``d`` .

    .. warning::  If you use :ref:`QSocket<porting4.html>` or :ref:`QSocketDevice<porting4.html>` as the I/O device ``d`` for reading data, you must make sure that enough data is available on the socket for the operation to successfully proceed; :class:`PySide.QtCore.QDataStream` does not have any means to handle or recover from short-reads.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.setDevice`  :meth:`PySide.QtCore.QDataStream.device` 

    Constructs a read-only data stream that operates on byte array ``a`` . Use :class:`PySide.QtCore.QDataStream` ( :class:`PySide.QtCore.QByteArray` \*, int) if you want to write to a byte array.

    Since :class:`PySide.QtCore.QByteArray` is not a :class:`PySide.QtCore.QIODevice` subclass, internally a :class:`PySide.QtCore.QBuffer` is created to wrap the byte array.


.. attribute:: PySide.QtCore.QDataStream.ByteOrder

    The byte order used for reading/writing the data.

    +------------------------+-----------------------------------------+
    |Constant                |Description                              |
    +========================+=========================================+
    |QDataStream.BigEndian   |Most significant byte first (the default)|
    +------------------------+-----------------------------------------+
    |QDataStream.LittleEndian|Least significant byte first             |
    +------------------------+-----------------------------------------+


.. attribute:: PySide.QtCore.QDataStream.FloatingPointPrecision

    The precision of floating point numbers used for reading/writing the data. This will only have an effect if the version of the data stream is :attr:`Qt_4_6<QDataStream.Version>` or higher.

    .. warning::  The floating point precision must be set to the same value on the object that writes and the object that reads the data stream.

    +---------------------------+--------------------------------------------------------------------+
    |Constant                   |Description                                                         |
    +===========================+====================================================================+
    |QDataStream.SinglePrecision|All floating point numbers in the data stream have 32-bit precision.|
    +---------------------------+--------------------------------------------------------------------+
    |QDataStream.DoublePrecision|All floating point numbers in the data stream have 64-bit precision.|
    +---------------------------+--------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtCore.QDataStream.setFloatingPointPrecision`  :meth:`PySide.QtCore.QDataStream.floatingPointPrecision` 

.. note:: This enum was introduced or modified in Qt 4.6
.. attribute:: PySide.QtCore.QDataStream.Version

    This enum provides symbolic synonyms for the data serialization format version numbers.

    +------------------+---------------------------------------------+
    |Constant          |Description                                  |
    +==================+=============================================+
    |QDataStream.Qt_1_0|Version 1 (Qt 1.x)                           |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_2_0|Version 2 (Qt 2.0)                           |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_2_1|Version 3 (Qt 2.1, 2.2, 2.3)                 |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_3_0|Version 4 (Qt 3.0)                           |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_3_1|Version 5 (Qt 3.1, 3.2)                      |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_3_3|Version 6 (Qt 3.3)                           |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_0|Version 7 (Qt 4.0, Qt 4.1)                   |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_1|Version 7 (Qt 4.0, Qt 4.1)                   |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_2|Version 8 (Qt 4.2)                           |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_3|Version 9 (Qt 4.3)                           |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_4|Version 10 (Qt 4.4)                          |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_5|Version 11 (Qt 4.5)                          |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_6|Version 12 (Qt 4.6)                          |
    +------------------+---------------------------------------------+
    |QDataStream.Qt_4_7|Same as :attr:`Qt_4_6<QDataStream.Version>` .|
    +------------------+---------------------------------------------+

    .. seealso::  :meth:`PySide.QtCore.QDataStream.setVersion`  :meth:`PySide.QtCore.QDataStream.version` 

.. attribute:: PySide.QtCore.QDataStream.Status

    This enum describes the current status of the data stream.

    +---------------------------+---------------------------------------------------------------------------+
    |Constant                   |Description                                                                |
    +===========================+===========================================================================+
    |QDataStream.Ok             |The data stream is operating normally.                                     |
    +---------------------------+---------------------------------------------------------------------------+
    |QDataStream.ReadPastEnd    |The data stream has read past the end of the data in the underlying device.|
    +---------------------------+---------------------------------------------------------------------------+
    |QDataStream.ReadCorruptData|The data stream has read corrupt data.                                     |
    +---------------------------+---------------------------------------------------------------------------+


.. method:: PySide.QtCore.QDataStream.atEnd()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the I/O device has reached the end position (end of the stream or file) or if there is no I/O device set; otherwise returns false.

    .. seealso::  :meth:`QIODevice.atEnd()<PySide.QtCore.QIODevice.atEnd>` 


.. method:: PySide.QtCore.QDataStream.byteOrder()


    :rtype: :attr:`PySide.QtCore.QDataStream.ByteOrder`




    Returns the current byte order setting -- either :attr:`BigEndian<QDataStream.ByteOrder>` or :attr:`LittleEndian<QDataStream.ByteOrder>` .

    .. seealso::  :meth:`PySide.QtCore.QDataStream.setByteOrder` 


.. method:: PySide.QtCore.QDataStream.device()


    :rtype: :class:`PySide.QtCore.QIODevice`




    Returns the I/O device currently set, or 0 if no device is currently set.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.setDevice` 


.. method:: PySide.QtCore.QDataStream.floatingPointPrecision()


    :rtype: :attr:`PySide.QtCore.QDataStream.FloatingPointPrecision`




    Returns the floating point precision of the data stream.

    .. seealso::  :attr:`QDataStream.FloatingPointPrecision`  :meth:`PySide.QtCore.QDataStream.setFloatingPointPrecision` 


.. method:: PySide.QtCore.QDataStream.__lshift__(, item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QTextFormat`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, item)


    :param item: :class:`PySide.QtGui.QStandardItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QTime`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtScript.QScriptContextInfo`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, regExp)


    :param regExp: :class:`PySide.QtCore.QRegExp`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QSizePolicy`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QRegion`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QSize`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QUuid`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, history)


    :param history: :class:`PySide.QtWebKit.QWebHistory`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QTextLength`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QEasingCurve`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QLine`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtNetwork.QHostAddress`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QImage`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, ks)


    :param ks: :class:`PySide.QtGui.QKeySequence`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QIcon`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QDateTime`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(arg__1)


    :param arg__1: unicode







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QDate`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QBitArray`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, cursor)


    :param cursor: :class:`PySide.QtGui.QCursor`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QColor`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPicture`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPixmap`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPen`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, polygon)


    :param polygon: :class:`PySide.QtGui.QPolygon`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, array)


    :param array: :class:`PySide.QtGui.QPolygonF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QLineF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QLocale`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, p)


    :param p: :class:`PySide.QtGui.QPalette`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtNetwork.QNetworkCacheMetaData`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__lshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPainterPath`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QTextLength`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QTime`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QTextFormat`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QUuid`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, item)


    :param item: :class:`PySide.QtGui.QStandardItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QRegion`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtScript.QScriptContextInfo`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QSize`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QSizePolicy`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, regExp)


    :param regExp: :class:`PySide.QtCore.QRegExp`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, history)


    :param history: :class:`PySide.QtWebKit.QWebHistory`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtNetwork.QHostAddress`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QLineF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QIcon`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, ks)


    :param ks: :class:`PySide.QtGui.QKeySequence`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QLine`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QImage`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QEasingCurve`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QBitArray`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QDateTime`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, cursor)


    :param cursor: :class:`PySide.QtGui.QCursor`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QDate`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QColor`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPixmap`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, polygon)


    :param polygon: :class:`PySide.QtGui.QPolygon`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, array)


    :param array: :class:`PySide.QtGui.QPolygonF`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QLocale`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtNetwork.QNetworkCacheMetaData`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPicture`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPen`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, arg__2)


    :param arg__2: :class:`PySide.QtGui.QPainterPath`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.__rshift__(, p)


    :param p: :class:`PySide.QtGui.QPalette`
    :rtype: :class:`PySide.QtCore.QDataStream`







.. method:: PySide.QtCore.QDataStream.readBool()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QDataStream.readDouble()


    :rtype: :class:`PySide.QtCore.qreal`







.. method:: PySide.QtCore.QDataStream.readFloat()


    :rtype: :class:`PySide.QtCore.float`







.. method:: PySide.QtCore.QDataStream.readInt16()


    :rtype: :class:`PySide.QtCore.qint16`







.. method:: PySide.QtCore.QDataStream.readInt32()


    :rtype: :class:`PySide.QtCore.qint32`







.. method:: PySide.QtCore.QDataStream.readInt64()


    :rtype: :class:`PySide.QtCore.qint64`







.. method:: PySide.QtCore.QDataStream.readInt8()


    :rtype: :class:`PySide.QtCore.qint8`







.. method:: PySide.QtCore.QDataStream.readQChar()


    :rtype: :class:`PySide.QtCore.QChar`







.. method:: PySide.QtCore.QDataStream.readQString()


    :rtype: unicode







.. method:: PySide.QtCore.QDataStream.readQStringList()


    :rtype: list of strings







.. method:: PySide.QtCore.QDataStream.readQVariant()


    :rtype: object







.. method:: PySide.QtCore.QDataStream.readRawData(, len)


    :param len: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Reads at most ``len`` bytes from the stream into ``s`` and returns the number of bytes read. If an error occurs, this function returns -1.

    The buffer ``s`` must be preallocated. The data is *not* encoded.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.readBytes`  :meth:`QIODevice.read()<PySide.QtCore.QIODevice.read>`  :meth:`PySide.QtCore.QDataStream.writeRawData` 


.. method:: PySide.QtCore.QDataStream.readString()


    :rtype: unicode







.. method:: PySide.QtCore.QDataStream.readUInt16()


    :rtype: :class:`PySide.QtCore.quint16`







.. method:: PySide.QtCore.QDataStream.readUInt32()


    :rtype: :class:`PySide.QtCore.quint32`







.. method:: PySide.QtCore.QDataStream.readUInt64()


    :rtype: :class:`PySide.QtCore.quint64`







.. method:: PySide.QtCore.QDataStream.readUInt8()


    :rtype: :class:`PySide.QtCore.quint8`







.. method:: PySide.QtCore.QDataStream.resetStatus()






    Resets the status of the data stream.

    .. seealso::  :attr:`QDataStream.Status`  :meth:`PySide.QtCore.QDataStream.status`  :meth:`PySide.QtCore.QDataStream.setStatus` 


.. method:: PySide.QtCore.QDataStream.setByteOrder(arg__1)


    :param arg__1: :attr:`PySide.QtCore.QDataStream.ByteOrder`




    Sets the serialization byte order to ``bo`` .

    The ``bo`` parameter can be :attr:`QDataStream.BigEndian<QDataStream.ByteOrder>` or :attr:`QDataStream.LittleEndian<QDataStream.ByteOrder>` .

    The default setting is big endian. We recommend leaving this setting unless you have special requirements.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.byteOrder` 


.. method:: PySide.QtCore.QDataStream.setDevice(arg__1)


    :param arg__1: :class:`PySide.QtCore.QIODevice`




    void QDataStream::setDevice( :class:`PySide.QtCore.QIODevice` \*d)

    Sets the I/O device to ``d`` , which can be 0 to unset to current I/O device.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.device` 


.. method:: PySide.QtCore.QDataStream.setFloatingPointPrecision(precision)


    :param precision: :attr:`PySide.QtCore.QDataStream.FloatingPointPrecision`




    Sets the floating point precision of the data stream to ``precision`` . If the floating point precision is :attr:`DoublePrecision<QDataStream.FloatingPointPrecision>` and the version of the data stream is :attr:`Qt_4_6<QDataStream.Version>` or higher, all floating point numbers will be written and read with 64-bit precision. If the floating point precision is :attr:`SinglePrecision<QDataStream.FloatingPointPrecision>` and the version is :attr:`Qt_4_6<QDataStream.Version>` or higher, all floating point numbers will be written and read with 32-bit precision.

    For versions prior to :attr:`Qt_4_6<QDataStream.Version>` , the precision of floating point numbers in the data stream depends on the stream operator called.

    The default is :attr:`DoublePrecision<QDataStream.FloatingPointPrecision>` .

    .. warning::  This property must be set to the same value on the object that writes and the object that reads the data stream.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.floatingPointPrecision` 


.. method:: PySide.QtCore.QDataStream.setStatus(status)


    :param status: :attr:`PySide.QtCore.QDataStream.Status`




    Sets the status of the data stream to the ``status`` given.

    .. seealso::  :attr:`QDataStream.Status`  :meth:`PySide.QtCore.QDataStream.status`  :meth:`PySide.QtCore.QDataStream.resetStatus` 


.. method:: PySide.QtCore.QDataStream.setVersion(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the version number of the data serialization format to ``v`` .

    You don't *have* to set a version if you are using the current version of Qt, but for your own custom binary formats we recommend that you do; see :class:`~PySide.QtCore.Versioning` in the Detailed Description.

    To accommodate new functionality, the datastream serialization format of some Qt classes has changed in some versions of Qt. If you want to read data that was created by an earlier version of Qt, or write data that can be read by a program that was compiled with an earlier version of Qt, use this function to modify the serialization format used by :class:`PySide.QtCore.QDataStream` .

    +----------------+------------------------------------------+
    |Qt Version      |:class:`PySide.QtCore.QDataStream` Version|
    +----------------+------------------------------------------+
    |Qt 4.6          |12                                        |
    +----------------+------------------------------------------+
    |Qt 4.5          |11                                        |
    +----------------+------------------------------------------+
    |Qt 4.4          |10                                        |
    +----------------+------------------------------------------+
    |Qt 4.3          |9                                         |
    +----------------+------------------------------------------+
    |Qt 4.2          |8                                         |
    +----------------+------------------------------------------+
    |Qt 4.0, 4.1     |7                                         |
    +----------------+------------------------------------------+
    |Qt 3.3          |6                                         |
    +----------------+------------------------------------------+
    |Qt 3.1, 3.2     |5                                         |
    +----------------+------------------------------------------+
    |Qt 3.0          |4                                         |
    +----------------+------------------------------------------+
    |Qt 2.1, 2.2, 2.3|3                                         |
    +----------------+------------------------------------------+
    |Qt 2.0          |2                                         |
    +----------------+------------------------------------------+
    |Qt 1.x          |1                                         |
    +----------------+------------------------------------------+

    The :attr:`QDataStream.Version` enum provides symbolic constants for the different versions of Qt. For example:

    ::

        out = QDataStream(file_)
        out.setVersion(QDataStream.Qt_4_0)


    .. seealso::  :meth:`PySide.QtCore.QDataStream.version`  :attr:`QDataStream.Version` 


.. method:: PySide.QtCore.QDataStream.skipRawData(len)


    :param len: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Skips ``len`` bytes from the device. Returns the number of bytes actually skipped, or -1 on error.

    This is equivalent to calling :meth:`PySide.QtCore.QDataStream.readRawData` on a buffer of length ``len`` and ignoring the buffer.

    .. seealso::  :meth:`QIODevice.seek()<PySide.QtCore.QIODevice.seek>` 


.. method:: PySide.QtCore.QDataStream.status()


    :rtype: :attr:`PySide.QtCore.QDataStream.Status`




    Returns the status of the data stream.

    .. seealso::  :attr:`QDataStream.Status`  :meth:`PySide.QtCore.QDataStream.setStatus`  :meth:`PySide.QtCore.QDataStream.resetStatus` 


.. method:: PySide.QtCore.QDataStream.unsetDevice()






    Unsets the I/O device. Use setDevice(0) instead.



.. method:: PySide.QtCore.QDataStream.version()


    :rtype: :class:`PySide.QtCore.int`




    Returns the version number of the data serialization format.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.setVersion`  :attr:`QDataStream.Version` 


.. method:: PySide.QtCore.QDataStream.writeBool(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QDataStream.writeDouble(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`







.. method:: PySide.QtCore.QDataStream.writeFloat(arg__1)


    :param arg__1: :class:`PySide.QtCore.float`







.. method:: PySide.QtCore.QDataStream.writeInt16(arg__1)


    :param arg__1: :class:`PySide.QtCore.qint16`







.. method:: PySide.QtCore.QDataStream.writeInt32(arg__1)


    :param arg__1: :class:`PySide.QtCore.qint32`







.. method:: PySide.QtCore.QDataStream.writeInt64(arg__1)


    :param arg__1: :class:`PySide.QtCore.qint64`







.. method:: PySide.QtCore.QDataStream.writeInt8(arg__1)


    :param arg__1: :class:`PySide.QtCore.qint8`







.. method:: PySide.QtCore.QDataStream.writeQChar(arg__1)


    :param arg__1: :class:`PySide.QtCore.QChar`







.. method:: PySide.QtCore.QDataStream.writeQString(arg__1)


    :param arg__1: unicode







.. method:: PySide.QtCore.QDataStream.writeQStringList(arg__1)


    :param arg__1: list of strings







.. method:: PySide.QtCore.QDataStream.writeQVariant(arg__1)


    :param arg__1: object







.. method:: PySide.QtCore.QDataStream.writeRawData(arg__1)


    :param arg__1: str
    :rtype: :class:`PySide.QtCore.int`




    Writes ``len`` bytes from ``s`` to the stream. Returns the number of bytes actually written, or -1 on error. The data is *not* encoded.

    .. seealso::  :meth:`PySide.QtCore.QDataStream.writeBytes`  :meth:`QIODevice.write()<PySide.QtCore.QIODevice.write>`  :meth:`PySide.QtCore.QDataStream.readRawData` 


.. method:: PySide.QtCore.QDataStream.writeString(arg__1)


    :param arg__1: unicode







.. method:: PySide.QtCore.QDataStream.writeUInt16(arg__1)


    :param arg__1: :class:`PySide.QtCore.quint16`







.. method:: PySide.QtCore.QDataStream.writeUInt32(arg__1)


    :param arg__1: :class:`PySide.QtCore.quint32`







.. method:: PySide.QtCore.QDataStream.writeUInt64(arg__1)


    :param arg__1: :class:`PySide.QtCore.quint64`







.. method:: PySide.QtCore.QDataStream.writeUInt8(arg__1)


    :param arg__1: :class:`PySide.QtCore.quint8`








