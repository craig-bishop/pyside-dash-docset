.. module:: PySide.QtXml
.. _QXmlParseException:

QXmlParseException
******************

.. inheritance-diagram:: QXmlParseException
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`columnNumber<PySide.QtXml.QXmlParseException.columnNumber>` ()
*    def :meth:`lineNumber<PySide.QtXml.QXmlParseException.lineNumber>` ()
*    def :meth:`message<PySide.QtXml.QXmlParseException.message>` ()
*    def :meth:`publicId<PySide.QtXml.QXmlParseException.publicId>` ()
*    def :meth:`systemId<PySide.QtXml.QXmlParseException.systemId>` ()


Detailed Description
--------------------



    The :class:`PySide.QtXml.QXmlParseException` class is used to report errors with the :class:`PySide.QtXml.QXmlErrorHandler` interface.

    The XML subsystem constructs an instance of this class when it detects an error. You can retrieve the place where the error occurred using :meth:`PySide.QtXml.QXmlParseException.systemId` , :meth:`PySide.QtXml.QXmlParseException.publicId` , :meth:`PySide.QtXml.QXmlParseException.lineNumber` and :meth:`PySide.QtXml.QXmlParseException.columnNumber` , along with the error :meth:`PySide.QtXml.QXmlParseException.message` . The possible error messages are:


    * "no error occurred"
    * "error triggered by consumer"
    * "unexpected end of file"
    * "more than one document type definition"
    * "error occurred while parsing element"
    * "tag mismatch"
    * "error occurred while parsing content"
    * "unexpected character"
    * "invalid name for processing instruction"
    * "version expected while reading the XML declaration"
    * "wrong value for standalone declaration"
    * "encoding declaration or standalone declaration expected while reading the XML declaration"
    * "standalone declaration expected while reading the XML declaration"
    * "error occurred while parsing document type definition"
    * "letter is expected"
    * "error occurred while parsing comment"
    * "error occurred while parsing reference"
    * "internal general entity reference not allowed in DTD"
    * "external parsed general entity reference not allowed in attribute value"
    * "external parsed general entity reference not allowed in DTD"
    * "unparsed entity reference n wrong context"
    * "recursive entities"
    * "error in the text declaration of an external entity"

    Note that, if you want to display these error messages to your application's users, they will be displayed in English unless they are explicitly translated.

    .. seealso::  :class:`PySide.QtXml.QXmlErrorHandler`  :class:`PySide.QtXml.QXmlReader` 

.. class:: QXmlParseException([name=""[, c=-1[, l=-1[, p=""[, s=""]]]]])
           QXmlParseException(other)

    :param l: :class:`PySide.QtCore.int`
    :param p: unicode
    :param other: :class:`PySide.QtXml.QXmlParseException`
    :param name: unicode
    :param s: unicode
    :param c: :class:`PySide.QtCore.int`

    Constructs a parse exception with the error string ``name`` for column ``c`` and line ``l`` for the public identifier ``p`` and the system identifier ``s`` .


    Creates a copy of ``other`` .


.. method:: PySide.QtXml.QXmlParseException.columnNumber()


    :rtype: :class:`PySide.QtCore.int`




    Returns the column number where the error occurred.



.. method:: PySide.QtXml.QXmlParseException.lineNumber()


    :rtype: :class:`PySide.QtCore.int`




    Returns the line number where the error occurred.



.. method:: PySide.QtXml.QXmlParseException.message()


    :rtype: unicode




    Returns the error message.



.. method:: PySide.QtXml.QXmlParseException.publicId()


    :rtype: unicode




    Returns the public identifier where the error occurred.



.. method:: PySide.QtXml.QXmlParseException.systemId()


    :rtype: unicode




    Returns the system identifier where the error occurred.




