.. module:: PySide.QtXml
.. _QDomDocumentFragment:

QDomDocumentFragment
********************

.. inheritance-diagram:: QDomDocumentFragment
    :parts: 2

Detailed Description
--------------------



    The :class:`PySide.QtXml.QDomDocumentFragment` class is a tree of QDomNodes which is not usually a complete :class:`PySide.QtXml.QDomDocument` .

    If you want to do complex tree operations it is useful to have a lightweight class to store nodes and their relations. :class:`PySide.QtXml.QDomDocumentFragment` stores a subtree of a document which does not necessarily represent a well-formed XML document.

    :class:`PySide.QtXml.QDomDocumentFragment` is also useful if you want to group several nodes in a list and insert them all together as children of some node. In these cases :class:`PySide.QtXml.QDomDocumentFragment` can be used as a temporary container for this list of children.

    The most important feature of :class:`PySide.QtXml.QDomDocumentFragment` is that it is treated in a special way by :meth:`QDomNode.insertAfter()<PySide.QtXml.QDomNode.insertAfter>` , :meth:`QDomNode.insertBefore()<PySide.QtXml.QDomNode.insertBefore>` , :meth:`QDomNode.replaceChild()<PySide.QtXml.QDomNode.replaceChild>` and :meth:`QDomNode.appendChild()<PySide.QtXml.QDomNode.appendChild>` : instead of inserting the fragment itself, all the fragment's children are inserted.


.. class:: QDomDocumentFragment()
           QDomDocumentFragment(x)

    :param x: :class:`PySide.QtXml.QDomDocumentFragment`

    Constructs an empty document fragment.


    Constructs a copy of ``x`` .

    The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use :meth:`PySide.QtXml.QDomNode.cloneNode` .



