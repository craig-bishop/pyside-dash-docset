.. module:: PySide.QtXml
.. _QDomCharacterData:

QDomCharacterData
*****************

.. inheritance-diagram:: QDomCharacterData
    :parts: 2

**Inherited by:** :ref:`QDomComment`, :ref:`QDomText`, :ref:`QDomCDATASection`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`appendData<PySide.QtXml.QDomCharacterData.appendData>` (arg)
*    def :meth:`data<PySide.QtXml.QDomCharacterData.data>` ()
*    def :meth:`deleteData<PySide.QtXml.QDomCharacterData.deleteData>` (offset, count)
*    def :meth:`insertData<PySide.QtXml.QDomCharacterData.insertData>` (offset, arg)
*    def :meth:`length<PySide.QtXml.QDomCharacterData.length>` ()
*    def :meth:`replaceData<PySide.QtXml.QDomCharacterData.replaceData>` (offset, count, arg)
*    def :meth:`setData<PySide.QtXml.QDomCharacterData.setData>` (arg__1)
*    def :meth:`substringData<PySide.QtXml.QDomCharacterData.substringData>` (offset, count)


Detailed Description
--------------------



    The :class:`PySide.QtXml.QDomCharacterData` class represents a generic string in the DOM.

    Character data as used in XML specifies a generic data string. More specialized versions of this class are :class:`PySide.QtXml.QDomText` , :class:`PySide.QtXml.QDomComment` and :class:`PySide.QtXml.QDomCDATASection` .

    The data string is set with :meth:`PySide.QtXml.QDomCharacterData.setData` and retrieved with :meth:`PySide.QtXml.QDomCharacterData.data` . You can retrieve a portion of the data string using :meth:`PySide.QtXml.QDomCharacterData.substringData` . Extra data can be appended with :meth:`PySide.QtXml.QDomCharacterData.appendData` , or inserted with :meth:`PySide.QtXml.QDomCharacterData.insertData` . Portions of the data string can be deleted with :meth:`PySide.QtXml.QDomCharacterData.deleteData` or replaced with :meth:`PySide.QtXml.QDomCharacterData.replaceData` . The length of the data string is returned by :meth:`PySide.QtXml.QDomCharacterData.length` .

    The node type of the node containing this character data is returned by :meth:`PySide.QtXml.QDomCharacterData.nodeType` .

    .. seealso::  :class:`PySide.QtXml.QDomText`  :class:`PySide.QtXml.QDomComment`  :class:`PySide.QtXml.QDomCDATASection` 

.. class:: QDomCharacterData()
           QDomCharacterData(x)

    :param x: :class:`PySide.QtXml.QDomCharacterData`

    Constructs an empty character data object.


    Constructs a copy of ``x`` .

    The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use :meth:`PySide.QtXml.QDomNode.cloneNode` .


.. method:: PySide.QtXml.QDomCharacterData.appendData(arg)


    :param arg: unicode




    Appends the string ``arg`` to the stored string.



.. method:: PySide.QtXml.QDomCharacterData.data()


    :rtype: unicode




    Returns the string stored in this object.

    If the node is a :meth:`null node<PySide.QtXml.QDomNode.isNull>` , it will return an empty string.

    .. seealso::  :meth:`PySide.QtXml.QDomCharacterData.setData` 


.. method:: PySide.QtXml.QDomCharacterData.deleteData(offset, count)


    :param offset: long
    :param count: long




    Deletes a substring of length ``count`` from position ``offset`` .



.. method:: PySide.QtXml.QDomCharacterData.insertData(offset, arg)


    :param offset: long
    :param arg: unicode




    Inserts the string ``arg`` into the stored string at position ``offset`` .



.. method:: PySide.QtXml.QDomCharacterData.length()


    :rtype: :class:`PySide.QtCore.uint`




    Returns the length of the stored string.



.. method:: PySide.QtXml.QDomCharacterData.replaceData(offset, count, arg)


    :param offset: long
    :param count: long
    :param arg: unicode




    Replaces the substring of length ``count`` starting at position ``offset`` with the string ``arg`` .



.. method:: PySide.QtXml.QDomCharacterData.setData(arg__1)


    :param arg__1: unicode




    Sets this object's string to ``v`` .

    .. seealso::  :meth:`PySide.QtXml.QDomCharacterData.data` 


.. method:: PySide.QtXml.QDomCharacterData.substringData(offset, count)


    :param offset: long
    :param count: long
    :rtype: unicode




    Returns the substring of length ``count`` from position ``offset`` .




