.. module:: PySide.QtScriptTools
.. _QScriptEngineDebugger:

QScriptEngineDebugger
*********************

.. inheritance-diagram:: QScriptEngineDebugger
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`action<PySide.QtScriptTools.QScriptEngineDebugger.action>` (action)
*    def :meth:`attachTo<PySide.QtScriptTools.QScriptEngineDebugger.attachTo>` (engine)
*    def :meth:`autoShowStandardWindow<PySide.QtScriptTools.QScriptEngineDebugger.autoShowStandardWindow>` ()
*    def :meth:`createStandardMenu<PySide.QtScriptTools.QScriptEngineDebugger.createStandardMenu>` ([parent=None])
*    def :meth:`createStandardToolBar<PySide.QtScriptTools.QScriptEngineDebugger.createStandardToolBar>` ([parent=None])
*    def :meth:`setAutoShowStandardWindow<PySide.QtScriptTools.QScriptEngineDebugger.setAutoShowStandardWindow>` (autoShow)
*    def :meth:`standardWindow<PySide.QtScriptTools.QScriptEngineDebugger.standardWindow>` ()
*    def :meth:`state<PySide.QtScriptTools.QScriptEngineDebugger.state>` ()
*    def :meth:`widget<PySide.QtScriptTools.QScriptEngineDebugger.widget>` (widget)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`evaluationResumed<PySide.QtScriptTools.QScriptEngineDebugger.evaluationResumed>` ()
*    def :meth:`evaluationSuspended<PySide.QtScriptTools.QScriptEngineDebugger.evaluationSuspended>` ()


Detailed Description
--------------------



    The :class:`PySide.QtScriptTools.QScriptEngineDebugger` class provides a :class:`PySide.QtScript.QScriptEngine` debugger.

    The :class:`PySide.QtScriptTools.QScriptEngineDebugger` class provides a debugger that can be embedded into Qt applications that use Qt Script. The debugger enables the application user to inspect the state of the script environment and control script execution.

    To attach the debugger to a script engine, call the :meth:`PySide.QtScriptTools.QScriptEngineDebugger.attachTo` function.

    ::

            engine = QScriptEngine()
            debugger = QScriptEngineDebugger()
            debugger.attachTo(engine)


    Once the debugger has been attached to a script engine, you can proceed to evaluate scripts as usual, e.g. by calling :meth:`QScriptEngine.evaluate()<PySide.QtScript.QScriptEngine.evaluate>` . The debugger will be triggered when an uncaught exception occurs, or when a ``debugger`` statement is encountered in a script. It is also possible to interrupt script evaluation at an arbitrary time by triggering the :attr:`InterruptAction<QScriptEngineDebugger.DebuggerAction>` . For instance, to start the debugger when script evaluation starts, you trigger the action before you begin to :meth:`PySide.QtScript.QScriptEngine.evaluate` the script.

    ::

             debugger.action(QScriptEngineDebugger.InterruptAction).trigger()
             engine.evaluate(contents, fileName)


    By default, the :meth:`standard debugger window<PySide.QtScriptTools.QScriptEngineDebugger.standardWindow>` is shown when evaluation is suspended. This can be changed by calling the :meth:`PySide.QtScriptTools.QScriptEngineDebugger.setAutoShowStandardWindow` function.

    The debugger defines a set of :attr:`actions<QScriptEngineDebugger.DebuggerAction>` that are available, such as stopping execution or printing the contents of a variable. It also provides a set of widgets (components) that display the information available from the debugger and that trigger the actions on request. The actions available are identified by the :attr:`QScriptEngineDebugger.DebuggerAction` enum, and the widgets are identified by the :attr:`QScriptEngineDebugger.DebuggerWidget` enum.

    Access to the individual debugger widgets is provided by the :meth:`PySide.QtScriptTools.QScriptEngineDebugger.widget` function. This makes it possible to arrange the widgets in a custom manner. Similarly, the :meth:`PySide.QtScriptTools.QScriptEngineDebugger.action` function provides access to the various debugger actions.

    The :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardToolBar` function creates a standard toolbar, and the :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardMenu` function creates a standard menu; these functions can be useful if you are creating a custom debugger configuration.

    The :meth:`PySide.QtScriptTools.QScriptEngineDebugger.evaluationSuspended` signal is emitted when the debugger has suspended script evaluation and entered interactive mode, i.e., the mode in which it accepts input from the user. The :meth:`PySide.QtScriptTools.QScriptEngineDebugger.evaluationResumed` signal is emitted when script evaluation is resumed, i.e, when execution control is given back to the script engine. The :meth:`PySide.QtScriptTools.QScriptEngineDebugger.state` function returns the debugger's current state.

    When calling :meth:`QScriptEngine.evaluate()<PySide.QtScript.QScriptEngine.evaluate>` it is useful to pass a descriptive script name (file name) as second argument, as this is the name that will be displayed by the debugger in the :attr:`ScriptsWidget<QScriptEngineDebugger.DebuggerWidget>` ; if a name is not passed, the script will be labelled "anonymous".

    When evaluation is suspended, the debugger will also suspend the event loop of the script. In the following snippet, the call to :meth:`QScriptEngine.evaluate()<PySide.QtScript.QScriptEngine.evaluate>` causes the debugger to be triggered, and the function call does not return until the user has finished interacting with the debugger.

    ::

            engine.evaluate("debugger")


    When the Qt Script debugger is running, the C++ application itself is not "frozen". This means that it is possible that more scripts are evaluated, even though the debugger has suspended evaluation of the **current** script evaluation. For example, a C++ timer might trigger that causes a script function to be called, or the user might click on a button in the main application user interface whose clicked() signal is connected to a script function. This kind of nested evaluation is permitted. The debugger will enter interactive mode for the new script if an exception is thrown or a breakpoint is reached. Note that it will not stop when encountering ``debugger`` statements.

    Nested evaluation requires some thought when deciding how the debugger is presented to the user; for example, whether a modal dialog is suitable, or whether some parts of the main application user interface should be disabled while the debugger is running.

    Debugging inside of a :meth:`PySide.QtGui.QWidget.paintEvent` () is currently not supported. If you need to debug painting-related script code, that code should be evaluated outside of the C++ paintEvent(), e.g. by rendering to an image, like the Context2D and Tetrix :ref:`QtScript` examples do. This will make the code safe for debugging.

    The debugger adds some special properties to the script engine: ``__FILE__`` holds the name of the script in which the current evaluation occurs, and ``__LINE__`` holds the current line number. These are useful when doing print()-style debugging (the messages appear in the debugger's debug output widget).

    The :ref:`Qt Script Debugger Manual<qtscriptdebugger-manual.html>` describes how to use the debugger. The :ref:`Context2D example<script/context2d>` shows how to integrate the debugger in applications.

    .. seealso::  :class:`PySide.QtScript.QScriptEngine`  :ref:`Context2D Example<script/context2d>` 

.. class:: QScriptEngineDebugger([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a new :class:`PySide.QtScriptTools.QScriptEngineDebugger` object with the given ``parent`` .

    To attach a :class:`PySide.QtScript.QScriptEngine` to the debugger, use :meth:`PySide.QtScriptTools.QScriptEngineDebugger.attachTo` function.


.. attribute:: PySide.QtScriptTools.QScriptEngineDebugger.DebuggerWidget

    This enum decides the widget that the :meth:`PySide.QtScriptTools.QScriptEngineDebugger.widget` function should retrieve. We treat these widgets in more detail in the :ref:`Qt Script Debugger Manual<qtscriptdebugger-manual.html>` .

    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |Constant                               |Description                                                                                                                     |
    +=======================================+================================================================================================================================+
    |QScriptEngineDebugger.ConsoleWidget    |Provides a command-line interface to the debugger.                                                                              |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.StackWidget      |Shows a backtrace of the script's execution state.                                                                              |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.ScriptsWidget    |Displays a list of currently loaded scripts.                                                                                    |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.LocalsWidget     |Shows the local variables of the current stack frame.                                                                           |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.CodeWidget       |Displays the code of the current script.                                                                                        |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.CodeFinderWidget |Provides a widget that can search for text in the script shown in the :attr:`CodeWidget<QScriptEngineDebugger.DebuggerWidget>` .|
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.BreakpointsWidget|Shows breakpoints that have been set.                                                                                           |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.DebugOutputWidget|Contains output from the ``print()`` script function.                                                                           |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.ErrorLogWidget   |Shows error messages that have been generated.                                                                                  |
    +---------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtScriptTools.QScriptEngineDebugger.DebuggerAction

    This enum specifies the action that the :meth:`PySide.QtScriptTools.QScriptEngineDebugger.action` function should retrieve. The actions retrieved can be connected to any slot and connected to any widget. Please see the :ref:`Qt Script Debugger Manual<qtscriptdebugger-manual.html>` 's :ref:`Console Command Reference<qtscriptdebugger-manual.html>` for a detailed description of these actions.

    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                                        |Description                                                                                                                           |
    +================================================+======================================================================================================================================+
    |QScriptEngineDebugger.InterruptAction           |Suspends script execution as soon as the next script statement is reached.                                                            |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.ContinueAction            |Gives the execution control back to the script engine.                                                                                |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.StepIntoAction            |Performs a step action.                                                                                                               |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.StepOverAction            |Performs a next action.                                                                                                               |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.StepOutAction             |Executes the script until the current function returns.                                                                               |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.RunToCursorAction         |Continues execution to the selected line (which contains the cursor) in the :attr:`CodeWidget<QScriptEngineDebugger.DebuggerWidget>` .|
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.RunToNewScriptAction      |Returns control to the script engine until a new script is executed.                                                                  |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.ToggleBreakpointAction    |Toggles a breakpoint at the selected line in the :attr:`CodeWidget<QScriptEngineDebugger.DebuggerWidget>` .                           |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.ClearDebugOutputAction    |Clears the contents of the :attr:`DebugOutputWidget<QScriptEngineDebugger.DebuggerWidget>` .                                          |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.ClearErrorLogAction       |Clears the contents of the :attr:`ErrorLogWidget<QScriptEngineDebugger.DebuggerWidget>` .                                             |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.ClearConsoleAction        |Clears the contents of the :attr:`ConsoleWidget<QScriptEngineDebugger.DebuggerWidget>` .                                              |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.FindInScriptAction        |Displays the :attr:`CodeFinderWidget<QScriptEngineDebugger.DebuggerWidget>` .                                                         |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.FindNextInScriptAction    |Finds next occurrence in the :attr:`CodeWidget<QScriptEngineDebugger.DebuggerWidget>` .                                               |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.FindPreviousInScriptAction|Finds previous occurrence in the :attr:`CodeWidget<QScriptEngineDebugger.DebuggerWidget>` .                                           |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptEngineDebugger.GoToLineAction            |Shows the "Go to Line" dialog.                                                                                                        |
    +------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtScriptTools.QScriptEngineDebugger.DebuggerState

    This enum specifies the current state of the debugger.

    +------------------------------------+--------------------------------------------------------+
    |Constant                            |Description                                             |
    +====================================+========================================================+
    |QScriptEngineDebugger.RunningState  |The debugger is running. (Script evaluation is allowed.)|
    +------------------------------------+--------------------------------------------------------+
    |QScriptEngineDebugger.SuspendedState|The debugger has suspended script evaluation.           |
    +------------------------------------+--------------------------------------------------------+


.. note:: This enum was introduced or modified in Qt 4.6
.. method:: PySide.QtScriptTools.QScriptEngineDebugger.action(action)


    :param action: :attr:`PySide.QtScriptTools.QScriptEngineDebugger.DebuggerAction`
    :rtype: :class:`PySide.QtGui.QAction`




    Returns a pointer to the specified ``action`` . The actions available are given by the :attr:`QScriptEngineDebugger.DebuggerAction` enum.

    With this function, you can add the actions to your own widgets, toolbars, and menus. It is also convenient if you, for example, wish to spice things up with your own groovy icons. The code example below shows how to add actions to a :class:`PySide.QtGui.QToolBar` .

    ::

            continueAction = debugger.action(QScriptEngineDebugger.ContinueAction)
            stepOverAction = debugger.action(QScriptEngineDebugger.StepOverAction)
            stepIntoAction = debugger.action(QScriptEngineDebugger.StepIntoAction)

            toolBar = QToolBar()
            toolBar.addAction(continueAction)


    Note that :class:`PySide.QtScriptTools.QScriptEngineDebugger` has already added the actions to its :attr:`standard widgets<QScriptEngineDebugger.DebuggerWidget>` and :meth:`standard window<PySide.QtScriptTools.QScriptEngineDebugger.standardWindow>` .

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.widget`  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardMenu`  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardToolBar`  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.standardWindow` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.attachTo(engine)


    :param engine: :class:`PySide.QtScript.QScriptEngine`




    Attaches to the given ``engine`` .

    The debugger will install a custom agent (using :meth:`QScriptEngine.setAgent()<PySide.QtScript.QScriptEngine.setAgent>` ) to monitor the engine. While the debugger is attached, you should not change the agent; however, if you do have to perform additional monitoring, you must set a proxy agent that forwards all events to the debugger's agent.

    .. seealso::  :meth:`~PySide.QtScriptTools.QScriptEngineDebugger.detach` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.autoShowStandardWindow()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the standard debugger window is automatically shown when evaluation is suspended.

    The default is true.

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.setAutoShowStandardWindow` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.createStandardMenu([parent=None])


    :param parent: :class:`PySide.QtGui.QWidget`
    :rtype: :class:`PySide.QtGui.QMenu`




    Creates a standard debugger menu with the given ``parent`` . Returns the new menu object.

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardToolBar` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.createStandardToolBar([parent=None])


    :param parent: :class:`PySide.QtGui.QWidget`
    :rtype: :class:`PySide.QtGui.QToolBar`




    Creates a standard debugger toolbar with the given ``parent`` . Returns the new toolbar object.

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardMenu` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.evaluationResumed()








.. method:: PySide.QtScriptTools.QScriptEngineDebugger.evaluationSuspended()








.. method:: PySide.QtScriptTools.QScriptEngineDebugger.setAutoShowStandardWindow(autoShow)


    :param autoShow: :class:`PySide.QtCore.bool`




    Sets whether the standard debugger window is automatically shown when evaluation is suspended. If ``autoShow`` is true, the window will be automatically shown, otherwise it will not.

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.autoShowStandardWindow` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.standardWindow()


    :rtype: :class:`PySide.QtGui.QMainWindow`




    Returns a main window with a standard configuration of the debugger's components.

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardMenu`  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.createStandardToolBar` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.state()


    :rtype: :attr:`PySide.QtScriptTools.QScriptEngineDebugger.DebuggerState`




    Returns the current state of the debugger.

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.evaluationResumed`  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.evaluationSuspended` 


.. method:: PySide.QtScriptTools.QScriptEngineDebugger.widget(widget)


    :param widget: :attr:`PySide.QtScriptTools.QScriptEngineDebugger.DebuggerWidget`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns a pointer to the instance of the specified standard ``widget`` . The widgets available are defined by the :attr:`QScriptEngineDebugger.DebuggerWidget` enum.

    A main window containing all widgets is returned by :meth:`PySide.QtScriptTools.QScriptEngineDebugger.standardWindow` . If you do not want to use this window, you can fetch the individual widgets with this function. For instance, the code example below shows how to set up a layout containing a :attr:`code window<QScriptEngineDebugger.DebuggerWidget>` and a :attr:`stack widget<QScriptEngineDebugger.DebuggerWidget>` .

    ::

            codeWindow = debugger.widget(QScriptEngineDebugger.CodeWidget)
            stackWidget = debugger.widget(QScriptEngineDebugger.StackWidget)

            layout = QHBoxLayout()
            layout.addWidget(codeWindow)
            layout.addWidget(stackWidget)


    Note that you need to set :meth:`PySide.QtScriptTools.QScriptEngineDebugger.setAutoShowStandardWindow` to false; if not, the standard window will be shown regardless.

    .. seealso::  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.action`  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.standardWindow`  :meth:`PySide.QtScriptTools.QScriptEngineDebugger.setAutoShowStandardWindow` 



