.. module:: PySide.QtOpenGL
.. _QGLFormat:

QGLFormat
*********

.. inheritance-diagram:: QGLFormat
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtOpenGL.QGLFormat.__eq__>` (, arg__2)
*    def :meth:`__ne__<PySide.QtOpenGL.QGLFormat.__ne__>` (, arg__2)
*    def :meth:`accum<PySide.QtOpenGL.QGLFormat.accum>` ()
*    def :meth:`accumBufferSize<PySide.QtOpenGL.QGLFormat.accumBufferSize>` ()
*    def :meth:`alpha<PySide.QtOpenGL.QGLFormat.alpha>` ()
*    def :meth:`alphaBufferSize<PySide.QtOpenGL.QGLFormat.alphaBufferSize>` ()
*    def :meth:`blueBufferSize<PySide.QtOpenGL.QGLFormat.blueBufferSize>` ()
*    def :meth:`depth<PySide.QtOpenGL.QGLFormat.depth>` ()
*    def :meth:`depthBufferSize<PySide.QtOpenGL.QGLFormat.depthBufferSize>` ()
*    def :meth:`directRendering<PySide.QtOpenGL.QGLFormat.directRendering>` ()
*    def :meth:`doubleBuffer<PySide.QtOpenGL.QGLFormat.doubleBuffer>` ()
*    def :meth:`greenBufferSize<PySide.QtOpenGL.QGLFormat.greenBufferSize>` ()
*    def :meth:`hasOverlay<PySide.QtOpenGL.QGLFormat.hasOverlay>` ()
*    def :meth:`majorVersion<PySide.QtOpenGL.QGLFormat.majorVersion>` ()
*    def :meth:`minorVersion<PySide.QtOpenGL.QGLFormat.minorVersion>` ()
*    def :meth:`plane<PySide.QtOpenGL.QGLFormat.plane>` ()
*    def :meth:`profile<PySide.QtOpenGL.QGLFormat.profile>` ()
*    def :meth:`redBufferSize<PySide.QtOpenGL.QGLFormat.redBufferSize>` ()
*    def :meth:`rgba<PySide.QtOpenGL.QGLFormat.rgba>` ()
*    def :meth:`sampleBuffers<PySide.QtOpenGL.QGLFormat.sampleBuffers>` ()
*    def :meth:`samples<PySide.QtOpenGL.QGLFormat.samples>` ()
*    def :meth:`setAccum<PySide.QtOpenGL.QGLFormat.setAccum>` (enable)
*    def :meth:`setAccumBufferSize<PySide.QtOpenGL.QGLFormat.setAccumBufferSize>` (size)
*    def :meth:`setAlpha<PySide.QtOpenGL.QGLFormat.setAlpha>` (enable)
*    def :meth:`setAlphaBufferSize<PySide.QtOpenGL.QGLFormat.setAlphaBufferSize>` (size)
*    def :meth:`setBlueBufferSize<PySide.QtOpenGL.QGLFormat.setBlueBufferSize>` (size)
*    def :meth:`setDepth<PySide.QtOpenGL.QGLFormat.setDepth>` (enable)
*    def :meth:`setDepthBufferSize<PySide.QtOpenGL.QGLFormat.setDepthBufferSize>` (size)
*    def :meth:`setDirectRendering<PySide.QtOpenGL.QGLFormat.setDirectRendering>` (enable)
*    def :meth:`setDoubleBuffer<PySide.QtOpenGL.QGLFormat.setDoubleBuffer>` (enable)
*    def :meth:`setGreenBufferSize<PySide.QtOpenGL.QGLFormat.setGreenBufferSize>` (size)
*    def :meth:`setOption<PySide.QtOpenGL.QGLFormat.setOption>` (opt)
*    def :meth:`setOverlay<PySide.QtOpenGL.QGLFormat.setOverlay>` (enable)
*    def :meth:`setPlane<PySide.QtOpenGL.QGLFormat.setPlane>` (plane)
*    def :meth:`setProfile<PySide.QtOpenGL.QGLFormat.setProfile>` (profile)
*    def :meth:`setRedBufferSize<PySide.QtOpenGL.QGLFormat.setRedBufferSize>` (size)
*    def :meth:`setRgba<PySide.QtOpenGL.QGLFormat.setRgba>` (enable)
*    def :meth:`setSampleBuffers<PySide.QtOpenGL.QGLFormat.setSampleBuffers>` (enable)
*    def :meth:`setSamples<PySide.QtOpenGL.QGLFormat.setSamples>` (numSamples)
*    def :meth:`setStencil<PySide.QtOpenGL.QGLFormat.setStencil>` (enable)
*    def :meth:`setStencilBufferSize<PySide.QtOpenGL.QGLFormat.setStencilBufferSize>` (size)
*    def :meth:`setStereo<PySide.QtOpenGL.QGLFormat.setStereo>` (enable)
*    def :meth:`setSwapInterval<PySide.QtOpenGL.QGLFormat.setSwapInterval>` (interval)
*    def :meth:`setVersion<PySide.QtOpenGL.QGLFormat.setVersion>` (major, minor)
*    def :meth:`stencil<PySide.QtOpenGL.QGLFormat.stencil>` ()
*    def :meth:`stencilBufferSize<PySide.QtOpenGL.QGLFormat.stencilBufferSize>` ()
*    def :meth:`stereo<PySide.QtOpenGL.QGLFormat.stereo>` ()
*    def :meth:`swapInterval<PySide.QtOpenGL.QGLFormat.swapInterval>` ()
*    def :meth:`testOption<PySide.QtOpenGL.QGLFormat.testOption>` (opt)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`defaultFormat<PySide.QtOpenGL.QGLFormat.defaultFormat>` ()
*    def :meth:`defaultOverlayFormat<PySide.QtOpenGL.QGLFormat.defaultOverlayFormat>` ()
*    def :meth:`hasOpenGL<PySide.QtOpenGL.QGLFormat.hasOpenGL>` ()
*    def :meth:`hasOpenGLOverlays<PySide.QtOpenGL.QGLFormat.hasOpenGLOverlays>` ()
*    def :meth:`openGLVersionFlags<PySide.QtOpenGL.QGLFormat.openGLVersionFlags>` ()
*    def :meth:`setDefaultFormat<PySide.QtOpenGL.QGLFormat.setDefaultFormat>` (f)
*    def :meth:`setDefaultOverlayFormat<PySide.QtOpenGL.QGLFormat.setDefaultOverlayFormat>` (f)


Detailed Description
--------------------



    The :class:`PySide.QtOpenGL.QGLFormat` class specifies the display format of an OpenGL rendering context.

    A display format has several characteristics:


    * :meth:`Double or single buffering.<PySide.QtOpenGL.QGLFormat.setDoubleBuffer>`
    * :meth:`Depth buffer.<PySide.QtOpenGL.QGLFormat.setDepth>`
    * :meth:`RGBA or color index mode.<PySide.QtOpenGL.QGLFormat.setRgba>`
    * :meth:`Alpha channel.<PySide.QtOpenGL.QGLFormat.setAlpha>`
    * :meth:`Accumulation buffer.<PySide.QtOpenGL.QGLFormat.setAccum>`
    * :meth:`Stencil buffer.<PySide.QtOpenGL.QGLFormat.setStencil>`
    * :meth:`Stereo buffers.<PySide.QtOpenGL.QGLFormat.setStereo>`
    * :meth:`Direct rendering.<PySide.QtOpenGL.QGLFormat.setDirectRendering>`
    * :meth:`Presence of an overlay.<PySide.QtOpenGL.QGLFormat.setOverlay>`
    * :meth:`Plane of an overlay.<PySide.QtOpenGL.QGLFormat.setPlane>`
    * :meth:`Multisample buffers.<PySide.QtOpenGL.QGLFormat.setSampleBuffers>`

    You can also specify preferred bit depths for the color buffer, depth buffer, alpha buffer, accumulation buffer and the stencil buffer with the functions: :meth:`PySide.QtOpenGL.QGLFormat.setRedBufferSize` , :meth:`PySide.QtOpenGL.QGLFormat.setGreenBufferSize` , :meth:`PySide.QtOpenGL.QGLFormat.setBlueBufferSize` , :meth:`PySide.QtOpenGL.QGLFormat.setDepthBufferSize` , :meth:`PySide.QtOpenGL.QGLFormat.setAlphaBufferSize` , :meth:`PySide.QtOpenGL.QGLFormat.setAccumBufferSize` and :meth:`PySide.QtOpenGL.QGLFormat.setStencilBufferSize` .

    Note that even if you specify that you prefer a 32 bit depth buffer (e.g. with setDepthBufferSize(32)), the format that is chosen may not have a 32 bit depth buffer, even if there is a format available with a 32 bit depth buffer. The main reason for this is how the system dependant picking algorithms work on the different platforms, and some format options may have higher precedence than others.

    You create and tell a :class:`PySide.QtOpenGL.QGLFormat` object what rendering options you want from an OpenGL rendering context.

    OpenGL drivers or accelerated hardware may or may not support advanced features such as alpha channel or stereographic viewing. If you request some features that the driver/hardware does not provide when you create a :class:`PySide.QtOpenGL.QGLWidget` , you will get a rendering context with the nearest subset of features.

    There are different ways to define the display characteristics of a rendering context. One is to create a :class:`PySide.QtOpenGL.QGLFormat` and make it the default for the entire application:

    ::

        fmt = QGLFormat()
        fmt.setAlpha(True)
        fmt.setStereo(True)
        QGLFormat.setDefaultFormat(fmt)


    Or you can specify the desired format when creating an object of your :class:`PySide.QtOpenGL.QGLWidget` subclass:

    ::

        fmt = QGLFormat()
        fmt.setDoubleBuffer(False)                 # single buffer
        fmt.setDirectRendering(False)              # software rendering
        myWidget = MyGLWidget(fmt, ...)


    After the widget has been created, you can find out which of the requested features the system was able to provide:

    ::

        fmt = QGLFormat()
        fmt.setOverlay(True)
        fmt.setStereo(True)
        myWidget = MyGLWidget(fmt, ...)
        if !myWidget.format().stereo():
            # ok, goggles off
            if !myWidget.format().hasOverlay():
                print "Cool hardware required"


    ::

                
                        
        OpenGL is a trademark of Silicon Graphics, Inc. in the United States and other countries.

                
                    


    .. seealso::  :class:`PySide.QtOpenGL.QGLContext`  :class:`PySide.QtOpenGL.QGLWidget` 

.. class:: QGLFormat()
           QGLFormat(options[, plane=0])
           QGLFormat(other)

    :param plane: :class:`PySide.QtCore.int`
    :param options: :class:`PySide.QtOpenGL.QGL.FormatOptions`
    :param other: :class:`PySide.QtOpenGL.QGLFormat`

    Constructs a :class:`PySide.QtOpenGL.QGLFormat` object with the following default settings:


    * :meth:`Double buffer:<PySide.QtOpenGL.QGLFormat.setDoubleBuffer>` Enabled.
    * :meth:`Depth buffer:<PySide.QtOpenGL.QGLFormat.setDepth>` Enabled.
    * :meth:`RGBA:<PySide.QtOpenGL.QGLFormat.setRgba>` Enabled (i.e., color index disabled).
    * :meth:`Alpha channel:<PySide.QtOpenGL.QGLFormat.setAlpha>` Disabled.
    * :meth:`Accumulator buffer:<PySide.QtOpenGL.QGLFormat.setAccum>` Disabled.
    * :meth:`Stencil buffer:<PySide.QtOpenGL.QGLFormat.setStencil>` Enabled.
    * :meth:`Stereo:<PySide.QtOpenGL.QGLFormat.setStereo>` Disabled.
    * :meth:`Direct rendering:<PySide.QtOpenGL.QGLFormat.setDirectRendering>` Enabled.
    * :meth:`Overlay:<PySide.QtOpenGL.QGLFormat.setOverlay>` Disabled.
    * :meth:`Plane:<PySide.QtOpenGL.QGLFormat.setPlane>` 0 (i.e., normal plane).
    * :meth:`Multisample buffers:<PySide.QtOpenGL.QGLFormat.setSampleBuffers>` Disabled.




    Constructs a copy of ``other`` .


.. attribute:: PySide.QtOpenGL.QGLFormat.OpenGLVersionFlag

    This enum describes the various OpenGL versions that are recognized by Qt. Use the :meth:`QGLFormat.openGLVersionFlags()<PySide.QtOpenGL.QGLFormat.openGLVersionFlags>` function to identify which versions that are supported at runtime.

    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                                  |Description                                                                                                                                                                                                                                         |
    +==========================================+====================================================================================================================================================================================================================================================+
    |QGLFormat.OpenGL_Version_None             |If no OpenGL is present or if no OpenGL context is current.                                                                                                                                                                                         |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_1_1              |OpenGL version 1.1 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_1_2              |OpenGL version 1.2 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_1_3              |OpenGL version 1.3 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_1_4              |OpenGL version 1.4 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_1_5              |OpenGL version 1.5 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_2_0              |OpenGL version 2.0 or higher is present. Note that version 2.0 supports all the functionality of version 1.5.                                                                                                                                       |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_2_1              |OpenGL version 2.1 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_3_0              |OpenGL version 3.0 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_3_1              |OpenGL version 3.1 or higher is present. Note that OpenGL version 3.1 or higher does not necessarily support all the features of version 3.0 and lower.                                                                                             |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_3_2              |OpenGL version 3.2 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_3_3              |OpenGL version 3.3 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_Version_4_0              |OpenGL version 4.0 or higher is present.                                                                                                                                                                                                            |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_ES_CommonLite_Version_1_0|OpenGL ES version 1.0 Common Lite or higher is present.                                                                                                                                                                                             |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_ES_Common_Version_1_0    |OpenGL ES version 1.0 Common or higher is present. The Common profile supports all the features of Common Lite.                                                                                                                                     |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_ES_CommonLite_Version_1_1|OpenGL ES version 1.1 Common Lite or higher is present.                                                                                                                                                                                             |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_ES_Common_Version_1_1    |OpenGL ES version 1.1 Common or higher is present. The Common profile supports all the features of Common Lite.                                                                                                                                     |
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLFormat.OpenGL_ES_Version_2_0           |OpenGL ES version 2.0 or higher is present. Note that OpenGL ES version 2.0 does not support all the features of OpenGL ES 1.x. So if :attr:`OpenGL_ES_Version_2_0<QGLFormat.OpenGLVersionFlag>` is returned, none of the ES 1.x flags are returned.|
    +------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    See also http://www.opengl.org for more information about the different revisions of OpenGL.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.openGLVersionFlags` 

.. attribute:: PySide.QtOpenGL.QGLFormat.OpenGLContextProfile

    This enum describes the OpenGL context profiles that can be specified for contexts implementing OpenGL version 3.2 or higher. These profiles are different from OpenGL ES profiles.

    +------------------------------+----------------------------------------------------------------+
    |Constant                      |Description                                                     |
    +==============================+================================================================+
    |QGLFormat.NoProfile           |OpenGL version is lower than 3.2.                               |
    +------------------------------+----------------------------------------------------------------+
    |QGLFormat.CoreProfile         |Functionality deprecated in OpenGL version 3.0 is not available.|
    +------------------------------+----------------------------------------------------------------+
    |QGLFormat.CompatibilityProfile|Functionality from earlier OpenGL versions is available.        |
    +------------------------------+----------------------------------------------------------------+


.. note:: This enum was introduced or modified in Qt 4.7
.. method:: PySide.QtOpenGL.QGLFormat.accum()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the accumulation buffer is enabled; otherwise returns false. The accumulation buffer is disabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setAccum`  :meth:`PySide.QtOpenGL.QGLFormat.setAccumBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.accumBufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the accumulation buffer size.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setAccumBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.accum`  :meth:`PySide.QtOpenGL.QGLFormat.setAccum` 


.. method:: PySide.QtOpenGL.QGLFormat.alpha()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the alpha buffer in the framebuffer is enabled; otherwise returns false. The alpha buffer is disabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setAlpha`  :meth:`PySide.QtOpenGL.QGLFormat.setAlphaBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.alphaBufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the alpha buffer size.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.alpha`  :meth:`PySide.QtOpenGL.QGLFormat.setAlpha`  :meth:`PySide.QtOpenGL.QGLFormat.setAlphaBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.blueBufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the blue buffer size.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setBlueBufferSize` 


.. staticmethod:: PySide.QtOpenGL.QGLFormat.defaultFormat()


    :rtype: :class:`PySide.QtOpenGL.QGLFormat`




    Returns the default :class:`PySide.QtOpenGL.QGLFormat` for the application. All :class:`PySide.QtOpenGL.QGLWidget` objects that are created use this format unless another format is specified, e.g. when they are constructed.

    If no special default format has been set using :meth:`PySide.QtOpenGL.QGLFormat.setDefaultFormat` , the default format is the same as that created with :meth:`PySide.QtOpenGL.QGLFormat.QGLFormat` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setDefaultFormat` 


.. staticmethod:: PySide.QtOpenGL.QGLFormat.defaultOverlayFormat()


    :rtype: :class:`PySide.QtOpenGL.QGLFormat`




    Returns the default :class:`PySide.QtOpenGL.QGLFormat` for overlay contexts.

    The default overlay format is:


    * :meth:`Double buffer:<PySide.QtOpenGL.QGLFormat.setDoubleBuffer>` Disabled.
    * :meth:`Depth buffer:<PySide.QtOpenGL.QGLFormat.setDepth>` Disabled.
    * :meth:`RGBA:<PySide.QtOpenGL.QGLFormat.setRgba>` Disabled (i.e., color index enabled).
    * :meth:`Alpha channel:<PySide.QtOpenGL.QGLFormat.setAlpha>` Disabled.
    * :meth:`Accumulator buffer:<PySide.QtOpenGL.QGLFormat.setAccum>` Disabled.
    * :meth:`Stencil buffer:<PySide.QtOpenGL.QGLFormat.setStencil>` Disabled.
    * :meth:`Stereo:<PySide.QtOpenGL.QGLFormat.setStereo>` Disabled.
    * :meth:`Direct rendering:<PySide.QtOpenGL.QGLFormat.setDirectRendering>` Enabled.
    * :meth:`Overlay:<PySide.QtOpenGL.QGLFormat.setOverlay>` Disabled.
    * :meth:`Multisample buffers:<PySide.QtOpenGL.QGLFormat.setSampleBuffers>` Disabled.
    * :meth:`Plane:<PySide.QtOpenGL.QGLFormat.setPlane>` 1 (i.e., first overlay plane).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setDefaultOverlayFormat`  :meth:`PySide.QtOpenGL.QGLFormat.setDefaultFormat` 


.. method:: PySide.QtOpenGL.QGLFormat.depth()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the depth buffer is enabled; otherwise returns false. The depth buffer is enabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setDepth`  :meth:`PySide.QtOpenGL.QGLFormat.setDepthBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.depthBufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the depth buffer size.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.depth`  :meth:`PySide.QtOpenGL.QGLFormat.setDepth`  :meth:`PySide.QtOpenGL.QGLFormat.setDepthBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.directRendering()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if direct rendering is enabled; otherwise returns false.

    Direct rendering is enabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setDirectRendering` 


.. method:: PySide.QtOpenGL.QGLFormat.doubleBuffer()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if double buffering is enabled; otherwise returns false. Double buffering is enabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setDoubleBuffer` 


.. method:: PySide.QtOpenGL.QGLFormat.greenBufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the green buffer size.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setGreenBufferSize` 


.. staticmethod:: PySide.QtOpenGL.QGLFormat.hasOpenGL()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the window system has any OpenGL support; otherwise returns false.

    .. warning::  This function must not be called until the :class:`PySide.QtGui.QApplication` object has been created.



.. staticmethod:: PySide.QtOpenGL.QGLFormat.hasOpenGLOverlays()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the window system supports OpenGL overlays; otherwise returns false.

    .. warning::  This function must not be called until the :class:`PySide.QtGui.QApplication` object has been created.



.. method:: PySide.QtOpenGL.QGLFormat.hasOverlay()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if overlay plane is enabled; otherwise returns false.

    Overlay is disabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setOverlay` 


.. method:: PySide.QtOpenGL.QGLFormat.majorVersion()


    :rtype: :class:`PySide.QtCore.int`




    Returns the OpenGL major version.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setVersion`  :meth:`PySide.QtOpenGL.QGLFormat.minorVersion` 


.. method:: PySide.QtOpenGL.QGLFormat.minorVersion()


    :rtype: :class:`PySide.QtCore.int`




    Returns the OpenGL minor version.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setVersion`  :meth:`PySide.QtOpenGL.QGLFormat.majorVersion` 


.. staticmethod:: PySide.QtOpenGL.QGLFormat.openGLVersionFlags()


    :rtype: :class:`PySide.QtOpenGL.QGLFormat.OpenGLVersionFlags`




    Identifies, at runtime, which OpenGL versions that are supported by the current platform.

    Note that if OpenGL version 1.5 is supported, its predecessors (i.e., version 1.4 and lower) are also supported. To identify the support of a particular feature, like multi texturing, test for the version in which the feature was first introduced (i.e., version 1.3 in the case of multi texturing) to adapt to the largest possible group of runtime platforms.

    This function needs a valid current OpenGL context to work; otherwise it will return :attr:`OpenGL_Version_None<QGLFormat.OpenGLVersionFlag>` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.hasOpenGL`  :meth:`PySide.QtOpenGL.QGLFormat.hasOpenGLOverlays` 


.. method:: PySide.QtOpenGL.QGLFormat.__ne__(, arg__2)


    :param arg__2: :class:`PySide.QtOpenGL.QGLFormat`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtOpenGL.QGLFormat.__eq__(, arg__2)


    :param arg__2: :class:`PySide.QtOpenGL.QGLFormat`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtOpenGL.QGLFormat.plane()


    :rtype: :class:`PySide.QtCore.int`




    Returns the plane of this format. The default for normal formats is 0, which means the normal plane. The default for overlay formats is 1, which is the first overlay plane.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setPlane`  :meth:`PySide.QtOpenGL.QGLFormat.defaultOverlayFormat` 


.. method:: PySide.QtOpenGL.QGLFormat.profile()


    :rtype: :attr:`PySide.QtOpenGL.QGLFormat.OpenGLContextProfile`




    Returns the OpenGL context profile.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setProfile` 


.. method:: PySide.QtOpenGL.QGLFormat.redBufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the red buffer size.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setRedBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.rgba()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if RGBA color mode is set. Returns false if color index mode is set. The default color mode is RGBA.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setRgba` 


.. method:: PySide.QtOpenGL.QGLFormat.sampleBuffers()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if multisample buffer support is enabled; otherwise returns false.

    The multisample buffer is disabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setSampleBuffers` 


.. method:: PySide.QtOpenGL.QGLFormat.samples()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of samples per pixel when multisampling is enabled. By default, the highest number of samples that is available is used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setSampleBuffers`  :meth:`PySide.QtOpenGL.QGLFormat.sampleBuffers`  :meth:`PySide.QtOpenGL.QGLFormat.setSamples` 


.. method:: PySide.QtOpenGL.QGLFormat.setAccum(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true enables the accumulation buffer; otherwise disables the accumulation buffer.

    The accumulation buffer is disabled by default.

    The accumulation buffer is used to create blur effects and multiple exposures.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.accum`  :meth:`PySide.QtOpenGL.QGLFormat.setAccumBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setAccumBufferSize(size)


    :param size: :class:`PySide.QtCore.int`




    Set the preferred accumulation buffer size, where ``size`` is the bit depth for each RGBA component.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.accum`  :meth:`PySide.QtOpenGL.QGLFormat.setAccum`  :meth:`PySide.QtOpenGL.QGLFormat.accumBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setAlpha(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true enables the alpha buffer; otherwise disables the alpha buffer.

    The alpha buffer is disabled by default.

    The alpha buffer is typically used for implementing transparency or translucency. The A in RGBA specifies the transparency of a pixel.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.alpha`  :meth:`PySide.QtOpenGL.QGLFormat.setAlphaBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setAlphaBufferSize(size)


    :param size: :class:`PySide.QtCore.int`




    Set the preferred alpha buffer size to ``size`` . This function implicitly enables the alpha channel.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setRedBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setGreenBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.alphaBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setBlueBufferSize(size)


    :param size: :class:`PySide.QtCore.int`




    Set the preferred blue buffer size to ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.blueBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setRedBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setGreenBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setAlphaBufferSize` 


.. staticmethod:: PySide.QtOpenGL.QGLFormat.setDefaultFormat(f)


    :param f: :class:`PySide.QtOpenGL.QGLFormat`




    Sets a new default :class:`PySide.QtOpenGL.QGLFormat` for the application to ``f`` . For example, to set single buffering as the default instead of double buffering, your main() might contain code like this:

    ::

        a = QApplication([])
        f = QGLFormat()
        f.setDoubleBuffer(False)
        QGLFormat.setDefaultFormat(f)


    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.defaultFormat` 


.. staticmethod:: PySide.QtOpenGL.QGLFormat.setDefaultOverlayFormat(f)


    :param f: :class:`PySide.QtOpenGL.QGLFormat`




    Sets a new default :class:`PySide.QtOpenGL.QGLFormat` for overlay contexts to ``f`` . This format is used whenever a :class:`PySide.QtOpenGL.QGLWidget` is created with a format that :meth:`PySide.QtOpenGL.QGLFormat.hasOverlay` enabled.

    For example, to get a double buffered overlay context (if available), use code like this:

    ::

        f = QGLFormat.defaultOverlayFormat()
        f.setDoubleBuffer(True)
        QGLFormat.setDefaultOverlayFormat(f)


    As usual, you can find out after widget creation whether the underlying OpenGL system was able to provide the requested specification:

    ::

        # ...continued from above
        myWidget = MyGLWidget(QGLFormat(QGL.HasOverlay), ...)
        if myWidget.format().hasOverlay():
            # Yes, we got an overlay, let's check _its_ format:
            olContext = myWidget.overlayContext()
            if olContext.format().doubleBuffer():
                 # yes, we got a double buffered overlay
            else:
                 # no, only single buffered overlays are available


    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.defaultOverlayFormat` 


.. method:: PySide.QtOpenGL.QGLFormat.setDepth(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true enables the depth buffer; otherwise disables the depth buffer.

    The depth buffer is enabled by default.

    The purpose of a depth buffer (or Z-buffering) is to remove hidden surfaces. Pixels are assigned Z values based on the distance to the viewer. A pixel with a high Z value is closer to the viewer than a pixel with a low Z value. This information is used to decide whether to draw a pixel or not.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.depth`  :meth:`PySide.QtOpenGL.QGLFormat.setDepthBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setDepthBufferSize(size)


    :param size: :class:`PySide.QtCore.int`




    Set the minimum depth buffer size to ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.depthBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setDepth`  :meth:`PySide.QtOpenGL.QGLFormat.depth` 


.. method:: PySide.QtOpenGL.QGLFormat.setDirectRendering(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true enables direct rendering; otherwise disables direct rendering.

    Direct rendering is enabled by default.

    Enabling this option will make OpenGL bypass the underlying window system and render directly from hardware to the screen, if this is supported by the system.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.directRendering` 


.. method:: PySide.QtOpenGL.QGLFormat.setDoubleBuffer(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true sets double buffering; otherwise sets single buffering.

    Double buffering is enabled by default.

    Double buffering is a technique where graphics are rendered on an off-screen buffer and not directly to the screen. When the drawing has been completed, the program calls a swapBuffers() function to exchange the screen contents with the buffer. The result is flicker-free drawing and often better performance.

    Note that single buffered contexts are currently not supported with EGL.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.doubleBuffer`  :meth:`QGLContext.swapBuffers()<PySide.QtOpenGL.QGLContext.swapBuffers>`  :meth:`QGLWidget.swapBuffers()<PySide.QtOpenGL.QGLWidget.swapBuffers>` 


.. method:: PySide.QtOpenGL.QGLFormat.setGreenBufferSize(size)


    :param size: :class:`PySide.QtCore.int`




    Set the preferred green buffer size to ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.greenBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setRedBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setBlueBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setAlphaBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setOption(opt)


    :param opt: :class:`PySide.QtOpenGL.QGL.FormatOptions`







.. method:: PySide.QtOpenGL.QGLFormat.setOverlay(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true enables an overlay plane; otherwise disables the overlay plane.

    Enabling the overlay plane will cause :class:`PySide.QtOpenGL.QGLWidget` to create an additional context in an overlay plane. See the :class:`PySide.QtOpenGL.QGLWidget` documentation for further information.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.hasOverlay` 


.. method:: PySide.QtOpenGL.QGLFormat.setPlane(plane)


    :param plane: :class:`PySide.QtCore.int`




    Sets the requested plane to ``plane`` . 0 is the normal plane, 1 is the first overlay plane, 2 is the second overlay plane, etc.; -1, -2, etc. are underlay planes.

    Note that in contrast to other format specifications, the plane specifications will be matched exactly. This means that if you specify a plane that the underlying OpenGL system cannot provide, an :meth:`invalid<PySide.QtOpenGL.QGLWidget.isValid>` :class:`PySide.QtOpenGL.QGLWidget` will be created.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.plane` 


.. method:: PySide.QtOpenGL.QGLFormat.setProfile(profile)


    :param profile: :attr:`PySide.QtOpenGL.QGLFormat.OpenGLContextProfile`




    Set the OpenGL context profile to ``profile`` . The ``profile`` is ignored if the requested OpenGL version is less than 3.2.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.profile` 


.. method:: PySide.QtOpenGL.QGLFormat.setRedBufferSize(size)


    :param size: :class:`PySide.QtCore.int`




    Set the preferred red buffer size to ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.redBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setGreenBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setBlueBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setAlphaBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setRgba(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true sets RGBA mode. If ``enable`` is false sets color index mode.

    The default color mode is RGBA.

    RGBA is the preferred mode for most OpenGL applications. In RGBA color mode you specify colors as red + green + blue + alpha quadruplets.

    In color index mode you specify an index into a color lookup table.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.rgba` 


.. method:: PySide.QtOpenGL.QGLFormat.setSampleBuffers(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true, a GL context with multisample buffer support is picked; otherwise ignored.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.sampleBuffers`  :meth:`PySide.QtOpenGL.QGLFormat.setSamples`  :meth:`PySide.QtOpenGL.QGLFormat.samples` 


.. method:: PySide.QtOpenGL.QGLFormat.setSamples(numSamples)


    :param numSamples: :class:`PySide.QtCore.int`




    Set the preferred number of samples per pixel when multisampling is enabled to ``numSamples`` . By default, the highest number of samples available is used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setSampleBuffers`  :meth:`PySide.QtOpenGL.QGLFormat.sampleBuffers`  :meth:`PySide.QtOpenGL.QGLFormat.samples` 


.. method:: PySide.QtOpenGL.QGLFormat.setStencil(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true enables the stencil buffer; otherwise disables the stencil buffer.

    The stencil buffer is enabled by default.

    The stencil buffer masks certain parts of the drawing area so that masked parts are not drawn on.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.stencil`  :meth:`PySide.QtOpenGL.QGLFormat.setStencilBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.setStencilBufferSize(size)


    :param size: :class:`PySide.QtCore.int`




    Set the preferred stencil buffer size to ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.stencilBufferSize`  :meth:`PySide.QtOpenGL.QGLFormat.setStencil`  :meth:`PySide.QtOpenGL.QGLFormat.stencil` 


.. method:: PySide.QtOpenGL.QGLFormat.setStereo(enable)


    :param enable: :class:`PySide.QtCore.bool`




    If ``enable`` is true enables stereo buffering; otherwise disables stereo buffering.

    Stereo buffering is disabled by default.

    Stereo buffering provides extra color buffers to generate left-eye and right-eye images.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.stereo` 


.. method:: PySide.QtOpenGL.QGLFormat.setSwapInterval(interval)


    :param interval: :class:`PySide.QtCore.int`




    Set the preferred swap interval. This can be used to sync the GL drawing into a system window to the vertical refresh of the screen. Setting an ``interval`` value of 0 will turn the vertical refresh syncing off, any value higher than 0 will turn the vertical syncing on.

    Under Windows and under X11, where the ``WGL_EXT_swap_control`` and ``GLX_SGI_video_sync`` extensions are used, the ``interval`` parameter can be used to set the minimum number of video frames that are displayed before a buffer swap will occur. In effect, setting the ``interval`` to 10, means there will be 10 vertical retraces between every buffer swap.

    Under Windows the ``WGL_EXT_swap_control`` extension has to be present, and under X11 the ``GLX_SGI_video_sync`` extension has to be present.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.swapInterval` 


.. method:: PySide.QtOpenGL.QGLFormat.setVersion(major, minor)


    :param major: :class:`PySide.QtCore.int`
    :param minor: :class:`PySide.QtCore.int`




    Set the OpenGL version to the ``major`` and ``minor`` numbers. If a context compatible with the requested OpenGL version cannot be created, a context compatible with version 1.x is created instead.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.majorVersion`  :meth:`PySide.QtOpenGL.QGLFormat.minorVersion` 


.. method:: PySide.QtOpenGL.QGLFormat.stencil()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the stencil buffer is enabled; otherwise returns false. The stencil buffer is enabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setStencil`  :meth:`PySide.QtOpenGL.QGLFormat.setStencilBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.stencilBufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the stencil buffer size.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.stencil`  :meth:`PySide.QtOpenGL.QGLFormat.setStencil`  :meth:`PySide.QtOpenGL.QGLFormat.setStencilBufferSize` 


.. method:: PySide.QtOpenGL.QGLFormat.stereo()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if stereo buffering is enabled; otherwise returns false. Stereo buffering is disabled by default.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setStereo` 


.. method:: PySide.QtOpenGL.QGLFormat.swapInterval()


    :rtype: :class:`PySide.QtCore.int`




    Returns the currently set swap interval. -1 is returned if setting the swap interval isn't supported in the system GL implementation.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLFormat.setSwapInterval` 


.. method:: PySide.QtOpenGL.QGLFormat.testOption(opt)


    :param opt: :class:`PySide.QtOpenGL.QGL.FormatOptions`
    :rtype: :class:`PySide.QtCore.bool`








