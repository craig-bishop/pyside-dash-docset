.. module:: PySide.QtOpenGL
.. _QGLContext:

QGLContext
**********

.. inheritance-diagram:: QGLContext
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`bindTexture<PySide.QtOpenGL.QGLContext.bindTexture>` (fileName)
*    def :meth:`bindTexture<PySide.QtOpenGL.QGLContext.bindTexture>` (image, target, format, options)
*    def :meth:`bindTexture<PySide.QtOpenGL.QGLContext.bindTexture>` (image[, target=0x0DE1[, format=0x1908]])
*    def :meth:`bindTexture<PySide.QtOpenGL.QGLContext.bindTexture>` (pixmap, target, format, options)
*    def :meth:`bindTexture<PySide.QtOpenGL.QGLContext.bindTexture>` (pixmap[, target=0x0DE1[, format=0x1908]])
*    def :meth:`colorIndex<PySide.QtOpenGL.QGLContext.colorIndex>` (c)
*    def :meth:`deleteTexture<PySide.QtOpenGL.QGLContext.deleteTexture>` (tx_id)
*    def :meth:`device<PySide.QtOpenGL.QGLContext.device>` ()
*    def :meth:`deviceIsPixmap<PySide.QtOpenGL.QGLContext.deviceIsPixmap>` ()
*    def :meth:`drawTexture<PySide.QtOpenGL.QGLContext.drawTexture>` (point, textureId[, textureTarget=0x0DE1])
*    def :meth:`drawTexture<PySide.QtOpenGL.QGLContext.drawTexture>` (target, textureId[, textureTarget=0x0DE1])
*    def :meth:`format<PySide.QtOpenGL.QGLContext.format>` ()
*    def :meth:`getProcAddress<PySide.QtOpenGL.QGLContext.getProcAddress>` (proc)
*    def :meth:`initialized<PySide.QtOpenGL.QGLContext.initialized>` ()
*    def :meth:`isSharing<PySide.QtOpenGL.QGLContext.isSharing>` ()
*    def :meth:`isValid<PySide.QtOpenGL.QGLContext.isValid>` ()
*    def :meth:`overlayTransparentColor<PySide.QtOpenGL.QGLContext.overlayTransparentColor>` ()
*    def :meth:`requestedFormat<PySide.QtOpenGL.QGLContext.requestedFormat>` ()
*    def :meth:`reset<PySide.QtOpenGL.QGLContext.reset>` ()
*    def :meth:`setDevice<PySide.QtOpenGL.QGLContext.setDevice>` (pDev)
*    def :meth:`setFormat<PySide.QtOpenGL.QGLContext.setFormat>` (format)
*    def :meth:`setInitialized<PySide.QtOpenGL.QGLContext.setInitialized>` (on)
*    def :meth:`setValid<PySide.QtOpenGL.QGLContext.setValid>` (valid)
*    def :meth:`setWindowCreated<PySide.QtOpenGL.QGLContext.setWindowCreated>` (on)
*    def :meth:`windowCreated<PySide.QtOpenGL.QGLContext.windowCreated>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`chooseContext<PySide.QtOpenGL.QGLContext.chooseContext>` ([shareContext=None])
*    def :meth:`chooseVisual<PySide.QtOpenGL.QGLContext.chooseVisual>` ()
*    def :meth:`create<PySide.QtOpenGL.QGLContext.create>` ([shareContext=None])
*    def :meth:`doneCurrent<PySide.QtOpenGL.QGLContext.doneCurrent>` ()
*    def :meth:`makeCurrent<PySide.QtOpenGL.QGLContext.makeCurrent>` ()
*    def :meth:`swapBuffers<PySide.QtOpenGL.QGLContext.swapBuffers>` ()
*    def :meth:`tryVisual<PySide.QtOpenGL.QGLContext.tryVisual>` (f[, bufDepth=1])


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`areSharing<PySide.QtOpenGL.QGLContext.areSharing>` (context1, context2)
*    def :meth:`currentContext<PySide.QtOpenGL.QGLContext.currentContext>` ()
*    def :meth:`setTextureCacheLimit<PySide.QtOpenGL.QGLContext.setTextureCacheLimit>` (size)
*    def :meth:`textureCacheLimit<PySide.QtOpenGL.QGLContext.textureCacheLimit>` ()


Detailed Description
--------------------



    The :class:`PySide.QtOpenGL.QGLContext` class encapsulates an OpenGL rendering context.

    An OpenGL rendering context is a complete set of OpenGL state variables. The rendering context's :attr:`format<QGL.FormatOption>` is set in the constructor, but it can also be set later with :meth:`PySide.QtOpenGL.QGLContext.setFormat` . The format options that are actually set are returned by :meth:`PySide.QtOpenGL.QGLContext.format` ; the options you asked for are returned by :meth:`PySide.QtOpenGL.QGLContext.requestedFormat` . Note that after a :class:`PySide.QtOpenGL.QGLContext` object has been constructed, the actual OpenGL context must be created by explicitly calling the :meth:`PySide.QtOpenGL.QGLContext.create` function. The :meth:`PySide.QtOpenGL.QGLContext.makeCurrent` function makes this context the current rendering context. You can make *no* context current using :meth:`PySide.QtOpenGL.QGLContext.doneCurrent` . The :meth:`PySide.QtOpenGL.QGLContext.reset` function will reset the context and make it invalid.

    You can examine properties of the context with, e.g. :meth:`PySide.QtOpenGL.QGLContext.isValid` , :meth:`PySide.QtOpenGL.QGLContext.isSharing` , :meth:`PySide.QtOpenGL.QGLContext.initialized` , :meth:`PySide.QtOpenGL.QGLContext.windowCreated` and :meth:`PySide.QtOpenGL.QGLContext.overlayTransparentColor` .

    If you're using double buffering you can swap the screen contents with the off-screen buffer using :meth:`PySide.QtOpenGL.QGLContext.swapBuffers` .

    Please note that :class:`PySide.QtOpenGL.QGLContext` is not thread safe.


.. class:: QGLContext(format)

    :param format: :class:`PySide.QtOpenGL.QGLFormat`

    Constructs an OpenGL context with the given ``format`` which specifies several display options for the context.

    If the underlying OpenGL/Window system cannot satisfy all the features requested in ``format`` , the nearest subset of features will be used. After creation, the :meth:`PySide.QtOpenGL.QGLContext.format` method will return the actual format obtained.

    Note that after a :class:`PySide.QtOpenGL.QGLContext` object has been constructed, :meth:`PySide.QtOpenGL.QGLContext.create` must be called explicitly to create the actual OpenGL context. The context will be :meth:`invalid<PySide.QtOpenGL.QGLContext.isValid>` if it was not possible to obtain a GL context at all.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.format`  :meth:`PySide.QtOpenGL.QGLContext.isValid` 


.. attribute:: PySide.QtOpenGL.QGLContext.BindOption

    A set of options to decide how to bind a texture using :meth:`PySide.QtOpenGL.QGLContext.bindTexture` .

    +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                               |Description                                                                                                                                                                                                                                                                                              |
    +=======================================+=========================================================================================================================================================================================================================================================================================================+
    |QGLContext.NoBindOption                |Don't do anything, pass the texture straight through.                                                                                                                                                                                                                                                    |
    +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLContext.InvertedYBindOption         |Specifies that the texture should be flipped over the X axis so that the texture coordinate 0,0 corresponds to the top left corner. Inverting the texture implies a deep copy prior to upload.                                                                                                           |
    +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLContext.MipmapBindOption            |Specifies that :meth:`PySide.QtOpenGL.QGLContext.bindTexture` should try to generate mipmaps. If the GL implementation supports the ``GL_SGIS_generate_mipmap`` extension, mipmaps will be automatically generated for the texture. Mipmap generation is only supported for the ``GL_TEXTURE_2D`` target.|
    +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLContext.PremultipliedAlphaBindOption|Specifies that the image should be uploaded with premultiplied alpha and does a conversion accordingly.                                                                                                                                                                                                  |
    +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLContext.LinearFilteringBindOption   |Specifies that the texture filtering should be set to GL\_LINEAR. Default is GL\_NEAREST. If mipmap is also enabled, filtering will be set to GL\_LINEAR\_MIPMAP\_LINEAR.                                                                                                                                |
    +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGLContext.DefaultBindOption           |In Qt 4.5 and earlier, :meth:`PySide.QtOpenGL.QGLContext.bindTexture` would mirror the image and automatically generate mipmaps. This option helps preserve this default behavior.                                                                                                                       |
    +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    Used by x11 from pixmap to choose whether or not it can bind the pixmap upside down or not.

    Used by paint engines to indicate that the pixmap should be memory managed along side with the pixmap/image that it stems from, e.g. installing destruction hooks in them.


.. note:: This enum was introduced or modified in Qt 4.6
.. staticmethod:: PySide.QtOpenGL.QGLContext.areSharing(context1, context2)


    :param context1: :class:`PySide.QtOpenGL.QGLContext`
    :param context2: :class:`PySide.QtOpenGL.QGLContext`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``context1`` and ``context2`` are sharing their GL resources such as textures, shader programs, etc; otherwise returns false.



.. method:: PySide.QtOpenGL.QGLContext.bindTexture(fileName)


    :param fileName: unicode
    :rtype: :class:`PySide.QtOpenGL.GLuint`




    This is an overloaded function.

    Reads the compressed texture file ``fileName`` and generates a 2D GL texture from it.

    This function can load DirectDrawSurface (DDS) textures in the DXT1, DXT3 and DXT5 DDS formats if the ``GL_ARB_texture_compression`` and ``GL_EXT_texture_compression_s3tc`` extensions are supported.

    Since 4.6.1, textures in the ETC1 format can be loaded if the ``GL_OES_compressed_ETC1_RGB8_texture`` extension is supported and the ETC1 texture has been encapsulated in the PVR container format. Also, textures in the PVRTC2 and PVRTC4 formats can be loaded if the ``GL_IMG_texture_compression_pvrtc`` extension is supported.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.deleteTexture` 


.. method:: PySide.QtOpenGL.QGLContext.bindTexture(pixmap, target, format, options)


    :param pixmap: :class:`PySide.QtGui.QPixmap`
    :param target: :class:`PySide.QtOpenGL.GLenum`
    :param format: :class:`PySide.QtOpenGL.GLint`
    :param options: :class:`PySide.QtOpenGL.QGLContext.BindOptions`
    :rtype: :class:`PySide.QtOpenGL.GLuint`







.. method:: PySide.QtOpenGL.QGLContext.bindTexture(image, target, format, options)


    :param image: :class:`PySide.QtGui.QImage`
    :param target: :class:`PySide.QtOpenGL.GLenum`
    :param format: :class:`PySide.QtOpenGL.GLint`
    :param options: :class:`PySide.QtOpenGL.QGLContext.BindOptions`
    :rtype: :class:`PySide.QtOpenGL.GLuint`







.. method:: PySide.QtOpenGL.QGLContext.bindTexture(pixmap[, target=0x0DE1[, format=0x1908]])


    :param pixmap: :class:`PySide.QtGui.QPixmap`
    :param target: :class:`PySide.QtOpenGL.GLenum`
    :param format: :class:`PySide.QtOpenGL.GLint`
    :rtype: :class:`PySide.QtOpenGL.GLuint`




    This is an overloaded function.

    Generates and binds a 2D GL texture based on ``pixmap`` .



.. method:: PySide.QtOpenGL.QGLContext.bindTexture(image[, target=0x0DE1[, format=0x1908]])


    :param image: :class:`PySide.QtGui.QImage`
    :param target: :class:`PySide.QtOpenGL.GLenum`
    :param format: :class:`PySide.QtOpenGL.GLint`
    :rtype: :class:`PySide.QtOpenGL.GLuint`




    Generates and binds a 2D GL texture to the current context, based on ``image`` . The generated texture id is returned and can be used in later ``glBindTexture()`` calls.

    This is an overloaded function.



.. method:: PySide.QtOpenGL.QGLContext.chooseContext([shareContext=None])


    :param shareContext: :class:`PySide.QtOpenGL.QGLContext`
    :rtype: :class:`PySide.QtCore.bool`




    This semi-internal function is called by :meth:`PySide.QtOpenGL.QGLContext.create` . It creates a system-dependent OpenGL handle that matches the :meth:`PySide.QtOpenGL.QGLContext.format` of ``shareContext`` as closely as possible, returning true if successful or false if a suitable handle could not be found.

    On Windows, it calls the virtual function :meth:`~PySide.QtOpenGL.QGLContext.choosePixelFormat` , which finds a matching pixel format identifier. On X11, it calls the virtual function chooseVisual() which finds an appropriate X visual. On other platforms it may work differently.



.. method:: PySide.QtOpenGL.QGLContext.chooseVisual()


    :rtype: :class:`void`







.. method:: PySide.QtOpenGL.QGLContext.colorIndex(c)


    :param c: :class:`PySide.QtGui.QColor`
    :rtype: :class:`PySide.QtCore.uint`




    Returns a colormap index for the color c, in ColorIndex mode. Used by qglColor() and qglClearColor().



.. method:: PySide.QtOpenGL.QGLContext.create([shareContext=None])


    :param shareContext: :class:`PySide.QtOpenGL.QGLContext`
    :rtype: :class:`PySide.QtCore.bool`




    Creates the GL context. Returns true if it was successful in creating a valid GL rendering context on the paint device specified in the constructor; otherwise returns false (i.e. the context is invalid).

    After successful creation, :meth:`PySide.QtOpenGL.QGLContext.format` returns the set of features of the created GL rendering context.

    If ``shareContext`` points to a valid :class:`PySide.QtOpenGL.QGLContext` , this method will try to establish OpenGL display list and texture object sharing between this context and the ``shareContext`` . Note that this may fail if the two contexts have different :meth:`formats<PySide.QtOpenGL.QGLContext.format>` . Use :meth:`PySide.QtOpenGL.QGLContext.isSharing` to see if sharing is in effect.

    .. warning::  Implementation note: initialization of C++ class members usually takes place in the class constructor. :class:`PySide.QtOpenGL.QGLContext` is an exception because it must be simple to customize. The virtual functions :meth:`PySide.QtOpenGL.QGLContext.chooseContext` (and chooseVisual() for X11) can be reimplemented in a subclass to select a particular context. The problem is that virtual functions are not properly called during construction (even though this is correct C++) because C++ constructs class hierarchies from the bottom up. For this reason we need a :meth:`PySide.QtOpenGL.QGLContext.create` function.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.chooseContext`  :meth:`PySide.QtOpenGL.QGLContext.format`  :meth:`PySide.QtOpenGL.QGLContext.isValid` 


.. staticmethod:: PySide.QtOpenGL.QGLContext.currentContext()


    :rtype: :class:`PySide.QtOpenGL.QGLContext`




    Returns the current context, i.e. the context to which any OpenGL commands will currently be directed. Returns 0 if no context is current.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.makeCurrent` 


.. method:: PySide.QtOpenGL.QGLContext.deleteTexture(tx_id)


    :param tx_id: :class:`PySide.QtOpenGL.GLuint`




    Removes the texture identified by ``id`` from the texture cache, and calls glDeleteTextures() to delete the texture from the context.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.bindTexture` 


.. method:: PySide.QtOpenGL.QGLContext.device()


    :rtype: :class:`PySide.QtGui.QPaintDevice`




    Returns the paint device set for this context.

    .. seealso::  :meth:`QGLContext.QGLContext()<PySide.QtOpenGL.QGLContext.QGLContext>` 


.. method:: PySide.QtOpenGL.QGLContext.deviceIsPixmap()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the paint device of this context is a pixmap; otherwise returns false.



.. method:: PySide.QtOpenGL.QGLContext.doneCurrent()






    Makes no GL context the current context. Normally, you do not need to call this function; :class:`PySide.QtOpenGL.QGLContext` calls it as necessary.



.. method:: PySide.QtOpenGL.QGLContext.drawTexture(point, textureId[, textureTarget=0x0DE1])


    :param point: :class:`PySide.QtCore.QPointF`
    :param textureId: :class:`PySide.QtOpenGL.GLuint`
    :param textureTarget: :class:`PySide.QtOpenGL.GLenum`




    This function supports the following use cases:


    * By default it draws the given texture, ``textureId``, at the given ``point`` in OpenGL model space. The ``textureTarget`` should be a 2D texture target.
    * If a painter is active, not inside a beginNativePainting / endNativePainting block, and uses the engine with type :attr:`QPaintEngine.OpenGL2<QPaintEngine.Type>` , the function will draw the given texture, ``textureId``, at the given ``point``, respecting the current painter state. This will let you draw a texture with the clip, transform, render hints, and composition mode set by the painter. Note that the texture target needs to be GL\_TEXTURE\_2D for this use case.

    .. note::  This function is not supported under any version of OpenGL ES.



.. method:: PySide.QtOpenGL.QGLContext.drawTexture(target, textureId[, textureTarget=0x0DE1])


    :param target: :class:`PySide.QtCore.QRectF`
    :param textureId: :class:`PySide.QtOpenGL.GLuint`
    :param textureTarget: :class:`PySide.QtOpenGL.GLenum`




    This function supports the following use cases:


    * On OpenGL and OpenGL ES 1.x it draws the given texture, ``textureId``, to the given target rectangle, ``target``, in OpenGL model space. The ``textureTarget`` should be a 2D texture target.
    * On OpenGL and OpenGL ES 2.x, if a painter is active, not inside a beginNativePainting / endNativePainting block, and uses the engine with type :attr:`QPaintEngine.OpenGL2<QPaintEngine.Type>` , the function will draw the given texture, ``textureId``, to the given target rectangle, ``target``, respecting the current painter state. This will let you draw a texture with the clip, transform, render hints, and composition mode set by the painter. Note that the texture target needs to be GL\_TEXTURE\_2D for this use case, and that this is the only supported use case under OpenGL ES 2.x.



.. method:: PySide.QtOpenGL.QGLContext.format()


    :rtype: :class:`PySide.QtOpenGL.QGLFormat`




    Returns the frame buffer format that was obtained (this may be a subset of what was requested).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.setFormat`  :meth:`PySide.QtOpenGL.QGLContext.requestedFormat` 


.. method:: PySide.QtOpenGL.QGLContext.getProcAddress(proc)


    :param proc: unicode
    :rtype: :class:`void`




    Returns a function pointer to the GL extension function passed in ``proc`` . 0 is returned if a pointer to the function could not be obtained.



.. method:: PySide.QtOpenGL.QGLContext.initialized()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this context has been initialized, i.e. if :meth:`QGLWidget.initializeGL()<PySide.QtOpenGL.QGLWidget.initializeGL>` has been performed on it; otherwise returns false.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.setInitialized` 


.. method:: PySide.QtOpenGL.QGLContext.isSharing()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this context is sharing its GL context with another :class:`PySide.QtOpenGL.QGLContext` , otherwise false is returned. Note that context sharing might not be supported between contexts with different formats.



.. method:: PySide.QtOpenGL.QGLContext.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if a GL rendering context has been successfully created; otherwise returns false.



.. method:: PySide.QtOpenGL.QGLContext.makeCurrent()






    Makes this context the current OpenGL rendering context. All GL functions you call operate on this context until another context is made current.

    In some very rare cases the underlying call may fail. If this occurs an error message is output to stderr.



.. method:: PySide.QtOpenGL.QGLContext.overlayTransparentColor()


    :rtype: :class:`PySide.QtGui.QColor`




    If this context is a valid context in an overlay plane, returns the plane's transparent color. Otherwise returns an :meth:`invalid<PySide.QtGui.QColor.isValid>` color.

    The returned color's :meth:`PySide.QtGui.QColor.pixel` value is the index of the transparent color in the colormap of the overlay plane. (Naturally, the color's RGB values are meaningless.)

    The returned :class:`PySide.QtGui.QColor` object will generally work as expected only when passed as the argument to :meth:`QGLWidget.qglColor()<PySide.QtOpenGL.QGLWidget.qglColor>` or :meth:`QGLWidget.qglClearColor()<PySide.QtOpenGL.QGLWidget.qglClearColor>` . Under certain circumstances it can also be used to draw transparent graphics with a :class:`PySide.QtGui.QPainter` . See the examples/opengl/overlay\_x11 example for details.



.. method:: PySide.QtOpenGL.QGLContext.requestedFormat()


    :rtype: :class:`PySide.QtOpenGL.QGLFormat`




    Returns the frame buffer format that was originally requested in the constructor or :meth:`PySide.QtOpenGL.QGLContext.setFormat` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.format` 


.. method:: PySide.QtOpenGL.QGLContext.reset()






    Resets the context and makes it invalid.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.create`  :meth:`PySide.QtOpenGL.QGLContext.isValid` 


.. method:: PySide.QtOpenGL.QGLContext.setDevice(pDev)


    :param pDev: :class:`PySide.QtGui.QPaintDevice`




    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.device` 


.. method:: PySide.QtOpenGL.QGLContext.setFormat(format)


    :param format: :class:`PySide.QtOpenGL.QGLFormat`




    Sets a ``format`` for this context. The context is :meth:`PySide.QtOpenGL.QGLContext.reset` .

    Call :meth:`PySide.QtOpenGL.QGLContext.create` to create a new GL context that tries to match the new format.

    ::

        cx = QGLContext()
        #  ...
        f = QGLFormat()
        f.setStereo(True)
        cx.setFormat(f)
        if !cx.create():
            exit() # no OpenGL support, or cannot render on the specified paintdevice
        if !cx.format().stereo():
            exit() # could not create stereo context


    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.format`  :meth:`PySide.QtOpenGL.QGLContext.reset`  :meth:`PySide.QtOpenGL.QGLContext.create` 


.. method:: PySide.QtOpenGL.QGLContext.setInitialized(on)


    :param on: :class:`PySide.QtCore.bool`




    If ``on`` is true the context has been initialized, i.e. :meth:`QGLContext.setInitialized()<PySide.QtOpenGL.QGLContext.setInitialized>` has been called on it. If ``on`` is false the context has not been initialized.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.initialized` 


.. staticmethod:: PySide.QtOpenGL.QGLContext.setTextureCacheLimit(size)


    :param size: :class:`PySide.QtCore.int`




    This function sets the limit for the texture cache to ``size`` , expressed in kilobytes.

    By default, the cache limit is approximately 64 MB.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.textureCacheLimit` 


.. method:: PySide.QtOpenGL.QGLContext.setValid(valid)


    :param valid: :class:`PySide.QtCore.bool`




    Forces the GL rendering context to be valid.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.isValid` 


.. method:: PySide.QtOpenGL.QGLContext.setWindowCreated(on)


    :param on: :class:`PySide.QtCore.bool`




    If ``on`` is true the context has had a window created for it. If ``on`` is false no window has been created for the context.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.windowCreated` 


.. method:: PySide.QtOpenGL.QGLContext.swapBuffers()






    Swaps the screen contents with an off-screen buffer. Only works if the context is in double buffer mode.

    .. seealso::  :meth:`QGLFormat.setDoubleBuffer()<PySide.QtOpenGL.QGLFormat.setDoubleBuffer>` 


.. staticmethod:: PySide.QtOpenGL.QGLContext.textureCacheLimit()


    :rtype: :class:`PySide.QtCore.int`




    Returns the current texture cache limit in kilobytes.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.setTextureCacheLimit` 


.. method:: PySide.QtOpenGL.QGLContext.tryVisual(f[, bufDepth=1])


    :param f: :class:`PySide.QtOpenGL.QGLFormat`
    :param bufDepth: :class:`PySide.QtCore.int`
    :rtype: :class:`void`







.. method:: PySide.QtOpenGL.QGLContext.windowCreated()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if a window has been created for this context; otherwise returns false.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLContext.setWindowCreated` 



