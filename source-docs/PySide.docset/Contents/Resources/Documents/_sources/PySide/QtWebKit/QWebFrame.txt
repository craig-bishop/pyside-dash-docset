.. module:: PySide.QtWebKit
.. _QWebFrame:

QWebFrame
*********

.. inheritance-diagram:: QWebFrame
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addToJavaScriptWindowObject<PySide.QtWebKit.QWebFrame.addToJavaScriptWindowObject>` (name, object)
*    def :meth:`addToJavaScriptWindowObject<PySide.QtWebKit.QWebFrame.addToJavaScriptWindowObject>` (name, object, ownership)
*    def :meth:`baseUrl<PySide.QtWebKit.QWebFrame.baseUrl>` ()
*    def :meth:`childFrames<PySide.QtWebKit.QWebFrame.childFrames>` ()
*    def :meth:`contentsSize<PySide.QtWebKit.QWebFrame.contentsSize>` ()
*    def :meth:`documentElement<PySide.QtWebKit.QWebFrame.documentElement>` ()
*    def :meth:`findAllElements<PySide.QtWebKit.QWebFrame.findAllElements>` (selectorQuery)
*    def :meth:`findFirstElement<PySide.QtWebKit.QWebFrame.findFirstElement>` (selectorQuery)
*    def :meth:`frameName<PySide.QtWebKit.QWebFrame.frameName>` ()
*    def :meth:`geometry<PySide.QtWebKit.QWebFrame.geometry>` ()
*    def :meth:`hasFocus<PySide.QtWebKit.QWebFrame.hasFocus>` ()
*    def :meth:`hitTestContent<PySide.QtWebKit.QWebFrame.hitTestContent>` (pos)
*    def :meth:`icon<PySide.QtWebKit.QWebFrame.icon>` ()
*    def :meth:`load<PySide.QtWebKit.QWebFrame.load>` (request[, operation=QNetworkAccessManager.GetOperation[, body=QByteArray()]])
*    def :meth:`load<PySide.QtWebKit.QWebFrame.load>` (url)
*    def :meth:`metaData<PySide.QtWebKit.QWebFrame.metaData>` ()
*    def :meth:`page<PySide.QtWebKit.QWebFrame.page>` ()
*    def :meth:`parentFrame<PySide.QtWebKit.QWebFrame.parentFrame>` ()
*    def :meth:`pos<PySide.QtWebKit.QWebFrame.pos>` ()
*    def :meth:`render<PySide.QtWebKit.QWebFrame.render>` (arg__1)
*    def :meth:`render<PySide.QtWebKit.QWebFrame.render>` (arg__1, clip)
*    def :meth:`render<PySide.QtWebKit.QWebFrame.render>` (arg__1, layer[, clip=QRegion()])
*    def :meth:`renderTreeDump<PySide.QtWebKit.QWebFrame.renderTreeDump>` ()
*    def :meth:`requestedUrl<PySide.QtWebKit.QWebFrame.requestedUrl>` ()
*    def :meth:`scroll<PySide.QtWebKit.QWebFrame.scroll>` (arg__1, arg__2)
*    def :meth:`scrollBarGeometry<PySide.QtWebKit.QWebFrame.scrollBarGeometry>` (orientation)
*    def :meth:`scrollBarMaximum<PySide.QtWebKit.QWebFrame.scrollBarMaximum>` (orientation)
*    def :meth:`scrollBarMinimum<PySide.QtWebKit.QWebFrame.scrollBarMinimum>` (orientation)
*    def :meth:`scrollBarPolicy<PySide.QtWebKit.QWebFrame.scrollBarPolicy>` (orientation)
*    def :meth:`scrollBarValue<PySide.QtWebKit.QWebFrame.scrollBarValue>` (orientation)
*    def :meth:`scrollPosition<PySide.QtWebKit.QWebFrame.scrollPosition>` ()
*    def :meth:`scrollToAnchor<PySide.QtWebKit.QWebFrame.scrollToAnchor>` (anchor)
*    def :meth:`securityOrigin<PySide.QtWebKit.QWebFrame.securityOrigin>` ()
*    def :meth:`setContent<PySide.QtWebKit.QWebFrame.setContent>` (data[, mimeType=""[, baseUrl=QUrl()]])
*    def :meth:`setFocus<PySide.QtWebKit.QWebFrame.setFocus>` ()
*    def :meth:`setHtml<PySide.QtWebKit.QWebFrame.setHtml>` (html[, baseUrl=QUrl()])
*    def :meth:`setScrollBarPolicy<PySide.QtWebKit.QWebFrame.setScrollBarPolicy>` (orientation, policy)
*    def :meth:`setScrollBarValue<PySide.QtWebKit.QWebFrame.setScrollBarValue>` (orientation, value)
*    def :meth:`setScrollPosition<PySide.QtWebKit.QWebFrame.setScrollPosition>` (pos)
*    def :meth:`setTextSizeMultiplier<PySide.QtWebKit.QWebFrame.setTextSizeMultiplier>` (factor)
*    def :meth:`setUrl<PySide.QtWebKit.QWebFrame.setUrl>` (url)
*    def :meth:`setZoomFactor<PySide.QtWebKit.QWebFrame.setZoomFactor>` (factor)
*    def :meth:`textSizeMultiplier<PySide.QtWebKit.QWebFrame.textSizeMultiplier>` ()
*    def :meth:`title<PySide.QtWebKit.QWebFrame.title>` ()
*    def :meth:`toHtml<PySide.QtWebKit.QWebFrame.toHtml>` ()
*    def :meth:`toPlainText<PySide.QtWebKit.QWebFrame.toPlainText>` ()
*    def :meth:`url<PySide.QtWebKit.QWebFrame.url>` ()
*    def :meth:`zoomFactor<PySide.QtWebKit.QWebFrame.zoomFactor>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`evaluateJavaScript<PySide.QtWebKit.QWebFrame.evaluateJavaScript>` (scriptSource)
*    def :meth:`print_<PySide.QtWebKit.QWebFrame.print_>` (printer)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`contentsSizeChanged<PySide.QtWebKit.QWebFrame.contentsSizeChanged>` (size)
*    def :meth:`iconChanged<PySide.QtWebKit.QWebFrame.iconChanged>` ()
*    def :meth:`initialLayoutCompleted<PySide.QtWebKit.QWebFrame.initialLayoutCompleted>` ()
*    def :meth:`javaScriptWindowObjectCleared<PySide.QtWebKit.QWebFrame.javaScriptWindowObjectCleared>` ()
*    def :meth:`loadFinished<PySide.QtWebKit.QWebFrame.loadFinished>` (ok)
*    def :meth:`loadStarted<PySide.QtWebKit.QWebFrame.loadStarted>` ()
*    def :meth:`pageChanged<PySide.QtWebKit.QWebFrame.pageChanged>` ()
*    def :meth:`provisionalLoad<PySide.QtWebKit.QWebFrame.provisionalLoad>` ()
*    def :meth:`titleChanged<PySide.QtWebKit.QWebFrame.titleChanged>` (title)
*    def :meth:`urlChanged<PySide.QtWebKit.QWebFrame.urlChanged>` (url)


Detailed Description
--------------------



    The :class:`PySide.QtWebKit.QWebFrame` class represents a frame in a web page.

    :class:`PySide.QtWebKit.QWebFrame` represents a frame inside a web page. Each :class:`PySide.QtWebKit.QWebPage` object contains at least one frame, the main frame, obtained using :meth:`QWebPage.mainFrame()<PySide.QtWebKit.QWebPage.mainFrame>` . Additional frames will be created for HTML ``<frame>`` or ``<iframe>`` elements.

    A frame can be loaded using :meth:`PySide.QtWebKit.QWebFrame.load` or :meth:`PySide.QtWebKit.QWebFrame.setUrl` . Alternatively, if you have the HTML content readily available, you can use :meth:`PySide.QtWebKit.QWebFrame.setHtml` instead.

    The :meth:`PySide.QtWebKit.QWebFrame.page` function returns a pointer to the web page object. See :class:`Elements of QWebView<PySide.QtWebKit.QWebView>` for an explanation of how web frames are related to a web page and web view.

    The :class:`PySide.QtWebKit.QWebFrame` class also offers methods to retrieve both the URL currently loaded by the frame (see :meth:`PySide.QtWebKit.QWebFrame.url` ) as well as the URL originally requested to be loaded (see :meth:`PySide.QtWebKit.QWebFrame.requestedUrl` ). These methods make possible the retrieval of the URL before and after a DNS resolution or a redirection occurs during the load process. The :meth:`PySide.QtWebKit.QWebFrame.requestedUrl` also matches to the URL added to the frame history ( :class:`PySide.QtWebKit.QWebHistory` ) if load is successful.

    The title of an HTML frame can be accessed with the :meth:`PySide.QtWebKit.QWebFrame.title` property. Additionally, a frame may also specify an icon, which can be accessed using the :meth:`PySide.QtWebKit.QWebFrame.icon` property. If the title or the icon changes, the corresponding :meth:`PySide.QtWebKit.QWebFrame.titleChanged` and :meth:`PySide.QtWebKit.QWebFrame.iconChanged` signals will be emitted. The :meth:`PySide.QtWebKit.QWebFrame.zoomFactor` property can be used to change the overall size of the content displayed in the frame.

    :class:`PySide.QtWebKit.QWebFrame` objects are created and controlled by the web page. You can connect to the web page's :meth:`PySide.QtWebKit.QWebPage.frameCreated` signal to be notified when a new frame is created.

    There are multiple ways to programmatically examine the contents of a frame. The :meth:`PySide.QtWebKit.QWebFrame.hitTestContent` function can be used to find elements by coordinate. For access to the underlying DOM tree, there is :meth:`PySide.QtWebKit.QWebFrame.documentElement` , :meth:`PySide.QtWebKit.QWebFrame.findAllElements` and :meth:`PySide.QtWebKit.QWebFrame.findFirstElement` .

    A :class:`PySide.QtWebKit.QWebFrame` can be printed onto a :class:`PySide.QtGui.QPrinter` using the :meth:`~PySide.QtWebKit.QWebFrame.print` function. This function is marked as a slot and can be conveniently connected to :class:`PySide.QtGui.QPrintPreviewDialog` 's :meth:`PySide.QtGui.QPrintPreviewDialog.paintRequested` signal.

    .. seealso::  :class:`PySide.QtWebKit.QWebPage` 



.. attribute:: PySide.QtWebKit.QWebFrame.RenderLayer

    This enum describes the layers available for rendering using :meth:`PySide.QtWebKit.QWebFrame.render` . The layers can be OR-ed together from the following list:

    +------------------------+------------------------------------+
    |Constant                |Description                         |
    +========================+====================================+
    |QWebFrame.ContentsLayer |The web content of the frame        |
    +------------------------+------------------------------------+
    |QWebFrame.ScrollBarLayer|The scrollbars of the frame         |
    +------------------------+------------------------------------+
    |QWebFrame.PanIconLayer  |The icon used when panning the frame|
    +------------------------+------------------------------------+
    |QWebFrame.AllLayers     |Includes all the above layers       |
    +------------------------+------------------------------------+


.. note:: This enum was introduced or modified in Qt 4.6
.. method:: PySide.QtWebKit.QWebFrame.addToJavaScriptWindowObject(name, object)


    :param name: unicode
    :param object: :class:`PySide.QtCore.QObject`




    Make ``object`` available under ``name`` from within the frame's JavaScript context. The ``object`` will be inserted as a child of the frame's window object.

    Qt properties will be exposed as JavaScript properties and slots as JavaScript methods.

    If you want to ensure that your :ref:`QObjects<qtwebkit-bridge.html>` remain accessible after loading a new URL, you should add them in a slot connected to the :meth:`PySide.QtWebKit.QWebFrame.javaScriptWindowObjectCleared` signal.

    If Javascript is not enabled for this page, then this method does nothing.

    The ``object`` will never be explicitly deleted by :ref:`QtWebKit` .



.. method:: PySide.QtWebKit.QWebFrame.addToJavaScriptWindowObject(name, object, ownership)


    :param name: unicode
    :param object: :class:`PySide.QtCore.QObject`
    :param ownership: :attr:`PySide.QtScript.QScriptEngine.ValueOwnership`







.. method:: PySide.QtWebKit.QWebFrame.baseUrl()


    :rtype: :class:`PySide.QtCore.QUrl`




    This property holds the base URL of the frame, can be used to resolve relative URLs.



.. method:: PySide.QtWebKit.QWebFrame.childFrames()


    :rtype: 




    Returns a list of all frames that are direct children of this frame.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.parentFrame` 


.. method:: PySide.QtWebKit.QWebFrame.contentsSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds the size of the contents in this frame.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.contentsSizeChanged` 


.. method:: PySide.QtWebKit.QWebFrame.contentsSizeChanged(size)


    :param size: :class:`PySide.QtCore.QSize`






.. method:: PySide.QtWebKit.QWebFrame.documentElement()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the document element of this frame.

    The document element provides access to the entire structured content of the frame.



.. method:: PySide.QtWebKit.QWebFrame.evaluateJavaScript(scriptSource)


    :param scriptSource: unicode
    :rtype: object




    Evaluates the JavaScript defined by ``scriptSource`` using this frame as context and returns the result of the last executed statement.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.addToJavaScriptWindowObject`  :meth:`PySide.QtWebKit.QWebFrame.javaScriptWindowObjectCleared` 


.. method:: PySide.QtWebKit.QWebFrame.findAllElements(selectorQuery)


    :param selectorQuery: unicode
    :rtype: :class:`PySide.QtWebKit.QWebElementCollection`




    Returns a new list of elements matching the given CSS selector ``selectorQuery`` . If there are no matching elements, an empty list is returned.

    Standard CSS2 selector syntax is used for the query.

    .. seealso::  :meth:`QWebElement.findAll()<PySide.QtWebKit.QWebElement.findAll>` 


.. method:: PySide.QtWebKit.QWebFrame.findFirstElement(selectorQuery)


    :param selectorQuery: unicode
    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the first element in the frame's document that matches the given CSS selector ``selectorQuery`` . If there is no matching element, a null element is returned.

    Standard CSS2 selector syntax is used for the query.

    .. seealso::  :meth:`QWebElement.findFirst()<PySide.QtWebKit.QWebElement.findFirst>` 


.. method:: PySide.QtWebKit.QWebFrame.frameName()


    :rtype: unicode




    The name of this frame as defined by the parent frame.



.. method:: PySide.QtWebKit.QWebFrame.geometry()


    :rtype: :class:`PySide.QtCore.QRect`




    Return the geometry of the frame relative to it's parent frame.



.. method:: PySide.QtWebKit.QWebFrame.hasFocus()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this frame has keyboard input focus; otherwise, returns false.



.. method:: PySide.QtWebKit.QWebFrame.hitTestContent(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtWebKit.QWebHitTestResult`




    Performs a hit test on the frame contents at the given position ``pos`` and returns the hit test result.



.. method:: PySide.QtWebKit.QWebFrame.icon()


    :rtype: :class:`PySide.QtGui.QIcon`




    This property holds the icon associated with this frame.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.iconChanged`  :meth:`QWebSettings.iconForUrl()<PySide.QtWebKit.QWebSettings.iconForUrl>` 


.. method:: PySide.QtWebKit.QWebFrame.iconChanged()








.. method:: PySide.QtWebKit.QWebFrame.initialLayoutCompleted()








.. method:: PySide.QtWebKit.QWebFrame.javaScriptWindowObjectCleared()








.. method:: PySide.QtWebKit.QWebFrame.load(url)


    :param url: :class:`PySide.QtCore.QUrl`




    Loads ``url`` into this frame.

    .. note::  The view remains the same until enough data has arrived to display the new ``url`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.setUrl`  :meth:`PySide.QtWebKit.QWebFrame.setHtml`  :meth:`PySide.QtWebKit.QWebFrame.setContent` 


.. method:: PySide.QtWebKit.QWebFrame.load(request[, operation=QNetworkAccessManager.GetOperation[, body=QByteArray()]])


    :param request: :class:`PySide.QtNetwork.QNetworkRequest`
    :param operation: :attr:`PySide.QtNetwork.QNetworkAccessManager.Operation`
    :param body: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtWebKit.QWebFrame.loadFinished(ok)


    :param ok: :class:`PySide.QtCore.bool`






.. method:: PySide.QtWebKit.QWebFrame.loadStarted()








.. method:: PySide.QtWebKit.QWebFrame.metaData()


    :rtype: PyObject




    Returns the meta data in this frame as a :class:`QMultiMap`

    The meta data consists of the name and content attributes of the of the ``<meta>`` tags in the HTML document.

    For example:

    ::

                <html>
                    <head>
                        <meta name="description" content="This document is a tutorial about Qt development">
                        <meta name="keywords" content="Qt, WebKit, Programming">
                    </head>
                    ...
                </html>


    Given the above HTML code the :meth:`PySide.QtWebKit.QWebFrame.metaData` function will return a map with two entries:

    +-------------+--------------------------------------------------+
    |Key          |Value                                             |
    +-------------+--------------------------------------------------+
    |"description"|"This document is a tutorial about Qt development"|
    +-------------+--------------------------------------------------+
    |"keywords"   |"Qt, WebKit, Programming"                         |
    +-------------+--------------------------------------------------+

    This function returns a multi map to support multiple meta tags with the same attribute name.



.. method:: PySide.QtWebKit.QWebFrame.page()


    :rtype: :class:`PySide.QtWebKit.QWebPage`




    The web page that contains this frame.



.. method:: PySide.QtWebKit.QWebFrame.pageChanged()








.. method:: PySide.QtWebKit.QWebFrame.parentFrame()


    :rtype: :class:`PySide.QtWebKit.QWebFrame`




    Returns the parent frame of this frame, or 0 if the frame is the web pages main frame.

    This is equivalent to qobject\_cast< :class:`PySide.QtWebKit.QWebFrame` \*>(frame-> :meth:`PySide.QtCore.QObject.parent` ).

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.childFrames` 


.. method:: PySide.QtWebKit.QWebFrame.pos()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the position of the frame relative to it's parent frame.



.. method:: PySide.QtWebKit.QWebFrame.print_(printer)


    :param printer: :class:`PySide.QtGui.QPrinter`




    Prints the frame to the given ``printer`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.render` 


.. method:: PySide.QtWebKit.QWebFrame.provisionalLoad()








.. method:: PySide.QtWebKit.QWebFrame.render(arg__1, layer[, clip=QRegion()])


    :param arg__1: :class:`PySide.QtGui.QPainter`
    :param layer: :attr:`PySide.QtWebKit.QWebFrame.RenderLayer`
    :param clip: :class:`PySide.QtGui.QRegion`




    Render the ``layer`` of the frame using ``painter`` clipping to ``clip`` .

    .. seealso::  :meth:`~PySide.QtWebKit.QWebFrame.print` 


.. method:: PySide.QtWebKit.QWebFrame.render(arg__1, clip)


    :param arg__1: :class:`PySide.QtGui.QPainter`
    :param clip: :class:`PySide.QtGui.QRegion`




    Render the frame into ``painter`` clipping to ``clip`` .



.. method:: PySide.QtWebKit.QWebFrame.render(arg__1)


    :param arg__1: :class:`PySide.QtGui.QPainter`




    Render the frame into ``painter`` .



.. method:: PySide.QtWebKit.QWebFrame.renderTreeDump()


    :rtype: unicode




    Returns a dump of the rendering tree. This is mainly useful for debugging html.



.. method:: PySide.QtWebKit.QWebFrame.requestedUrl()


    :rtype: :class:`PySide.QtCore.QUrl`




    The URL requested to loaded by the frame currently viewed. The URL may differ from the one returned by :meth:`PySide.QtWebKit.QWebFrame.url` if a DNS resolution or a redirection occurs.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.url`  :meth:`PySide.QtWebKit.QWebFrame.setUrl` 


.. method:: PySide.QtWebKit.QWebFrame.scroll(arg__1, arg__2)


    :param arg__1: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.int`




    Scrolls the frame ``dx`` pixels to the right and ``dy`` pixels downward. Both ``dx`` and ``dy`` may be negative.

    .. seealso::  :meth:`QWebFrame.scrollPosition<PySide.QtWebKit.QWebFrame.scrollPosition>` 


.. method:: PySide.QtWebKit.QWebFrame.scrollBarGeometry(orientation)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :rtype: :class:`PySide.QtCore.QRect`







.. method:: PySide.QtWebKit.QWebFrame.scrollBarMaximum(orientation)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtWebKit.QWebFrame.scrollBarMinimum(orientation)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtWebKit.QWebFrame.scrollBarPolicy(orientation)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :rtype: :attr:`PySide.QtCore.Qt.ScrollBarPolicy`







.. method:: PySide.QtWebKit.QWebFrame.scrollBarValue(orientation)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtWebKit.QWebFrame.scrollPosition()


    :rtype: :class:`PySide.QtCore.QPoint`




    This property holds the position the frame is currently scrolled to..



.. method:: PySide.QtWebKit.QWebFrame.scrollToAnchor(anchor)


    :param anchor: unicode




    Scrolls the frame to the given ``anchor`` name.



.. method:: PySide.QtWebKit.QWebFrame.securityOrigin()


    :rtype: :class:`PySide.QtWebKit.QWebSecurityOrigin`




    Returns the frame's security origin.



.. method:: PySide.QtWebKit.QWebFrame.setContent(data[, mimeType=""[, baseUrl=QUrl()]])


    :param data: :class:`PySide.QtCore.QByteArray`
    :param mimeType: unicode
    :param baseUrl: :class:`PySide.QtCore.QUrl`




    Sets the content of this frame to the specified content ``data`` . If the ``mimeType`` argument is empty it is currently assumed that the content is HTML but in future versions we may introduce auto-detection.

    External objects referenced in the content are located relative to ``baseUrl`` .

    The ``data`` is loaded immediately; external objects are loaded asynchronously.

    .. note::  This method will not affect session or global history for the frame.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.toHtml`  :meth:`PySide.QtWebKit.QWebFrame.setHtml` 


.. method:: PySide.QtWebKit.QWebFrame.setFocus()






    Gives keyboard input focus to this frame.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.hasFocus` 


.. method:: PySide.QtWebKit.QWebFrame.setHtml(html[, baseUrl=QUrl()])


    :param html: unicode
    :param baseUrl: :class:`PySide.QtCore.QUrl`




    Sets the content of this frame to ``html`` . ``baseUrl`` is optional and used to resolve relative URLs in the document, such as referenced images or stylesheets.

    The ``html`` is loaded immediately; external objects are loaded asynchronously.

    If a script in the ``html`` runs longer than the default script timeout (currently 10 seconds), for example due to being blocked by a modal JavaScript alert dialog, this method will return as soon as possible after the timeout and any subsequent ``html`` will be loaded asynchronously.

    When using this method WebKit assumes that external resources such as JavaScript programs or style sheets are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the charset attribute of the HTML script tag. It is also possible for the encoding to be specified by web server.

    .. note::  This method will not affect session or global history for the frame.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.toHtml`  :meth:`PySide.QtWebKit.QWebFrame.setContent` 


.. method:: PySide.QtWebKit.QWebFrame.setScrollBarPolicy(orientation, policy)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :param policy: :attr:`PySide.QtCore.Qt.ScrollBarPolicy`







.. method:: PySide.QtWebKit.QWebFrame.setScrollBarValue(orientation, value)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :param value: :class:`PySide.QtCore.int`







.. method:: PySide.QtWebKit.QWebFrame.setScrollPosition(pos)


    :param pos: :class:`PySide.QtCore.QPoint`




    This property holds the position the frame is currently scrolled to..



.. method:: PySide.QtWebKit.QWebFrame.setTextSizeMultiplier(factor)


    :param factor: :class:`PySide.QtCore.qreal`




    This property holds the scaling factor for all text in the frame.

    Use setZoomFactor instead, in combination with the ZoomTextOnly attribute in :class:`PySide.QtWebKit.QWebSettings` .

    .. note::  Setting this property also enables the ZoomTextOnly attribute in :class:`PySide.QtWebKit.QWebSettings` .



.. method:: PySide.QtWebKit.QWebFrame.setUrl(url)


    :param url: :class:`PySide.QtCore.QUrl`




    This property holds the url of the frame currently viewed.

    Setting this property clears the view and loads the URL.

    By default, this property contains an empty, invalid URL.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.urlChanged` 


.. method:: PySide.QtWebKit.QWebFrame.setZoomFactor(factor)


    :param factor: :class:`PySide.QtCore.qreal`




    This property holds the zoom factor for the frame.



.. method:: PySide.QtWebKit.QWebFrame.textSizeMultiplier()


    :rtype: :class:`PySide.QtCore.qreal`




    This property holds the scaling factor for all text in the frame.

    Use setZoomFactor instead, in combination with the ZoomTextOnly attribute in :class:`PySide.QtWebKit.QWebSettings` .

    .. note::  Setting this property also enables the ZoomTextOnly attribute in :class:`PySide.QtWebKit.QWebSettings` .



.. method:: PySide.QtWebKit.QWebFrame.title()


    :rtype: unicode




    This property holds the title of the frame as defined by the HTML &lt;title&gt; element.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.titleChanged` 


.. method:: PySide.QtWebKit.QWebFrame.titleChanged(title)


    :param title: unicode






.. method:: PySide.QtWebKit.QWebFrame.toHtml()


    :rtype: unicode




    Returns the frame's content as HTML, enclosed in HTML and BODY tags.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.setHtml`  :meth:`PySide.QtWebKit.QWebFrame.toPlainText` 


.. method:: PySide.QtWebKit.QWebFrame.toPlainText()


    :rtype: unicode




    Returns the content of this frame converted to plain text, completely stripped of all HTML formatting.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.toHtml` 


.. method:: PySide.QtWebKit.QWebFrame.url()


    :rtype: :class:`PySide.QtCore.QUrl`




    This property holds the url of the frame currently viewed.

    Setting this property clears the view and loads the URL.

    By default, this property contains an empty, invalid URL.

    .. seealso::  :meth:`PySide.QtWebKit.QWebFrame.urlChanged` 


.. method:: PySide.QtWebKit.QWebFrame.urlChanged(url)


    :param url: :class:`PySide.QtCore.QUrl`






.. method:: PySide.QtWebKit.QWebFrame.zoomFactor()


    :rtype: :class:`PySide.QtCore.qreal`




    This property holds the zoom factor for the frame.




