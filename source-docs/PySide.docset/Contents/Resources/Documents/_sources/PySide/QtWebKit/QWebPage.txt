.. module:: PySide.QtWebKit
.. _QWebPage:

QWebPage
********

.. inheritance-diagram:: QWebPage
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`action<PySide.QtWebKit.QWebPage.action>` (action)
*    def :meth:`bytesReceived<PySide.QtWebKit.QWebPage.bytesReceived>` ()
*    def :meth:`createStandardContextMenu<PySide.QtWebKit.QWebPage.createStandardContextMenu>` ()
*    def :meth:`currentFrame<PySide.QtWebKit.QWebPage.currentFrame>` ()
*    def :meth:`findText<PySide.QtWebKit.QWebPage.findText>` (subString[, options=0])
*    def :meth:`focusNextPrevChild<PySide.QtWebKit.QWebPage.focusNextPrevChild>` (next)
*    def :meth:`forwardUnsupportedContent<PySide.QtWebKit.QWebPage.forwardUnsupportedContent>` ()
*    def :meth:`frameAt<PySide.QtWebKit.QWebPage.frameAt>` (pos)
*    def :meth:`hasSelection<PySide.QtWebKit.QWebPage.hasSelection>` ()
*    def :meth:`history<PySide.QtWebKit.QWebPage.history>` ()
*    def :meth:`inputMethodQuery<PySide.QtWebKit.QWebPage.inputMethodQuery>` (property)
*    def :meth:`isContentEditable<PySide.QtWebKit.QWebPage.isContentEditable>` ()
*    def :meth:`isModified<PySide.QtWebKit.QWebPage.isModified>` ()
*    def :meth:`linkDelegationPolicy<PySide.QtWebKit.QWebPage.linkDelegationPolicy>` ()
*    def :meth:`mainFrame<PySide.QtWebKit.QWebPage.mainFrame>` ()
*    def :meth:`networkAccessManager<PySide.QtWebKit.QWebPage.networkAccessManager>` ()
*    def :meth:`palette<PySide.QtWebKit.QWebPage.palette>` ()
*    def :meth:`pluginFactory<PySide.QtWebKit.QWebPage.pluginFactory>` ()
*    def :meth:`preferredContentsSize<PySide.QtWebKit.QWebPage.preferredContentsSize>` ()
*    def :meth:`qt_metacall<PySide.QtWebKit.QWebPage.qt_metacall>` ()
*    def :meth:`selectedHtml<PySide.QtWebKit.QWebPage.selectedHtml>` ()
*    def :meth:`selectedText<PySide.QtWebKit.QWebPage.selectedText>` ()
*    def :meth:`setActualVisibleContentRect<PySide.QtWebKit.QWebPage.setActualVisibleContentRect>` (rect)
*    def :meth:`setContentEditable<PySide.QtWebKit.QWebPage.setContentEditable>` (editable)
*    def :meth:`setForwardUnsupportedContent<PySide.QtWebKit.QWebPage.setForwardUnsupportedContent>` (forward)
*    def :meth:`setLinkDelegationPolicy<PySide.QtWebKit.QWebPage.setLinkDelegationPolicy>` (policy)
*    def :meth:`setNetworkAccessManager<PySide.QtWebKit.QWebPage.setNetworkAccessManager>` (manager)
*    def :meth:`setPalette<PySide.QtWebKit.QWebPage.setPalette>` (palette)
*    def :meth:`setPluginFactory<PySide.QtWebKit.QWebPage.setPluginFactory>` (factory)
*    def :meth:`setPreferredContentsSize<PySide.QtWebKit.QWebPage.setPreferredContentsSize>` (size)
*    def :meth:`setView<PySide.QtWebKit.QWebPage.setView>` (view)
*    def :meth:`setViewportSize<PySide.QtWebKit.QWebPage.setViewportSize>` (size)
*    def :meth:`settings<PySide.QtWebKit.QWebPage.settings>` ()
*    def :meth:`supportedContentTypes<PySide.QtWebKit.QWebPage.supportedContentTypes>` ()
*    def :meth:`supportsContentType<PySide.QtWebKit.QWebPage.supportsContentType>` (mimeType)
*    def :meth:`swallowContextMenuEvent<PySide.QtWebKit.QWebPage.swallowContextMenuEvent>` (event)
*    def :meth:`totalBytes<PySide.QtWebKit.QWebPage.totalBytes>` ()
*    def :meth:`undoStack<PySide.QtWebKit.QWebPage.undoStack>` ()
*    def :meth:`updatePositionDependentActions<PySide.QtWebKit.QWebPage.updatePositionDependentActions>` (pos)
*    def :meth:`view<PySide.QtWebKit.QWebPage.view>` ()
*    def :meth:`viewportSize<PySide.QtWebKit.QWebPage.viewportSize>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`acceptNavigationRequest<PySide.QtWebKit.QWebPage.acceptNavigationRequest>` (frame, request, type)
*    def :meth:`chooseFile<PySide.QtWebKit.QWebPage.chooseFile>` (originatingFrame, oldFile)
*    def :meth:`createPlugin<PySide.QtWebKit.QWebPage.createPlugin>` (classid, url, paramNames, paramValues)
*    def :meth:`createWindow<PySide.QtWebKit.QWebPage.createWindow>` (type)
*    def :meth:`extension<PySide.QtWebKit.QWebPage.extension>` (extension[, option=0[, output=0]])
*    def :meth:`javaScriptAlert<PySide.QtWebKit.QWebPage.javaScriptAlert>` (originatingFrame, msg)
*    def :meth:`javaScriptConfirm<PySide.QtWebKit.QWebPage.javaScriptConfirm>` (originatingFrame, msg)
*    def :meth:`javaScriptConsoleMessage<PySide.QtWebKit.QWebPage.javaScriptConsoleMessage>` (message, lineNumber, sourceID)
*    def :meth:`javaScriptPrompt<PySide.QtWebKit.QWebPage.javaScriptPrompt>` (originatingFrame, msg, defaultValue)
*    def :meth:`supportsExtension<PySide.QtWebKit.QWebPage.supportsExtension>` (extension)
*    def :meth:`triggerAction<PySide.QtWebKit.QWebPage.triggerAction>` (action[, checked=false])
*    def :meth:`userAgentForUrl<PySide.QtWebKit.QWebPage.userAgentForUrl>` (url)


Slots
^^^^^
.. container:: function_list

*    def :meth:`shouldInterruptJavaScript<PySide.QtWebKit.QWebPage.shouldInterruptJavaScript>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`applicationCacheQuotaExceeded<PySide.QtWebKit.QWebPage.applicationCacheQuotaExceeded>` (origin, defaultOriginQuota)
*    def :meth:`contentsChanged<PySide.QtWebKit.QWebPage.contentsChanged>` ()
*    def :meth:`databaseQuotaExceeded<PySide.QtWebKit.QWebPage.databaseQuotaExceeded>` (frame, databaseName)
*    def :meth:`downloadRequested<PySide.QtWebKit.QWebPage.downloadRequested>` (request)
*    def :meth:`frameCreated<PySide.QtWebKit.QWebPage.frameCreated>` (frame)
*    def :meth:`geometryChangeRequested<PySide.QtWebKit.QWebPage.geometryChangeRequested>` (geom)
*    def :meth:`linkClicked<PySide.QtWebKit.QWebPage.linkClicked>` (url)
*    def :meth:`linkHovered<PySide.QtWebKit.QWebPage.linkHovered>` (link, title, textContent)
*    def :meth:`loadFinished<PySide.QtWebKit.QWebPage.loadFinished>` (ok)
*    def :meth:`loadProgress<PySide.QtWebKit.QWebPage.loadProgress>` (progress)
*    def :meth:`loadStarted<PySide.QtWebKit.QWebPage.loadStarted>` ()
*    def :meth:`menuBarVisibilityChangeRequested<PySide.QtWebKit.QWebPage.menuBarVisibilityChangeRequested>` (visible)
*    def :meth:`microFocusChanged<PySide.QtWebKit.QWebPage.microFocusChanged>` ()
*    def :meth:`printRequested<PySide.QtWebKit.QWebPage.printRequested>` (frame)
*    def :meth:`repaintRequested<PySide.QtWebKit.QWebPage.repaintRequested>` (dirtyRect)
*    def :meth:`restoreFrameStateRequested<PySide.QtWebKit.QWebPage.restoreFrameStateRequested>` (frame)
*    def :meth:`saveFrameStateRequested<PySide.QtWebKit.QWebPage.saveFrameStateRequested>` (frame, item)
*    def :meth:`scrollRequested<PySide.QtWebKit.QWebPage.scrollRequested>` (dx, dy, scrollViewRect)
*    def :meth:`selectionChanged<PySide.QtWebKit.QWebPage.selectionChanged>` ()
*    def :meth:`statusBarMessage<PySide.QtWebKit.QWebPage.statusBarMessage>` (text)
*    def :meth:`statusBarVisibilityChangeRequested<PySide.QtWebKit.QWebPage.statusBarVisibilityChangeRequested>` (visible)
*    def :meth:`toolBarVisibilityChangeRequested<PySide.QtWebKit.QWebPage.toolBarVisibilityChangeRequested>` (visible)
*    def :meth:`unsupportedContent<PySide.QtWebKit.QWebPage.unsupportedContent>` (reply)
*    def :meth:`viewportChangeRequested<PySide.QtWebKit.QWebPage.viewportChangeRequested>` ()
*    def :meth:`windowCloseRequested<PySide.QtWebKit.QWebPage.windowCloseRequested>` ()


Detailed Description
--------------------



    The :class:`PySide.QtWebKit.QWebPage` class provides an object to view and edit web documents.

    :class:`PySide.QtWebKit.QWebPage` holds a main frame responsible for web content, settings, the history of navigated links and actions. This class can be used, together with :class:`PySide.QtWebKit.QWebFrame` , to provide functionality like :class:`PySide.QtWebKit.QWebView` in a widget-less environment.

    :class:`PySide.QtWebKit.QWebPage` 's API is very similar to :class:`PySide.QtWebKit.QWebView` , as you are still provided with common functions like :meth:`PySide.QtWebKit.QWebPage.action` (known as :meth:`PySide.QtWebKit.QWebView.pageAction` () in :class:`PySide.QtWebKit.QWebView` ), :meth:`PySide.QtWebKit.QWebPage.triggerAction` , :meth:`PySide.QtWebKit.QWebPage.findText` and :meth:`PySide.QtWebKit.QWebPage.settings` . More :class:`PySide.QtWebKit.QWebView` -like functions can be found in the main frame of :class:`PySide.QtWebKit.QWebPage` , obtained via the :meth:`PySide.QtWebKit.QWebPage.mainFrame` function. For example, the :meth:`PySide.QtWebKit.QWebFrame.load` (), :meth:`PySide.QtWebKit.QWebFrame.setUrl` () and :meth:`PySide.QtWebKit.QWebFrame.setHtml` () functions for :class:`PySide.QtWebKit.QWebPage` can be accessed using :class:`PySide.QtWebKit.QWebFrame` .

    The :meth:`PySide.QtWebKit.QWebPage.loadStarted` signal is emitted when the page begins to load.The :meth:`PySide.QtWebKit.QWebPage.loadProgress` signal, on the other hand, is emitted whenever an element of the web page completes loading, such as an embedded image, a script, etc. Finally, the :meth:`PySide.QtWebKit.QWebPage.loadFinished` signal is emitted when the page contents are loaded completely, independent of script execution or page rendering. Its argument, either true or false, indicates whether or not the load operation succeeded.

    .. _PySide.QtWebKit.QWebPage_using-qwebpage-in-a-widget-less-environment:



Using QWebPage in a Widget-less Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Before you begin painting a :class:`PySide.QtWebKit.QWebPage` object, you need to set the size of the viewport by calling :meth:`PySide.QtWebKit.QWebPage.setViewportSize` . Then, you invoke the main frame's render function ( :meth:`QWebFrame.render()<PySide.QtWebKit.QWebFrame.render>` ). An example of this is shown in the code snippet below.

    Suppose we have a ``Thumbnail`` class as follows:

    ::

        class Thumbnailer (QObject):
            def __init__(self, url):

                QObject.__init__(self)
                self.page = QWebPage()
                self.page.mainFrame().load(url)
                page.loadFinished[bool].connect(self.render)


            finished = Signal()


            def render(self):
                self.page.setViewportSize(self.page.mainFrame().contentsSize())
                image = QImage(self.page.viewportSize(), QImage.Format_ARGB32)
                painter = QPainter(image)

                self.page.mainFrame().render(painter)
                painter.end()

                thumbnail = image.scaled(400, 400)
                thumbnail.save("thumbnail.png")

                self.finished.emit()



    The ``Thumbnail`` 's constructor takes in a ``url`` . We connect our :class:`PySide.QtWebKit.QWebPage` object's :meth:`PySide.QtWebKit.QWebPage.loadFinished` signal to our private slot, ``render()`` .

    ::

                QObject.__init__(self)
                self.page = QWebPage()
                self.page.mainFrame().load(url)
                page.loadFinished[bool].connect(self.render)


    The ``render()`` function shows how we can paint a thumbnail using a :class:`PySide.QtWebKit.QWebPage` object.

    ::

            def render(self):
                self.page.setViewportSize(self.page.mainFrame().contentsSize())
                image = QImage(self.page.viewportSize(), QImage.Format_ARGB32)
                painter = QPainter(image)

                self.page.mainFrame().render(painter)
                painter.end()

                thumbnail = image.scaled(400, 400)
                thumbnail.save("thumbnail.png")

                self.finished.emit()


    We begin by setting the :meth:`PySide.QtWebKit.QWebPage.viewportSize` and then we instantiate a :class:`PySide.QtGui.QImage` object, ``image`` , with the same size as our :meth:`PySide.QtWebKit.QWebPage.viewportSize` . This image is then sent as a parameter to ``painter`` . Next, we render the contents of the main frame and its subframes into ``painter`` . Finally, we save the scaled image.

    .. seealso::  :class:`PySide.QtWebKit.QWebFrame` 

.. class:: QWebPage([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs an empty :class:`PySide.QtWebKit.QWebPage` with parent ``parent`` .


.. attribute:: PySide.QtWebKit.QWebPage.ErrorDomain

    This enum describes the domain of an :class:`~PySide.QtWebKit.ErrorPageExtensionOption` object (i.e. the layer in which the error occurred).

    +------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant          |Description                                                                                                                                                  |
    +==================+=============================================================================================================================================================+
    |QWebPage.QtNetwork|The error occurred in the :attr:`QtNetwork<QWebPage.ErrorDomain>` layer; the error code is of type :attr:`QNetworkReply.NetworkError` .                      |
    +------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.Http     |The error occurred in the HTTP layer; the error code is a HTTP status code (see :attr:`QNetworkRequest.HttpStatusCodeAttribute<QNetworkRequest.Attribute>` ).|
    +------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.WebKit   |The error is an internal :attr:`WebKit<QWebPage.ErrorDomain>` error.                                                                                         |
    +------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. note:: This enum was introduced or modified in Qt 4.6
.. attribute:: PySide.QtWebKit.QWebPage.NavigationType

    This enum describes the types of navigation available when browsing through hyperlinked documents.

    +--------------------------------------+--------------------------------------------------------------------------------------+
    |Constant                              |Description                                                                           |
    +======================================+======================================================================================+
    |QWebPage.NavigationTypeLinkClicked    |The user clicked on a link or pressed return on a focused link.                       |
    +--------------------------------------+--------------------------------------------------------------------------------------+
    |QWebPage.NavigationTypeFormSubmitted  |The user activated a submit button for an HTML form.                                  |
    +--------------------------------------+--------------------------------------------------------------------------------------+
    |QWebPage.NavigationTypeBackOrForward  |Navigation to a previously shown document in the back or forward history is requested.|
    +--------------------------------------+--------------------------------------------------------------------------------------+
    |QWebPage.NavigationTypeReload         |The user activated the reload action.                                                 |
    +--------------------------------------+--------------------------------------------------------------------------------------+
    |QWebPage.NavigationTypeFormResubmitted|An HTML form was submitted a second time.                                             |
    +--------------------------------------+--------------------------------------------------------------------------------------+
    |QWebPage.NavigationTypeOther          |A navigation to another document using a method not listed above.                     |
    +--------------------------------------+--------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.acceptNavigationRequest` 

.. attribute:: PySide.QtWebKit.QWebPage.WebAction

    This enum describes the types of action which can be performed on the web page.

    Actions only have an effect when they are applicable. The availability of actions can be be determined by checking :meth:`PySide.QtGui.QAction.isEnabled` on the action returned by :meth:`PySide.QtWebKit.QWebPage.action` .

    One method of enabling the text editing, cursor movement, and text selection actions is by setting :meth:`~PySide.QtWebKit.QWebPage.contentEditable` to true.

    +------------------------------------+----------------------------------------------------------------------------------+
    |Constant                            |Description                                                                       |
    +====================================+==================================================================================+
    |QWebPage.NoWebAction                |No action is triggered.                                                           |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.OpenLink                   |Open the current link.                                                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.OpenLinkInNewWindow        |Open the current link in a new window.                                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.OpenFrameInNewWindow       |Replicate the current frame in a new window.                                      |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.DownloadLinkToDisk         |Download the current link to the disk.                                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.CopyLinkToClipboard        |Copy the current link to the clipboard.                                           |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.OpenImageInNewWindow       |Open the highlighted image in a new window.                                       |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.DownloadImageToDisk        |Download the highlighted image to the disk.                                       |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.CopyImageToClipboard       |Copy the highlighted image to the clipboard.                                      |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Back                       |Navigate back in the history of navigated links.                                  |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Forward                    |Navigate forward in the history of navigated links.                               |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Stop                       |Stop loading the current page.                                                    |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.StopScheduledPageRefresh   |Stop all pending page refresh/redirect requests.                                  |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Reload                     |Reload the current page.                                                          |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.ReloadAndBypassCache       |Reload the current page, but do not use any local cache. (Added in Qt 4.6)        |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Cut                        |Cut the content currently selected into the clipboard.                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Copy                       |Copy the content currently selected into the clipboard.                           |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Paste                      |Paste content from the clipboard.                                                 |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Undo                       |Undo the last editing action.                                                     |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Redo                       |Redo the last editing action.                                                     |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToNextChar             |Move the cursor to the next character.                                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToPreviousChar         |Move the cursor to the previous character.                                        |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToNextWord             |Move the cursor to the next word.                                                 |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToPreviousWord         |Move the cursor to the previous word.                                             |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToNextLine             |Move the cursor to the next line.                                                 |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToPreviousLine         |Move the cursor to the previous line.                                             |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToStartOfLine          |Move the cursor to the start of the line.                                         |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToEndOfLine            |Move the cursor to the end of the line.                                           |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToStartOfBlock         |Move the cursor to the start of the block.                                        |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToEndOfBlock           |Move the cursor to the end of the block.                                          |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToStartOfDocument      |Move the cursor to the start of the document.                                     |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.MoveToEndOfDocument        |Move the cursor to the end of the document.                                       |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectNextChar             |Select to the next character.                                                     |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectPreviousChar         |Select to the previous character.                                                 |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectNextWord             |Select to the next word.                                                          |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectPreviousWord         |Select to the previous word.                                                      |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectNextLine             |Select to the next line.                                                          |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectPreviousLine         |Select to the previous line.                                                      |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectStartOfLine          |Select to the start of the line.                                                  |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectEndOfLine            |Select to the end of the line.                                                    |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectStartOfBlock         |Select to the start of the block.                                                 |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectEndOfBlock           |Select to the end of the block.                                                   |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectStartOfDocument      |Select to the start of the document.                                              |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectEndOfDocument        |Select to the end of the document.                                                |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.DeleteStartOfWord          |Delete to the start of the word.                                                  |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.DeleteEndOfWord            |Delete to the end of the word.                                                    |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SetTextDirectionDefault    |Set the text direction to the default direction.                                  |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SetTextDirectionLeftToRight|Set the text direction to left-to-right.                                          |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SetTextDirectionRightToLeft|Set the text direction to right-to-left.                                          |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.ToggleBold                 |Toggle the formatting between bold and normal weight.                             |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.ToggleItalic               |Toggle the formatting between italic and normal style.                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.ToggleUnderline            |Toggle underlining.                                                               |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.InspectElement             |Show the Web Inspector with the currently highlighted HTML element.               |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.InsertParagraphSeparator   |Insert a new paragraph.                                                           |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.InsertLineSeparator        |Insert a new line.                                                                |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.SelectAll                  |Selects all content.                                                              |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.PasteAndMatchStyle         |Paste content from the clipboard with current style.                              |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.RemoveFormat               |Removes formatting and style.                                                     |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.ToggleStrikethrough        |Toggle the formatting between strikethrough and normal style.                     |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.ToggleSubscript            |Toggle the formatting between subscript and baseline.                             |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.ToggleSuperscript          |Toggle the formatting between supercript and baseline.                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.InsertUnorderedList        |Toggles the selection between an ordered list and a normal block.                 |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.InsertOrderedList          |Toggles the selection between an ordered list and a normal block.                 |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Indent                     |Increases the indentation of the currently selected format block by one increment.|
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.Outdent                    |Decreases the indentation of the currently selected format block by one increment.|
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.AlignCenter                |Applies center alignment to content.                                              |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.AlignJustified             |Applies full justification to content.                                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.AlignLeft                  |Applies left justification to content.                                            |
    +------------------------------------+----------------------------------------------------------------------------------+
    |QWebPage.AlignRight                 |Applies right justification to content.                                           |
    +------------------------------------+----------------------------------------------------------------------------------+


.. attribute:: PySide.QtWebKit.QWebPage.WebWindowType

    This enum describes the types of window that can be created by the :meth:`PySide.QtWebKit.QWebPage.createWindow` function.

    +-------------------------+-------------------------------------------+
    |Constant                 |Description                                |
    +=========================+===========================================+
    |QWebPage.WebBrowserWindow|The window is a regular web browser window.|
    +-------------------------+-------------------------------------------+
    |QWebPage.WebModalDialog  |The window acts as modal dialog.           |
    +-------------------------+-------------------------------------------+


.. attribute:: PySide.QtWebKit.QWebPage.FindFlag

    This enum describes the options available to the :meth:`PySide.QtWebKit.QWebPage.findText` function. The options can be OR-ed together from the following list:

    +--------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                        |Description                                                                                                                                                  |
    +================================+=============================================================================================================================================================+
    |QWebPage.FindBackward           |Searches backwards instead of forwards.                                                                                                                      |
    +--------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.FindCaseSensitively    |By default :meth:`PySide.QtWebKit.QWebPage.findText` works case insensitive. Specifying this option changes the behaviour to a case sensitive find operation.|
    +--------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.FindWrapsAroundDocument|Makes :meth:`PySide.QtWebKit.QWebPage.findText` restart from the beginning of the document if the end was reached and the text was not found.                |
    +--------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.HighlightAllOccurrences|Highlights all existing occurrences of a specific string.                                                                                                    |
    +--------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtWebKit.QWebPage.Extension

    This enum describes the types of extensions that the page can support. Before using these extensions, you should verify that the extension is supported by calling :meth:`PySide.QtWebKit.QWebPage.supportsExtension` .

    +-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                             |Description                                                                                                                                                                                                                                                           |
    +=====================================+======================================================================================================================================================================================================================================================================+
    |QWebPage.ChooseMultipleFilesExtension|Whether the web page supports multiple file selection. This extension is invoked when the web content requests one or more file names, for example as a result of the user clicking on a "file upload" button in a HTML form where multiple file selection is allowed.|
    +-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.ErrorPageExtension          |Whether the web page can provide an error page when loading fails. (introduced in Qt 4.6)                                                                                                                                                                             |
    +-------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :class:`~PySide.QtWebKit.ChooseMultipleFilesExtensionOption`  :class:`~PySide.QtWebKit.ChooseMultipleFilesExtensionReturn`  :class:`~PySide.QtWebKit.ErrorPageExtensionOption`  :class:`~PySide.QtWebKit.ErrorPageExtensionReturn` 

.. attribute:: PySide.QtWebKit.QWebPage.LinkDelegationPolicy

    This enum defines the delegation policies a webpage can have when activating links and emitting the :meth:`PySide.QtWebKit.QWebPage.linkClicked` signal.

    +------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                      |Description                                                                                                                                                                                       |
    +==============================+==================================================================================================================================================================================================+
    |QWebPage.DontDelegateLinks    |No links are delegated. Instead, :class:`PySide.QtWebKit.QWebPage` tries to handle them all.                                                                                                      |
    +------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.DelegateExternalLinks|When activating links that point to documents not stored on the local filesystem or an equivalent - such as the Qt resource system - then :meth:`PySide.QtWebKit.QWebPage.linkClicked` is emitted.|
    +------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QWebPage.DelegateAllLinks     |Whenever a link is activated the :meth:`PySide.QtWebKit.QWebPage.linkClicked` signal is emitted.                                                                                                  |
    +------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`QWebPage.linkDelegationPolicy<PySide.QtWebKit.QWebPage.linkDelegationPolicy>` 

.. method:: PySide.QtWebKit.QWebPage.acceptNavigationRequest(frame, request, type)


    :param frame: :class:`PySide.QtWebKit.QWebFrame`
    :param request: :class:`PySide.QtNetwork.QNetworkRequest`
    :param type: :attr:`PySide.QtWebKit.QWebPage.NavigationType`
    :rtype: :class:`PySide.QtCore.bool`




    This function is called whenever :attr:`WebKit<QWebPage.ErrorDomain>` requests to navigate ``frame`` to the resource specified by ``request`` by means of the specified navigation type ``type`` .

    If ``frame`` is a null pointer then navigation to a new window is requested. If the request is accepted :meth:`PySide.QtWebKit.QWebPage.createWindow` will be called.

    The default implementation interprets the page's :meth:`PySide.QtWebKit.QWebPage.linkDelegationPolicy` and emits linkClicked accordingly or returns true to let :class:`PySide.QtWebKit.QWebPage` handle the navigation itself.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.createWindow` 


.. method:: PySide.QtWebKit.QWebPage.action(action)


    :param action: :attr:`PySide.QtWebKit.QWebPage.WebAction`
    :rtype: :class:`PySide.QtGui.QAction`




    Returns a :class:`PySide.QtGui.QAction` for the specified :attr:`QWebPage.WebAction` ``action`` .

    The action is owned by the :class:`PySide.QtWebKit.QWebPage` but you can customize the look by changing its properties.

    :class:`PySide.QtWebKit.QWebPage` also takes care of implementing the action, so that upon triggering the corresponding action is performed on the page.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.triggerAction` 


.. method:: PySide.QtWebKit.QWebPage.applicationCacheQuotaExceeded(origin, defaultOriginQuota)


    :param origin: :class:`PySide.QtWebKit.QWebSecurityOrigin`
    :param defaultOriginQuota: :class:`PySide.QtCore.quint64`






.. method:: PySide.QtWebKit.QWebPage.bytesReceived()


    :rtype: :class:`PySide.QtCore.quint64`




    Returns the number of bytes that were received from the network to render the current page.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.totalBytes`  :meth:`PySide.QtWebKit.QWebPage.loadProgress` 


.. method:: PySide.QtWebKit.QWebPage.chooseFile(originatingFrame, oldFile)


    :param originatingFrame: :class:`PySide.QtWebKit.QWebFrame`
    :param oldFile: unicode
    :rtype: unicode




    This function is called when the web content requests a file name, for example as a result of the user clicking on a "file upload" button in a HTML form.

    A suggested filename may be provided in ``suggestedFile`` . The frame originating the request is provided as ``parentFrame`` .

    .. seealso::  :attr:`ChooseMultipleFilesExtension<QWebPage.Extension>` 


.. method:: PySide.QtWebKit.QWebPage.contentsChanged()








.. method:: PySide.QtWebKit.QWebPage.createPlugin(classid, url, paramNames, paramValues)


    :param classid: unicode
    :param url: :class:`PySide.QtCore.QUrl`
    :param paramNames: list of strings
    :param paramValues: list of strings
    :rtype: :class:`PySide.QtCore.QObject`




    This function is called whenever :attr:`WebKit<QWebPage.ErrorDomain>` encounters a HTML object element with type "application/x-qt-plugin". It is called regardless of the value of :attr:`QWebSettings.PluginsEnabled<QWebSettings.WebAttribute>` . The ``classid`` , ``url`` , ``paramNames`` and ``paramValues`` correspond to the HTML object element attributes and child elements to configure the embeddable object.



.. method:: PySide.QtWebKit.QWebPage.createStandardContextMenu()


    :rtype: :class:`PySide.QtGui.QMenu`




    This function creates the standard context menu which is shown when the user clicks on the web page with the right mouse button. It is called from the default contextMenuEvent() handler. The popup menu's ownership is transferred to the caller.



.. method:: PySide.QtWebKit.QWebPage.createWindow(type)


    :param type: :attr:`PySide.QtWebKit.QWebPage.WebWindowType`
    :rtype: :class:`PySide.QtWebKit.QWebPage`




    This function is called whenever :attr:`WebKit<QWebPage.ErrorDomain>` wants to create a new window of the given ``type`` , for example when a JavaScript program requests to open a document in a new window.

    If the new window can be created, the new window's :class:`PySide.QtWebKit.QWebPage` is returned; otherwise a null pointer is returned.

    If the view associated with the web page is a :class:`PySide.QtWebKit.QWebView` object, then the default implementation forwards the request to :class:`PySide.QtWebKit.QWebView` 's :meth:`PySide.QtWebKit.QWebPage.createWindow` function; otherwise it returns a null pointer.

    If ``type`` is :attr:`WebModalDialog<QWebPage.WebWindowType>` , the application must call setWindowModality( :attr:`Qt.ApplicationModal<Qt.WindowModality>` ) on the new window.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.acceptNavigationRequest` 


.. method:: PySide.QtWebKit.QWebPage.currentFrame()


    :rtype: :class:`PySide.QtWebKit.QWebFrame`




    Returns the frame currently active.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.mainFrame`  :meth:`PySide.QtWebKit.QWebPage.frameCreated` 


.. method:: PySide.QtWebKit.QWebPage.databaseQuotaExceeded(frame, databaseName)


    :param frame: :class:`PySide.QtWebKit.QWebFrame`
    :param databaseName: unicode






.. method:: PySide.QtWebKit.QWebPage.downloadRequested(request)


    :param request: :class:`PySide.QtNetwork.QNetworkRequest`






.. method:: PySide.QtWebKit.QWebPage.extension(extension[, option=0[, output=0]])


    :param extension: :attr:`PySide.QtWebKit.QWebPage.Extension`
    :param option: :class:`PySide.QtWebKit.QWebPage::ExtensionOption`
    :param output: :class:`PySide.QtWebKit.QWebPage::ExtensionReturn`
    :rtype: :class:`PySide.QtCore.bool`




    This virtual function can be reimplemented in a :class:`PySide.QtWebKit.QWebPage` subclass to provide support for extensions. The ``option`` argument is provided as input to the extension; the output results can be stored in ``output`` .

    The behavior of this function is determined by ``extension`` . The ``option`` and ``output`` values are typically casted to the corresponding types (for example, :class:`~PySide.QtWebKit.ChooseMultipleFilesExtensionOption` and :class:`~PySide.QtWebKit.ChooseMultipleFilesExtensionReturn` for :attr:`ChooseMultipleFilesExtension<QWebPage.Extension>` ).

    You can call :meth:`PySide.QtWebKit.QWebPage.supportsExtension` to check if an extension is supported by the page.

    Returns true if the extension was called successfully; otherwise returns false.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.supportsExtension`  :attr:`QWebPage.Extension` 


.. method:: PySide.QtWebKit.QWebPage.findText(subString[, options=0])


    :param subString: unicode
    :param options: :class:`PySide.QtWebKit.QWebPage.FindFlags`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtWebKit.QWebPage.focusNextPrevChild(next)


    :param next: :class:`PySide.QtCore.bool`
    :rtype: :class:`PySide.QtCore.bool`




    Similar to :meth:`QWidget.focusNextPrevChild()<PySide.QtGui.QWidget.focusNextPrevChild>` it focuses the next focusable web element if ``next`` is true; otherwise the previous element is focused.

    Returns true if it can find a new focusable element, or false if it can't.



.. method:: PySide.QtWebKit.QWebPage.forwardUnsupportedContent()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether :class:`PySide.QtWebKit.QWebPage` should forward unsupported content.

    If enabled, the :meth:`PySide.QtWebKit.QWebPage.unsupportedContent` signal is emitted with a network reply that can be used to read the content.

    If disabled, the download of such content is aborted immediately.

    By default unsupported content is not forwarded.



.. method:: PySide.QtWebKit.QWebPage.frameAt(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtWebKit.QWebFrame`




    Returns the frame at the given point ``pos`` , or 0 if there is no frame at that position.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.mainFrame`  :meth:`PySide.QtWebKit.QWebPage.currentFrame` 


.. method:: PySide.QtWebKit.QWebPage.frameCreated(frame)


    :param frame: :class:`PySide.QtWebKit.QWebFrame`






.. method:: PySide.QtWebKit.QWebPage.geometryChangeRequested(geom)


    :param geom: :class:`PySide.QtCore.QRect`






.. method:: PySide.QtWebKit.QWebPage.hasSelection()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtWebKit.QWebPage.history()


    :rtype: :class:`PySide.QtWebKit.QWebHistory`




    Returns a pointer to the view's history of navigated web pages.



.. method:: PySide.QtWebKit.QWebPage.inputMethodQuery(property)


    :param property: :attr:`PySide.QtCore.Qt.InputMethodQuery`
    :rtype: object







.. method:: PySide.QtWebKit.QWebPage.isContentEditable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the content in this :class:`PySide.QtWebKit.QWebPage` is editable or not.

    If this property is enabled the contents of the page can be edited by the user through a visible cursor. If disabled (the default) only HTML elements in the web page with their ``contenteditable`` attribute set are editable.

    .. seealso::  :meth:`~PySide.QtWebKit.QWebPage.modified`  :meth:`PySide.QtWebKit.QWebPage.contentsChanged`  :attr:`QWebPage.WebAction` 


.. method:: PySide.QtWebKit.QWebPage.isModified()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the page contains unsubmitted form data, or the contents have been changed..

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.contentsChanged`  :meth:`~PySide.QtWebKit.QWebPage.contentEditable`  :meth:`PySide.QtWebKit.QWebPage.undoStack` 


.. method:: PySide.QtWebKit.QWebPage.javaScriptAlert(originatingFrame, msg)


    :param originatingFrame: :class:`PySide.QtWebKit.QWebFrame`
    :param msg: unicode




    This function is called whenever a JavaScript program running inside ``frame`` calls the alert() function with the message ``msg`` .

    The default implementation shows the message, ``msg`` , with QMessageBox::information.



.. method:: PySide.QtWebKit.QWebPage.javaScriptConfirm(originatingFrame, msg)


    :param originatingFrame: :class:`PySide.QtWebKit.QWebFrame`
    :param msg: unicode
    :rtype: :class:`PySide.QtCore.bool`




    This function is called whenever a JavaScript program running inside ``frame`` calls the confirm() function with the message, ``msg`` . Returns true if the user confirms the message; otherwise returns false.

    The default implementation executes the query using QMessageBox::information with :attr:`QMessageBox.Yes<QMessageBox.StandardButton>` and :attr:`QMessageBox.No<QMessageBox.StandardButton>` buttons.



.. method:: PySide.QtWebKit.QWebPage.javaScriptConsoleMessage(message, lineNumber, sourceID)


    :param message: unicode
    :param lineNumber: :class:`PySide.QtCore.int`
    :param sourceID: unicode




    This function is called whenever a JavaScript program tries to print a ``message`` to the web browser's console.

    For example in case of evaluation errors the source URL may be provided in ``sourceID`` as well as the ``lineNumber`` .

    The default implementation prints nothing.



.. method:: PySide.QtWebKit.QWebPage.javaScriptPrompt(originatingFrame, msg, defaultValue)


    :param originatingFrame: :class:`PySide.QtWebKit.QWebFrame`
    :param msg: unicode
    :param defaultValue: unicode
    :rtype: PySequence




    This function is called whenever a JavaScript program running inside ``frame`` tries to prompt the user for input. The program may provide an optional message, ``msg`` , as well as a default value for the input in ``defaultValue`` .

    If the prompt was cancelled by the user the implementation should return false; otherwise the result should be written to ``result`` and true should be returned. If the prompt was not cancelled by the user, the implementation should return true and the result string must not be null.

    The default implementation uses :meth:`QInputDialog.getText()<PySide.QtGui.QInputDialog.getText>` .



.. method:: PySide.QtWebKit.QWebPage.linkClicked(url)


    :param url: :class:`PySide.QtCore.QUrl`






.. method:: PySide.QtWebKit.QWebPage.linkDelegationPolicy()


    :rtype: :attr:`PySide.QtWebKit.QWebPage.LinkDelegationPolicy`




    This property holds how :class:`PySide.QtWebKit.QWebPage` should delegate the handling of links through the :meth:`PySide.QtWebKit.QWebPage.linkClicked` signal.

    The default is to delegate no links.



.. method:: PySide.QtWebKit.QWebPage.linkHovered(link, title, textContent)


    :param link: unicode
    :param title: unicode
    :param textContent: unicode






.. method:: PySide.QtWebKit.QWebPage.loadFinished(ok)


    :param ok: :class:`PySide.QtCore.bool`






.. method:: PySide.QtWebKit.QWebPage.loadProgress(progress)


    :param progress: :class:`PySide.QtCore.int`






.. method:: PySide.QtWebKit.QWebPage.loadStarted()








.. method:: PySide.QtWebKit.QWebPage.mainFrame()


    :rtype: :class:`PySide.QtWebKit.QWebFrame`




    Returns the main frame of the page.

    The main frame provides access to the hierarchy of sub-frames and is also needed if you want to explicitly render a web page into a given painter.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.currentFrame` 


.. method:: PySide.QtWebKit.QWebPage.menuBarVisibilityChangeRequested(visible)


    :param visible: :class:`PySide.QtCore.bool`






.. method:: PySide.QtWebKit.QWebPage.microFocusChanged()








.. method:: PySide.QtWebKit.QWebPage.networkAccessManager()


    :rtype: :class:`PySide.QtNetwork.QNetworkAccessManager`




    Returns the :class:`PySide.QtNetwork.QNetworkAccessManager` that is responsible for serving network requests for this :class:`PySide.QtWebKit.QWebPage` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.setNetworkAccessManager` 


.. method:: PySide.QtWebKit.QWebPage.palette()


    :rtype: :class:`PySide.QtGui.QPalette`




    This property holds the page's palette.

    The base brush of the palette is used to draw the background of the main frame.

    By default, this property contains the application's default palette.



.. method:: PySide.QtWebKit.QWebPage.pluginFactory()


    :rtype: :class:`PySide.QtWebKit.QWebPluginFactory`




    Returns the :class:`PySide.QtWebKit.QWebPluginFactory` that is responsible for creating plugins embedded into this :class:`PySide.QtWebKit.QWebPage` . If no plugin factory is installed a null pointer is returned.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.setPluginFactory` 


.. method:: PySide.QtWebKit.QWebPage.preferredContentsSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds the preferred size of the contents.

    If this property is set to a valid size, it is used to lay out the page. If it is not set (the default), the viewport size is used instead.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.viewportSize` 


.. method:: PySide.QtWebKit.QWebPage.printRequested(frame)


    :param frame: :class:`PySide.QtWebKit.QWebFrame`






.. method:: PySide.QtWebKit.QWebPage.qt_metacall()









.. method:: PySide.QtWebKit.QWebPage.repaintRequested(dirtyRect)


    :param dirtyRect: :class:`PySide.QtCore.QRect`






.. method:: PySide.QtWebKit.QWebPage.restoreFrameStateRequested(frame)


    :param frame: :class:`PySide.QtWebKit.QWebFrame`






.. method:: PySide.QtWebKit.QWebPage.saveFrameStateRequested(frame, item)


    :param frame: :class:`PySide.QtWebKit.QWebFrame`
    :param item: :class:`PySide.QtWebKit.QWebHistoryItem`






.. method:: PySide.QtWebKit.QWebPage.scrollRequested(dx, dy, scrollViewRect)


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`
    :param scrollViewRect: :class:`PySide.QtCore.QRect`






.. method:: PySide.QtWebKit.QWebPage.selectedHtml()


    :rtype: unicode







.. method:: PySide.QtWebKit.QWebPage.selectedText()


    :rtype: unicode




    This property holds the text currently selected.

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.selectionChanged` 


.. method:: PySide.QtWebKit.QWebPage.selectionChanged()








.. method:: PySide.QtWebKit.QWebPage.setActualVisibleContentRect(rect)


    :param rect: :class:`PySide.QtCore.QRect`







.. method:: PySide.QtWebKit.QWebPage.setContentEditable(editable)


    :param editable: :class:`PySide.QtCore.bool`




    This property holds whether the content in this :class:`PySide.QtWebKit.QWebPage` is editable or not.

    If this property is enabled the contents of the page can be edited by the user through a visible cursor. If disabled (the default) only HTML elements in the web page with their ``contenteditable`` attribute set are editable.

    .. seealso::  :meth:`~PySide.QtWebKit.QWebPage.modified`  :meth:`PySide.QtWebKit.QWebPage.contentsChanged`  :attr:`QWebPage.WebAction` 


.. method:: PySide.QtWebKit.QWebPage.setForwardUnsupportedContent(forward)


    :param forward: :class:`PySide.QtCore.bool`




    This property holds whether :class:`PySide.QtWebKit.QWebPage` should forward unsupported content.

    If enabled, the :meth:`PySide.QtWebKit.QWebPage.unsupportedContent` signal is emitted with a network reply that can be used to read the content.

    If disabled, the download of such content is aborted immediately.

    By default unsupported content is not forwarded.



.. method:: PySide.QtWebKit.QWebPage.setLinkDelegationPolicy(policy)


    :param policy: :attr:`PySide.QtWebKit.QWebPage.LinkDelegationPolicy`




    This property holds how :class:`PySide.QtWebKit.QWebPage` should delegate the handling of links through the :meth:`PySide.QtWebKit.QWebPage.linkClicked` signal.

    The default is to delegate no links.



.. method:: PySide.QtWebKit.QWebPage.setNetworkAccessManager(manager)


    :param manager: :class:`PySide.QtNetwork.QNetworkAccessManager`




    Sets the :class:`PySide.QtNetwork.QNetworkAccessManager` ``manager`` responsible for serving network requests for this :class:`PySide.QtWebKit.QWebPage` .

    .. note::  It is currently not supported to change the network access manager after the :class:`PySide.QtWebKit.QWebPage` has used it. The results of doing this are undefined.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.networkAccessManager` 


.. method:: PySide.QtWebKit.QWebPage.setPalette(palette)


    :param palette: :class:`PySide.QtGui.QPalette`




    This property holds the page's palette.

    The base brush of the palette is used to draw the background of the main frame.

    By default, this property contains the application's default palette.



.. method:: PySide.QtWebKit.QWebPage.setPluginFactory(factory)


    :param factory: :class:`PySide.QtWebKit.QWebPluginFactory`




    Sets the :class:`PySide.QtWebKit.QWebPluginFactory` ``factory`` responsible for creating plugins embedded into this :class:`PySide.QtWebKit.QWebPage` .

    Note: The plugin factory is only used if the :attr:`QWebSettings.PluginsEnabled<QWebSettings.WebAttribute>` attribute is enabled.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.pluginFactory` 


.. method:: PySide.QtWebKit.QWebPage.setPreferredContentsSize(size)


    :param size: :class:`PySide.QtCore.QSize`




    This property holds the preferred size of the contents.

    If this property is set to a valid size, it is used to lay out the page. If it is not set (the default), the viewport size is used instead.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.viewportSize` 


.. method:: PySide.QtWebKit.QWebPage.setView(view)


    :param view: :class:`PySide.QtGui.QWidget`




    Sets the ``view`` that is associated with the web page.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.view` 


.. method:: PySide.QtWebKit.QWebPage.setViewportSize(size)


    :param size: :class:`PySide.QtCore.QSize`




    This property holds the size of the viewport.

    The size affects for example the visibility of scrollbars if the document is larger than the viewport.

    By default, for a newly-created Web page, this property contains a size with zero width and height.

    .. seealso::  :meth:`QWebFrame.render()<PySide.QtWebKit.QWebFrame.render>`  :meth:`PySide.QtWebKit.QWebPage.preferredContentsSize` 


.. method:: PySide.QtWebKit.QWebPage.settings()


    :rtype: :class:`PySide.QtWebKit.QWebSettings`




    Returns a pointer to the page's settings object.

    .. seealso::  :meth:`QWebSettings.globalSettings()<PySide.QtWebKit.QWebSettings.globalSettings>` 


.. method:: PySide.QtWebKit.QWebPage.shouldInterruptJavaScript()


    :rtype: :class:`PySide.QtCore.bool`




    This function is called when a JavaScript program is running for a long period of time.

    If the user wanted to stop the JavaScript the implementation should return true; otherwise false.

    The default implementation executes the query using QMessageBox::information with :attr:`QMessageBox.Yes<QMessageBox.StandardButton>` and :attr:`QMessageBox.No<QMessageBox.StandardButton>` buttons.

    .. warning::  Because of binary compatibility constraints, this function is not virtual. If you want to provide your own implementation in a :class:`PySide.QtWebKit.QWebPage` subclass, reimplement the :meth:`PySide.QtWebKit.QWebPage.shouldInterruptJavaScript` slot in your subclass instead. :ref:`QtWebKit` will dynamically detect the slot and call it.



.. method:: PySide.QtWebKit.QWebPage.statusBarMessage(text)


    :param text: unicode






.. method:: PySide.QtWebKit.QWebPage.statusBarVisibilityChangeRequested(visible)


    :param visible: :class:`PySide.QtCore.bool`






.. method:: PySide.QtWebKit.QWebPage.supportedContentTypes()


    :rtype: list of strings







.. method:: PySide.QtWebKit.QWebPage.supportsContentType(mimeType)


    :param mimeType: unicode
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtWebKit.QWebPage.supportsExtension(extension)


    :param extension: :attr:`PySide.QtWebKit.QWebPage.Extension`
    :rtype: :class:`PySide.QtCore.bool`




    This virtual function returns true if the web page supports ``extension`` ; otherwise false is returned.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.extension` 


.. method:: PySide.QtWebKit.QWebPage.swallowContextMenuEvent(event)


    :param event: :class:`PySide.QtGui.QContextMenuEvent`
    :rtype: :class:`PySide.QtCore.bool`




    Filters the context menu event, ``event`` , through handlers for scrollbars and custom event handlers in the web page. Returns true if the event was handled; otherwise false.

    A web page may swallow a context menu event through a custom event handler, allowing for context menus to be implemented in HTML/JavaScript. This is used by Google Maps, for example.



.. method:: PySide.QtWebKit.QWebPage.toolBarVisibilityChangeRequested(visible)


    :param visible: :class:`PySide.QtCore.bool`






.. method:: PySide.QtWebKit.QWebPage.totalBytes()


    :rtype: :class:`PySide.QtCore.quint64`




    Returns the total number of bytes that were received from the network to render the current page, including extra content such as embedded images.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.bytesReceived` 


.. method:: PySide.QtWebKit.QWebPage.triggerAction(action[, checked=false])


    :param action: :attr:`PySide.QtWebKit.QWebPage.WebAction`
    :param checked: :class:`PySide.QtCore.bool`




    This function can be called to trigger the specified ``action`` . It is also called by :ref:`QtWebKit` if the user triggers the action, for example through a context menu item.

    If ``action`` is a checkable action then ``checked`` specified whether the action is toggled or not.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.action` 


.. method:: PySide.QtWebKit.QWebPage.undoStack()


    :rtype: :class:`PySide.QtGui.QUndoStack`




    Returns a pointer to the undo stack used for editable content.

    .. seealso::  :meth:`~PySide.QtWebKit.QWebPage.modified` 


.. method:: PySide.QtWebKit.QWebPage.unsupportedContent(reply)


    :param reply: :class:`PySide.QtNetwork.QNetworkReply`






.. method:: PySide.QtWebKit.QWebPage.updatePositionDependentActions(pos)


    :param pos: :class:`PySide.QtCore.QPoint`




    Updates the page's actions depending on the position ``pos`` . For example if ``pos`` is over an image element the :attr:`CopyImageToClipboard<QWebPage.WebAction>` action is enabled.



.. method:: PySide.QtWebKit.QWebPage.userAgentForUrl(url)


    :param url: :class:`PySide.QtCore.QUrl`
    :rtype: unicode




    This function is called when a user agent for HTTP requests is needed. You can reimplement this function to dynamically return different user agents for different URLs, based on the ``url`` parameter.

    The default implementation returns the following value:

    "Mozilla/5.0 (%Platform%; %Security%; %Subplatform%; %Locale%) AppleWebKit/%WebKitVersion% (KHTML, like Gecko) %AppVersion Safari/%WebKitVersion%"

    On mobile platforms such as Symbian S60 and Maemo, "Mobile Safari" is used instead of "Safari".

    In this string the following values are replaced at run-time:


    * %Platform% and %Subplatform% are expanded to the windowing system and the operation system.
    * %Security% expands to U if SSL is enabled, otherwise N. SSL is enabled if :meth:`QSslSocket.supportsSsl()<PySide.QtNetwork.QSslSocket.supportsSsl>` returns true.
    * %Locale% is replaced with :meth:`QLocale.name()<PySide.QtCore.QLocale.name>` . The locale is determined from the view of the :class:`PySide.QtWebKit.QWebPage` . If no view is set on the :class:`PySide.QtWebKit.QWebPage` , then a default constructed :class:`PySide.QtCore.QLocale` is used instead.
    * %WebKitVersion% is the version of :attr:`WebKit<QWebPage.ErrorDomain>` the application was compiled against.
    * %AppVersion% expands to :meth:`QCoreApplication.applicationName()<PySide.QtCore.QCoreApplication.applicationName>` / :meth:`QCoreApplication.applicationVersion()<PySide.QtCore.QCoreApplication.applicationVersion>` if they're set; otherwise defaulting to Qt and the current Qt version.



.. method:: PySide.QtWebKit.QWebPage.view()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the view widget that is associated with the web page.

    .. seealso::  :meth:`PySide.QtWebKit.QWebPage.setView` 


.. method:: PySide.QtWebKit.QWebPage.viewportChangeRequested()








.. method:: PySide.QtWebKit.QWebPage.viewportSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds the size of the viewport.

    The size affects for example the visibility of scrollbars if the document is larger than the viewport.

    By default, for a newly-created Web page, this property contains a size with zero width and height.

    .. seealso::  :meth:`QWebFrame.render()<PySide.QtWebKit.QWebFrame.render>`  :meth:`PySide.QtWebKit.QWebPage.preferredContentsSize` 


.. method:: PySide.QtWebKit.QWebPage.windowCloseRequested()









