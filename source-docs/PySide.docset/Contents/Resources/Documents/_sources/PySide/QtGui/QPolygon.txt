.. module:: PySide.QtGui
.. _QPolygon:

QPolygon
********

.. inheritance-diagram:: QPolygon
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QPolygon.__add__>` (l)
*    def :meth:`__eq__<PySide.QtGui.QPolygon.__eq__>` (v)
*    def :meth:`__iadd__<PySide.QtGui.QPolygon.__iadd__>` (t)
*    def :meth:`__lshift__<PySide.QtGui.QPolygon.__lshift__>` (l)
*    def :meth:`__lshift__<PySide.QtGui.QPolygon.__lshift__>` (t)
*    def :meth:`__mul__<PySide.QtGui.QPolygon.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtGui.QPolygon.__mul__>` (, m)
*    def :meth:`__ne__<PySide.QtGui.QPolygon.__ne__>` (v)
*    def :meth:`__reduce__<PySide.QtGui.QPolygon.__reduce__>` ()
*    def :meth:`alignOfTypedData<PySide.QtGui.QPolygon.alignOfTypedData>` ()
*    def :meth:`append<PySide.QtGui.QPolygon.append>` (t)
*    def :meth:`at<PySide.QtGui.QPolygon.at>` (i)
*    def :meth:`boundingRect<PySide.QtGui.QPolygon.boundingRect>` ()
*    def :meth:`capacity<PySide.QtGui.QPolygon.capacity>` ()
*    def :meth:`clear<PySide.QtGui.QPolygon.clear>` ()
*    def :meth:`constData<PySide.QtGui.QPolygon.constData>` ()
*    def :meth:`contains<PySide.QtGui.QPolygon.contains>` (t)
*    def :meth:`containsPoint<PySide.QtGui.QPolygon.containsPoint>` (pt, fillRule)
*    def :meth:`count<PySide.QtGui.QPolygon.count>` ()
*    def :meth:`count<PySide.QtGui.QPolygon.count>` (t)
*    def :meth:`data<PySide.QtGui.QPolygon.data>` ()
*    def :meth:`detach_helper<PySide.QtGui.QPolygon.detach_helper>` ()
*    def :meth:`empty<PySide.QtGui.QPolygon.empty>` ()
*    def :meth:`endsWith<PySide.QtGui.QPolygon.endsWith>` (t)
*    def :meth:`erase<PySide.QtGui.QPolygon.erase>` (abegin, aend)
*    def :meth:`fill<PySide.QtGui.QPolygon.fill>` (t[, size=-1])
*    def :meth:`first<PySide.QtGui.QPolygon.first>` ()
*    def :meth:`front<PySide.QtGui.QPolygon.front>` ()
*    def :meth:`indexOf<PySide.QtGui.QPolygon.indexOf>` (t[, from=0])
*    def :meth:`insert<PySide.QtGui.QPolygon.insert>` (before, n, t)
*    def :meth:`insert<PySide.QtGui.QPolygon.insert>` (i, n, t)
*    def :meth:`insert<PySide.QtGui.QPolygon.insert>` (i, t)
*    def :meth:`intersected<PySide.QtGui.QPolygon.intersected>` (r)
*    def :meth:`isEmpty<PySide.QtGui.QPolygon.isEmpty>` ()
*    def :meth:`isSharedWith<PySide.QtGui.QPolygon.isSharedWith>` (other)
*    def :meth:`last<PySide.QtGui.QPolygon.last>` ()
*    def :meth:`lastIndexOf<PySide.QtGui.QPolygon.lastIndexOf>` (t[, from=-1])
*    def :meth:`mid<PySide.QtGui.QPolygon.mid>` (pos[, length=-1])
*    def :meth:`operator[]<PySide.QtGui.QPolygon.operator[]>` (i)
*    def :meth:`pop_back<PySide.QtGui.QPolygon.pop_back>` ()
*    def :meth:`pop_front<PySide.QtGui.QPolygon.pop_front>` ()
*    def :meth:`prepend<PySide.QtGui.QPolygon.prepend>` (t)
*    def :meth:`push_back<PySide.QtGui.QPolygon.push_back>` (t)
*    def :meth:`push_front<PySide.QtGui.QPolygon.push_front>` (t)
*    def :meth:`realloc<PySide.QtGui.QPolygon.realloc>` (size, alloc)
*    def :meth:`remove<PySide.QtGui.QPolygon.remove>` (i)
*    def :meth:`remove<PySide.QtGui.QPolygon.remove>` (i, n)
*    def :meth:`replace<PySide.QtGui.QPolygon.replace>` (i, t)
*    def :meth:`reserve<PySide.QtGui.QPolygon.reserve>` (size)
*    def :meth:`resize<PySide.QtGui.QPolygon.resize>` (size)
*    def :meth:`setSharable<PySide.QtGui.QPolygon.setSharable>` (sharable)
*    def :meth:`size<PySide.QtGui.QPolygon.size>` ()
*    def :meth:`sizeOfTypedData<PySide.QtGui.QPolygon.sizeOfTypedData>` ()
*    def :meth:`squeeze<PySide.QtGui.QPolygon.squeeze>` ()
*    def :meth:`startsWith<PySide.QtGui.QPolygon.startsWith>` (t)
*    def :meth:`subtracted<PySide.QtGui.QPolygon.subtracted>` (r)
*    def :meth:`toList<PySide.QtGui.QPolygon.toList>` ()
*    def :meth:`translate<PySide.QtGui.QPolygon.translate>` (dx, dy)
*    def :meth:`translate<PySide.QtGui.QPolygon.translate>` (offset)
*    def :meth:`translated<PySide.QtGui.QPolygon.translated>` (dx, dy)
*    def :meth:`translated<PySide.QtGui.QPolygon.translated>` (offset)
*    def :meth:`united<PySide.QtGui.QPolygon.united>` (r)
*    def :meth:`value<PySide.QtGui.QPolygon.value>` (i)
*    def :meth:`value<PySide.QtGui.QPolygon.value>` (i, defaultValue)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`fromList<PySide.QtGui.QPolygon.fromList>` (list)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QPolygon` class provides a vector of points using integer precision.

    A :class:`PySide.QtGui.QPolygon` object is a :class:`QVector` < :class:`PySide.QtCore.QPoint` >. The easiest way to add points to a :class:`PySide.QtGui.QPolygon` is to use :class:`QVector` 's streaming operator, as illustrated below:

    ::

                polygon = QPolygon()
                polygon << QPoint(10, 20) << QPoint(20, 30)


    In addition to the functions provided by :class:`QVector` , :class:`PySide.QtGui.QPolygon` provides some point-specific functions.

    Each point in a polygon can be retrieved by passing its index to the :meth:`~PySide.QtGui.QPolygon.point` function. To populate the polygon, :class:`PySide.QtGui.QPolygon` provides the :meth:`~PySide.QtGui.QPolygon.setPoint` function to set the point at a given index, the :meth:`~PySide.QtGui.QPolygon.setPoints` function to set all the points in the polygon (resizing it to the given number of points), and the :meth:`~PySide.QtGui.QPolygon.putPoints` function which copies a number of given points into the polygon from a specified index (resizing the polygon if necessary).

    :class:`PySide.QtGui.QPolygon` provides the :meth:`PySide.QtGui.QPolygon.boundingRect` and :meth:`PySide.QtGui.QPolygon.translate` functions for geometry functions. Use the :meth:`QMatrix.map()<PySide.QtGui.QMatrix.map>` function for more general transformations of QPolygons.

    The :class:`PySide.QtGui.QPolygon` class is :ref:`implicitly shared<implicit-sharing.html>` .

    .. seealso::  :class:`QVector`  :class:`PySide.QtGui.QPolygonF`  :class:`PySide.QtCore.QLine` 

.. class:: QPolygon()
           QPolygon(a)
           QPolygon(r[, closed=false])
           QPolygon(v)
           QPolygon(size)

    :param size: :class:`PySide.QtCore.int`
    :param a: :class:`PySide.QtGui.QPolygon`
    :param r: :class:`PySide.QtCore.QRect`
    :param closed: :class:`PySide.QtCore.bool`
    :param v: 

    Constructs a polygon with no points.

    .. seealso::  :meth:`QVector.isEmpty` 

    Constructs a copy of the given ``polygon`` .

    .. seealso::  :meth:`~PySide.QtGui.QPolygon.setPoints` 

    Constructs a polygon from the given ``rectangle`` . If ``closed`` is false, the polygon just contains the four points of the rectangle ordered clockwise, otherwise the polygon's fifth point is set to ``rectangle`` . :meth:`~PySide.QtGui.QPolygon.topLeft` .

    Note that the bottom-right corner of the rectangle is located at (rectangle. :meth:`~PySide.QtGui.QPolygon.x` + rectangle. :meth:`~PySide.QtGui.QPolygon.width` , rectangle. :meth:`~PySide.QtGui.QPolygon.y` + rectangle. :meth:`~PySide.QtGui.QPolygon.height` ).

    .. seealso::  :meth:`~PySide.QtGui.QPolygon.setPoints` 




    Constructs a polygon of the given ``size`` . Creates an empty polygon if ``size`` == 0.

    .. seealso::  :meth:`QVector.isEmpty` 

.. method:: PySide.QtGui.QPolygon.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QPolygon.alignOfTypedData()


    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPolygon.append(t)


    :param t: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.at(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.boundingRect()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns the bounding rectangle of the polygon, or :class:`PySide.QtCore.QRect` (0, 0, 0, 0) if the polygon is empty.

    .. seealso::  :meth:`QVector.isEmpty` 


.. method:: PySide.QtGui.QPolygon.capacity()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.clear()









.. method:: PySide.QtGui.QPolygon.constData()


    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.contains(t)


    :param t: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.containsPoint(pt, fillRule)


    :param pt: :class:`PySide.QtCore.QPoint`
    :param fillRule: :attr:`PySide.QtCore.Qt.FillRule`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.count()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.count(t)


    :param t: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.data()


    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.detach_helper()








.. method:: PySide.QtGui.QPolygon.empty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.endsWith(t)


    :param t: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.erase(abegin, aend)


    :param abegin: :class:`PySide.QtCore.QPoint`
    :param aend: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.fill(t[, size=-1])


    :param t: :class:`PySide.QtCore.QPoint`
    :param size: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtGui.QPolygon.first()


    :rtype: :class:`PySide.QtCore.QPoint`







.. staticmethod:: PySide.QtGui.QPolygon.fromList(list)


    :param list: 
    :rtype: 







.. method:: PySide.QtGui.QPolygon.front()


    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.indexOf(t[, from=0])


    :param t: :class:`PySide.QtCore.QPoint`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.insert(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.insert(i, n, t)


    :param i: :class:`PySide.QtCore.int`
    :param n: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.insert(before, n, t)


    :param before: :class:`PySide.QtCore.QPoint`
    :param n: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.intersected(r)


    :param r: :class:`PySide.QtGui.QPolygon`
    :rtype: :class:`PySide.QtGui.QPolygon`




    Returns a polygon which is the intersection of this polygon and ``r`` .

    Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.



.. method:: PySide.QtGui.QPolygon.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.isSharedWith(other)


    :param other: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.last()


    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.lastIndexOf(t[, from=-1])


    :param t: :class:`PySide.QtCore.QPoint`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.mid(pos[, length=-1])


    :param pos: :class:`PySide.QtCore.int`
    :param length: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtGui.QPolygon.__ne__(v)


    :param v: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.__mul__(, m)


    :param m: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtGui.QPolygon`







.. method:: PySide.QtGui.QPolygon.__mul__(, m)


    :param m: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtGui.QPolygon`







.. method:: PySide.QtGui.QPolygon.__add__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtGui.QPolygon.__iadd__(t)


    :param t: :class:`PySide.QtCore.QPoint`
    :rtype: 







.. method:: PySide.QtGui.QPolygon.__lshift__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtGui.QPolygon.__lshift__(t)


    :param t: :class:`PySide.QtCore.QPoint`
    :rtype: 







.. method:: PySide.QtGui.QPolygon.__eq__(v)


    :param v: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.operator[](i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.pop_back()









.. method:: PySide.QtGui.QPolygon.pop_front()









.. method:: PySide.QtGui.QPolygon.prepend(t)


    :param t: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.push_back(t)


    :param t: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.push_front(t)


    :param t: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.realloc(size, alloc)


    :param size: :class:`PySide.QtCore.int`
    :param alloc: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPolygon.remove(i)


    :param i: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.remove(i, n)


    :param i: :class:`PySide.QtCore.int`
    :param n: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.replace(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.reserve(size)


    :param size: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.resize(size)


    :param size: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.setSharable(sharable)


    :param sharable: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.size()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygon.sizeOfTypedData()


    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPolygon.squeeze()









.. method:: PySide.QtGui.QPolygon.startsWith(t)


    :param t: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygon.subtracted(r)


    :param r: :class:`PySide.QtGui.QPolygon`
    :rtype: :class:`PySide.QtGui.QPolygon`




    Returns a polygon which is ``r`` subtracted from this polygon.

    Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.



.. method:: PySide.QtGui.QPolygon.toList()


    :rtype: 







.. method:: PySide.QtGui.QPolygon.translate(dx, dy)


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`




    Translates all points in the polygon by (``dx`` , ``dy`` ).

    .. seealso::  :meth:`PySide.QtGui.QPolygon.translated` 


.. method:: PySide.QtGui.QPolygon.translate(offset)


    :param offset: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Translates all points in the polygon by the given ``offset`` .

    .. seealso::  :meth:`PySide.QtGui.QPolygon.translated` 


.. method:: PySide.QtGui.QPolygon.translated(dx, dy)


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QPolygon`




    Returns a copy of the polygon that is translated by (``dx`` , ``dy`` ).

    .. seealso::  :meth:`PySide.QtGui.QPolygon.translate` 


.. method:: PySide.QtGui.QPolygon.translated(offset)


    :param offset: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QPolygon`




    This is an overloaded function.

    Returns a copy of the polygon that is translated by the given ``offset`` .

    .. seealso::  :meth:`PySide.QtGui.QPolygon.translate` 


.. method:: PySide.QtGui.QPolygon.united(r)


    :param r: :class:`PySide.QtGui.QPolygon`
    :rtype: :class:`PySide.QtGui.QPolygon`




    Returns a polygon which is the union of this polygon and ``r`` .

    Set operations on polygons, will treat the polygons as areas, and implicitly close the polygon.

    .. seealso::  :meth:`PySide.QtGui.QPolygon.intersected`  :meth:`PySide.QtGui.QPolygon.subtracted` 


.. method:: PySide.QtGui.QPolygon.value(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtGui.QPolygon.value(i, defaultValue)


    :param i: :class:`PySide.QtCore.int`
    :param defaultValue: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`








