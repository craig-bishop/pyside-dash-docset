.. module:: PySide.QtGui
.. _QToolBox:

QToolBox
********

.. inheritance-diagram:: QToolBox
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addItem<PySide.QtGui.QToolBox.addItem>` (widget, icon, text)
*    def :meth:`addItem<PySide.QtGui.QToolBox.addItem>` (widget, text)
*    def :meth:`count<PySide.QtGui.QToolBox.count>` ()
*    def :meth:`currentIndex<PySide.QtGui.QToolBox.currentIndex>` ()
*    def :meth:`currentWidget<PySide.QtGui.QToolBox.currentWidget>` ()
*    def :meth:`indexOf<PySide.QtGui.QToolBox.indexOf>` (widget)
*    def :meth:`insertItem<PySide.QtGui.QToolBox.insertItem>` (index, widget, icon, text)
*    def :meth:`insertItem<PySide.QtGui.QToolBox.insertItem>` (index, widget, text)
*    def :meth:`isItemEnabled<PySide.QtGui.QToolBox.isItemEnabled>` (index)
*    def :meth:`itemIcon<PySide.QtGui.QToolBox.itemIcon>` (index)
*    def :meth:`itemText<PySide.QtGui.QToolBox.itemText>` (index)
*    def :meth:`itemToolTip<PySide.QtGui.QToolBox.itemToolTip>` (index)
*    def :meth:`removeItem<PySide.QtGui.QToolBox.removeItem>` (index)
*    def :meth:`setItemEnabled<PySide.QtGui.QToolBox.setItemEnabled>` (index, enabled)
*    def :meth:`setItemIcon<PySide.QtGui.QToolBox.setItemIcon>` (index, icon)
*    def :meth:`setItemText<PySide.QtGui.QToolBox.setItemText>` (index, text)
*    def :meth:`setItemToolTip<PySide.QtGui.QToolBox.setItemToolTip>` (index, toolTip)
*    def :meth:`widget<PySide.QtGui.QToolBox.widget>` (index)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`itemInserted<PySide.QtGui.QToolBox.itemInserted>` (index)
*    def :meth:`itemRemoved<PySide.QtGui.QToolBox.itemRemoved>` (index)


Slots
^^^^^
.. container:: function_list

*    def :meth:`setCurrentIndex<PySide.QtGui.QToolBox.setCurrentIndex>` (index)
*    def :meth:`setCurrentWidget<PySide.QtGui.QToolBox.setCurrentWidget>` (widget)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`currentChanged<PySide.QtGui.QToolBox.currentChanged>` (index)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QToolBox` class provides a column of tabbed widget items.

    A toolbox is a widget that displays a column of tabs one above the other, with the current item displayed below the current tab. Every tab has an index position within the column of tabs. A tab's item is a :class:`PySide.QtGui.QWidget` .

    Each item has an :meth:`PySide.QtGui.QToolBox.itemText` , an optional :meth:`PySide.QtGui.QToolBox.itemIcon` , an optional :meth:`PySide.QtGui.QToolBox.itemToolTip` , and a :meth:`PySide.QtGui.QToolBox.widget` . The item's attributes can be changed with :meth:`PySide.QtGui.QToolBox.setItemText` , :meth:`PySide.QtGui.QToolBox.setItemIcon` , and :meth:`PySide.QtGui.QToolBox.setItemToolTip` . Each item can be enabled or disabled individually with :meth:`PySide.QtGui.QToolBox.setItemEnabled` .

    Items are added using :meth:`PySide.QtGui.QToolBox.addItem` , or inserted at particular positions using :meth:`PySide.QtGui.QToolBox.insertItem` . The total number of items is given by :meth:`PySide.QtGui.QToolBox.count` . Items can be deleted with delete, or removed from the toolbox with :meth:`PySide.QtGui.QToolBox.removeItem` . Combining :meth:`PySide.QtGui.QToolBox.removeItem` and :meth:`PySide.QtGui.QToolBox.insertItem` allows you to move items to different positions.

    The index of the current item widget is returned by :meth:`PySide.QtGui.QToolBox.currentIndex` , and set with :meth:`PySide.QtGui.QToolBox.setCurrentIndex` . The index of a particular item can be found using :meth:`PySide.QtGui.QToolBox.indexOf` , and the item at a given index is returned by :meth:`~PySide.QtGui.QToolBox.item` .

    The :meth:`PySide.QtGui.QToolBox.currentChanged` signal is emitted when the current item is changed.

    .. seealso::  :class:`PySide.QtGui.QTabWidget` 

.. class:: QToolBox([parent=None[, f=0]])

    :param f: :class:`PySide.QtCore.Qt.WindowFlags`
    :param parent: :class:`PySide.QtGui.QWidget`



.. method:: PySide.QtGui.QToolBox.addItem(widget, text)


    :param widget: :class:`PySide.QtGui.QWidget`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Adds the widget ``w`` in a new tab at bottom of the toolbox. The new tab's text is set to ``text`` . Returns the new tab's index.



.. method:: PySide.QtGui.QToolBox.addItem(widget, icon, text)


    :param widget: :class:`PySide.QtGui.QWidget`
    :param icon: :class:`PySide.QtGui.QIcon`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    Adds the ``widget`` in a new tab at bottom of the toolbox. The new tab's text is set to ``text`` , and the ``iconSet`` is displayed to the left of the ``text`` . Returns the new tab's index.



.. method:: PySide.QtGui.QToolBox.count()


    :rtype: :class:`PySide.QtCore.int`




    This property holds The number of items contained in the toolbox..

    By default, this property has a value of 0.



.. method:: PySide.QtGui.QToolBox.currentChanged(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QToolBox.currentIndex()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the index of the current item.

    By default, for an empty toolbox, this property has a value of -1.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.indexOf`  :meth:`PySide.QtGui.QToolBox.widget` 


.. method:: PySide.QtGui.QToolBox.currentWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns a pointer to the current widget, or 0 if there is no such item.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.currentIndex`  :meth:`PySide.QtGui.QToolBox.setCurrentWidget` 


.. method:: PySide.QtGui.QToolBox.indexOf(widget)


    :param widget: :class:`PySide.QtGui.QWidget`
    :rtype: :class:`PySide.QtCore.int`




    Returns the index of ``widget`` , or -1 if the item does not exist.



.. method:: PySide.QtGui.QToolBox.insertItem(index, widget, icon, text)


    :param index: :class:`PySide.QtCore.int`
    :param widget: :class:`PySide.QtGui.QWidget`
    :param icon: :class:`PySide.QtGui.QIcon`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    Inserts the ``widget`` at position ``index`` , or at the bottom of the toolbox if ``index`` is out of range. The new item's text is set to ``text`` , and the ``icon`` is displayed to the left of the ``text`` . Returns the new item's index.



.. method:: PySide.QtGui.QToolBox.insertItem(index, widget, text)


    :param index: :class:`PySide.QtCore.int`
    :param widget: :class:`PySide.QtGui.QWidget`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Inserts the ``widget`` at position ``index`` , or at the bottom of the toolbox if ``index`` is out of range. The new item's text is set to ``text`` . Returns the new item's index.



.. method:: PySide.QtGui.QToolBox.isItemEnabled(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item at position ``index`` is enabled; otherwise returns false.



.. method:: PySide.QtGui.QToolBox.itemIcon(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QIcon`




    Returns the icon of the item at position ``index`` , or a null icon if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.setItemIcon` 


.. method:: PySide.QtGui.QToolBox.itemInserted(index)


    :param index: :class:`PySide.QtCore.int`




    This virtual handler is called after a new item was added or inserted at position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QToolBox.itemRemoved` 


.. method:: PySide.QtGui.QToolBox.itemRemoved(index)


    :param index: :class:`PySide.QtCore.int`




    This virtual handler is called after an item was removed from position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QToolBox.itemInserted` 


.. method:: PySide.QtGui.QToolBox.itemText(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the text of the item at position ``index`` , or an empty string if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.setItemText` 


.. method:: PySide.QtGui.QToolBox.itemToolTip(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the tooltip of the item at position ``index`` , or an empty string if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.setItemToolTip` 


.. method:: PySide.QtGui.QToolBox.removeItem(index)


    :param index: :class:`PySide.QtCore.int`




    Removes the item at position ``index`` from the toolbox. Note that the widget is *not* deleted.



.. method:: PySide.QtGui.QToolBox.setCurrentIndex(index)


    :param index: :class:`PySide.QtCore.int`




    This property holds the index of the current item.

    By default, for an empty toolbox, this property has a value of -1.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.indexOf`  :meth:`PySide.QtGui.QToolBox.widget` 


.. method:: PySide.QtGui.QToolBox.setCurrentWidget(widget)


    :param widget: :class:`PySide.QtGui.QWidget`




    Makes``widget`` the current widget. The ``widget`` must be an item in this tool box.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.addItem`  :meth:`PySide.QtGui.QToolBox.setCurrentIndex`  :meth:`PySide.QtGui.QToolBox.currentWidget` 


.. method:: PySide.QtGui.QToolBox.setItemEnabled(index, enabled)


    :param index: :class:`PySide.QtCore.int`
    :param enabled: :class:`PySide.QtCore.bool`




    If ``enabled`` is true then the item at position ``index`` is enabled; otherwise the item at position ``index`` is disabled.

    .. seealso::  :meth:`PySide.QtGui.QToolBox.isItemEnabled` 


.. method:: PySide.QtGui.QToolBox.setItemIcon(index, icon)


    :param index: :class:`PySide.QtCore.int`
    :param icon: :class:`PySide.QtGui.QIcon`




    Sets the icon of the item at position ``index`` to ``icon`` .

    .. seealso::  :meth:`PySide.QtGui.QToolBox.itemIcon` 


.. method:: PySide.QtGui.QToolBox.setItemText(index, text)


    :param index: :class:`PySide.QtCore.int`
    :param text: unicode




    Sets the text of the item at position ``index`` to ``text`` .

    If the provided text contains an ampersand character ('&'), a mnemonic is automatically created for it. The character that follows the '&' will be used as the shortcut key. Any previous mnemonic will be overwritten, or cleared if no mnemonic is defined by the text. See the :class:`QShortcut<~PySide.QtGui.QShortcut#mnemonic>` documentation for details (to display an actual ampersand, use '&&').

    .. seealso::  :meth:`PySide.QtGui.QToolBox.itemText` 


.. method:: PySide.QtGui.QToolBox.setItemToolTip(index, toolTip)


    :param index: :class:`PySide.QtCore.int`
    :param toolTip: unicode




    Sets the tooltip of the item at position ``index`` to ``toolTip`` .

    .. seealso::  :meth:`PySide.QtGui.QToolBox.itemToolTip` 


.. method:: PySide.QtGui.QToolBox.widget(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget at position ``index`` , or 0 if there is no such item.




