.. module:: PySide.QtGui
.. _QDoubleValidator:

QDoubleValidator
****************

.. inheritance-diagram:: QDoubleValidator
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`bottom<PySide.QtGui.QDoubleValidator.bottom>` ()
*    def :meth:`decimals<PySide.QtGui.QDoubleValidator.decimals>` ()
*    def :meth:`notation<PySide.QtGui.QDoubleValidator.notation>` ()
*    def :meth:`setBottom<PySide.QtGui.QDoubleValidator.setBottom>` (arg__1)
*    def :meth:`setDecimals<PySide.QtGui.QDoubleValidator.setDecimals>` (arg__1)
*    def :meth:`setNotation<PySide.QtGui.QDoubleValidator.setNotation>` (arg__1)
*    def :meth:`setTop<PySide.QtGui.QDoubleValidator.setTop>` (arg__1)
*    def :meth:`top<PySide.QtGui.QDoubleValidator.top>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`setRange<PySide.QtGui.QDoubleValidator.setRange>` (bottom, top[, decimals=0])


Detailed Description
--------------------



    The :class:`PySide.QtGui.QDoubleValidator` class provides range checking of floating-point numbers.

    :class:`PySide.QtGui.QDoubleValidator` provides an upper bound, a lower bound, and a limit on the number of digits after the decimal point. It does not provide a :meth:`PySide.QtGui.QValidator.fixup` function.

    You can set the acceptable range in one call with :meth:`PySide.QtGui.QDoubleValidator.setRange` , or with :meth:`PySide.QtGui.QDoubleValidator.setBottom` and :meth:`PySide.QtGui.QDoubleValidator.setTop` . Set the number of decimal places with :meth:`PySide.QtGui.QDoubleValidator.setDecimals` . The :meth:`PySide.QtGui.QDoubleValidator.validate` function returns the validation state.

    :class:`PySide.QtGui.QDoubleValidator` uses its :meth:`PySide.QtGui.QValidator.locale` to interpret the number. For example, in the German locale, "1,234" will be accepted as the fractional number 1.234. In Arabic locales, :class:`PySide.QtGui.QDoubleValidator` will accept Arabic digits.

    In addition, :class:`PySide.QtGui.QDoubleValidator` is always guaranteed to accept a number formatted according to the "C" locale. :class:`PySide.QtGui.QDoubleValidator` will not accept numbers with thousand-separators.

    .. seealso::  :class:`PySide.QtGui.QIntValidator`  :class:`PySide.QtGui.QRegExpValidator`  :ref:`Line Edits Example<widgets/lineedits>` 

.. class:: QDoubleValidator([parent=None])
           QDoubleValidator(bottom, top, decimals, parent)

    :param decimals: :class:`PySide.QtCore.int`
    :param bottom: :class:`PySide.QtCore.double`
    :param parent: :class:`PySide.QtCore.QObject`
    :param top: :class:`PySide.QtCore.double`

    Constructs a validator object with a ``parent`` object that accepts any double.


    Constructs a validator object with a ``parent`` object. This validator will accept doubles from ``bottom`` to ``top`` inclusive, with up to ``decimals`` digits after the decimal point.


.. attribute:: PySide.QtGui.QDoubleValidator.Notation

    This enum defines the allowed notations for entering a double.

    +-----------------------------------+------------------------------------------------------------------------------------+
    |Constant                           |Description                                                                         |
    +===================================+====================================================================================+
    |QDoubleValidator.StandardNotation  |The string is written as a standard number (i.e. 0.015).                            |
    +-----------------------------------+------------------------------------------------------------------------------------+
    |QDoubleValidator.ScientificNotation|The string is written in scientific form. It may have an exponent part(i.e. 1.5E-2).|
    +-----------------------------------+------------------------------------------------------------------------------------+


.. method:: PySide.QtGui.QDoubleValidator.bottom()


    :rtype: :class:`PySide.QtCore.double`




    This property holds the validator's minimum acceptable value.

    By default, this property contains a value of -infinity.

    .. seealso::  :meth:`PySide.QtGui.QDoubleValidator.setRange` 


.. method:: PySide.QtGui.QDoubleValidator.decimals()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the validator's maximum number of digits after the decimal point.

    By default, this property contains a value of 1000.

    .. seealso::  :meth:`PySide.QtGui.QDoubleValidator.setRange` 


.. method:: PySide.QtGui.QDoubleValidator.notation()


    :rtype: :attr:`PySide.QtGui.QDoubleValidator.Notation`




    This property holds the notation of how a string can describe a number.

    By default, this property is set to :attr:`ScientificNotation<QDoubleValidator.Notation>` .

    .. seealso::  :attr:`QDoubleValidator.Notation` 


.. method:: PySide.QtGui.QDoubleValidator.setBottom(arg__1)


    :param arg__1: :class:`PySide.QtCore.double`




    This property holds the validator's minimum acceptable value.

    By default, this property contains a value of -infinity.

    .. seealso::  :meth:`PySide.QtGui.QDoubleValidator.setRange` 


.. method:: PySide.QtGui.QDoubleValidator.setDecimals(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the validator's maximum number of digits after the decimal point.

    By default, this property contains a value of 1000.

    .. seealso::  :meth:`PySide.QtGui.QDoubleValidator.setRange` 


.. method:: PySide.QtGui.QDoubleValidator.setNotation(arg__1)


    :param arg__1: :attr:`PySide.QtGui.QDoubleValidator.Notation`




    This property holds the notation of how a string can describe a number.

    By default, this property is set to :attr:`ScientificNotation<QDoubleValidator.Notation>` .

    .. seealso::  :attr:`QDoubleValidator.Notation` 


.. method:: PySide.QtGui.QDoubleValidator.setRange(bottom, top[, decimals=0])


    :param bottom: :class:`PySide.QtCore.double`
    :param top: :class:`PySide.QtCore.double`
    :param decimals: :class:`PySide.QtCore.int`




    Sets the validator to accept doubles from ``minimum`` to ``maximum`` inclusive, with at most ``decimals`` digits after the decimal point.



.. method:: PySide.QtGui.QDoubleValidator.setTop(arg__1)


    :param arg__1: :class:`PySide.QtCore.double`




    This property holds the validator's maximum acceptable value.

    By default, this property contains a value of infinity.

    .. seealso::  :meth:`PySide.QtGui.QDoubleValidator.setRange` 


.. method:: PySide.QtGui.QDoubleValidator.top()


    :rtype: :class:`PySide.QtCore.double`




    This property holds the validator's maximum acceptable value.

    By default, this property contains a value of infinity.

    .. seealso::  :meth:`PySide.QtGui.QDoubleValidator.setRange` 



