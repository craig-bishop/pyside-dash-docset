.. module:: PySide.QtGui
.. _QTextTableCell:

QTextTableCell
**************

.. inheritance-diagram:: QTextTableCell
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtGui.QTextTableCell.__eq__>` (other)
*    def :meth:`__ne__<PySide.QtGui.QTextTableCell.__ne__>` (other)
*    def :meth:`begin<PySide.QtGui.QTextTableCell.begin>` ()
*    def :meth:`column<PySide.QtGui.QTextTableCell.column>` ()
*    def :meth:`columnSpan<PySide.QtGui.QTextTableCell.columnSpan>` ()
*    def :meth:`end<PySide.QtGui.QTextTableCell.end>` ()
*    def :meth:`firstCursorPosition<PySide.QtGui.QTextTableCell.firstCursorPosition>` ()
*    def :meth:`firstPosition<PySide.QtGui.QTextTableCell.firstPosition>` ()
*    def :meth:`format<PySide.QtGui.QTextTableCell.format>` ()
*    def :meth:`isValid<PySide.QtGui.QTextTableCell.isValid>` ()
*    def :meth:`lastCursorPosition<PySide.QtGui.QTextTableCell.lastCursorPosition>` ()
*    def :meth:`lastPosition<PySide.QtGui.QTextTableCell.lastPosition>` ()
*    def :meth:`row<PySide.QtGui.QTextTableCell.row>` ()
*    def :meth:`rowSpan<PySide.QtGui.QTextTableCell.rowSpan>` ()
*    def :meth:`setFormat<PySide.QtGui.QTextTableCell.setFormat>` (format)
*    def :meth:`tableCellFormatIndex<PySide.QtGui.QTextTableCell.tableCellFormatIndex>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTextTableCell` class represents the properties of a cell in a :class:`PySide.QtGui.QTextTable` .

    Table cells are pieces of document structure that belong to a table. The table orders cells into particular rows and columns; cells can also span multiple columns and rows.

    Cells are usually created when a table is inserted into a document with :meth:`QTextCursor.insertTable()<PySide.QtGui.QTextCursor.insertTable>` , but they are also created and destroyed when a table is resized.

    Cells contain information about their location in a table; you can obtain the :meth:`PySide.QtGui.QTextTableCell.row` and :meth:`PySide.QtGui.QTextTableCell.column` numbers of a cell, and its :meth:`PySide.QtGui.QTextTableCell.rowSpan` and :meth:`PySide.QtGui.QTextTableCell.columnSpan` .

    The :meth:`PySide.QtGui.QTextTableCell.format` of a cell describes the default character format of its contents. The :meth:`PySide.QtGui.QTextTableCell.firstCursorPosition` and :meth:`PySide.QtGui.QTextTableCell.lastCursorPosition` functions are used to obtain the extent of the cell in the document.

    .. seealso::  :class:`PySide.QtGui.QTextTable`  :class:`PySide.QtGui.QTextTableFormat` 

.. class:: QTextTableCell()
           QTextTableCell(o)

    :param o: :class:`PySide.QtGui.QTextTableCell`

    Constructs an invalid table cell.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.isValid` 

    Copy constructor. Creates a new :class:`PySide.QtGui.QTextTableCell` object based on the ``other`` cell.


.. method:: PySide.QtGui.QTextTableCell.begin()


    :rtype: :class:`PySide.QtGui.QTextFrame::iterator`




    Returns a frame iterator pointing to the beginning of the table's cell.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.end` 


.. method:: PySide.QtGui.QTextTableCell.column()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of the column in the table that contains this cell.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.row` 


.. method:: PySide.QtGui.QTextTableCell.columnSpan()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of columns this cell spans. The default is 1.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.rowSpan` 


.. method:: PySide.QtGui.QTextTableCell.end()


    :rtype: :class:`PySide.QtGui.QTextFrame::iterator`




    Returns a frame iterator pointing to the end of the table's cell.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.begin` 


.. method:: PySide.QtGui.QTextTableCell.firstCursorPosition()


    :rtype: :class:`PySide.QtGui.QTextCursor`




    Returns the first valid cursor position in this cell.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.lastCursorPosition` 


.. method:: PySide.QtGui.QTextTableCell.firstPosition()


    :rtype: :class:`PySide.QtCore.int`




    Returns the first valid position in the document occupied by this cell.



.. method:: PySide.QtGui.QTextTableCell.format()


    :rtype: :class:`PySide.QtGui.QTextCharFormat`




    Returns the cell's character format.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.setFormat` 


.. method:: PySide.QtGui.QTextTableCell.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this is a valid table cell; otherwise returns false.



.. method:: PySide.QtGui.QTextTableCell.lastCursorPosition()


    :rtype: :class:`PySide.QtGui.QTextCursor`




    Returns the last valid cursor position in this cell.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.firstCursorPosition` 


.. method:: PySide.QtGui.QTextTableCell.lastPosition()


    :rtype: :class:`PySide.QtCore.int`




    Returns the last valid position in the document occupied by this cell.



.. method:: PySide.QtGui.QTextTableCell.__ne__(other)


    :param other: :class:`PySide.QtGui.QTextTableCell`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this cell object and the ``other`` cell object describe different cells; otherwise returns false.



.. method:: PySide.QtGui.QTextTableCell.__eq__(other)


    :param other: :class:`PySide.QtGui.QTextTableCell`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this cell object and the ``other`` cell object describe the same cell; otherwise returns false.



.. method:: PySide.QtGui.QTextTableCell.row()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of the row in the table that contains this cell.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.column` 


.. method:: PySide.QtGui.QTextTableCell.rowSpan()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of rows this cell spans. The default is 1.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.columnSpan` 


.. method:: PySide.QtGui.QTextTableCell.setFormat(format)


    :param format: :class:`PySide.QtGui.QTextCharFormat`




    Sets the cell's character format to ``format`` . This can for example be used to change the background color of the entire cell:

    :class:`PySide.QtGui.QTextTableCell` cell = table->cellAt(2, 3); :class:`PySide.QtGui.QTextCharFormat` format = cell. :meth:`PySide.QtGui.QTextTableCell.format` ; format.setBackground( :attr:`Qt.blue<Qt.GlobalColor>` ); cell.setFormat(format);

    Note that the cell's row or column span cannot be changed through this function. You have to use QTextTable::mergeCells and QTextTable::splitCell instead.

    .. seealso::  :meth:`PySide.QtGui.QTextTableCell.format` 


.. method:: PySide.QtGui.QTextTableCell.tableCellFormatIndex()


    :rtype: :class:`PySide.QtCore.int`




    Returns the index of the tableCell's format in the document's internal list of formats.

    .. seealso::  :meth:`QTextDocument.allFormats()<PySide.QtGui.QTextDocument.allFormats>` 



