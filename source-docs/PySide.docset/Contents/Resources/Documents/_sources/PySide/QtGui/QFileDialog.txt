.. module:: PySide.QtGui
.. _QFileDialog:

QFileDialog
***********

.. inheritance-diagram:: QFileDialog
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`acceptMode<PySide.QtGui.QFileDialog.acceptMode>` ()
*    def :meth:`confirmOverwrite<PySide.QtGui.QFileDialog.confirmOverwrite>` ()
*    def :meth:`defaultSuffix<PySide.QtGui.QFileDialog.defaultSuffix>` ()
*    def :meth:`directory<PySide.QtGui.QFileDialog.directory>` ()
*    def :meth:`fileMode<PySide.QtGui.QFileDialog.fileMode>` ()
*    def :meth:`filter<PySide.QtGui.QFileDialog.filter>` ()
*    def :meth:`filters<PySide.QtGui.QFileDialog.filters>` ()
*    def :meth:`history<PySide.QtGui.QFileDialog.history>` ()
*    def :meth:`iconProvider<PySide.QtGui.QFileDialog.iconProvider>` ()
*    def :meth:`isNameFilterDetailsVisible<PySide.QtGui.QFileDialog.isNameFilterDetailsVisible>` ()
*    def :meth:`isReadOnly<PySide.QtGui.QFileDialog.isReadOnly>` ()
*    def :meth:`itemDelegate<PySide.QtGui.QFileDialog.itemDelegate>` ()
*    def :meth:`labelText<PySide.QtGui.QFileDialog.labelText>` (label)
*    def :meth:`nameFilters<PySide.QtGui.QFileDialog.nameFilters>` ()
*    def :meth:`open<PySide.QtGui.QFileDialog.open>` (receiver, member)
*    def :meth:`options<PySide.QtGui.QFileDialog.options>` ()
*    def :meth:`proxyModel<PySide.QtGui.QFileDialog.proxyModel>` ()
*    def :meth:`resolveSymlinks<PySide.QtGui.QFileDialog.resolveSymlinks>` ()
*    def :meth:`restoreState<PySide.QtGui.QFileDialog.restoreState>` (state)
*    def :meth:`saveState<PySide.QtGui.QFileDialog.saveState>` ()
*    def :meth:`selectFile<PySide.QtGui.QFileDialog.selectFile>` (filename)
*    def :meth:`selectFilter<PySide.QtGui.QFileDialog.selectFilter>` (filter)
*    def :meth:`selectNameFilter<PySide.QtGui.QFileDialog.selectNameFilter>` (filter)
*    def :meth:`selectedFiles<PySide.QtGui.QFileDialog.selectedFiles>` ()
*    def :meth:`selectedFilter<PySide.QtGui.QFileDialog.selectedFilter>` ()
*    def :meth:`selectedNameFilter<PySide.QtGui.QFileDialog.selectedNameFilter>` ()
*    def :meth:`setAcceptMode<PySide.QtGui.QFileDialog.setAcceptMode>` (mode)
*    def :meth:`setConfirmOverwrite<PySide.QtGui.QFileDialog.setConfirmOverwrite>` (enabled)
*    def :meth:`setDefaultSuffix<PySide.QtGui.QFileDialog.setDefaultSuffix>` (suffix)
*    def :meth:`setDirectory<PySide.QtGui.QFileDialog.setDirectory>` (directory)
*    def :meth:`setDirectory<PySide.QtGui.QFileDialog.setDirectory>` (directory)
*    def :meth:`setFileMode<PySide.QtGui.QFileDialog.setFileMode>` (mode)
*    def :meth:`setFilter<PySide.QtGui.QFileDialog.setFilter>` (filter)
*    def :meth:`setFilter<PySide.QtGui.QFileDialog.setFilter>` (filters)
*    def :meth:`setFilters<PySide.QtGui.QFileDialog.setFilters>` (filters)
*    def :meth:`setHistory<PySide.QtGui.QFileDialog.setHistory>` (paths)
*    def :meth:`setIconProvider<PySide.QtGui.QFileDialog.setIconProvider>` (provider)
*    def :meth:`setItemDelegate<PySide.QtGui.QFileDialog.setItemDelegate>` (delegate)
*    def :meth:`setLabelText<PySide.QtGui.QFileDialog.setLabelText>` (label, text)
*    def :meth:`setNameFilter<PySide.QtGui.QFileDialog.setNameFilter>` (filter)
*    def :meth:`setNameFilterDetailsVisible<PySide.QtGui.QFileDialog.setNameFilterDetailsVisible>` (enabled)
*    def :meth:`setNameFilters<PySide.QtGui.QFileDialog.setNameFilters>` (filters)
*    def :meth:`setOption<PySide.QtGui.QFileDialog.setOption>` (option[, on=true])
*    def :meth:`setOptions<PySide.QtGui.QFileDialog.setOptions>` (options)
*    def :meth:`setProxyModel<PySide.QtGui.QFileDialog.setProxyModel>` (model)
*    def :meth:`setReadOnly<PySide.QtGui.QFileDialog.setReadOnly>` (enabled)
*    def :meth:`setResolveSymlinks<PySide.QtGui.QFileDialog.setResolveSymlinks>` (enabled)
*    def :meth:`setSidebarUrls<PySide.QtGui.QFileDialog.setSidebarUrls>` (urls)
*    def :meth:`setViewMode<PySide.QtGui.QFileDialog.setViewMode>` (mode)
*    def :meth:`sidebarUrls<PySide.QtGui.QFileDialog.sidebarUrls>` ()
*    def :meth:`testOption<PySide.QtGui.QFileDialog.testOption>` (option)
*    def :meth:`viewMode<PySide.QtGui.QFileDialog.viewMode>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`currentChanged<PySide.QtGui.QFileDialog.currentChanged>` (path)
*    def :meth:`directoryEntered<PySide.QtGui.QFileDialog.directoryEntered>` (directory)
*    def :meth:`fileSelected<PySide.QtGui.QFileDialog.fileSelected>` (file)
*    def :meth:`filesSelected<PySide.QtGui.QFileDialog.filesSelected>` (files)
*    def :meth:`filterSelected<PySide.QtGui.QFileDialog.filterSelected>` (filter)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`getExistingDirectory<PySide.QtGui.QFileDialog.getExistingDirectory>` ([parent=None[, caption=""[, dir=""[, options=QFileDialog.ShowDirsOnly]]]])
*    def :meth:`getOpenFileName<PySide.QtGui.QFileDialog.getOpenFileName>` ([parent=None[, caption=""[, dir=""[, filter=""[, selectedFilter=""[, options=0]]]]]])
*    def :meth:`getOpenFileNames<PySide.QtGui.QFileDialog.getOpenFileNames>` ([parent=None[, caption=""[, dir=""[, filter=""[, selectedFilter=""[, options=0]]]]]])
*    def :meth:`getSaveFileName<PySide.QtGui.QFileDialog.getSaveFileName>` ([parent=None[, caption=""[, dir=""[, filter=""[, selectedFilter=""[, options=0]]]]]])


Detailed Description
--------------------



    The :class:`PySide.QtGui.QFileDialog` class provides a dialog that allow users to select files or directories.

    The :class:`PySide.QtGui.QFileDialog` class enables a user to traverse the file system in order to select one or many files or a directory.

    The easiest way to create a :class:`PySide.QtGui.QFileDialog` is to use the static functions. On Windows, Mac OS X, KDE and GNOME, these static functions will call the native file dialog when possible.

    ::

        fileName = QFileDialog.getOpenFileName(self,
            tr("Open Image"), "/home/jana", tr("Image Files (*.png *.jpg *.bmp)"))


    In the above example, a modal :class:`PySide.QtGui.QFileDialog` is created using a static function. The dialog initially displays the contents of the "/home/jana" directory, and displays files matching the patterns given in the string "Image Files (\*.png \*.jpg \*.bmp)". The parent of the file dialog is set to *this* , and the window title is set to "Open Image".

    If you want to use multiple filters, separate each one with *two* semicolons. For example:

    ::

        "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"


    You can create your own :class:`PySide.QtGui.QFileDialog` without using the static functions. By calling :meth:`PySide.QtGui.QFileDialog.setFileMode` , you can specify what the user must select in the dialog:

    ::

        dialog = QFileDialog(self)
        dialog.setFileMode(QFileDialog.AnyFile)


    In the above example, the mode of the file dialog is set to :attr:`AnyFile<QFileDialog.FileMode>` , meaning that the user can select any file, or even specify a file that doesn't exist. This mode is useful for creating a "Save As" file dialog. Use :attr:`ExistingFile<QFileDialog.FileMode>` if the user must select an existing file, or :attr:`Directory<QFileDialog.FileMode>` if only a directory may be selected. See the :attr:`QFileDialog.FileMode` enum for the complete list of modes.

    The :meth:`PySide.QtGui.QFileDialog.fileMode` property contains the mode of operation for the dialog; this indicates what types of objects the user is expected to select. Use :meth:`PySide.QtGui.QFileDialog.setNameFilter` to set the dialog's file filter. For example:

    ::

        dialog.setNameFilter(tr("Images (*.png *.xpm *.jpg)"))


    In the above example, the filter is set to ``"Images (*.png *.xpm *.jpg)"`` , this means that only files with the extension ``png`` , ``xpm`` , or ``jpg`` will be shown in the :class:`PySide.QtGui.QFileDialog` . You can apply several filters by using :meth:`PySide.QtGui.QFileDialog.setNameFilters` . Use :meth:`PySide.QtGui.QFileDialog.selectNameFilter` to select one of the filters you've given as the file dialog's default filter.

    The file dialog has two view modes: :attr:`List<QFileDialog.ViewMode>` and :attr:`Detail<QFileDialog.ViewMode>` . :attr:`List<QFileDialog.ViewMode>` presents the contents of the current directory as a list of file and directory names. :attr:`Detail<QFileDialog.ViewMode>` also displays a list of file and directory names, but provides additional information alongside each name, such as the file size and modification date. Set the mode with :meth:`PySide.QtGui.QFileDialog.setViewMode` :

    ::

        dialog.setViewMode(QFileDialog.Detail)


    The last important function you will need to use when creating your own file dialog is :meth:`PySide.QtGui.QFileDialog.selectedFiles` .

    ::

        if dialog.exec_():
            fileNames = dialog.selectedFiles()


    In the above example, a modal file dialog is created and shown. If the user clicked OK, the file they selected is put in ``fileName`` .

    The dialog's working directory can be set with :meth:`PySide.QtGui.QFileDialog.setDirectory` . Each file in the current directory can be selected using the :meth:`PySide.QtGui.QFileDialog.selectFile` function.

    The :ref:`Standard Dialogs<dialogs/standarddialogs>` example shows how to use :class:`PySide.QtGui.QFileDialog` as well as other built-in Qt dialogs.

    .. seealso::  :class:`PySide.QtCore.QDir`  :class:`PySide.QtCore.QFileInfo`  :class:`PySide.QtCore.QFile`  :class:`PySide.QtGui.QPrintDialog`  :class:`PySide.QtGui.QColorDialog`  :class:`PySide.QtGui.QFontDialog`  :ref:`Standard Dialogs Example<dialogs/standarddialogs>`  :ref:`Application Example<mainwindows/application>` 

.. class:: QFileDialog(parent, f)
           QFileDialog([parent=None[, caption=""[, directory=""[, filter=""]]]])

    :param f: :class:`PySide.QtCore.Qt.WindowFlags`
    :param directory: unicode
    :param caption: unicode
    :param filter: unicode
    :param parent: :class:`PySide.QtGui.QWidget`



    Constructs a file dialog with the given ``parent`` and ``caption`` that initially displays the contents of the specified ``directory`` . The contents of the directory are filtered before being shown in the dialog, using a semicolon-separated list of filters specified by ``filter`` .


.. attribute:: PySide.QtGui.QFileDialog.FileMode

    This enum is used to indicate what the user may select in the file dialog; i.e. what the dialog will return if the user clicks OK.

    +-------------------------+------------------------------------------------------------------+
    |Constant                 |Description                                                       |
    +=========================+==================================================================+
    |QFileDialog.AnyFile      |The name of a file, whether it exists or not.                     |
    +-------------------------+------------------------------------------------------------------+
    |QFileDialog.ExistingFile |The name of a single existing file.                               |
    +-------------------------+------------------------------------------------------------------+
    |QFileDialog.Directory    |The name of a directory. Both files and directories are displayed.|
    +-------------------------+------------------------------------------------------------------+
    |QFileDialog.ExistingFiles|The names of zero or more existing files.                         |
    +-------------------------+------------------------------------------------------------------+

    This value is obsolete since Qt 4.5:

    +-------------------------+------------------------------------------------------------------------------------------+
    |Constant                 |Description                                                                               |
    +=========================+==========================================================================================+
    |QFileDialog.DirectoryOnly|Use ``Directory`` and setOption( :attr:`ShowDirsOnly<QFileDialog.Option>` , true) instead.|
    +-------------------------+------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setFileMode` 

.. attribute:: PySide.QtGui.QFileDialog.Option

    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                         |Description                                                                                                                                                                                                                                                                                                                                           |
    +=================================+======================================================================================================================================================================================================================================================================================================================================================+
    |QFileDialog.ShowDirsOnly         |Only show directories in the file dialog. By default both files and directories are shown. (Valid only in the :attr:`Directory<QFileDialog.FileMode>` file mode.)                                                                                                                                                                                     |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFileDialog.DontResolveSymlinks  |Don't resolve symlinks in the file dialog. By default symlinks are resolved.                                                                                                                                                                                                                                                                          |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFileDialog.DontConfirmOverwrite |Don't ask for confirmation if an existing file is selected. By default confirmation is requested.                                                                                                                                                                                                                                                     |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFileDialog.DontUseNativeDialog  |Don't use the native file dialog. By default, the native file dialog is used unless you use a subclass of :class:`PySide.QtGui.QFileDialog` that contains the :meth:`~PySide.QtGui.QFileDialog.Q\_OBJECT` macro.                                                                                                                                      |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFileDialog.ReadOnly             |Indicates that the model is readonly.                                                                                                                                                                                                                                                                                                                 |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFileDialog.HideNameFilterDetails|Indicates if the file name filter details are hidden or not.                                                                                                                                                                                                                                                                                          |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFileDialog.DontUseSheet         |In previous versions of Qt, the static functions would create a sheet by default if the static function was given a parent. This is no longer supported and does nothing in Qt 4.5, The static functions will always be an application modal dialog. If you want to use sheets, use :meth:`QFileDialog.open()<PySide.QtGui.QFileDialog.open>` instead.|
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QFileDialog.DialogLabel

    +--------------------+-----------+
    |Constant            |Description|
    +====================+===========+
    |QFileDialog.LookIn  |           |
    +--------------------+-----------+
    |QFileDialog.FileName|           |
    +--------------------+-----------+
    |QFileDialog.FileType|           |
    +--------------------+-----------+
    |QFileDialog.Accept  |           |
    +--------------------+-----------+
    |QFileDialog.Reject  |           |
    +--------------------+-----------+


.. attribute:: PySide.QtGui.QFileDialog.ViewMode

    This enum describes the view mode of the file dialog; i.e. what information about each file will be displayed.

    +------------------+---------------------------------------------------------------------+
    |Constant          |Description                                                          |
    +==================+=====================================================================+
    |QFileDialog.Detail|Displays an icon, a name, and details for each item in the directory.|
    +------------------+---------------------------------------------------------------------+
    |QFileDialog.List  |Displays only an icon and a name for each item in the directory.     |
    +------------------+---------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setViewMode` 

.. attribute:: PySide.QtGui.QFileDialog.AcceptMode

    +----------------------+-----------+
    |Constant              |Description|
    +======================+===========+
    |QFileDialog.AcceptOpen|           |
    +----------------------+-----------+
    |QFileDialog.AcceptSave|           |
    +----------------------+-----------+


.. method:: PySide.QtGui.QFileDialog.acceptMode()


    :rtype: :attr:`PySide.QtGui.QFileDialog.AcceptMode`




    This property holds the accept mode of the dialog.

    The action mode defines whether the dialog is for opening or saving files.

    By default, this property is set to :attr:`AcceptOpen<QFileDialog.AcceptMode>` .

    .. seealso::  :attr:`QFileDialog.AcceptMode` 


.. method:: PySide.QtGui.QFileDialog.confirmOverwrite()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the filedialog should ask before accepting a selected file, when the accept mode is :attr:`AcceptSave<QFileDialog.AcceptMode>` .

    Use setOption( :attr:`DontConfirmOverwrite<QFileDialog.Option>` , !*enabled* ) or !testOption( :attr:`DontConfirmOverwrite<QFileDialog.Option>` ) instead.



.. method:: PySide.QtGui.QFileDialog.currentChanged(path)


    :param path: unicode






.. method:: PySide.QtGui.QFileDialog.defaultSuffix()


    :rtype: unicode




    This property holds suffix added to the filename if no other suffix was specified.

    This property specifies a string that will be added to the filename if it has no suffix already. The suffix is typically used to indicate the file type (e.g. "txt" indicates a text file).



.. method:: PySide.QtGui.QFileDialog.directory()


    :rtype: :class:`PySide.QtCore.QDir`




    Returns the directory currently being displayed in the dialog.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setDirectory` 


.. method:: PySide.QtGui.QFileDialog.directoryEntered(directory)


    :param directory: unicode






.. method:: PySide.QtGui.QFileDialog.fileMode()


    :rtype: :attr:`PySide.QtGui.QFileDialog.FileMode`




    This property holds the file mode of the dialog.

    The file mode defines the number and type of items that the user is expected to select in the dialog.

    By default, this property is set to :attr:`AnyFile<QFileDialog.FileMode>` .

    This function will set the labels for the :attr:`FileName<QFileDialog.DialogLabel>` and :attr:`Accept<QFileDialog.DialogLabel>` :attr:`QFileDialog.DialogLabel` s. It is possible to set custom text after the call to :meth:`PySide.QtGui.QFileDialog.setFileMode` .

    .. seealso::  :attr:`QFileDialog.FileMode` 


.. method:: PySide.QtGui.QFileDialog.fileSelected(file)


    :param file: unicode






.. method:: PySide.QtGui.QFileDialog.filesSelected(files)


    :param files: list of strings






.. method:: PySide.QtGui.QFileDialog.filter()


    :rtype: :class:`PySide.QtCore.QDir.Filters`




    Returns the filter that is used when displaying files.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setFilter` 


.. method:: PySide.QtGui.QFileDialog.filterSelected(filter)


    :param filter: unicode






.. method:: PySide.QtGui.QFileDialog.filters()


    :rtype: list of strings




    Use :meth:`PySide.QtGui.QFileDialog.nameFilters` instead.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setFilters` 


.. staticmethod:: PySide.QtGui.QFileDialog.getExistingDirectory([parent=None[, caption=""[, dir=""[, options=QFileDialog.ShowDirsOnly]]]])


    :param parent: :class:`PySide.QtGui.QWidget`
    :param caption: unicode
    :param dir: unicode
    :param options: :class:`PySide.QtGui.QFileDialog.Options`
    :rtype: unicode







.. staticmethod:: PySide.QtGui.QFileDialog.getOpenFileName([parent=None[, caption=""[, dir=""[, filter=""[, selectedFilter=""[, options=0]]]]]])


    :param parent: :class:`PySide.QtGui.QWidget`
    :param caption: unicode
    :param dir: unicode
    :param filter: unicode
    :param selectedFilter: unicode
    :param options: :class:`PySide.QtGui.QFileDialog.Options`
    :rtype: (fileName, selectedFilter)







.. staticmethod:: PySide.QtGui.QFileDialog.getOpenFileNames([parent=None[, caption=""[, dir=""[, filter=""[, selectedFilter=""[, options=0]]]]]])


    :param parent: :class:`PySide.QtGui.QWidget`
    :param caption: unicode
    :param dir: unicode
    :param filter: unicode
    :param selectedFilter: unicode
    :param options: :class:`PySide.QtGui.QFileDialog.Options`
    :rtype: (fileNames, selectedFilter)







.. staticmethod:: PySide.QtGui.QFileDialog.getSaveFileName([parent=None[, caption=""[, dir=""[, filter=""[, selectedFilter=""[, options=0]]]]]])


    :param parent: :class:`PySide.QtGui.QWidget`
    :param caption: unicode
    :param dir: unicode
    :param filter: unicode
    :param selectedFilter: unicode
    :param options: :class:`PySide.QtGui.QFileDialog.Options`
    :rtype: (fileName, selectedFilter)







.. method:: PySide.QtGui.QFileDialog.history()


    :rtype: list of strings




    Returns the browsing history of the filedialog as a list of paths.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setHistory` 


.. method:: PySide.QtGui.QFileDialog.iconProvider()


    :rtype: :class:`PySide.QtGui.QFileIconProvider`




    Returns the icon provider used by the filedialog.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setIconProvider` 


.. method:: PySide.QtGui.QFileDialog.isNameFilterDetailsVisible()


    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QFileDialog.isReadOnly()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds Whether the filedialog is read-only.

    If this property is set to false, the file dialog will allow renaming, and deleting of files and directories and creating directories.

    Use setOption( :attr:`ReadOnly<QFileDialog.Option>` , *enabled* ) or testOption( :attr:`ReadOnly<QFileDialog.Option>` ) instead.



.. method:: PySide.QtGui.QFileDialog.itemDelegate()


    :rtype: :class:`PySide.QtGui.QAbstractItemDelegate`




    Returns the item delegate used to render the items in the views in the filedialog.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setItemDelegate` 


.. method:: PySide.QtGui.QFileDialog.labelText(label)


    :param label: :attr:`PySide.QtGui.QFileDialog.DialogLabel`
    :rtype: unicode




    Returns the text shown in the filedialog in the specified ``label`` .

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setLabelText` 


.. method:: PySide.QtGui.QFileDialog.nameFilters()


    :rtype: list of strings




    Returns the file type filters that are in operation on this file dialog.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setNameFilters` 


.. method:: PySide.QtGui.QFileDialog.open(receiver, member)


    :param receiver: :class:`PySide.QtCore.QObject`
    :param member: str




    This is an overloaded function.

    This function connects one of its signals to the slot specified by ``receiver`` and ``member`` . The specific signal depends is :meth:`PySide.QtGui.QFileDialog.filesSelected` if :meth:`PySide.QtGui.QFileDialog.fileMode` is :attr:`ExistingFiles<QFileDialog.FileMode>` and :meth:`PySide.QtGui.QFileDialog.fileSelected` if :meth:`PySide.QtGui.QFileDialog.fileMode` is anything else.

    The signal will be disconnected from the slot when the dialog is closed.



.. method:: PySide.QtGui.QFileDialog.options()


    :rtype: :class:`PySide.QtGui.QFileDialog.Options`




    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setOptions` 


.. method:: PySide.QtGui.QFileDialog.proxyModel()


    :rtype: :class:`PySide.QtGui.QAbstractProxyModel`




    Returns the proxy model used by the file dialog. By default no proxy is set.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setProxyModel` 


.. method:: PySide.QtGui.QFileDialog.resolveSymlinks()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the filedialog should resolve shortcuts.

    If this property is set to true, the file dialog will resolve shortcuts or symbolic links.

    Use setOption( :attr:`DontResolveSymlinks<QFileDialog.Option>` , !``enabled`` ) or !testOption( :attr:`DontResolveSymlinks<QFileDialog.Option>` ).



.. method:: PySide.QtGui.QFileDialog.restoreState(state)


    :param state: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.bool`




    Restores the dialogs's layout, history and current directory to the ``state`` specified.

    Typically this is used in conjunction with :class:`PySide.QtCore.QSettings` to restore the size from a past session.

    Returns false if there are errors



.. method:: PySide.QtGui.QFileDialog.saveState()


    :rtype: :class:`PySide.QtCore.QByteArray`




    Saves the state of the dialog's layout, history and current directory.

    Typically this is used in conjunction with :class:`PySide.QtCore.QSettings` to remember the size for a future session. A version number is stored as part of the data.



.. method:: PySide.QtGui.QFileDialog.selectFile(filename)


    :param filename: unicode




    Selects the given ``filename`` in the file dialog.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.selectedFiles` 


.. method:: PySide.QtGui.QFileDialog.selectFilter(filter)


    :param filter: unicode




    Use :meth:`PySide.QtGui.QFileDialog.selectNameFilter` instead.



.. method:: PySide.QtGui.QFileDialog.selectNameFilter(filter)


    :param filter: unicode




    Sets the current file type ``filter`` . Multiple filters can be passed in ``filter`` by separating them with semicolons or spaces.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setNameFilter`  :meth:`PySide.QtGui.QFileDialog.setNameFilters`  :meth:`PySide.QtGui.QFileDialog.selectedNameFilter` 


.. method:: PySide.QtGui.QFileDialog.selectedFiles()


    :rtype: list of strings




    Returns a list of strings containing the absolute paths of the selected files in the dialog. If no files are selected, or the mode is not :attr:`ExistingFiles<QFileDialog.FileMode>` or :attr:`ExistingFile<QFileDialog.FileMode>` , :meth:`PySide.QtGui.QFileDialog.selectedFiles` contains the current path in the viewport.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.selectedNameFilter`  :meth:`PySide.QtGui.QFileDialog.selectFile` 


.. method:: PySide.QtGui.QFileDialog.selectedFilter()


    :rtype: unicode




    Use :meth:`PySide.QtGui.QFileDialog.selectedNameFilter` instead.



.. method:: PySide.QtGui.QFileDialog.selectedNameFilter()


    :rtype: unicode




    Returns the filter that the user selected in the file dialog.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.selectedFiles` 


.. method:: PySide.QtGui.QFileDialog.setAcceptMode(mode)


    :param mode: :attr:`PySide.QtGui.QFileDialog.AcceptMode`




    This property holds the accept mode of the dialog.

    The action mode defines whether the dialog is for opening or saving files.

    By default, this property is set to :attr:`AcceptOpen<QFileDialog.AcceptMode>` .

    .. seealso::  :attr:`QFileDialog.AcceptMode` 


.. method:: PySide.QtGui.QFileDialog.setConfirmOverwrite(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether the filedialog should ask before accepting a selected file, when the accept mode is :attr:`AcceptSave<QFileDialog.AcceptMode>` .

    Use setOption( :attr:`DontConfirmOverwrite<QFileDialog.Option>` , !*enabled* ) or !testOption( :attr:`DontConfirmOverwrite<QFileDialog.Option>` ) instead.



.. method:: PySide.QtGui.QFileDialog.setDefaultSuffix(suffix)


    :param suffix: unicode




    This property holds suffix added to the filename if no other suffix was specified.

    This property specifies a string that will be added to the filename if it has no suffix already. The suffix is typically used to indicate the file type (e.g. "txt" indicates a text file).



.. method:: PySide.QtGui.QFileDialog.setDirectory(directory)


    :param directory: unicode




    Sets the file dialog's current ``directory`` .

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.directory` 


.. method:: PySide.QtGui.QFileDialog.setDirectory(directory)


    :param directory: :class:`PySide.QtCore.QDir`




    This is an overloaded function.



.. method:: PySide.QtGui.QFileDialog.setFileMode(mode)


    :param mode: :attr:`PySide.QtGui.QFileDialog.FileMode`




    This property holds the file mode of the dialog.

    The file mode defines the number and type of items that the user is expected to select in the dialog.

    By default, this property is set to :attr:`AnyFile<QFileDialog.FileMode>` .

    This function will set the labels for the :attr:`FileName<QFileDialog.DialogLabel>` and :attr:`Accept<QFileDialog.DialogLabel>` :attr:`QFileDialog.DialogLabel` s. It is possible to set custom text after the call to :meth:`PySide.QtGui.QFileDialog.setFileMode` .

    .. seealso::  :attr:`QFileDialog.FileMode` 


.. method:: PySide.QtGui.QFileDialog.setFilter(filters)


    :param filters: :class:`PySide.QtCore.QDir.Filters`







.. method:: PySide.QtGui.QFileDialog.setFilter(filter)


    :param filter: unicode




    Use :meth:`PySide.QtGui.QFileDialog.setNameFilter` instead.



.. method:: PySide.QtGui.QFileDialog.setFilters(filters)


    :param filters: list of strings




    Use :meth:`PySide.QtGui.QFileDialog.setNameFilters` instead.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.filters` 


.. method:: PySide.QtGui.QFileDialog.setHistory(paths)


    :param paths: list of strings




    Sets the browsing history of the filedialog to contain the given ``paths`` .

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.history` 


.. method:: PySide.QtGui.QFileDialog.setIconProvider(provider)


    :param provider: :class:`PySide.QtGui.QFileIconProvider`




    Sets the icon provider used by the filedialog to the specified ``provider`` .

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.iconProvider` 


.. method:: PySide.QtGui.QFileDialog.setItemDelegate(delegate)


    :param delegate: :class:`PySide.QtGui.QAbstractItemDelegate`




    Sets the item delegate used to render items in the views in the file dialog to the given ``delegate`` .

    .. warning::  You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the :meth:`PySide.QtGui.QAbstractItemDelegate.closeEditor` signal, and attempt to access, modify or close an editor that has already been closed.

    Note that the model used is :class:`PySide.QtGui.QFileSystemModel` . It has custom item data roles, which is described by the :attr:`QFileSystemModel.Roles` enum. You can use a :class:`PySide.QtGui.QFileIconProvider` if you only want custom icons.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.itemDelegate`  :meth:`PySide.QtGui.QFileDialog.setIconProvider`  :class:`PySide.QtGui.QFileSystemModel` 


.. method:: PySide.QtGui.QFileDialog.setLabelText(label, text)


    :param label: :attr:`PySide.QtGui.QFileDialog.DialogLabel`
    :param text: unicode




    Sets the ``text`` shown in the filedialog in the specified ``label`` .

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.labelText` 


.. method:: PySide.QtGui.QFileDialog.setNameFilter(filter)


    :param filter: unicode




    Sets the filter used in the file dialog to the given ``filter`` .

    If ``filter`` contains a pair of parentheses containing one or more of **anything\*something** , separated by spaces, then only the text contained in the parentheses is used as the filter. This means that these calls are all equivalent:

    ::

        dialog.setNameFilter("All C++ files (*.cpp *.cc *.C *.cxx *.c++)")
        dialog.setNameFilter("*.cpp *.cc *.C *.cxx *.c++")


    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setNameFilters` 


.. method:: PySide.QtGui.QFileDialog.setNameFilterDetailsVisible(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    .. seealso::  :meth:`PySide.QtGui.QFileDialog.isNameFilterDetailsVisible` 


.. method:: PySide.QtGui.QFileDialog.setNameFilters(filters)


    :param filters: list of strings




    Sets the ``filters`` used in the file dialog.

    ::

        filters = QStringList()
        filters << "Image files (*.png *.xpm *.jpg)"
                << "Text files (*.txt)"
                << "Any files (*)"

        dialog = QFileDialog(this)
        dialog.setNameFilters(filters)
        dialog.exec_()


    .. seealso::  :meth:`PySide.QtGui.QFileDialog.nameFilters` 


.. method:: PySide.QtGui.QFileDialog.setOption(option[, on=true])


    :param option: :attr:`PySide.QtGui.QFileDialog.Option`
    :param on: :class:`PySide.QtCore.bool`




    Sets the given ``option`` to be enabled if ``on`` is true; otherwise, clears the given ``option`` .

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.options`  :meth:`PySide.QtGui.QFileDialog.testOption` 


.. method:: PySide.QtGui.QFileDialog.setOptions(options)


    :param options: :class:`PySide.QtGui.QFileDialog.Options`







.. method:: PySide.QtGui.QFileDialog.setProxyModel(model)


    :param model: :class:`PySide.QtGui.QAbstractProxyModel`




    Sets the model for the views to the given ``proxyModel`` . This is useful if you want to modify the underlying model; for example, to add columns, filter data or add drives.

    Any existing proxy model will be removed, but not deleted. The file dialog will take ownership of the ``proxyModel`` .

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.proxyModel` 


.. method:: PySide.QtGui.QFileDialog.setReadOnly(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds Whether the filedialog is read-only.

    If this property is set to false, the file dialog will allow renaming, and deleting of files and directories and creating directories.

    Use setOption( :attr:`ReadOnly<QFileDialog.Option>` , *enabled* ) or testOption( :attr:`ReadOnly<QFileDialog.Option>` ) instead.



.. method:: PySide.QtGui.QFileDialog.setResolveSymlinks(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether the filedialog should resolve shortcuts.

    If this property is set to true, the file dialog will resolve shortcuts or symbolic links.

    Use setOption( :attr:`DontResolveSymlinks<QFileDialog.Option>` , !``enabled`` ) or !testOption( :attr:`DontResolveSymlinks<QFileDialog.Option>` ).



.. method:: PySide.QtGui.QFileDialog.setSidebarUrls(urls)


    :param urls: 







.. method:: PySide.QtGui.QFileDialog.setViewMode(mode)


    :param mode: :attr:`PySide.QtGui.QFileDialog.ViewMode`




    This property holds the way files and directories are displayed in the dialog.

    By default, the ``Detail`` mode is used to display information about files and directories.

    .. seealso::  :attr:`QFileDialog.ViewMode` 


.. method:: PySide.QtGui.QFileDialog.sidebarUrls()


    :rtype: 




    Returns a list of urls that are currently in the sidebar

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.setSidebarUrls` 


.. method:: PySide.QtGui.QFileDialog.testOption(option)


    :param option: :attr:`PySide.QtGui.QFileDialog.Option`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``option`` is enabled; otherwise, returns false.

    .. seealso::  :meth:`PySide.QtGui.QFileDialog.options`  :meth:`PySide.QtGui.QFileDialog.setOption` 


.. method:: PySide.QtGui.QFileDialog.viewMode()


    :rtype: :attr:`PySide.QtGui.QFileDialog.ViewMode`




    This property holds the way files and directories are displayed in the dialog.

    By default, the ``Detail`` mode is used to display information about files and directories.

    .. seealso::  :attr:`QFileDialog.ViewMode` 



