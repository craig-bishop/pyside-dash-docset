.. module:: PySide.QtGui
.. _QVector3D:

QVector3D
*********

.. inheritance-diagram:: QVector3D
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QVector3D.__add__>` (, v2)
*    def :meth:`__div__<PySide.QtGui.QVector3D.__div__>` (, divisor)
*    def :meth:`__eq__<PySide.QtGui.QVector3D.__eq__>` (, v2)
*    def :meth:`__iadd__<PySide.QtGui.QVector3D.__iadd__>` (vector)
*    def :meth:`__idiv__<PySide.QtGui.QVector3D.__idiv__>` (divisor)
*    def :meth:`__imul__<PySide.QtGui.QVector3D.__imul__>` (factor)
*    def :meth:`__imul__<PySide.QtGui.QVector3D.__imul__>` (vector)
*    def :meth:`__isub__<PySide.QtGui.QVector3D.__isub__>` (vector)
*    def :meth:`__mul__<PySide.QtGui.QVector3D.__mul__>` (, factor)
*    def :meth:`__mul__<PySide.QtGui.QVector3D.__mul__>` (, matrix)
*    def :meth:`__mul__<PySide.QtGui.QVector3D.__mul__>` (, v2)
*    def :meth:`__mul__<PySide.QtGui.QVector3D.__mul__>` (factor)
*    def :meth:`__mul__<PySide.QtGui.QVector3D.__mul__>` (matrix)
*    def :meth:`__ne__<PySide.QtGui.QVector3D.__ne__>` (, v2)
*    def :meth:`__reduce__<PySide.QtGui.QVector3D.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtGui.QVector3D.__repr__>` ()
*    def :meth:`__sub__<PySide.QtGui.QVector3D.__sub__>` ()
*    def :meth:`__sub__<PySide.QtGui.QVector3D.__sub__>` (, v2)
*    def :meth:`distanceToLine<PySide.QtGui.QVector3D.distanceToLine>` (point, direction)
*    def :meth:`distanceToPlane<PySide.QtGui.QVector3D.distanceToPlane>` (plane, normal)
*    def :meth:`distanceToPlane<PySide.QtGui.QVector3D.distanceToPlane>` (plane1, plane2, plane3)
*    def :meth:`isNull<PySide.QtGui.QVector3D.isNull>` ()
*    def :meth:`length<PySide.QtGui.QVector3D.length>` ()
*    def :meth:`lengthSquared<PySide.QtGui.QVector3D.lengthSquared>` ()
*    def :meth:`normalize<PySide.QtGui.QVector3D.normalize>` ()
*    def :meth:`normalized<PySide.QtGui.QVector3D.normalized>` ()
*    def :meth:`setX<PySide.QtGui.QVector3D.setX>` (x)
*    def :meth:`setY<PySide.QtGui.QVector3D.setY>` (y)
*    def :meth:`setZ<PySide.QtGui.QVector3D.setZ>` (z)
*    def :meth:`toPoint<PySide.QtGui.QVector3D.toPoint>` ()
*    def :meth:`toPointF<PySide.QtGui.QVector3D.toPointF>` ()
*    def :meth:`toTuple<PySide.QtGui.QVector3D.toTuple>` ()
*    def :meth:`toVector2D<PySide.QtGui.QVector3D.toVector2D>` ()
*    def :meth:`toVector4D<PySide.QtGui.QVector3D.toVector4D>` ()
*    def :meth:`x<PySide.QtGui.QVector3D.x>` ()
*    def :meth:`y<PySide.QtGui.QVector3D.y>` ()
*    def :meth:`z<PySide.QtGui.QVector3D.z>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`crossProduct<PySide.QtGui.QVector3D.crossProduct>` (v1, v2)
*    def :meth:`dotProduct<PySide.QtGui.QVector3D.dotProduct>` (v1, v2)
*    def :meth:`normal<PySide.QtGui.QVector3D.normal>` (v1, v2)
*    def :meth:`normal<PySide.QtGui.QVector3D.normal>` (v1, v2, v3)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QVector3D` class represents a vector or vertex in 3D space.

    Vectors are one of the main building blocks of 3D representation and drawing. They consist of three coordinates, traditionally called x, y, and z.

    The :class:`PySide.QtGui.QVector3D` class can also be used to represent vertices in 3D space. We therefore do not need to provide a separate vertex class.

    .. seealso::  :class:`PySide.QtGui.QVector2D`  :class:`PySide.QtGui.QVector4D`  :class:`PySide.QtGui.QQuaternion` 

.. class:: QVector3D()
           QVector3D(point)
           QVector3D(point)
           QVector3D(vector)
           QVector3D(vector, zpos)
           QVector3D(QVector3D)
           QVector3D(vector)
           QVector3D(xpos, ypos, zpos)

    :param vector: :class:`PySide.QtGui.QVector2D`
    :param point: :class:`PySide.QtCore.QPoint`
    :param zpos: :class:`PySide.QtCore.qreal`
    :param ypos: :class:`PySide.QtCore.qreal`
    :param xpos: :class:`PySide.QtCore.qreal`
    :param QVector3D: :class:`PySide.QtGui.QVector3D`

    Constructs a null vector, i.e. with coordinates (0, 0, 0).


    Constructs a vector with x and y coordinates from a 2D ``point`` , and a z coordinate of 0.


    Constructs a vector with x and y coordinates from a 2D ``point`` , and a z coordinate of 0.


    Constructs a 3D vector from the specified 2D ``vector`` . The z coordinate is set to zero.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.toVector2D` 

    Constructs a 3D vector from the specified 2D ``vector`` . The z coordinate is set to ``zpos`` .

    .. seealso::  :meth:`PySide.QtGui.QVector3D.toVector2D` 



    Constructs a 3D vector from the specified 4D ``vector`` . The w coordinate is dropped.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.toVector4D` 

    Constructs a vector with coordinates (``xpos`` , ``ypos`` , ``zpos`` ).


.. method:: PySide.QtGui.QVector3D.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QVector3D.__repr__()


    :rtype: :class:`PyObject`







.. staticmethod:: PySide.QtGui.QVector3D.crossProduct(v1, v2)


    :param v1: :class:`PySide.QtGui.QVector3D`
    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Returns the cross-product of vectors ``v1`` and ``v2`` , which corresponds to the normal vector of a plane defined by ``v1`` and ``v2`` .

    .. seealso::  :meth:`PySide.QtGui.QVector3D.normal` 


.. method:: PySide.QtGui.QVector3D.distanceToLine(point, direction)


    :param point: :class:`PySide.QtGui.QVector3D`
    :param direction: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.qreal`




    Returns the distance that this vertex is from a line defined by ``point`` and the unit vector ``direction`` .

    If ``direction`` is a null vector, then it does not define a line. In that case, the distance from ``point`` to this vertex is returned.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.distanceToPlane` 


.. method:: PySide.QtGui.QVector3D.distanceToPlane(plane1, plane2, plane3)


    :param plane1: :class:`PySide.QtGui.QVector3D`
    :param plane2: :class:`PySide.QtGui.QVector3D`
    :param plane3: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Returns the distance from this vertex a plane defined by the vertices ``plane1`` , ``plane2`` and ``plane3`` .

    The return value will be negative if the vertex is below the plane, or zero if it is on the plane.

    The two vectors that define the plane are ``plane2`` - ``plane1`` and ``plane3`` - ``plane1`` .

    .. seealso::  :meth:`PySide.QtGui.QVector3D.normal`  :meth:`PySide.QtGui.QVector3D.distanceToLine` 


.. method:: PySide.QtGui.QVector3D.distanceToPlane(plane, normal)


    :param plane: :class:`PySide.QtGui.QVector3D`
    :param normal: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.qreal`




    Returns the distance from this vertex to a plane defined by the vertex ``plane`` and a ``normal`` unit vector. The ``normal`` parameter is assumed to have been normalized to a unit vector.

    The return value will be negative if the vertex is below the plane, or zero if it is on the plane.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.normal`  :meth:`PySide.QtGui.QVector3D.distanceToLine` 


.. staticmethod:: PySide.QtGui.QVector3D.dotProduct(v1, v2)


    :param v1: :class:`PySide.QtGui.QVector3D`
    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.qreal`




    Returns the dot product of ``v1`` and ``v2`` .



.. method:: PySide.QtGui.QVector3D.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the x, y, and z coordinates are set to 0.0, otherwise returns false.



.. method:: PySide.QtGui.QVector3D.length()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the length of the vector from the origin.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.lengthSquared`  :meth:`PySide.QtGui.QVector3D.normalized` 


.. method:: PySide.QtGui.QVector3D.lengthSquared()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the squared length of the vector from the origin. This is equivalent to the dot product of the vector with itself.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.length`  :meth:`PySide.QtGui.QVector3D.dotProduct` 


.. staticmethod:: PySide.QtGui.QVector3D.normal(v1, v2, v3)


    :param v1: :class:`PySide.QtGui.QVector3D`
    :param v2: :class:`PySide.QtGui.QVector3D`
    :param v3: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    This is an overloaded function.

    Returns the normal vector of a plane defined by vectors ``v2`` - ``v1`` and ``v3`` - ``v1`` , normalized to be a unit vector.

    Use :meth:`PySide.QtGui.QVector3D.crossProduct` to compute the cross-product of ``v2`` - ``v1`` and ``v3`` - ``v1`` if you do not need the result to be normalized to a unit vector.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.crossProduct`  :meth:`PySide.QtGui.QVector3D.distanceToPlane` 


.. staticmethod:: PySide.QtGui.QVector3D.normal(v1, v2)


    :param v1: :class:`PySide.QtGui.QVector3D`
    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Returns the normal vector of a plane defined by vectors ``v1`` and ``v2`` , normalized to be a unit vector.

    Use :meth:`PySide.QtGui.QVector3D.crossProduct` to compute the cross-product of ``v1`` and ``v2`` if you do not need the result to be normalized to a unit vector.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.crossProduct`  :meth:`PySide.QtGui.QVector3D.distanceToPlane` 


.. method:: PySide.QtGui.QVector3D.normalize()






    Normalizes the currect vector in place. Nothing happens if this vector is a null vector or the length of the vector is very close to 1.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.length`  :meth:`PySide.QtGui.QVector3D.normalized` 


.. method:: PySide.QtGui.QVector3D.normalized()


    :rtype: :class:`PySide.QtGui.QVector3D`




    Returns the normalized unit vector form of this vector.

    If this vector is null, then a null vector is returned. If the length of the vector is very close to 1, then the vector will be returned as-is. Otherwise the normalized form of the vector of length 1 will be returned.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.length`  :meth:`PySide.QtGui.QVector3D.normalize` 


.. method:: PySide.QtGui.QVector3D.__ne__(, v2)


    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QVector3D.__mul__(, factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__mul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__mul__(, matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__mul__(, v2)


    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__mul__(matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__imul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Multiplies this vector's coordinates by the given ``factor`` , and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.operator/=` 


.. method:: PySide.QtGui.QVector3D.__imul__(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    This is an overloaded function.

    Multiplies the components of this vector by the corresponding components in ``vector`` .

    Note: this is not the same as the :meth:`PySide.QtGui.QVector3D.crossProduct` of this vector and ``vector`` .

    .. seealso::  :meth:`PySide.QtGui.QVector3D.crossProduct` 


.. method:: PySide.QtGui.QVector3D.__add__(, v2)


    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__iadd__(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Adds the given ``vector`` to this vector and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.operator-=` 


.. method:: PySide.QtGui.QVector3D.__sub__()


    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__sub__(, v2)


    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__isub__(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Subtracts the given ``vector`` from this vector and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.operator+=` 


.. method:: PySide.QtGui.QVector3D.__div__(, divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector3D`







.. method:: PySide.QtGui.QVector3D.__idiv__(divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Divides this vector's coordinates by the given ``divisor`` , and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.operator\*=` 


.. method:: PySide.QtGui.QVector3D.__eq__(, v2)


    :param v2: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QVector3D.setX(x)


    :param x: :class:`PySide.QtCore.qreal`




    Sets the x coordinate of this point to the given ``x`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.x`  :meth:`PySide.QtGui.QVector3D.setY`  :meth:`PySide.QtGui.QVector3D.setZ` 


.. method:: PySide.QtGui.QVector3D.setY(y)


    :param y: :class:`PySide.QtCore.qreal`




    Sets the y coordinate of this point to the given ``y`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.y`  :meth:`PySide.QtGui.QVector3D.setX`  :meth:`PySide.QtGui.QVector3D.setZ` 


.. method:: PySide.QtGui.QVector3D.setZ(z)


    :param z: :class:`PySide.QtCore.qreal`




    Sets the z coordinate of this point to the given ``z`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.z`  :meth:`PySide.QtGui.QVector3D.setX`  :meth:`PySide.QtGui.QVector3D.setY` 


.. method:: PySide.QtGui.QVector3D.toPoint()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the :class:`PySide.QtCore.QPoint` form of this 3D vector. The z coordinate is dropped.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.toPointF`  :meth:`PySide.QtGui.QVector3D.toVector2D` 


.. method:: PySide.QtGui.QVector3D.toPointF()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the :class:`PySide.QtCore.QPointF` form of this 3D vector. The z coordinate is dropped.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.toPoint`  :meth:`PySide.QtGui.QVector3D.toVector2D` 


.. method:: PySide.QtGui.QVector3D.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QVector3D.toVector2D()


    :rtype: :class:`PySide.QtGui.QVector2D`




    Returns the 2D vector form of this 3D vector, dropping the z coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.toVector4D`  :meth:`PySide.QtGui.QVector3D.toPoint` 


.. method:: PySide.QtGui.QVector3D.toVector4D()


    :rtype: :class:`PySide.QtGui.QVector4D`




    Returns the 4D form of this 3D vector, with the w coordinate set to zero.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.toVector2D`  :meth:`PySide.QtGui.QVector3D.toPoint` 


.. method:: PySide.QtGui.QVector3D.x()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.setX`  :meth:`PySide.QtGui.QVector3D.y`  :meth:`PySide.QtGui.QVector3D.z` 


.. method:: PySide.QtGui.QVector3D.y()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.setY`  :meth:`PySide.QtGui.QVector3D.x`  :meth:`PySide.QtGui.QVector3D.z` 


.. method:: PySide.QtGui.QVector3D.z()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the z coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector3D.setZ`  :meth:`PySide.QtGui.QVector3D.x`  :meth:`PySide.QtGui.QVector3D.y` 



