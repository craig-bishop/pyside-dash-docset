.. module:: PySide.QtGui
.. _QVector4D:

QVector4D
*********

.. inheritance-diagram:: QVector4D
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QVector4D.__add__>` (, v2)
*    def :meth:`__div__<PySide.QtGui.QVector4D.__div__>` (, divisor)
*    def :meth:`__eq__<PySide.QtGui.QVector4D.__eq__>` (, v2)
*    def :meth:`__iadd__<PySide.QtGui.QVector4D.__iadd__>` (vector)
*    def :meth:`__idiv__<PySide.QtGui.QVector4D.__idiv__>` (divisor)
*    def :meth:`__imul__<PySide.QtGui.QVector4D.__imul__>` (factor)
*    def :meth:`__imul__<PySide.QtGui.QVector4D.__imul__>` (vector)
*    def :meth:`__isub__<PySide.QtGui.QVector4D.__isub__>` (vector)
*    def :meth:`__mul__<PySide.QtGui.QVector4D.__mul__>` (, factor)
*    def :meth:`__mul__<PySide.QtGui.QVector4D.__mul__>` (, matrix)
*    def :meth:`__mul__<PySide.QtGui.QVector4D.__mul__>` (, v2)
*    def :meth:`__mul__<PySide.QtGui.QVector4D.__mul__>` (factor)
*    def :meth:`__mul__<PySide.QtGui.QVector4D.__mul__>` (matrix)
*    def :meth:`__ne__<PySide.QtGui.QVector4D.__ne__>` (, v2)
*    def :meth:`__reduce__<PySide.QtGui.QVector4D.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtGui.QVector4D.__repr__>` ()
*    def :meth:`__sub__<PySide.QtGui.QVector4D.__sub__>` ()
*    def :meth:`__sub__<PySide.QtGui.QVector4D.__sub__>` (, v2)
*    def :meth:`isNull<PySide.QtGui.QVector4D.isNull>` ()
*    def :meth:`length<PySide.QtGui.QVector4D.length>` ()
*    def :meth:`lengthSquared<PySide.QtGui.QVector4D.lengthSquared>` ()
*    def :meth:`normalize<PySide.QtGui.QVector4D.normalize>` ()
*    def :meth:`normalized<PySide.QtGui.QVector4D.normalized>` ()
*    def :meth:`setW<PySide.QtGui.QVector4D.setW>` (w)
*    def :meth:`setX<PySide.QtGui.QVector4D.setX>` (x)
*    def :meth:`setY<PySide.QtGui.QVector4D.setY>` (y)
*    def :meth:`setZ<PySide.QtGui.QVector4D.setZ>` (z)
*    def :meth:`toPoint<PySide.QtGui.QVector4D.toPoint>` ()
*    def :meth:`toPointF<PySide.QtGui.QVector4D.toPointF>` ()
*    def :meth:`toTuple<PySide.QtGui.QVector4D.toTuple>` ()
*    def :meth:`toVector2D<PySide.QtGui.QVector4D.toVector2D>` ()
*    def :meth:`toVector2DAffine<PySide.QtGui.QVector4D.toVector2DAffine>` ()
*    def :meth:`toVector3D<PySide.QtGui.QVector4D.toVector3D>` ()
*    def :meth:`toVector3DAffine<PySide.QtGui.QVector4D.toVector3DAffine>` ()
*    def :meth:`w<PySide.QtGui.QVector4D.w>` ()
*    def :meth:`x<PySide.QtGui.QVector4D.x>` ()
*    def :meth:`y<PySide.QtGui.QVector4D.y>` ()
*    def :meth:`z<PySide.QtGui.QVector4D.z>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`dotProduct<PySide.QtGui.QVector4D.dotProduct>` (v1, v2)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QVector4D` class represents a vector or vertex in 4D space.

    The :class:`PySide.QtGui.QVector4D` class can also be used to represent vertices in 4D space. We therefore do not need to provide a separate vertex class.

    .. seealso::  :class:`PySide.QtGui.QQuaternion`  :class:`PySide.QtGui.QVector2D`  :class:`PySide.QtGui.QVector3D` 

.. class:: QVector4D()
           QVector4D(point)
           QVector4D(point)
           QVector4D(vector)
           QVector4D(vector, zpos, wpos)
           QVector4D(vector)
           QVector4D(vector, wpos)
           QVector4D(QVector4D)
           QVector4D(xpos, ypos, zpos, wpos)

    :param vector: :class:`PySide.QtGui.QVector2D`
    :param point: :class:`PySide.QtCore.QPoint`
    :param zpos: :class:`PySide.QtCore.qreal`
    :param QVector4D: :class:`PySide.QtGui.QVector4D`
    :param ypos: :class:`PySide.QtCore.qreal`
    :param xpos: :class:`PySide.QtCore.qreal`
    :param wpos: :class:`PySide.QtCore.qreal`

    Constructs a null vector, i.e. with coordinates (0, 0, 0, 0).


    Constructs a vector with x and y coordinates from a 2D ``point`` , and z and w coordinates of 0.


    Constructs a vector with x and y coordinates from a 2D ``point`` , and z and w coordinates of 0.


    Constructs a 4D vector from the specified 2D ``vector`` . The z and w coordinates are set to zero.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector2D` 

    Constructs a 4D vector from the specified 2D ``vector`` . The z and w coordinates are set to ``zpos`` and ``wpos`` respectively.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector2D` 

    Constructs a 4D vector from the specified 3D ``vector`` . The w coordinate is set to zero.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector3D` 

    Constructs a 4D vector from the specified 3D ``vector`` . The w coordinate is set to ``wpos`` .

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector3D` 



    Constructs a vector with coordinates (``xpos`` , ``ypos`` , ``zpos`` , ``wpos`` ).


.. method:: PySide.QtGui.QVector4D.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QVector4D.__repr__()


    :rtype: :class:`PyObject`







.. staticmethod:: PySide.QtGui.QVector4D.dotProduct(v1, v2)


    :param v1: :class:`PySide.QtGui.QVector4D`
    :param v2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtCore.qreal`




    Returns the dot product of ``v1`` and ``v2`` .



.. method:: PySide.QtGui.QVector4D.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the x, y, z, and w coordinates are set to 0.0, otherwise returns false.



.. method:: PySide.QtGui.QVector4D.length()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the length of the vector from the origin.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.lengthSquared`  :meth:`PySide.QtGui.QVector4D.normalized` 


.. method:: PySide.QtGui.QVector4D.lengthSquared()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the squared length of the vector from the origin. This is equivalent to the dot product of the vector with itself.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.length`  :meth:`PySide.QtGui.QVector4D.dotProduct` 


.. method:: PySide.QtGui.QVector4D.normalize()






    Normalizes the currect vector in place. Nothing happens if this vector is a null vector or the length of the vector is very close to 1.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.length`  :meth:`PySide.QtGui.QVector4D.normalized` 


.. method:: PySide.QtGui.QVector4D.normalized()


    :rtype: :class:`PySide.QtGui.QVector4D`




    Returns the normalized unit vector form of this vector.

    If this vector is null, then a null vector is returned. If the length of the vector is very close to 1, then the vector will be returned as-is. Otherwise the normalized form of the vector of length 1 will be returned.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.length`  :meth:`PySide.QtGui.QVector4D.normalize` 


.. method:: PySide.QtGui.QVector4D.__ne__(, v2)


    :param v2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QVector4D.__mul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__mul__(, factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__mul__(, matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__mul__(matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__mul__(, v2)


    :param v2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__imul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Multiplies this vector's coordinates by the given ``factor`` , and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.operator/=` 


.. method:: PySide.QtGui.QVector4D.__imul__(vector)


    :param vector: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Multiplies the components of this vector by the corresponding components in ``vector`` .



.. method:: PySide.QtGui.QVector4D.__add__(, v2)


    :param v2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__iadd__(vector)


    :param vector: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Adds the given ``vector`` to this vector and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.operator-=` 


.. method:: PySide.QtGui.QVector4D.__sub__(, v2)


    :param v2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__sub__()


    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__isub__(vector)


    :param vector: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Subtracts the given ``vector`` from this vector and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.operator+=` 


.. method:: PySide.QtGui.QVector4D.__div__(, divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector4D`







.. method:: PySide.QtGui.QVector4D.__idiv__(divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Divides this vector's coordinates by the given ``divisor`` , and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.operator\*=` 


.. method:: PySide.QtGui.QVector4D.__eq__(, v2)


    :param v2: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QVector4D.setW(w)


    :param w: :class:`PySide.QtCore.qreal`




    Sets the w coordinate of this point to the given ``w`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.w`  :meth:`PySide.QtGui.QVector4D.setX`  :meth:`PySide.QtGui.QVector4D.setY`  :meth:`PySide.QtGui.QVector4D.setZ` 


.. method:: PySide.QtGui.QVector4D.setX(x)


    :param x: :class:`PySide.QtCore.qreal`




    Sets the x coordinate of this point to the given ``x`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.x`  :meth:`PySide.QtGui.QVector4D.setY`  :meth:`PySide.QtGui.QVector4D.setZ`  :meth:`PySide.QtGui.QVector4D.setW` 


.. method:: PySide.QtGui.QVector4D.setY(y)


    :param y: :class:`PySide.QtCore.qreal`




    Sets the y coordinate of this point to the given ``y`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.y`  :meth:`PySide.QtGui.QVector4D.setX`  :meth:`PySide.QtGui.QVector4D.setZ`  :meth:`PySide.QtGui.QVector4D.setW` 


.. method:: PySide.QtGui.QVector4D.setZ(z)


    :param z: :class:`PySide.QtCore.qreal`




    Sets the z coordinate of this point to the given ``z`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.z`  :meth:`PySide.QtGui.QVector4D.setX`  :meth:`PySide.QtGui.QVector4D.setY`  :meth:`PySide.QtGui.QVector4D.setW` 


.. method:: PySide.QtGui.QVector4D.toPoint()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the :class:`PySide.QtCore.QPoint` form of this 4D vector. The z and w coordinates are dropped.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toPointF`  :meth:`PySide.QtGui.QVector4D.toVector2D` 


.. method:: PySide.QtGui.QVector4D.toPointF()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the :class:`PySide.QtCore.QPointF` form of this 4D vector. The z and w coordinates are dropped.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toPoint`  :meth:`PySide.QtGui.QVector4D.toVector2D` 


.. method:: PySide.QtGui.QVector4D.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QVector4D.toVector2D()


    :rtype: :class:`PySide.QtGui.QVector2D`




    Returns the 2D vector form of this 4D vector, dropping the z and w coordinates.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector2DAffine`  :meth:`PySide.QtGui.QVector4D.toVector3D`  :meth:`PySide.QtGui.QVector4D.toPoint` 


.. method:: PySide.QtGui.QVector4D.toVector2DAffine()


    :rtype: :class:`PySide.QtGui.QVector2D`




    Returns the 2D vector form of this 4D vector, dividing the x and y coordinates by the w coordinate and dropping the z coordinate. Returns a null vector if w is zero.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector2D`  :meth:`PySide.QtGui.QVector4D.toVector3DAffine`  :meth:`PySide.QtGui.QVector4D.toPoint` 


.. method:: PySide.QtGui.QVector4D.toVector3D()


    :rtype: :class:`PySide.QtGui.QVector3D`




    Returns the 3D vector form of this 4D vector, dropping the w coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector3DAffine`  :meth:`PySide.QtGui.QVector4D.toVector2D`  :meth:`PySide.QtGui.QVector4D.toPoint` 


.. method:: PySide.QtGui.QVector4D.toVector3DAffine()


    :rtype: :class:`PySide.QtGui.QVector3D`




    Returns the 3D vector form of this 4D vector, dividing the x, y, and z coordinates by the w coordinate. Returns a null vector if w is zero.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.toVector3D`  :meth:`PySide.QtGui.QVector4D.toVector2DAffine`  :meth:`PySide.QtGui.QVector4D.toPoint` 


.. method:: PySide.QtGui.QVector4D.w()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the w coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.setW`  :meth:`PySide.QtGui.QVector4D.x`  :meth:`PySide.QtGui.QVector4D.y`  :meth:`PySide.QtGui.QVector4D.z` 


.. method:: PySide.QtGui.QVector4D.x()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.setX`  :meth:`PySide.QtGui.QVector4D.y`  :meth:`PySide.QtGui.QVector4D.z`  :meth:`PySide.QtGui.QVector4D.w` 


.. method:: PySide.QtGui.QVector4D.y()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.setY`  :meth:`PySide.QtGui.QVector4D.x`  :meth:`PySide.QtGui.QVector4D.z`  :meth:`PySide.QtGui.QVector4D.w` 


.. method:: PySide.QtGui.QVector4D.z()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the z coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector4D.setZ`  :meth:`PySide.QtGui.QVector4D.x`  :meth:`PySide.QtGui.QVector4D.y`  :meth:`PySide.QtGui.QVector4D.w` 



