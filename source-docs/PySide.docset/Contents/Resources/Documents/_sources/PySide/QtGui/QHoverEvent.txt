.. module:: PySide.QtGui
.. _QHoverEvent:

QHoverEvent
***********

.. inheritance-diagram:: QHoverEvent
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`oldPos<PySide.QtGui.QHoverEvent.oldPos>` ()
*    def :meth:`pos<PySide.QtGui.QHoverEvent.pos>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QHoverEvent` class contains parameters that describe a mouse event.

    Mouse events occur when a mouse cursor is moved into, out of, or within a widget, and if the widget has the :attr:`Qt.WA_Hover<Qt.WidgetAttribute>` attribute.

    The function :meth:`PySide.QtGui.QHoverEvent.pos` gives the current cursor position, while :meth:`PySide.QtGui.QHoverEvent.oldPos` gives the old mouse position.

    There are a few similarities between the events :attr:`QEvent.HoverEnter<QEvent.Type>` and :attr:`QEvent.HoverLeave<QEvent.Type>` , and the events :attr:`QEvent.Enter<QEvent.Type>` and :attr:`QEvent.Leave<QEvent.Type>` . However, they are slightly different because we do an :meth:`~PySide.QtGui.QHoverEvent.update` in the event handler of :attr:`HoverEnter<QEvent.Type>` and :attr:`HoverLeave<QEvent.Type>` .

    :attr:`QEvent.HoverMove<QEvent.Type>` is also slightly different from :attr:`QEvent.MouseMove<QEvent.Type>` . Let us consider a top-level window A containing a child B which in turn contains a child C (all with mouse tracking enabled):

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/hoverevents.png

    Now, if you move the cursor from the top to the bottom in the middle of A, you will get the following :attr:`QEvent.MouseMove<QEvent.Type>` events:

    You will get the same events for :attr:`QEvent.HoverMove<QEvent.Type>` , except that the event always propagates to the top-level regardless whether the event is accepted or not. It will only stop propagating with the :attr:`Qt.WA_NoMousePropagation<Qt.WidgetAttribute>` attribute.

    In this case the events will occur in the following way:


.. class:: QHoverEvent(type, pos, oldPos)

    :param type: :attr:`PySide.QtCore.QEvent.Type`
    :param pos: :class:`PySide.QtCore.QPoint`
    :param oldPos: :class:`PySide.QtCore.QPoint`

    Constructs a hover event object.

    The ``type`` parameter must be :attr:`QEvent.HoverEnter<QEvent.Type>` , :attr:`QEvent.HoverLeave<QEvent.Type>` , or :attr:`QEvent.HoverMove<QEvent.Type>` .

    The ``pos`` is the current mouse cursor's position relative to the receiving widget, while ``oldPos`` is the previous mouse cursor's position relative to the receiving widget.


.. method:: PySide.QtGui.QHoverEvent.oldPos()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the previous position of the mouse cursor, relative to the widget that received the event. If there is no previous position, :meth:`PySide.QtGui.QHoverEvent.oldPos` will return the same position as :meth:`PySide.QtGui.QHoverEvent.pos` .

    On :attr:`QEvent.HoverEnter<QEvent.Type>` events, this position will always be :class:`PySide.QtCore.QPoint` (-1, -1).

    .. seealso::  :meth:`PySide.QtGui.QHoverEvent.pos` 


.. method:: PySide.QtGui.QHoverEvent.pos()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the position of the mouse cursor, relative to the widget that received the event.

    On :attr:`QEvent.HoverLeave<QEvent.Type>` events, this position will always be :class:`PySide.QtCore.QPoint` (-1, -1).

    .. seealso::  :meth:`PySide.QtGui.QHoverEvent.oldPos` 



