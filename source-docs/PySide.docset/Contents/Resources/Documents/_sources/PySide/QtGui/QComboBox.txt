.. module:: PySide.QtGui
.. _QComboBox:

QComboBox
*********

.. inheritance-diagram:: QComboBox
    :parts: 2

**Inherited by:** :ref:`QFontComboBox`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addItem<PySide.QtGui.QComboBox.addItem>` (icon, text[, userData=None])
*    def :meth:`addItem<PySide.QtGui.QComboBox.addItem>` (text[, userData=None])
*    def :meth:`addItems<PySide.QtGui.QComboBox.addItems>` (texts)
*    def :meth:`completer<PySide.QtGui.QComboBox.completer>` ()
*    def :meth:`count<PySide.QtGui.QComboBox.count>` ()
*    def :meth:`currentIndex<PySide.QtGui.QComboBox.currentIndex>` ()
*    def :meth:`currentText<PySide.QtGui.QComboBox.currentText>` ()
*    def :meth:`duplicatesEnabled<PySide.QtGui.QComboBox.duplicatesEnabled>` ()
*    def :meth:`findData<PySide.QtGui.QComboBox.findData>` (data[, role=Qt.UserRole[, flags=static_cast<Qt.MatchFlags>(Qt.MatchExactly|Qt.MatchCaseSensitive)]])
*    def :meth:`findText<PySide.QtGui.QComboBox.findText>` (text[, flags=static_cast<Qt.MatchFlags>(Qt.MatchExactly|Qt.MatchCaseSensitive)])
*    def :meth:`hasFrame<PySide.QtGui.QComboBox.hasFrame>` ()
*    def :meth:`iconSize<PySide.QtGui.QComboBox.iconSize>` ()
*    def :meth:`initStyleOption<PySide.QtGui.QComboBox.initStyleOption>` (option)
*    def :meth:`insertItem<PySide.QtGui.QComboBox.insertItem>` (index, icon, text[, userData=None])
*    def :meth:`insertItem<PySide.QtGui.QComboBox.insertItem>` (index, text[, userData=None])
*    def :meth:`insertItems<PySide.QtGui.QComboBox.insertItems>` (index, texts)
*    def :meth:`insertPolicy<PySide.QtGui.QComboBox.insertPolicy>` ()
*    def :meth:`insertSeparator<PySide.QtGui.QComboBox.insertSeparator>` (index)
*    def :meth:`isEditable<PySide.QtGui.QComboBox.isEditable>` ()
*    def :meth:`itemData<PySide.QtGui.QComboBox.itemData>` (index[, role=Qt.UserRole])
*    def :meth:`itemDelegate<PySide.QtGui.QComboBox.itemDelegate>` ()
*    def :meth:`itemIcon<PySide.QtGui.QComboBox.itemIcon>` (index)
*    def :meth:`itemText<PySide.QtGui.QComboBox.itemText>` (index)
*    def :meth:`lineEdit<PySide.QtGui.QComboBox.lineEdit>` ()
*    def :meth:`maxCount<PySide.QtGui.QComboBox.maxCount>` ()
*    def :meth:`maxVisibleItems<PySide.QtGui.QComboBox.maxVisibleItems>` ()
*    def :meth:`minimumContentsLength<PySide.QtGui.QComboBox.minimumContentsLength>` ()
*    def :meth:`model<PySide.QtGui.QComboBox.model>` ()
*    def :meth:`modelColumn<PySide.QtGui.QComboBox.modelColumn>` ()
*    def :meth:`removeItem<PySide.QtGui.QComboBox.removeItem>` (index)
*    def :meth:`rootModelIndex<PySide.QtGui.QComboBox.rootModelIndex>` ()
*    def :meth:`setCompleter<PySide.QtGui.QComboBox.setCompleter>` (c)
*    def :meth:`setDuplicatesEnabled<PySide.QtGui.QComboBox.setDuplicatesEnabled>` (enable)
*    def :meth:`setEditable<PySide.QtGui.QComboBox.setEditable>` (editable)
*    def :meth:`setFrame<PySide.QtGui.QComboBox.setFrame>` (arg__1)
*    def :meth:`setIconSize<PySide.QtGui.QComboBox.setIconSize>` (size)
*    def :meth:`setInsertPolicy<PySide.QtGui.QComboBox.setInsertPolicy>` (policy)
*    def :meth:`setItemData<PySide.QtGui.QComboBox.setItemData>` (index, value[, role=Qt.UserRole])
*    def :meth:`setItemDelegate<PySide.QtGui.QComboBox.setItemDelegate>` (delegate)
*    def :meth:`setItemIcon<PySide.QtGui.QComboBox.setItemIcon>` (index, icon)
*    def :meth:`setItemText<PySide.QtGui.QComboBox.setItemText>` (index, text)
*    def :meth:`setLineEdit<PySide.QtGui.QComboBox.setLineEdit>` (edit)
*    def :meth:`setMaxCount<PySide.QtGui.QComboBox.setMaxCount>` (max)
*    def :meth:`setMaxVisibleItems<PySide.QtGui.QComboBox.setMaxVisibleItems>` (maxItems)
*    def :meth:`setMinimumContentsLength<PySide.QtGui.QComboBox.setMinimumContentsLength>` (characters)
*    def :meth:`setModel<PySide.QtGui.QComboBox.setModel>` (model)
*    def :meth:`setModelColumn<PySide.QtGui.QComboBox.setModelColumn>` (visibleColumn)
*    def :meth:`setRootModelIndex<PySide.QtGui.QComboBox.setRootModelIndex>` (index)
*    def :meth:`setSizeAdjustPolicy<PySide.QtGui.QComboBox.setSizeAdjustPolicy>` (policy)
*    def :meth:`setValidator<PySide.QtGui.QComboBox.setValidator>` (v)
*    def :meth:`setView<PySide.QtGui.QComboBox.setView>` (itemView)
*    def :meth:`sizeAdjustPolicy<PySide.QtGui.QComboBox.sizeAdjustPolicy>` ()
*    def :meth:`validator<PySide.QtGui.QComboBox.validator>` ()
*    def :meth:`view<PySide.QtGui.QComboBox.view>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`hidePopup<PySide.QtGui.QComboBox.hidePopup>` ()
*    def :meth:`showPopup<PySide.QtGui.QComboBox.showPopup>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`clear<PySide.QtGui.QComboBox.clear>` ()
*    def :meth:`clearEditText<PySide.QtGui.QComboBox.clearEditText>` ()
*    def :meth:`setCurrentIndex<PySide.QtGui.QComboBox.setCurrentIndex>` (index)
*    def :meth:`setEditText<PySide.QtGui.QComboBox.setEditText>` (text)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`activated<PySide.QtGui.QComboBox.activated>` (arg__1)
*    def :meth:`activated<PySide.QtGui.QComboBox.activated>` (index)
*    def :meth:`currentIndexChanged<PySide.QtGui.QComboBox.currentIndexChanged>` (arg__1)
*    def :meth:`currentIndexChanged<PySide.QtGui.QComboBox.currentIndexChanged>` (index)
*    def :meth:`editTextChanged<PySide.QtGui.QComboBox.editTextChanged>` (arg__1)
*    def :meth:`highlighted<PySide.QtGui.QComboBox.highlighted>` (arg__1)
*    def :meth:`highlighted<PySide.QtGui.QComboBox.highlighted>` (index)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QComboBox` widget is a combined button and popup list.

    A :class:`PySide.QtGui.QComboBox` provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.

    A combobox is a selection widget that displays the current item, and can pop up a list of selectable items. A combobox may be editable, allowing the user to modify each item in the list.

    Comboboxes can contain pixmaps as well as strings; the :meth:`PySide.QtGui.QComboBox.insertItem` and :meth:`PySide.QtGui.QComboBox.setItemText` functions are suitably overloaded. For editable comboboxes, the function :meth:`PySide.QtGui.QComboBox.clearEditText` is provided, to clear the displayed string without changing the combobox's contents.

    There are two signals emitted if the current item of a combobox changes, :meth:`PySide.QtGui.QComboBox.currentIndexChanged` and :meth:`PySide.QtGui.QComboBox.activated` . :meth:`PySide.QtGui.QComboBox.currentIndexChanged` is always emitted regardless if the change was done programmatically or by user interaction, while :meth:`PySide.QtGui.QComboBox.activated` is only emitted when the change is caused by user interaction. The :meth:`PySide.QtGui.QComboBox.highlighted` signal is emitted when the user highlights an item in the combobox popup list. All three signals exist in two versions, one with a :class:`PySide.QtCore.QString` argument and one with an ``int`` argument. If the user selects or highlights a pixmap, only the ``int`` signals are emitted. Whenever the text of an editable combobox is changed the :meth:`PySide.QtGui.QComboBox.editTextChanged` signal is emitted.

    When the user enters a new string in an editable combobox, the widget may or may not insert it, and it can insert it in several locations. The default policy is is :attr:`AtBottom<QComboBox.InsertPolicy>` but you can change this using :meth:`PySide.QtGui.QComboBox.setInsertPolicy` .

    It is possible to constrain the input to an editable combobox using :class:`PySide.QtGui.QValidator` ; see :meth:`PySide.QtGui.QComboBox.setValidator` . By default, any input is accepted.

    A combobox can be populated using the insert functions, :meth:`PySide.QtGui.QComboBox.insertItem` and :meth:`PySide.QtGui.QComboBox.insertItems` for example. Items can be changed with :meth:`PySide.QtGui.QComboBox.setItemText` . An item can be removed with :meth:`PySide.QtGui.QComboBox.removeItem` and all items can be removed with :meth:`PySide.QtGui.QComboBox.clear` . The text of the current item is returned by :meth:`PySide.QtGui.QComboBox.currentText` , and the text of a numbered item is returned with :meth:`~PySide.QtGui.QComboBox.text` . The current item can be set with :meth:`PySide.QtGui.QComboBox.setCurrentIndex` . The number of items in the combobox is returned by :meth:`PySide.QtGui.QComboBox.count` ; the maximum number of items can be set with :meth:`PySide.QtGui.QComboBox.setMaxCount` . You can allow editing using :meth:`PySide.QtGui.QComboBox.setEditable` . For editable comboboxes you can set auto-completion using :meth:`PySide.QtGui.QComboBox.setCompleter` and whether or not the user can add duplicates is set with :meth:`PySide.QtGui.QComboBox.setDuplicatesEnabled` .

    :class:`PySide.QtGui.QComboBox` uses the :ref:`model/view framework<model-view-programming.html>` for its popup list and to store its items. By default a :class:`PySide.QtGui.QStandardItemModel` stores the items and a :class:`PySide.QtGui.QListView` subclass displays the popuplist. You can access the model and view directly (with :meth:`PySide.QtGui.QComboBox.model` and :meth:`PySide.QtGui.QComboBox.view` ), but :class:`PySide.QtGui.QComboBox` also provides functions to set and get item data (e.g., :meth:`PySide.QtGui.QComboBox.setItemData` and :meth:`PySide.QtGui.QComboBox.itemText` ). You can also set a new model and view (with :meth:`PySide.QtGui.QComboBox.setModel` and :meth:`PySide.QtGui.QComboBox.setView` ). For the text and icon in the combobox label, the data in the model that has the :attr:`Qt.DisplayRole<Qt.ItemDataRole>` and :attr:`Qt.DecorationRole<Qt.ItemDataRole>` is used.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qstyle-comboboxes.png

    .. seealso::  :class:`PySide.QtGui.QLineEdit`  :class:`PySide.QtGui.QSpinBox`  :class:`PySide.QtGui.QRadioButton`  :class:`PySide.QtGui.QButtonGroup`  :ref:`GUI Design Handbook: Combo Box, Drop-Down List Box<guibooks.html>` 

.. class:: QComboBox([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Constructs a combobox with the given ``parent`` , using the default model :class:`PySide.QtGui.QStandardItemModel` .


.. attribute:: PySide.QtGui.QComboBox.InsertPolicy

    This enum specifies what the :class:`PySide.QtGui.QComboBox` should do when a new string is entered by the user.

    +------------------------------+----------------------------------------------------------------+
    |Constant                      |Description                                                     |
    +==============================+================================================================+
    |QComboBox.NoInsert            |The string will not be inserted into the combobox.              |
    +------------------------------+----------------------------------------------------------------+
    |QComboBox.InsertAtTop         |The string will be inserted as the first item in the combobox.  |
    +------------------------------+----------------------------------------------------------------+
    |QComboBox.InsertAtCurrent     |The current item will be *replaced* by the string.              |
    +------------------------------+----------------------------------------------------------------+
    |QComboBox.InsertAtBottom      |The string will be inserted after the last item in the combobox.|
    +------------------------------+----------------------------------------------------------------+
    |QComboBox.InsertAfterCurrent  |The string is inserted after the current item in the combobox.  |
    +------------------------------+----------------------------------------------------------------+
    |QComboBox.InsertBeforeCurrent |The string is inserted before the current item in the combobox. |
    +------------------------------+----------------------------------------------------------------+
    |QComboBox.InsertAlphabetically|The string is inserted in the alphabetic order in the combobox. |
    +------------------------------+----------------------------------------------------------------+


.. attribute:: PySide.QtGui.QComboBox.SizeAdjustPolicy

    This enum specifies how the size hint of the :class:`PySide.QtGui.QComboBox` should adjust when new content is added or content changes.

    +-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                                       |Description                                                                                                                                                      |
    +===============================================+=================================================================================================================================================================+
    |QComboBox.AdjustToContents                     |The combobox will always adjust to the contents                                                                                                                  |
    +-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QComboBox.AdjustToContentsOnFirstShow          |The combobox will adjust to its contents the first time it is shown.                                                                                             |
    +-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QComboBox.AdjustToMinimumContentsLength        |Use :attr:`AdjustToContents<QComboBox.SizeAdjustPolicy>` or :attr:`AdjustToContentsOnFirstShow<QComboBox.SizeAdjustPolicy>` instead.                             |
    +-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QComboBox.AdjustToMinimumContentsLengthWithIcon|The combobox will adjust to :meth:`PySide.QtGui.QComboBox.minimumContentsLength` plus space for an icon. For performance reasons use this policy on large models.|
    +-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. method:: PySide.QtGui.QComboBox.activated(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QComboBox.activated(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtGui.QComboBox.addItem(icon, text[, userData=None])


    :param icon: :class:`PySide.QtGui.QIcon`
    :param text: unicode
    :param userData: object




    Adds an item to the combobox with the given ``icon`` and ``text`` , and containing the specified ``userData`` (stored in the :attr:`Qt.UserRole<Qt.ItemDataRole>` ). The item is appended to the list of existing items.



.. method:: PySide.QtGui.QComboBox.addItem(text[, userData=None])


    :param text: unicode
    :param userData: object




    Adds an item to the combobox with the given ``text`` , and containing the specified ``userData`` (stored in the :attr:`Qt.UserRole<Qt.ItemDataRole>` ). The item is appended to the list of existing items.



.. method:: PySide.QtGui.QComboBox.addItems(texts)


    :param texts: list of strings




    Adds each of the strings in the given ``texts`` to the combobox. Each item is appended to the list of existing items in turn.



.. method:: PySide.QtGui.QComboBox.clear()






    Clears the combobox, removing all items.

    Note: If you have set an external model on the combobox this model will still be cleared when calling this function.



.. method:: PySide.QtGui.QComboBox.clearEditText()






    Clears the contents of the line edit used for editing in the combobox.



.. method:: PySide.QtGui.QComboBox.completer()


    :rtype: :class:`PySide.QtGui.QCompleter`




    Returns the completer that is used to auto complete text input for the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setCompleter`  :meth:`~PySide.QtGui.QComboBox.editable` 


.. method:: PySide.QtGui.QComboBox.count()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of items in the combobox.

    By default, for an empty combo box, this property has a value of 0.



.. method:: PySide.QtGui.QComboBox.currentIndex()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the index of the current item in the combobox..

    The current index can change when inserting or removing items.

    By default, for an empty combo box or a combo box in which no current item is set, this property has a value of -1.



.. method:: PySide.QtGui.QComboBox.currentIndexChanged(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtGui.QComboBox.currentIndexChanged(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QComboBox.currentText()


    :rtype: unicode




    This property holds the text of the current item.

    By default, for an empty combo box or a combo box in which no current item is set, this property contains an empty string.



.. method:: PySide.QtGui.QComboBox.duplicatesEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the user can enter duplicate items into the combobox.

    Note that it is always possible to programmatically insert duplicate items into the combobox.

    By default, this property is false (duplicates are not allowed).



.. method:: PySide.QtGui.QComboBox.editTextChanged(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtGui.QComboBox.findData(data[, role=Qt.UserRole[, flags=static_cast<Qt.MatchFlags>(Qt.MatchExactly|Qt.MatchCaseSensitive)]])


    :param data: object
    :param role: :class:`PySide.QtCore.int`
    :param flags: :class:`PySide.QtCore.Qt.MatchFlags`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QComboBox.findText(text[, flags=static_cast<Qt.MatchFlags>(Qt.MatchExactly|Qt.MatchCaseSensitive)])


    :param text: unicode
    :param flags: :class:`PySide.QtCore.Qt.MatchFlags`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QComboBox.hasFrame()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the combo box draws itself with a frame.

    If enabled (the default) the combo box draws itself inside a frame, otherwise the combo box draws itself without any frame.



.. method:: PySide.QtGui.QComboBox.hidePopup()






    Hides the list of items in the combobox if it is currently visible and resets the internal state, so that if the custom pop-up was shown inside the reimplemented :meth:`PySide.QtGui.QComboBox.showPopup` , then you also need to reimplement the :meth:`PySide.QtGui.QComboBox.hidePopup` function to hide your custom pop-up and call the base class implementation to reset the internal state whenever your custom pop-up widget is hidden.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.showPopup` 


.. method:: PySide.QtGui.QComboBox.highlighted(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtGui.QComboBox.highlighted(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QComboBox.iconSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds the size of the icons shown in the combobox..

    Unless explicitly set this returns the default value of the current style. This size is the maximum size that icons can have; icons of smaller size are not scaled up.



.. method:: PySide.QtGui.QComboBox.initStyleOption(option)


    :param option: :class:`PySide.QtGui.QStyleOptionComboBox`




    Initialize ``option`` with the values from this :class:`PySide.QtGui.QComboBox` . This method is useful for subclasses when they need a :class:`PySide.QtGui.QStyleOptionComboBox` , but don't want to fill in all the information themselves.

    .. seealso::  :meth:`QStyleOption.initFrom()<PySide.QtGui.QStyleOption.initFrom>` 


.. method:: PySide.QtGui.QComboBox.insertItem(index, text[, userData=None])


    :param index: :class:`PySide.QtCore.int`
    :param text: unicode
    :param userData: object




    Inserts the ``text`` and ``userData`` (stored in the :attr:`Qt.UserRole<Qt.ItemDataRole>` ) into the combobox at the given ``index`` .

    If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.insertItems` 


.. method:: PySide.QtGui.QComboBox.insertItem(index, icon, text[, userData=None])


    :param index: :class:`PySide.QtCore.int`
    :param icon: :class:`PySide.QtGui.QIcon`
    :param text: unicode
    :param userData: object




    Inserts the ``icon`` , ``text`` and ``userData`` (stored in the :attr:`Qt.UserRole<Qt.ItemDataRole>` ) into the combobox at the given ``index`` .

    If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.insertItems` 


.. method:: PySide.QtGui.QComboBox.insertItems(index, texts)


    :param index: :class:`PySide.QtCore.int`
    :param texts: list of strings




    Inserts the strings from the ``list`` into the combobox as separate items, starting at the ``index`` specified.

    If the index is equal to or higher than the total number of items, the new items are appended to the list of existing items. If the index is zero or negative, the new items are prepended to the list of existing items.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.insertItem` 


.. method:: PySide.QtGui.QComboBox.insertPolicy()


    :rtype: :attr:`PySide.QtGui.QComboBox.InsertPolicy`




    This property holds the policy used to determine where user-inserted items should appear in the combobox.

    The default value is :attr:`AtBottom<QComboBox.InsertPolicy>` , indicating that new items will appear at the bottom of the list of items.

    .. seealso::  :attr:`QComboBox.InsertPolicy` 


.. method:: PySide.QtGui.QComboBox.insertSeparator(index)


    :param index: :class:`PySide.QtCore.int`




    Inserts a separator item into the combobox at the given ``index`` .

    If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.insertItem` 


.. method:: PySide.QtGui.QComboBox.isEditable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the combo box can be edited by the user.

    By default, this property is false.



.. method:: PySide.QtGui.QComboBox.itemData(index[, role=Qt.UserRole])


    :param index: :class:`PySide.QtCore.int`
    :param role: :class:`PySide.QtCore.int`
    :rtype: object




    Returns the data for the given ``role`` in the given ``index`` in the combobox, or :attr:`QVariant.Invalid<QVariant.Type>` if there is no data for this role.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setItemData` 


.. method:: PySide.QtGui.QComboBox.itemDelegate()


    :rtype: :class:`PySide.QtGui.QAbstractItemDelegate`




    Returns the item delegate used by the popup list view.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setItemDelegate` 


.. method:: PySide.QtGui.QComboBox.itemIcon(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QIcon`




    Returns the icon for the given ``index`` in the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setItemIcon` 


.. method:: PySide.QtGui.QComboBox.itemText(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the text for the given ``index`` in the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setItemText` 


.. method:: PySide.QtGui.QComboBox.lineEdit()


    :rtype: :class:`PySide.QtGui.QLineEdit`




    Returns the line edit used to edit items in the combobox, or 0 if there is no line edit.

    Only editable combo boxes have a line edit.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setLineEdit` 


.. method:: PySide.QtGui.QComboBox.maxCount()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the maximum number of items allowed in the combobox.

    .. note::  If you set the maximum number to be less then the current amount of items in the combobox, the extra items will be truncated. This also applies if you have set an external model on the combobox.

    By default, this property's value is derived from the highest signed integer available (typically 2147483647).



.. method:: PySide.QtGui.QComboBox.maxVisibleItems()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the maximum allowed size on screen of the combo box, measured in items.

    By default, this property has a value of 10.

    .. note::  This property is ignored for non-editable comboboxes in styles that returns false for :attr:`QStyle.SH_ComboBox_Popup<QStyle.StyleHint>` such as the Mac style or the Gtk+ Style.



.. method:: PySide.QtGui.QComboBox.minimumContentsLength()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the minimum number of characters that should fit into the combobox..

    The default value is 0.

    If this property is set to a positive value, the :meth:`PySide.QtGui.QComboBox.minimumSizeHint` and :meth:`PySide.QtGui.QComboBox.sizeHint` take it into account.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.sizeAdjustPolicy` 


.. method:: PySide.QtGui.QComboBox.model()


    :rtype: :class:`PySide.QtCore.QAbstractItemModel`




    Returns the model used by the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setModel` 


.. method:: PySide.QtGui.QComboBox.modelColumn()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the column in the model that is visible..

    If set prior to populating the combo box, the pop-up view will not be affected and will show the first column (using this property's default value).

    By default, this property has a value of 0.



.. method:: PySide.QtGui.QComboBox.removeItem(index)


    :param index: :class:`PySide.QtCore.int`




    Removes the item at the given ``index`` from the combobox. This will update the current index if the index is removed.

    This function does nothing if ``index`` is out of range.



.. method:: PySide.QtGui.QComboBox.rootModelIndex()


    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the root model item index for the items in the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setRootModelIndex` 


.. method:: PySide.QtGui.QComboBox.setCompleter(c)


    :param c: :class:`PySide.QtGui.QCompleter`




    Sets the ``completer`` to use instead of the current completer. If ``completer`` is 0, auto completion is disabled.

    By default, for an editable combo box, a :class:`PySide.QtGui.QCompleter` that performs case insensitive inline completion is automatically created.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.completer` 


.. method:: PySide.QtGui.QComboBox.setCurrentIndex(index)


    :param index: :class:`PySide.QtCore.int`




    This property holds the index of the current item in the combobox..

    The current index can change when inserting or removing items.

    By default, for an empty combo box or a combo box in which no current item is set, this property has a value of -1.



.. method:: PySide.QtGui.QComboBox.setDuplicatesEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether the user can enter duplicate items into the combobox.

    Note that it is always possible to programmatically insert duplicate items into the combobox.

    By default, this property is false (duplicates are not allowed).



.. method:: PySide.QtGui.QComboBox.setEditText(text)


    :param text: unicode




    Sets the ``text`` in the combobox's text edit.



.. method:: PySide.QtGui.QComboBox.setEditable(editable)


    :param editable: :class:`PySide.QtCore.bool`




    This property holds whether the combo box can be edited by the user.

    By default, this property is false.



.. method:: PySide.QtGui.QComboBox.setFrame(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    This property holds whether the combo box draws itself with a frame.

    If enabled (the default) the combo box draws itself inside a frame, otherwise the combo box draws itself without any frame.



.. method:: PySide.QtGui.QComboBox.setIconSize(size)


    :param size: :class:`PySide.QtCore.QSize`




    This property holds the size of the icons shown in the combobox..

    Unless explicitly set this returns the default value of the current style. This size is the maximum size that icons can have; icons of smaller size are not scaled up.



.. method:: PySide.QtGui.QComboBox.setInsertPolicy(policy)


    :param policy: :attr:`PySide.QtGui.QComboBox.InsertPolicy`




    This property holds the policy used to determine where user-inserted items should appear in the combobox.

    The default value is :attr:`AtBottom<QComboBox.InsertPolicy>` , indicating that new items will appear at the bottom of the list of items.

    .. seealso::  :attr:`QComboBox.InsertPolicy` 


.. method:: PySide.QtGui.QComboBox.setItemData(index, value[, role=Qt.UserRole])


    :param index: :class:`PySide.QtCore.int`
    :param value: object
    :param role: :class:`PySide.QtCore.int`




    Sets the data ``role`` for the item on the given ``index`` in the combobox to the specified ``value`` .

    .. seealso::  :meth:`PySide.QtGui.QComboBox.itemData` 


.. method:: PySide.QtGui.QComboBox.setItemDelegate(delegate)


    :param delegate: :class:`PySide.QtGui.QAbstractItemDelegate`




    Sets the item ``delegate`` for the popup list view. The combobox takes ownership of the delegate.

    .. warning::  You should not share the same instance of a delegate between comboboxes, widget mappers or views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the :meth:`PySide.QtGui.QAbstractItemDelegate.closeEditor` signal, and attempt to access, modify or close an editor that has already been closed.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.itemDelegate` 


.. method:: PySide.QtGui.QComboBox.setItemIcon(index, icon)


    :param index: :class:`PySide.QtCore.int`
    :param icon: :class:`PySide.QtGui.QIcon`




    Sets the ``icon`` for the item on the given ``index`` in the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.itemIcon` 


.. method:: PySide.QtGui.QComboBox.setItemText(index, text)


    :param index: :class:`PySide.QtCore.int`
    :param text: unicode




    Sets the ``text`` for the item on the given ``index`` in the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.itemText` 


.. method:: PySide.QtGui.QComboBox.setLineEdit(edit)


    :param edit: :class:`PySide.QtGui.QLineEdit`




    Sets the line ``edit`` to use instead of the current line edit widget.

    The combo box takes ownership of the line edit.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.lineEdit` 


.. method:: PySide.QtGui.QComboBox.setMaxCount(max)


    :param max: :class:`PySide.QtCore.int`




    This property holds the maximum number of items allowed in the combobox.

    .. note::  If you set the maximum number to be less then the current amount of items in the combobox, the extra items will be truncated. This also applies if you have set an external model on the combobox.

    By default, this property's value is derived from the highest signed integer available (typically 2147483647).



.. method:: PySide.QtGui.QComboBox.setMaxVisibleItems(maxItems)


    :param maxItems: :class:`PySide.QtCore.int`




    This property holds the maximum allowed size on screen of the combo box, measured in items.

    By default, this property has a value of 10.

    .. note::  This property is ignored for non-editable comboboxes in styles that returns false for :attr:`QStyle.SH_ComboBox_Popup<QStyle.StyleHint>` such as the Mac style or the Gtk+ Style.



.. method:: PySide.QtGui.QComboBox.setMinimumContentsLength(characters)


    :param characters: :class:`PySide.QtCore.int`




    This property holds the minimum number of characters that should fit into the combobox..

    The default value is 0.

    If this property is set to a positive value, the :meth:`PySide.QtGui.QComboBox.minimumSizeHint` and :meth:`PySide.QtGui.QComboBox.sizeHint` take it into account.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.sizeAdjustPolicy` 


.. method:: PySide.QtGui.QComboBox.setModel(model)


    :param model: :class:`PySide.QtCore.QAbstractItemModel`




    Sets the model to be ``model`` . ``model`` must not be 0. If you want to clear the contents of a model, call :meth:`PySide.QtGui.QComboBox.clear` .

    .. seealso::  :meth:`PySide.QtGui.QComboBox.model`  :meth:`PySide.QtGui.QComboBox.clear` 


.. method:: PySide.QtGui.QComboBox.setModelColumn(visibleColumn)


    :param visibleColumn: :class:`PySide.QtCore.int`




    This property holds the column in the model that is visible..

    If set prior to populating the combo box, the pop-up view will not be affected and will show the first column (using this property's default value).

    By default, this property has a value of 0.



.. method:: PySide.QtGui.QComboBox.setRootModelIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Sets the root model item ``index`` for the items in the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.rootModelIndex` 


.. method:: PySide.QtGui.QComboBox.setSizeAdjustPolicy(policy)


    :param policy: :attr:`PySide.QtGui.QComboBox.SizeAdjustPolicy`




    This property holds the policy describing how the size of the combobox changes when the content changes.

    The default value is :attr:`AdjustToContentsOnFirstShow<QComboBox.SizeAdjustPolicy>` .

    .. seealso::  :attr:`QComboBox.SizeAdjustPolicy` 


.. method:: PySide.QtGui.QComboBox.setValidator(v)


    :param v: :class:`PySide.QtGui.QValidator`




    Sets the ``validator`` to use instead of the current validator.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.validator` 


.. method:: PySide.QtGui.QComboBox.setView(itemView)


    :param itemView: :class:`PySide.QtGui.QAbstractItemView`




    Sets the view to be used in the combobox popup to the given ``itemView`` . The combobox takes ownership of the view.

    Note: If you want to use the convenience views (like :class:`PySide.QtGui.QListWidget` , :class:`PySide.QtGui.QTableWidget` or :class:`PySide.QtGui.QTreeWidget` ), make sure to call :meth:`PySide.QtGui.QComboBox.setModel` on the combobox with the convenience widgets model before calling this function.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.view` 


.. method:: PySide.QtGui.QComboBox.showPopup()






    Displays the list of items in the combobox. If the list is empty then the no items will be shown.

    If you reimplement this function to show a custom pop-up, make sure you call :meth:`PySide.QtGui.QComboBox.hidePopup` to reset the internal state.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.hidePopup` 


.. method:: PySide.QtGui.QComboBox.sizeAdjustPolicy()


    :rtype: :attr:`PySide.QtGui.QComboBox.SizeAdjustPolicy`




    This property holds the policy describing how the size of the combobox changes when the content changes.

    The default value is :attr:`AdjustToContentsOnFirstShow<QComboBox.SizeAdjustPolicy>` .

    .. seealso::  :attr:`QComboBox.SizeAdjustPolicy` 


.. method:: PySide.QtGui.QComboBox.validator()


    :rtype: :class:`PySide.QtGui.QValidator`




    Returns the validator that is used to constrain text input for the combobox.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setValidator`  :meth:`~PySide.QtGui.QComboBox.editable` 


.. method:: PySide.QtGui.QComboBox.view()


    :rtype: :class:`PySide.QtGui.QAbstractItemView`




    Returns the list view used for the combobox popup.

    .. seealso::  :meth:`PySide.QtGui.QComboBox.setView` 



