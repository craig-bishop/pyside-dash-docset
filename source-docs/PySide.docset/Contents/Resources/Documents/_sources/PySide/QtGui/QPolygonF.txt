.. module:: PySide.QtGui
.. _QPolygonF:

QPolygonF
*********

.. inheritance-diagram:: QPolygonF
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QPolygonF.__add__>` (l)
*    def :meth:`__eq__<PySide.QtGui.QPolygonF.__eq__>` (v)
*    def :meth:`__iadd__<PySide.QtGui.QPolygonF.__iadd__>` (t)
*    def :meth:`__mul__<PySide.QtGui.QPolygonF.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtGui.QPolygonF.__mul__>` (, m)
*    def :meth:`__ne__<PySide.QtGui.QPolygonF.__ne__>` (v)
*    def :meth:`alignOfTypedData<PySide.QtGui.QPolygonF.alignOfTypedData>` ()
*    def :meth:`append<PySide.QtGui.QPolygonF.append>` (t)
*    def :meth:`at<PySide.QtGui.QPolygonF.at>` (i)
*    def :meth:`boundingRect<PySide.QtGui.QPolygonF.boundingRect>` ()
*    def :meth:`capacity<PySide.QtGui.QPolygonF.capacity>` ()
*    def :meth:`clear<PySide.QtGui.QPolygonF.clear>` ()
*    def :meth:`constData<PySide.QtGui.QPolygonF.constData>` ()
*    def :meth:`contains<PySide.QtGui.QPolygonF.contains>` (t)
*    def :meth:`containsPoint<PySide.QtGui.QPolygonF.containsPoint>` (pt, fillRule)
*    def :meth:`count<PySide.QtGui.QPolygonF.count>` ()
*    def :meth:`count<PySide.QtGui.QPolygonF.count>` (t)
*    def :meth:`data<PySide.QtGui.QPolygonF.data>` ()
*    def :meth:`detach_helper<PySide.QtGui.QPolygonF.detach_helper>` ()
*    def :meth:`empty<PySide.QtGui.QPolygonF.empty>` ()
*    def :meth:`endsWith<PySide.QtGui.QPolygonF.endsWith>` (t)
*    def :meth:`erase<PySide.QtGui.QPolygonF.erase>` (abegin, aend)
*    def :meth:`fill<PySide.QtGui.QPolygonF.fill>` (t[, size=-1])
*    def :meth:`first<PySide.QtGui.QPolygonF.first>` ()
*    def :meth:`front<PySide.QtGui.QPolygonF.front>` ()
*    def :meth:`indexOf<PySide.QtGui.QPolygonF.indexOf>` (t[, from=0])
*    def :meth:`insert<PySide.QtGui.QPolygonF.insert>` (before, n, t)
*    def :meth:`insert<PySide.QtGui.QPolygonF.insert>` (i, n, t)
*    def :meth:`insert<PySide.QtGui.QPolygonF.insert>` (i, t)
*    def :meth:`intersected<PySide.QtGui.QPolygonF.intersected>` (r)
*    def :meth:`isClosed<PySide.QtGui.QPolygonF.isClosed>` ()
*    def :meth:`isEmpty<PySide.QtGui.QPolygonF.isEmpty>` ()
*    def :meth:`isSharedWith<PySide.QtGui.QPolygonF.isSharedWith>` (other)
*    def :meth:`last<PySide.QtGui.QPolygonF.last>` ()
*    def :meth:`lastIndexOf<PySide.QtGui.QPolygonF.lastIndexOf>` (t[, from=-1])
*    def :meth:`mid<PySide.QtGui.QPolygonF.mid>` (pos[, length=-1])
*    def :meth:`operator[]<PySide.QtGui.QPolygonF.operator[]>` (i)
*    def :meth:`pop_back<PySide.QtGui.QPolygonF.pop_back>` ()
*    def :meth:`pop_front<PySide.QtGui.QPolygonF.pop_front>` ()
*    def :meth:`prepend<PySide.QtGui.QPolygonF.prepend>` (t)
*    def :meth:`push_back<PySide.QtGui.QPolygonF.push_back>` (t)
*    def :meth:`push_front<PySide.QtGui.QPolygonF.push_front>` (t)
*    def :meth:`realloc<PySide.QtGui.QPolygonF.realloc>` (size, alloc)
*    def :meth:`remove<PySide.QtGui.QPolygonF.remove>` (i)
*    def :meth:`remove<PySide.QtGui.QPolygonF.remove>` (i, n)
*    def :meth:`replace<PySide.QtGui.QPolygonF.replace>` (i, t)
*    def :meth:`reserve<PySide.QtGui.QPolygonF.reserve>` (size)
*    def :meth:`resize<PySide.QtGui.QPolygonF.resize>` (size)
*    def :meth:`setSharable<PySide.QtGui.QPolygonF.setSharable>` (sharable)
*    def :meth:`size<PySide.QtGui.QPolygonF.size>` ()
*    def :meth:`sizeOfTypedData<PySide.QtGui.QPolygonF.sizeOfTypedData>` ()
*    def :meth:`squeeze<PySide.QtGui.QPolygonF.squeeze>` ()
*    def :meth:`startsWith<PySide.QtGui.QPolygonF.startsWith>` (t)
*    def :meth:`subtracted<PySide.QtGui.QPolygonF.subtracted>` (r)
*    def :meth:`toList<PySide.QtGui.QPolygonF.toList>` ()
*    def :meth:`toPolygon<PySide.QtGui.QPolygonF.toPolygon>` ()
*    def :meth:`translate<PySide.QtGui.QPolygonF.translate>` (dx, dy)
*    def :meth:`translate<PySide.QtGui.QPolygonF.translate>` (offset)
*    def :meth:`translated<PySide.QtGui.QPolygonF.translated>` (dx, dy)
*    def :meth:`translated<PySide.QtGui.QPolygonF.translated>` (offset)
*    def :meth:`united<PySide.QtGui.QPolygonF.united>` (r)
*    def :meth:`value<PySide.QtGui.QPolygonF.value>` (i)
*    def :meth:`value<PySide.QtGui.QPolygonF.value>` (i, defaultValue)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`fromList<PySide.QtGui.QPolygonF.fromList>` (list)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QPolygonF` class provides a vector of points using floating point precision.

    A :class:`PySide.QtGui.QPolygonF` is a :class:`QVector` < :class:`PySide.QtCore.QPointF` >. The easiest way to add points to a :class:`PySide.QtGui.QPolygonF` is to use its streaming operator, as illustrated below:

    ::

                polygon = QPolygonF()
                polygon << QPointF(10.4, 20.5) << QPointF(20.2, 30.2)


    In addition to the functions provided by :class:`QVector` , :class:`PySide.QtGui.QPolygonF` provides the :meth:`PySide.QtGui.QPolygonF.boundingRect` and :meth:`PySide.QtGui.QPolygonF.translate` functions for geometry operations. Use the :meth:`QMatrix.map()<PySide.QtGui.QMatrix.map>` function for more general transformations of QPolygonFs.

    :class:`PySide.QtGui.QPolygonF` also provides the :meth:`PySide.QtGui.QPolygonF.isClosed` function to determine whether a polygon's start and end points are the same, and the :meth:`PySide.QtGui.QPolygonF.toPolygon` function returning an integer precision copy of this polygon.

    The :class:`PySide.QtGui.QPolygonF` class is :ref:`implicitly shared<implicit-sharing.html>` .

    .. seealso::  :class:`QVector`  :class:`PySide.QtGui.QPolygon`  :class:`PySide.QtCore.QLineF` 

.. class:: QPolygonF()
           QPolygonF(a)
           QPolygonF(a)
           QPolygonF(r)
           QPolygonF(v)
           QPolygonF(size)

    :param size: :class:`PySide.QtCore.int`
    :param a: :class:`PySide.QtGui.QPolygon`
    :param r: :class:`PySide.QtCore.QRectF`
    :param v: 

    Constructs a polygon with no points.

    .. seealso::  :meth:`QVector.isEmpty` 

    Constructs a float based polygon from the specified integer based ``polygon`` .

    .. seealso::  :meth:`PySide.QtGui.QPolygonF.toPolygon` 

    Constructs a copy of the given ``polygon`` .


    Constructs a closed polygon from the specified ``rectangle`` .

    The polygon contains the four vertices of the rectangle in clockwise order starting and ending with the top-left vertex.

    .. seealso::  :meth:`PySide.QtGui.QPolygonF.isClosed` 



    Constructs a polygon of the given ``size`` . Creates an empty polygon if ``size`` == 0.

    .. seealso::  :meth:`QVector.isEmpty` 

.. method:: PySide.QtGui.QPolygonF.alignOfTypedData()


    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPolygonF.append(t)


    :param t: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.at(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.boundingRect()


    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the bounding rectangle of the polygon, or :class:`PySide.QtCore.QRectF` (0,0,0,0) if the polygon is empty.

    .. seealso::  :meth:`QVector.isEmpty` 


.. method:: PySide.QtGui.QPolygonF.capacity()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.clear()









.. method:: PySide.QtGui.QPolygonF.constData()


    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.contains(t)


    :param t: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.containsPoint(pt, fillRule)


    :param pt: :class:`PySide.QtCore.QPointF`
    :param fillRule: :attr:`PySide.QtCore.Qt.FillRule`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.count()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.count(t)


    :param t: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.data()


    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.detach_helper()








.. method:: PySide.QtGui.QPolygonF.empty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.endsWith(t)


    :param t: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.erase(abegin, aend)


    :param abegin: :class:`PySide.QtCore.QPointF`
    :param aend: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.fill(t[, size=-1])


    :param t: :class:`PySide.QtCore.QPointF`
    :param size: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtGui.QPolygonF.first()


    :rtype: :class:`PySide.QtCore.QPointF`







.. staticmethod:: PySide.QtGui.QPolygonF.fromList(list)


    :param list: 
    :rtype: 







.. method:: PySide.QtGui.QPolygonF.front()


    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.indexOf(t[, from=0])


    :param t: :class:`PySide.QtCore.QPointF`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.insert(i, n, t)


    :param i: :class:`PySide.QtCore.int`
    :param n: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.insert(before, n, t)


    :param before: :class:`PySide.QtCore.QPointF`
    :param n: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.insert(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.intersected(r)


    :param r: :class:`PySide.QtGui.QPolygonF`
    :rtype: :class:`PySide.QtGui.QPolygonF`




    Returns a polygon which is the intersection of this polygon and ``r`` .

    Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.



.. method:: PySide.QtGui.QPolygonF.isClosed()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the polygon is closed; otherwise returns false.

    A polygon is said to be closed if its start point and end point are equal.

    .. seealso::  :meth:`QVector.first`  :meth:`QVector.last` 


.. method:: PySide.QtGui.QPolygonF.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.isSharedWith(other)


    :param other: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.last()


    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.lastIndexOf(t[, from=-1])


    :param t: :class:`PySide.QtCore.QPointF`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.mid(pos[, length=-1])


    :param pos: :class:`PySide.QtCore.int`
    :param length: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtGui.QPolygonF.__ne__(v)


    :param v: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.__mul__(, m)


    :param m: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtGui.QPolygonF`







.. method:: PySide.QtGui.QPolygonF.__mul__(, m)


    :param m: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtGui.QPolygonF`







.. method:: PySide.QtGui.QPolygonF.__add__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtGui.QPolygonF.__iadd__(t)


    :param t: :class:`PySide.QtCore.QPointF`
    :rtype: 







.. method:: PySide.QtGui.QPolygonF.__eq__(v)


    :param v: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.operator[](i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.pop_back()









.. method:: PySide.QtGui.QPolygonF.pop_front()









.. method:: PySide.QtGui.QPolygonF.prepend(t)


    :param t: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.push_back(t)


    :param t: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.push_front(t)


    :param t: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.realloc(size, alloc)


    :param size: :class:`PySide.QtCore.int`
    :param alloc: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPolygonF.remove(i, n)


    :param i: :class:`PySide.QtCore.int`
    :param n: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.remove(i)


    :param i: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.replace(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.reserve(size)


    :param size: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.resize(size)


    :param size: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.setSharable(sharable)


    :param sharable: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.size()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QPolygonF.sizeOfTypedData()


    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPolygonF.squeeze()









.. method:: PySide.QtGui.QPolygonF.startsWith(t)


    :param t: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPolygonF.subtracted(r)


    :param r: :class:`PySide.QtGui.QPolygonF`
    :rtype: :class:`PySide.QtGui.QPolygonF`




    Returns a polygon which is ``r`` subtracted from this polygon.

    Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.



.. method:: PySide.QtGui.QPolygonF.toList()


    :rtype: 







.. method:: PySide.QtGui.QPolygonF.toPolygon()


    :rtype: :class:`PySide.QtGui.QPolygon`




    Creates and returns a :class:`PySide.QtGui.QPolygon` by converting each :class:`PySide.QtCore.QPointF` to a :class:`PySide.QtCore.QPoint` .

    .. seealso::  :meth:`QPointF.toPoint()<PySide.QtCore.QPointF.toPoint>` 


.. method:: PySide.QtGui.QPolygonF.translate(offset)


    :param offset: :class:`PySide.QtCore.QPointF`




    Translate all points in the polygon by the given ``offset`` .

    .. seealso::  :meth:`PySide.QtGui.QPolygonF.translated` 


.. method:: PySide.QtGui.QPolygonF.translate(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Translates all points in the polygon by (``dx`` , ``dy`` ).

    .. seealso::  :meth:`PySide.QtGui.QPolygonF.translated` 


.. method:: PySide.QtGui.QPolygonF.translated(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QPolygonF`




    This is an overloaded function.

    Returns a copy of the polygon that is translated by (``dx`` , ``dy`` ).

    .. seealso::  :meth:`PySide.QtGui.QPolygonF.translate` 


.. method:: PySide.QtGui.QPolygonF.translated(offset)


    :param offset: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtGui.QPolygonF`




    Returns a copy of the polygon that is translated by the given ``offset`` .

    .. seealso::  :meth:`PySide.QtGui.QPolygonF.translate` 


.. method:: PySide.QtGui.QPolygonF.united(r)


    :param r: :class:`PySide.QtGui.QPolygonF`
    :rtype: :class:`PySide.QtGui.QPolygonF`




    Returns a polygon which is the union of this polygon and ``r`` .

    Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.

    .. seealso::  :meth:`PySide.QtGui.QPolygonF.intersected`  :meth:`PySide.QtGui.QPolygonF.subtracted` 


.. method:: PySide.QtGui.QPolygonF.value(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtGui.QPolygonF.value(i, defaultValue)


    :param i: :class:`PySide.QtCore.int`
    :param defaultValue: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`








