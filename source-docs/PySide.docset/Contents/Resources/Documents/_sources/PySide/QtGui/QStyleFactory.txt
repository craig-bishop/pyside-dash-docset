.. module:: PySide.QtGui
.. _QStyleFactory:

QStyleFactory
*************

.. inheritance-diagram:: QStyleFactory
    :parts: 2

Synopsis
--------

Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`create<PySide.QtGui.QStyleFactory.create>` (arg__1)
*    def :meth:`keys<PySide.QtGui.QStyleFactory.keys>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QStyleFactory` class creates :class:`PySide.QtGui.QStyle` objects.

    The :class:`PySide.QtGui.QStyle` class is an abstract base class that encapsulates the look and feel of a GUI. :class:`PySide.QtGui.QStyleFactory` creates a :class:`PySide.QtGui.QStyle` object using the :meth:`PySide.QtGui.QStyleFactory.create` function and a key identifying the style. The styles are either built-in or dynamically loaded from a style plugin (see :class:`~PySide.QtGui.QStylePlugin` ).

    The valid keys can be retrieved using the :meth:`PySide.QtGui.QStyleFactory.keys` function. Typically they include "windows", "motif", "cde", "plastique" and "cleanlooks". Depending on the platform, "windowsxp", "windowsvista" and "macintosh" may be available. Note that keys are case insensitive.

    .. seealso::  :class:`PySide.QtGui.QStyle` 

.. class:: QStyleFactory()




.. staticmethod:: PySide.QtGui.QStyleFactory.create(arg__1)


    :param arg__1: unicode
    :rtype: :class:`PySide.QtGui.QStyle`




    Creates and returns a :class:`PySide.QtGui.QStyle` object that matches the given ``key`` , or returns 0 if no matching style is found.

    Both built-in styles and styles from style plugins are queried for a matching style.

    .. note::  The keys used are case insensitive.

    .. seealso::  :meth:`PySide.QtGui.QStyleFactory.keys` 


.. staticmethod:: PySide.QtGui.QStyleFactory.keys()


    :rtype: list of strings




    Returns the list of valid keys, i.e. the keys this factory can create styles for.

    .. seealso::  :meth:`PySide.QtGui.QStyleFactory.create` 



