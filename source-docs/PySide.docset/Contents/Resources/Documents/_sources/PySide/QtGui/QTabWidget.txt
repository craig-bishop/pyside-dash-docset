.. module:: PySide.QtGui
.. _QTabWidget:

QTabWidget
**********

.. inheritance-diagram:: QTabWidget
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addTab<PySide.QtGui.QTabWidget.addTab>` (widget, arg__2)
*    def :meth:`addTab<PySide.QtGui.QTabWidget.addTab>` (widget, icon, label)
*    def :meth:`clear<PySide.QtGui.QTabWidget.clear>` ()
*    def :meth:`cornerWidget<PySide.QtGui.QTabWidget.cornerWidget>` ([corner=Qt.TopRightCorner])
*    def :meth:`count<PySide.QtGui.QTabWidget.count>` ()
*    def :meth:`currentIndex<PySide.QtGui.QTabWidget.currentIndex>` ()
*    def :meth:`currentWidget<PySide.QtGui.QTabWidget.currentWidget>` ()
*    def :meth:`documentMode<PySide.QtGui.QTabWidget.documentMode>` ()
*    def :meth:`elideMode<PySide.QtGui.QTabWidget.elideMode>` ()
*    def :meth:`iconSize<PySide.QtGui.QTabWidget.iconSize>` ()
*    def :meth:`indexOf<PySide.QtGui.QTabWidget.indexOf>` (widget)
*    def :meth:`initStyleOption<PySide.QtGui.QTabWidget.initStyleOption>` (option)
*    def :meth:`insertTab<PySide.QtGui.QTabWidget.insertTab>` (index, widget, arg__3)
*    def :meth:`insertTab<PySide.QtGui.QTabWidget.insertTab>` (index, widget, icon, label)
*    def :meth:`isMovable<PySide.QtGui.QTabWidget.isMovable>` ()
*    def :meth:`isTabEnabled<PySide.QtGui.QTabWidget.isTabEnabled>` (index)
*    def :meth:`removeTab<PySide.QtGui.QTabWidget.removeTab>` (index)
*    def :meth:`setCornerWidget<PySide.QtGui.QTabWidget.setCornerWidget>` (w[, corner=Qt.TopRightCorner])
*    def :meth:`setDocumentMode<PySide.QtGui.QTabWidget.setDocumentMode>` (set)
*    def :meth:`setElideMode<PySide.QtGui.QTabWidget.setElideMode>` (arg__1)
*    def :meth:`setIconSize<PySide.QtGui.QTabWidget.setIconSize>` (size)
*    def :meth:`setMovable<PySide.QtGui.QTabWidget.setMovable>` (movable)
*    def :meth:`setTabBar<PySide.QtGui.QTabWidget.setTabBar>` (arg__1)
*    def :meth:`setTabEnabled<PySide.QtGui.QTabWidget.setTabEnabled>` (index, arg__2)
*    def :meth:`setTabIcon<PySide.QtGui.QTabWidget.setTabIcon>` (index, icon)
*    def :meth:`setTabPosition<PySide.QtGui.QTabWidget.setTabPosition>` (arg__1)
*    def :meth:`setTabShape<PySide.QtGui.QTabWidget.setTabShape>` (s)
*    def :meth:`setTabText<PySide.QtGui.QTabWidget.setTabText>` (index, arg__2)
*    def :meth:`setTabToolTip<PySide.QtGui.QTabWidget.setTabToolTip>` (index, tip)
*    def :meth:`setTabWhatsThis<PySide.QtGui.QTabWidget.setTabWhatsThis>` (index, text)
*    def :meth:`setTabsClosable<PySide.QtGui.QTabWidget.setTabsClosable>` (closeable)
*    def :meth:`setUpLayout<PySide.QtGui.QTabWidget.setUpLayout>` ([arg__1=false])
*    def :meth:`setUsesScrollButtons<PySide.QtGui.QTabWidget.setUsesScrollButtons>` (useButtons)
*    def :meth:`tabBar<PySide.QtGui.QTabWidget.tabBar>` ()
*    def :meth:`tabIcon<PySide.QtGui.QTabWidget.tabIcon>` (index)
*    def :meth:`tabPosition<PySide.QtGui.QTabWidget.tabPosition>` ()
*    def :meth:`tabShape<PySide.QtGui.QTabWidget.tabShape>` ()
*    def :meth:`tabText<PySide.QtGui.QTabWidget.tabText>` (index)
*    def :meth:`tabToolTip<PySide.QtGui.QTabWidget.tabToolTip>` (index)
*    def :meth:`tabWhatsThis<PySide.QtGui.QTabWidget.tabWhatsThis>` (index)
*    def :meth:`tabsClosable<PySide.QtGui.QTabWidget.tabsClosable>` ()
*    def :meth:`usesScrollButtons<PySide.QtGui.QTabWidget.usesScrollButtons>` ()
*    def :meth:`widget<PySide.QtGui.QTabWidget.widget>` (index)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`tabInserted<PySide.QtGui.QTabWidget.tabInserted>` (index)
*    def :meth:`tabRemoved<PySide.QtGui.QTabWidget.tabRemoved>` (index)


Slots
^^^^^
.. container:: function_list

*    def :meth:`setCurrentIndex<PySide.QtGui.QTabWidget.setCurrentIndex>` (index)
*    def :meth:`setCurrentWidget<PySide.QtGui.QTabWidget.setCurrentWidget>` (widget)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`currentChanged<PySide.QtGui.QTabWidget.currentChanged>` (index)
*    def :meth:`tabCloseRequested<PySide.QtGui.QTabWidget.tabCloseRequested>` (index)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTabWidget` class provides a stack of tabbed widgets.

    A tab widget provides a tab bar (see :class:`PySide.QtGui.QTabBar` ) and a "page area" that is used to display pages related to each tab. By default, the tab bar is shown above the page area, but different configurations are available (see :attr:`QTabWidget.TabPosition` ). Each tab is associated with a different widget (called a page). Only the current page is shown in the page area; all the other pages are hidden. The user can show a different page by clicking on its tab or by pressing its Alt+*letter* shortcut if it has one.

    The normal way to use :class:`PySide.QtGui.QTabWidget` is to do the following:

    The position of the tabs is defined by :meth:`PySide.QtGui.QTabWidget.tabPosition` , their shape by :meth:`PySide.QtGui.QTabWidget.tabShape` .

    The signal :meth:`PySide.QtGui.QTabWidget.currentChanged` is emitted when the user selects a page.

    The current page index is available as :meth:`PySide.QtGui.QTabWidget.currentIndex` , the current page widget with :meth:`PySide.QtGui.QTabWidget.currentWidget` . You can retrieve a pointer to a page widget with a given index using :meth:`PySide.QtGui.QTabWidget.widget` , and can find the index position of a widget with :meth:`PySide.QtGui.QTabWidget.indexOf` . Use :meth:`PySide.QtGui.QTabWidget.setCurrentWidget` or :meth:`PySide.QtGui.QTabWidget.setCurrentIndex` to show a particular page.

    You can change a tab's text and icon using :meth:`PySide.QtGui.QTabWidget.setTabText` or :meth:`PySide.QtGui.QTabWidget.setTabIcon` . A tab and its associated page can be removed with :meth:`PySide.QtGui.QTabWidget.removeTab` .

    Each tab is either enabled or disabled at any given time (see :meth:`PySide.QtGui.QTabWidget.setTabEnabled` ). If a tab is enabled, the tab text is drawn normally and the user can select that tab. If it is disabled, the tab is drawn in a different way and the user cannot select that tab. Note that even if a tab is disabled, the page can still be visible, for example if all of the tabs happen to be disabled.

    Tab widgets can be a very good way to split up a complex dialog. An alternative is to use a :class:`PySide.QtGui.QStackedWidget` for which you provide some means of navigating between pages, for example, a :class:`PySide.QtGui.QToolBar` or a :class:`PySide.QtGui.QListWidget` .

    Most of the functionality in :class:`PySide.QtGui.QTabWidget` is provided by a :class:`PySide.QtGui.QTabBar` (at the top, providing the tabs) and a :class:`PySide.QtGui.QStackedWidget` (most of the area, organizing the individual pages).

    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/windowsxp-tabwidget.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/macintosh-tabwidget.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-tabwidget.png|
    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+
    |A Windows XP style tab widget.                                                                               |A Macintosh style tab widget.                                                                                |A Plastique style tab widget.                                                                                |
    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QTabBar`  :class:`PySide.QtGui.QStackedWidget`  :class:`PySide.QtGui.QToolBox`  :ref:`Tab Dialog Example<dialogs/tabdialog>` 

.. class:: QTabWidget([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Constructs a tabbed widget with parent ``parent`` .


.. attribute:: PySide.QtGui.QTabWidget.TabShape

    This enum type defines the shape of the tabs:

    +---------------------+------------------------------------------------------------------+
    |Constant             |Description                                                       |
    +=====================+==================================================================+
    |QTabWidget.Rounded   |The tabs are drawn with a rounded look. This is the default shape.|
    +---------------------+------------------------------------------------------------------+
    |QTabWidget.Triangular|The tabs are drawn with a triangular look.                        |
    +---------------------+------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QTabWidget.TabPosition

    This enum type defines where :class:`PySide.QtGui.QTabWidget` draws the tab row:

    +----------------+---------------------------------------------+
    |Constant        |Description                                  |
    +================+=============================================+
    |QTabWidget.North|The tabs are drawn above the pages.          |
    +----------------+---------------------------------------------+
    |QTabWidget.South|The tabs are drawn below the pages.          |
    +----------------+---------------------------------------------+
    |QTabWidget.West |The tabs are drawn to the left of the pages. |
    +----------------+---------------------------------------------+
    |QTabWidget.East |The tabs are drawn to the right of the pages.|
    +----------------+---------------------------------------------+


.. method:: PySide.QtGui.QTabWidget.addTab(widget, arg__2)


    :param widget: :class:`PySide.QtGui.QWidget`
    :param arg__2: unicode
    :rtype: :class:`PySide.QtCore.int`




    Adds a tab with the given ``page`` and ``label`` to the tab widget, and returns the index of the tab in the tab bar.

    If the tab's ``label`` contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes a shortcut which will move the focus to this tab.

    .. note::  If you call :meth:`PySide.QtGui.QTabWidget.addTab` after :meth:`PySide.QtGui.QWidget.show` , the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the :meth:`QWidget.updatesEnabled<PySide.QtGui.QWidget.updatesEnabled>` property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.insertTab` 


.. method:: PySide.QtGui.QTabWidget.addTab(widget, icon, label)


    :param widget: :class:`PySide.QtGui.QWidget`
    :param icon: :class:`PySide.QtGui.QIcon`
    :param label: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Adds a tab with the given ``page`` , ``icon`` , and ``label`` to the tab widget, and returns the index of the tab in the tab bar.

    This function is the same as :meth:`PySide.QtGui.QTabWidget.addTab` , but with an additional ``icon`` .



.. method:: PySide.QtGui.QTabWidget.clear()






    Removes all the pages, but does not delete them. Calling this function is equivalent to calling :meth:`PySide.QtGui.QTabWidget.removeTab` until the tab widget is empty.



.. method:: PySide.QtGui.QTabWidget.cornerWidget([corner=Qt.TopRightCorner])


    :param corner: :attr:`PySide.QtCore.Qt.Corner`
    :rtype: :class:`PySide.QtGui.QWidget`







.. method:: PySide.QtGui.QTabWidget.count()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of tabs in the tab bar.

    By default, this property contains a value of 0.



.. method:: PySide.QtGui.QTabWidget.currentChanged(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTabWidget.currentIndex()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the index position of the current tab page.

    The current index is -1 if there is no current widget.

    By default, this property contains a value of -1 because there are initially no tabs in the widget.



.. method:: PySide.QtGui.QTabWidget.currentWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns a pointer to the page currently being displayed by the tab dialog. The tab dialog does its best to make sure that this value is never 0 (but if you try hard enough, it can be).

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.currentIndex`  :meth:`PySide.QtGui.QTabWidget.setCurrentWidget` 


.. method:: PySide.QtGui.QTabWidget.documentMode()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds Whether or not the tab widget is rendered in a mode suitable for document pages. This is the same as document mode on Mac OS X..

    When this property is set the tab widget frame is not rendered. This mode is useful for showing document-type pages where the page covers most of the tab widget area.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.elideMode`  :meth:`QTabBar.documentMode<PySide.QtGui.QTabBar.documentMode>`  :meth:`QTabBar.usesScrollButtons<PySide.QtGui.QTabBar.usesScrollButtons>`  :attr:`QStyle.SH_TabBar_PreferNoArrows<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabWidget.elideMode()


    :rtype: :attr:`PySide.QtCore.Qt.TextElideMode`




    This property holds how to elide text in the tab bar.

    This property controls how items are elided when there is not enough space to show them for a given tab bar size.

    By default the value is style dependant.

    .. seealso::  :meth:`QTabBar.elideMode<PySide.QtGui.QTabBar.elideMode>`  :meth:`PySide.QtGui.QTabWidget.usesScrollButtons`  :attr:`QStyle.SH_TabBar_ElideMode<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabWidget.iconSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds The size for icons in the tab bar.

    The default value is style-dependent. This is the maximum size that the icons will have. Icons are not scaled up if they are of smaller size.

    .. seealso::  :meth:`QTabBar.iconSize<PySide.QtGui.QTabBar.iconSize>` 


.. method:: PySide.QtGui.QTabWidget.indexOf(widget)


    :param widget: :class:`PySide.QtGui.QWidget`
    :rtype: :class:`PySide.QtCore.int`




    Returns the index position of the page occupied by the widget ``w`` , or -1 if the widget cannot be found.



.. method:: PySide.QtGui.QTabWidget.initStyleOption(option)


    :param option: :class:`PySide.QtGui.QStyleOptionTabWidgetFrame`




    Initialize ``option`` with the values from this :class:`PySide.QtGui.QTabWidget` . This method is useful for subclasses when they need a :class:`PySide.QtGui.QStyleOptionTabWidgetFrame` , but don't want to fill in all the information themselves.

    .. seealso::  :meth:`QStyleOption.initFrom()<PySide.QtGui.QStyleOption.initFrom>`  :meth:`QTabBar.initStyleOption()<PySide.QtGui.QTabBar.initStyleOption>` 


.. method:: PySide.QtGui.QTabWidget.insertTab(index, widget, arg__3)


    :param index: :class:`PySide.QtCore.int`
    :param widget: :class:`PySide.QtGui.QWidget`
    :param arg__3: unicode
    :rtype: :class:`PySide.QtCore.int`




    Inserts a tab with the given ``label`` and ``page`` into the tab widget at the specified ``index`` , and returns the index of the inserted tab in the tab bar.

    The label is displayed in the tab and may vary in appearance depending on the configuration of the tab widget.

    If the tab's ``label`` contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes a shortcut which will move the focus to this tab.

    If ``index`` is out of range, the tab is simply appended. Otherwise it is inserted at the specified position.

    If the :class:`PySide.QtGui.QTabWidget` was empty before this function is called, the new page becomes the current page. Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current page.

    .. note::  If you call :meth:`PySide.QtGui.QTabWidget.insertTab` after :meth:`PySide.QtGui.QWidget.show` , the layout system will try to adjust to the changes in its widgets hierarchy and may cause flicker. To prevent this, you can set the :meth:`QWidget.updatesEnabled<PySide.QtGui.QWidget.updatesEnabled>` property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.addTab` 


.. method:: PySide.QtGui.QTabWidget.insertTab(index, widget, icon, label)


    :param index: :class:`PySide.QtCore.int`
    :param widget: :class:`PySide.QtGui.QWidget`
    :param icon: :class:`PySide.QtGui.QIcon`
    :param label: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Inserts a tab with the given ``label`` , ``page`` , and ``icon`` into the tab widget at the specified ``index`` , and returns the index of the inserted tab in the tab bar.

    This function is the same as :meth:`PySide.QtGui.QTabWidget.insertTab` , but with an additional ``icon`` .



.. method:: PySide.QtGui.QTabWidget.isMovable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds This property holds whether the user can move the tabs within the tabbar area..

    By default, this property is false;



.. method:: PySide.QtGui.QTabWidget.isTabEnabled(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the page at position ``index`` is enabled; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.setTabEnabled`  :meth:`QWidget.isEnabled()<PySide.QtGui.QWidget.isEnabled>` 


.. method:: PySide.QtGui.QTabWidget.removeTab(index)


    :param index: :class:`PySide.QtCore.int`




    Removes the tab at position ``index`` from this stack of widgets. The page widget itself is not deleted.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.addTab`  :meth:`PySide.QtGui.QTabWidget.insertTab` 


.. method:: PySide.QtGui.QTabWidget.setCornerWidget(w[, corner=Qt.TopRightCorner])


    :param w: :class:`PySide.QtGui.QWidget`
    :param corner: :attr:`PySide.QtCore.Qt.Corner`







.. method:: PySide.QtGui.QTabWidget.setCurrentIndex(index)


    :param index: :class:`PySide.QtCore.int`




    This property holds the index position of the current tab page.

    The current index is -1 if there is no current widget.

    By default, this property contains a value of -1 because there are initially no tabs in the widget.



.. method:: PySide.QtGui.QTabWidget.setCurrentWidget(widget)


    :param widget: :class:`PySide.QtGui.QWidget`




    Makes ``widget`` the current widget. The ``widget`` used must be a page in this tab widget.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.addTab`  :meth:`PySide.QtGui.QTabWidget.setCurrentIndex`  :meth:`PySide.QtGui.QTabWidget.currentWidget` 


.. method:: PySide.QtGui.QTabWidget.setDocumentMode(set)


    :param set: :class:`PySide.QtCore.bool`




    This property holds Whether or not the tab widget is rendered in a mode suitable for document pages. This is the same as document mode on Mac OS X..

    When this property is set the tab widget frame is not rendered. This mode is useful for showing document-type pages where the page covers most of the tab widget area.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.elideMode`  :meth:`QTabBar.documentMode<PySide.QtGui.QTabBar.documentMode>`  :meth:`QTabBar.usesScrollButtons<PySide.QtGui.QTabBar.usesScrollButtons>`  :attr:`QStyle.SH_TabBar_PreferNoArrows<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabWidget.setElideMode(arg__1)


    :param arg__1: :attr:`PySide.QtCore.Qt.TextElideMode`




    This property holds how to elide text in the tab bar.

    This property controls how items are elided when there is not enough space to show them for a given tab bar size.

    By default the value is style dependant.

    .. seealso::  :meth:`QTabBar.elideMode<PySide.QtGui.QTabBar.elideMode>`  :meth:`PySide.QtGui.QTabWidget.usesScrollButtons`  :attr:`QStyle.SH_TabBar_ElideMode<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabWidget.setIconSize(size)


    :param size: :class:`PySide.QtCore.QSize`




    This property holds The size for icons in the tab bar.

    The default value is style-dependent. This is the maximum size that the icons will have. Icons are not scaled up if they are of smaller size.

    .. seealso::  :meth:`QTabBar.iconSize<PySide.QtGui.QTabBar.iconSize>` 


.. method:: PySide.QtGui.QTabWidget.setMovable(movable)


    :param movable: :class:`PySide.QtCore.bool`




    This property holds This property holds whether the user can move the tabs within the tabbar area..

    By default, this property is false;



.. method:: PySide.QtGui.QTabWidget.setTabBar(arg__1)


    :param arg__1: :class:`PySide.QtGui.QTabBar`




    Replaces the dialog's :class:`PySide.QtGui.QTabBar` heading with the tab bar ``tb`` . Note that this must be called *before* any tabs have been added, or the behavior is undefined.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.tabBar` 


.. method:: PySide.QtGui.QTabWidget.setTabEnabled(index, arg__2)


    :param index: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.bool`




    If ``enable`` is true, the page at position ``index`` is enabled; otherwise the page at position ``index`` is disabled. The page's tab is redrawn appropriately.

    :class:`PySide.QtGui.QTabWidget` uses :meth:`QWidget.setEnabled()<PySide.QtGui.QWidget.setEnabled>` internally, rather than keeping a separate flag.

    Note that even a disabled tab/page may be visible. If the page is visible already, :class:`PySide.QtGui.QTabWidget` will not hide it; if all the pages are disabled, :class:`PySide.QtGui.QTabWidget` will show one of them.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.isTabEnabled`  :meth:`QWidget.setEnabled()<PySide.QtGui.QWidget.setEnabled>` 


.. method:: PySide.QtGui.QTabWidget.setTabIcon(index, icon)


    :param index: :class:`PySide.QtCore.int`
    :param icon: :class:`PySide.QtGui.QIcon`




    This is an overloaded function.

    Sets the ``icon`` for the tab at position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.tabIcon` 


.. method:: PySide.QtGui.QTabWidget.setTabPosition(arg__1)


    :param arg__1: :attr:`PySide.QtGui.QTabWidget.TabPosition`




    This property holds the position of the tabs in this tab widget.

    Possible values for this property are described by the :attr:`QTabWidget.TabPosition` enum.

    By default, this property is set to :attr:`North<QTabWidget.TabPosition>` .

    .. seealso::  :attr:`QTabWidget.TabPosition` 


.. method:: PySide.QtGui.QTabWidget.setTabShape(s)


    :param s: :attr:`PySide.QtGui.QTabWidget.TabShape`




    This property holds the shape of the tabs in this tab widget.

    Possible values for this property are :attr:`QTabWidget.Rounded<QTabWidget.TabShape>` (default) or :attr:`QTabWidget.Triangular<QTabWidget.TabShape>` .

    .. seealso::  :attr:`QTabWidget.TabShape` 


.. method:: PySide.QtGui.QTabWidget.setTabText(index, arg__2)


    :param index: :class:`PySide.QtCore.int`
    :param arg__2: unicode




    Defines a new ``label`` for the page at position ``index`` 's tab.

    If the provided text contains an ampersand character ('&'), a shortcut is automatically created for it. The character that follows the '&' will be used as the shortcut key. Any previous shortcut will be overwritten, or cleared if no shortcut is defined by the text. See the :class:`QShortcut<~PySide.QtGui.QShortcut#mnemonic>` documentation for details (to display an actual ampersand, use '&&').

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.tabText` 


.. method:: PySide.QtGui.QTabWidget.setTabToolTip(index, tip)


    :param index: :class:`PySide.QtCore.int`
    :param tip: unicode




    Sets the tab tool tip for the page at position ``index`` to ``tip`` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.tabToolTip` 


.. method:: PySide.QtGui.QTabWidget.setTabWhatsThis(index, text)


    :param index: :class:`PySide.QtCore.int`
    :param text: unicode




    Sets the What's This help text for the page at position ``index`` to ``text`` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.tabWhatsThis` 


.. method:: PySide.QtGui.QTabWidget.setTabsClosable(closeable)


    :param closeable: :class:`PySide.QtCore.bool`




    This property holds whether close buttons are automatically added to each tab..

    .. seealso::  :meth:`QTabBar.tabsClosable()<PySide.QtGui.QTabBar.tabsClosable>` 


.. method:: PySide.QtGui.QTabWidget.setUpLayout([arg__1=false])


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTabWidget.setUsesScrollButtons(useButtons)


    :param useButtons: :class:`PySide.QtCore.bool`




    This property holds Whether or not a tab bar should use buttons to scroll tabs when it has many tabs..

    When there are too many tabs in a tab bar for its size, the tab bar can either choose to expand its size or to add buttons that allow you to scroll through the tabs.

    By default the value is style dependant.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.elideMode`  :meth:`QTabBar.usesScrollButtons<PySide.QtGui.QTabBar.usesScrollButtons>`  :attr:`QStyle.SH_TabBar_PreferNoArrows<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabWidget.tabBar()


    :rtype: :class:`PySide.QtGui.QTabBar`




    Returns the current :class:`PySide.QtGui.QTabBar` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.setTabBar` 


.. method:: PySide.QtGui.QTabWidget.tabCloseRequested(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTabWidget.tabIcon(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QIcon`




    Returns the icon for the tab on the page at position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.setTabIcon` 


.. method:: PySide.QtGui.QTabWidget.tabInserted(index)


    :param index: :class:`PySide.QtCore.int`




    This virtual handler is called after a new tab was added or inserted at position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.tabRemoved` 


.. method:: PySide.QtGui.QTabWidget.tabPosition()


    :rtype: :attr:`PySide.QtGui.QTabWidget.TabPosition`




    This property holds the position of the tabs in this tab widget.

    Possible values for this property are described by the :attr:`QTabWidget.TabPosition` enum.

    By default, this property is set to :attr:`North<QTabWidget.TabPosition>` .

    .. seealso::  :attr:`QTabWidget.TabPosition` 


.. method:: PySide.QtGui.QTabWidget.tabRemoved(index)


    :param index: :class:`PySide.QtCore.int`




    This virtual handler is called after a tab was removed from position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.tabInserted` 


.. method:: PySide.QtGui.QTabWidget.tabShape()


    :rtype: :attr:`PySide.QtGui.QTabWidget.TabShape`




    This property holds the shape of the tabs in this tab widget.

    Possible values for this property are :attr:`QTabWidget.Rounded<QTabWidget.TabShape>` (default) or :attr:`QTabWidget.Triangular<QTabWidget.TabShape>` .

    .. seealso::  :attr:`QTabWidget.TabShape` 


.. method:: PySide.QtGui.QTabWidget.tabText(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the label text for the tab on the page at position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.setTabText` 


.. method:: PySide.QtGui.QTabWidget.tabToolTip(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the tab tool tip for the page at position ``index`` or an empty string if no tool tip has been set.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.setTabToolTip` 


.. method:: PySide.QtGui.QTabWidget.tabWhatsThis(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the What's This help text for the page at position ``index`` , or an empty string if no help text has been set.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.setTabWhatsThis` 


.. method:: PySide.QtGui.QTabWidget.tabsClosable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether close buttons are automatically added to each tab..

    .. seealso::  :meth:`QTabBar.tabsClosable()<PySide.QtGui.QTabBar.tabsClosable>` 


.. method:: PySide.QtGui.QTabWidget.usesScrollButtons()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds Whether or not a tab bar should use buttons to scroll tabs when it has many tabs..

    When there are too many tabs in a tab bar for its size, the tab bar can either choose to expand its size or to add buttons that allow you to scroll through the tabs.

    By default the value is style dependant.

    .. seealso::  :meth:`PySide.QtGui.QTabWidget.elideMode`  :meth:`QTabBar.usesScrollButtons<PySide.QtGui.QTabBar.usesScrollButtons>`  :attr:`QStyle.SH_TabBar_PreferNoArrows<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabWidget.widget(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the tab page at index position ``index`` or 0 if the ``index`` is out of range.




