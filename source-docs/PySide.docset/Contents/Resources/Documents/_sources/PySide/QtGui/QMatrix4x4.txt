.. module:: PySide.QtGui
.. _QMatrix4x4:

QMatrix4x4
**********

.. inheritance-diagram:: QMatrix4x4
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QMatrix4x4.__add__>` (, m2)
*    def :meth:`__div__<PySide.QtGui.QMatrix4x4.__div__>` (, divisor)
*    def :meth:`__eq__<PySide.QtGui.QMatrix4x4.__eq__>` (other)
*    def :meth:`__iadd__<PySide.QtGui.QMatrix4x4.__iadd__>` (other)
*    def :meth:`__idiv__<PySide.QtGui.QMatrix4x4.__idiv__>` (divisor)
*    def :meth:`__imul__<PySide.QtGui.QMatrix4x4.__imul__>` (factor)
*    def :meth:`__imul__<PySide.QtGui.QMatrix4x4.__imul__>` (other)
*    def :meth:`__isub__<PySide.QtGui.QMatrix4x4.__isub__>` (other)
*    def :meth:`__mgetitem__<PySide.QtGui.QMatrix4x4.__mgetitem__>` ()
*    def :meth:`__mul__<PySide.QtGui.QMatrix4x4.__mul__>` (, factor)
*    def :meth:`__mul__<PySide.QtGui.QMatrix4x4.__mul__>` (, m2)
*    def :meth:`__mul__<PySide.QtGui.QMatrix4x4.__mul__>` (factor)
*    def :meth:`__ne__<PySide.QtGui.QMatrix4x4.__ne__>` (other)
*    def :meth:`__reduce__<PySide.QtGui.QMatrix4x4.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtGui.QMatrix4x4.__repr__>` ()
*    def :meth:`__sub__<PySide.QtGui.QMatrix4x4.__sub__>` ()
*    def :meth:`__sub__<PySide.QtGui.QMatrix4x4.__sub__>` (, m2)
*    def :meth:`column<PySide.QtGui.QMatrix4x4.column>` (index)
*    def :meth:`copyDataTo<PySide.QtGui.QMatrix4x4.copyDataTo>` ()
*    def :meth:`determinant<PySide.QtGui.QMatrix4x4.determinant>` ()
*    def :meth:`fill<PySide.QtGui.QMatrix4x4.fill>` (value)
*    def :meth:`flipCoordinates<PySide.QtGui.QMatrix4x4.flipCoordinates>` ()
*    def :meth:`frustum<PySide.QtGui.QMatrix4x4.frustum>` (left, right, bottom, top, nearPlane, farPlane)
*    def :meth:`inverted<PySide.QtGui.QMatrix4x4.inverted>` ()
*    def :meth:`isIdentity<PySide.QtGui.QMatrix4x4.isIdentity>` ()
*    def :meth:`lookAt<PySide.QtGui.QMatrix4x4.lookAt>` (eye, center, up)
*    def :meth:`map<PySide.QtGui.QMatrix4x4.map>` (point)
*    def :meth:`map<PySide.QtGui.QMatrix4x4.map>` (point)
*    def :meth:`map<PySide.QtGui.QMatrix4x4.map>` (point)
*    def :meth:`map<PySide.QtGui.QMatrix4x4.map>` (point)
*    def :meth:`mapRect<PySide.QtGui.QMatrix4x4.mapRect>` (rect)
*    def :meth:`mapRect<PySide.QtGui.QMatrix4x4.mapRect>` (rect)
*    def :meth:`mapVector<PySide.QtGui.QMatrix4x4.mapVector>` (vector)
*    def :meth:`normalMatrix<PySide.QtGui.QMatrix4x4.normalMatrix>` ()
*    def :meth:`optimize<PySide.QtGui.QMatrix4x4.optimize>` ()
*    def :meth:`ortho<PySide.QtGui.QMatrix4x4.ortho>` (left, right, bottom, top, nearPlane, farPlane)
*    def :meth:`ortho<PySide.QtGui.QMatrix4x4.ortho>` (rect)
*    def :meth:`ortho<PySide.QtGui.QMatrix4x4.ortho>` (rect)
*    def :meth:`orthonormalInverse<PySide.QtGui.QMatrix4x4.orthonormalInverse>` ()
*    def :meth:`perspective<PySide.QtGui.QMatrix4x4.perspective>` (angle, aspect, nearPlane, farPlane)
*    def :meth:`projectedRotate<PySide.QtGui.QMatrix4x4.projectedRotate>` (angle, x, y, z)
*    def :meth:`rotate<PySide.QtGui.QMatrix4x4.rotate>` (angle, vector)
*    def :meth:`rotate<PySide.QtGui.QMatrix4x4.rotate>` (angle, x, y[, z=0.0f])
*    def :meth:`rotate<PySide.QtGui.QMatrix4x4.rotate>` (quaternion)
*    def :meth:`row<PySide.QtGui.QMatrix4x4.row>` (index)
*    def :meth:`scale<PySide.QtGui.QMatrix4x4.scale>` (factor)
*    def :meth:`scale<PySide.QtGui.QMatrix4x4.scale>` (vector)
*    def :meth:`scale<PySide.QtGui.QMatrix4x4.scale>` (x, y)
*    def :meth:`scale<PySide.QtGui.QMatrix4x4.scale>` (x, y, z)
*    def :meth:`setColumn<PySide.QtGui.QMatrix4x4.setColumn>` (index, value)
*    def :meth:`setRow<PySide.QtGui.QMatrix4x4.setRow>` (index, value)
*    def :meth:`setToIdentity<PySide.QtGui.QMatrix4x4.setToIdentity>` ()
*    def :meth:`toAffine<PySide.QtGui.QMatrix4x4.toAffine>` ()
*    def :meth:`toTransform<PySide.QtGui.QMatrix4x4.toTransform>` ()
*    def :meth:`toTransform<PySide.QtGui.QMatrix4x4.toTransform>` (distanceToPlane)
*    def :meth:`translate<PySide.QtGui.QMatrix4x4.translate>` (vector)
*    def :meth:`translate<PySide.QtGui.QMatrix4x4.translate>` (x, y)
*    def :meth:`translate<PySide.QtGui.QMatrix4x4.translate>` (x, y, z)
*    def :meth:`transposed<PySide.QtGui.QMatrix4x4.transposed>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QMatrix4x4` class represents a 4x4 transformation matrix in 3D space.

    .. seealso::  :class:`PySide.QtGui.QVector3D`  :class:`~PySide.QtGui.QGenericMatrix` 

.. class:: QMatrix4x4()
           QMatrix4x4(matrix)
           QMatrix4x4(QMatrix4x4)
           QMatrix4x4(transform)
           QMatrix4x4(values)
           QMatrix4x4(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44)

    :param m42: :class:`PySide.QtCore.qreal`
    :param values: :class:`PySide.QtCore.qreal`
    :param m43: :class:`PySide.QtCore.qreal`
    :param m44: :class:`PySide.QtCore.qreal`
    :param m21: :class:`PySide.QtCore.qreal`
    :param m22: :class:`PySide.QtCore.qreal`
    :param m23: :class:`PySide.QtCore.qreal`
    :param m24: :class:`PySide.QtCore.qreal`
    :param QMatrix4x4: :class:`PySide.QtGui.QMatrix4x4`
    :param m31: :class:`PySide.QtCore.qreal`
    :param m32: :class:`PySide.QtCore.qreal`
    :param m33: :class:`PySide.QtCore.qreal`
    :param m34: :class:`PySide.QtCore.qreal`
    :param m11: :class:`PySide.QtCore.qreal`
    :param m12: :class:`PySide.QtCore.qreal`
    :param matrix: :class:`PySide.QtGui.QMatrix`
    :param m13: :class:`PySide.QtCore.qreal`
    :param m14: :class:`PySide.QtCore.qreal`
    :param transform: :class:`PySide.QtGui.QTransform`
    :param m41: :class:`PySide.QtCore.qreal`

    Constructs an identity matrix.


    Constructs a 4x4 matrix from a conventional Qt 2D affine transformation ``matrix`` .

    If ``matrix`` has a special type (identity, translate, scale, etc), the programmer should follow this constructor with a call to :meth:`PySide.QtGui.QMatrix4x4.optimize` if they wish :class:`PySide.QtGui.QMatrix4x4` to optimize further calls to :meth:`PySide.QtGui.QMatrix4x4.translate` , :meth:`PySide.QtGui.QMatrix4x4.scale` , etc.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.toAffine`  :meth:`PySide.QtGui.QMatrix4x4.optimize` 



    Constructs a 4x4 matrix from the conventional Qt 2D transformation matrix ``transform`` .

    If ``transform`` has a special type (identity, translate, scale, etc), the programmer should follow this constructor with a call to :meth:`PySide.QtGui.QMatrix4x4.optimize` if they wish :class:`PySide.QtGui.QMatrix4x4` to optimize further calls to :meth:`PySide.QtGui.QMatrix4x4.translate` , :meth:`PySide.QtGui.QMatrix4x4.scale` , etc.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.toTransform`  :meth:`PySide.QtGui.QMatrix4x4.optimize` 

    Constructs a matrix from the given 16 floating-point ``values`` . The contents of the array ``values`` is assumed to be in row-major order.

    If the matrix has a special type (identity, translate, scale, etc), the programmer should follow this constructor with a call to :meth:`PySide.QtGui.QMatrix4x4.optimize` if they wish :class:`PySide.QtGui.QMatrix4x4` to optimize further calls to :meth:`PySide.QtGui.QMatrix4x4.translate` , :meth:`PySide.QtGui.QMatrix4x4.scale` , etc.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.copyDataTo`  :meth:`PySide.QtGui.QMatrix4x4.optimize` 


    Constructs a matrix from the 16 elements ``m11`` , ``m12`` , ``m13`` , ``m14`` , ``m21`` , ``m22`` , ``m23`` , ``m24`` , ``m31`` , ``m32`` , ``m33`` , ``m34`` , ``m41`` , ``m42`` , ``m43`` , and ``m44`` . The elements are specified in row-major order.

    If the matrix has a special type (identity, translate, scale, etc), the programmer should follow this constructor with a call to :meth:`PySide.QtGui.QMatrix4x4.optimize` if they wish :class:`PySide.QtGui.QMatrix4x4` to optimize further calls to :meth:`PySide.QtGui.QMatrix4x4.translate` , :meth:`PySide.QtGui.QMatrix4x4.scale` , etc.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.optimize` 

.. method:: PySide.QtGui.QMatrix4x4.__mgetitem__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QMatrix4x4.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QMatrix4x4.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QMatrix4x4.column(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Returns the elements of column ``index`` as a 4D vector.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.setColumn`  :meth:`PySide.QtGui.QMatrix4x4.row` 


.. method:: PySide.QtGui.QMatrix4x4.copyDataTo()






    Retrieves the 16 items in this matrix and copies them to ``values`` in row-major order.



.. method:: PySide.QtGui.QMatrix4x4.determinant()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the determinant of this matrix.



.. method:: PySide.QtGui.QMatrix4x4.fill(value)


    :param value: :class:`PySide.QtCore.qreal`




    Fills all elements of this matrx with ``value`` .



.. method:: PySide.QtGui.QMatrix4x4.flipCoordinates()






    Flips between right-handed and left-handed coordinate systems by multiplying the y and z co-ordinates by -1. This is normally used to create a left-handed orthographic view without scaling the viewport as :meth:`PySide.QtGui.QMatrix4x4.ortho` does.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.ortho` 


.. method:: PySide.QtGui.QMatrix4x4.frustum(left, right, bottom, top, nearPlane, farPlane)


    :param left: :class:`PySide.QtCore.qreal`
    :param right: :class:`PySide.QtCore.qreal`
    :param bottom: :class:`PySide.QtCore.qreal`
    :param top: :class:`PySide.QtCore.qreal`
    :param nearPlane: :class:`PySide.QtCore.qreal`
    :param farPlane: :class:`PySide.QtCore.qreal`




    Multiplies this matrix by another that applies a perspective frustum projection for a window with lower-left corner (``left`` , ``bottom`` ), upper-right corner (``right`` , ``top`` ), and the specified ``nearPlane`` and ``farPlane`` clipping planes.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.ortho`  :meth:`PySide.QtGui.QMatrix4x4.perspective` 


.. method:: PySide.QtGui.QMatrix4x4.inverted()


    :rtype: PyTuple




    Returns the inverse of this matrix. Returns the identity if this matrix cannot be inverted; i.e. :meth:`PySide.QtGui.QMatrix4x4.determinant` is zero. If ``invertible`` is not null, then true will be written to that location if the matrix can be inverted; false otherwise.

    If the matrix is recognized as the identity or an orthonormal matrix, then this function will quickly invert the matrix using optimized routines.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.determinant`  :meth:`PySide.QtGui.QMatrix4x4.normalMatrix` 


.. method:: PySide.QtGui.QMatrix4x4.isIdentity()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this matrix is the identity; false otherwise.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.setToIdentity` 


.. method:: PySide.QtGui.QMatrix4x4.lookAt(eye, center, up)


    :param eye: :class:`PySide.QtGui.QVector3D`
    :param center: :class:`PySide.QtGui.QVector3D`
    :param up: :class:`PySide.QtGui.QVector3D`




    Multiplies this matrix by another that applies an ``eye`` position transformation. The ``center`` value indicates the center of the view that the ``eye`` is looking at. The ``up`` value indicates which direction should be considered up with respect to the ``eye`` .



.. method:: PySide.QtGui.QMatrix4x4.map(point)


    :param point: :class:`PySide.QtGui.QVector4D`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Maps ``point`` by multiplying this matrix by ``point`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.mapRect` 


.. method:: PySide.QtGui.QMatrix4x4.map(point)


    :param point: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Maps ``point`` by multiplying this matrix by ``point`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.mapRect`  :meth:`PySide.QtGui.QMatrix4x4.mapVector` 


.. method:: PySide.QtGui.QMatrix4x4.map(point)


    :param point: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`




    Maps ``point`` by multiplying this matrix by ``point`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.mapRect` 


.. method:: PySide.QtGui.QMatrix4x4.map(point)


    :param point: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`




    Maps ``point`` by multiplying this matrix by ``point`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.mapRect` 


.. method:: PySide.QtGui.QMatrix4x4.mapRect(rect)


    :param rect: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Maps ``rect`` by multiplying this matrix by the corners of ``rect`` and then forming a new rectangle from the results. The returned rectangle will be an ordinary 2D rectangle with sides parallel to the horizontal and vertical axes.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.map` 


.. method:: PySide.QtGui.QMatrix4x4.mapRect(rect)


    :param rect: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtCore.QRect`




    Maps ``rect`` by multiplying this matrix by the corners of ``rect`` and then forming a new rectangle from the results. The returned rectangle will be an ordinary 2D rectangle with sides parallel to the horizontal and vertical axes.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.map` 


.. method:: PySide.QtGui.QMatrix4x4.mapVector(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Maps ``vector`` by multiplying the top 3x3 portion of this matrix by ``vector`` . The translation and projection components of this matrix are ignored.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.map` 


.. method:: PySide.QtGui.QMatrix4x4.normalMatrix()


    :rtype: :class:`PySide.QtGui.QMatrix3x3`




    Returns the normal matrix corresponding to this 4x4 transformation. The normal matrix is the transpose of the inverse of the top-left 3x3 part of this 4x4 matrix. If the 3x3 sub-matrix is not invertible, this function returns the identity.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.inverted` 


.. method:: PySide.QtGui.QMatrix4x4.__ne__(other)


    :param other: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this matrix is not identical to ``other`` ; false otherwise. This operator uses an exact floating-point comparison.



.. method:: PySide.QtGui.QMatrix4x4.__mul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`







.. method:: PySide.QtGui.QMatrix4x4.__mul__(, factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`







.. method:: PySide.QtGui.QMatrix4x4.__mul__(, m2)


    :param m2: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`







.. method:: PySide.QtGui.QMatrix4x4.__imul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`




    This is an overloaded function.

    Multiplies all elements of this matrix by ``factor`` .



.. method:: PySide.QtGui.QMatrix4x4.__imul__(other)


    :param other: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`




    Multiplies the contents of ``other`` by this matrix.



.. method:: PySide.QtGui.QMatrix4x4.__add__(, m2)


    :param m2: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`







.. method:: PySide.QtGui.QMatrix4x4.__iadd__(other)


    :param other: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`




    Adds the contents of ``other`` to this matrix.



.. method:: PySide.QtGui.QMatrix4x4.__sub__()


    :rtype: :class:`PySide.QtGui.QMatrix4x4`







.. method:: PySide.QtGui.QMatrix4x4.__sub__(, m2)


    :param m2: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`







.. method:: PySide.QtGui.QMatrix4x4.__isub__(other)


    :param other: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`




    Subtracts the contents of ``other`` from this matrix.



.. method:: PySide.QtGui.QMatrix4x4.__div__(, divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`







.. method:: PySide.QtGui.QMatrix4x4.__idiv__(divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix4x4`




    This is an overloaded function.

    Divides all elements of this matrix by ``divisor`` .



.. method:: PySide.QtGui.QMatrix4x4.__eq__(other)


    :param other: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this matrix is identical to ``other`` ; false otherwise. This operator uses an exact floating-point comparison.



.. method:: PySide.QtGui.QMatrix4x4.optimize()






    Optimize the usage of this matrix from its current elements.

    Some operations such as :meth:`PySide.QtGui.QMatrix4x4.translate` , :meth:`PySide.QtGui.QMatrix4x4.scale` , and :meth:`PySide.QtGui.QMatrix4x4.rotate` can be performed more efficiently if the matrix being modified is already known to be the identity, a previous :meth:`PySide.QtGui.QMatrix4x4.translate` , a previous :meth:`PySide.QtGui.QMatrix4x4.scale` , etc.

    Normally the :class:`PySide.QtGui.QMatrix4x4` class keeps track of this special type internally as operations are performed. However, if the matrix is modified directly with operator()() or :meth:`PySide.QtGui.QMatrix4x4.data` , then :class:`PySide.QtGui.QMatrix4x4` will lose track of the special type and will revert to the safest but least efficient operations thereafter.

    By calling :meth:`PySide.QtGui.QMatrix4x4.optimize` after directly modifying the matrix, the programmer can force :class:`PySide.QtGui.QMatrix4x4` to recover the special type if the elements appear to conform to one of the known optimized types.

    .. seealso::  :meth:`operator()()<~PySide.QtGui.QMatrix4x4.operator>`  :meth:`PySide.QtGui.QMatrix4x4.data`  :meth:`PySide.QtGui.QMatrix4x4.translate` 


.. method:: PySide.QtGui.QMatrix4x4.ortho(rect)


    :param rect: :class:`PySide.QtCore.QRectF`




    This is an overloaded function.

    Multiplies this matrix by another that applies an orthographic projection for a window with boundaries specified by ``rect`` . The near and far clipping planes will be -1 and 1 respectively.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.frustum`  :meth:`PySide.QtGui.QMatrix4x4.perspective` 


.. method:: PySide.QtGui.QMatrix4x4.ortho(left, right, bottom, top, nearPlane, farPlane)


    :param left: :class:`PySide.QtCore.qreal`
    :param right: :class:`PySide.QtCore.qreal`
    :param bottom: :class:`PySide.QtCore.qreal`
    :param top: :class:`PySide.QtCore.qreal`
    :param nearPlane: :class:`PySide.QtCore.qreal`
    :param farPlane: :class:`PySide.QtCore.qreal`




    Multiplies this matrix by another that applies an orthographic projection for a window with lower-left corner (``left`` , ``bottom`` ), upper-right corner (``right`` , ``top`` ), and the specified ``nearPlane`` and ``farPlane`` clipping planes.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.frustum`  :meth:`PySide.QtGui.QMatrix4x4.perspective` 


.. method:: PySide.QtGui.QMatrix4x4.ortho(rect)


    :param rect: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Multiplies this matrix by another that applies an orthographic projection for a window with boundaries specified by ``rect`` . The near and far clipping planes will be -1 and 1 respectively.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.frustum`  :meth:`PySide.QtGui.QMatrix4x4.perspective` 


.. method:: PySide.QtGui.QMatrix4x4.orthonormalInverse()


    :rtype: :class:`PySide.QtGui.QMatrix4x4`






.. method:: PySide.QtGui.QMatrix4x4.perspective(angle, aspect, nearPlane, farPlane)


    :param angle: :class:`PySide.QtCore.qreal`
    :param aspect: :class:`PySide.QtCore.qreal`
    :param nearPlane: :class:`PySide.QtCore.qreal`
    :param farPlane: :class:`PySide.QtCore.qreal`




    Multiplies this matrix by another that applies a perspective projection. The field of view will be ``angle`` degrees within a window with a given ``aspect`` ratio. The projection will have the specified ``nearPlane`` and ``farPlane`` clipping planes.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.ortho`  :meth:`PySide.QtGui.QMatrix4x4.frustum` 


.. method:: PySide.QtGui.QMatrix4x4.projectedRotate(angle, x, y, z)


    :param angle: :class:`PySide.QtCore.qreal`
    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param z: :class:`PySide.QtCore.qreal`






.. method:: PySide.QtGui.QMatrix4x4.rotate(angle, x, y[, z=0.0f])


    :param angle: :class:`PySide.QtCore.qreal`
    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param z: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Multiplies this matrix by another that rotates coordinates through ``angle`` degrees about the vector (``x`` , ``y`` , ``z`` ).

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.scale`  :meth:`PySide.QtGui.QMatrix4x4.translate` 


.. method:: PySide.QtGui.QMatrix4x4.rotate(quaternion)


    :param quaternion: :class:`PySide.QtGui.QQuaternion`




    Multiples this matrix by another that rotates coordinates according to a specified ``quaternion`` . The ``quaternion`` is assumed to have been normalized.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.scale`  :meth:`PySide.QtGui.QMatrix4x4.translate`  :class:`PySide.QtGui.QQuaternion` 


.. method:: PySide.QtGui.QMatrix4x4.rotate(angle, vector)


    :param angle: :class:`PySide.QtCore.qreal`
    :param vector: :class:`PySide.QtGui.QVector3D`




    Multiples this matrix by another that rotates coordinates through ``angle`` degrees about ``vector`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.scale`  :meth:`PySide.QtGui.QMatrix4x4.translate` 


.. method:: PySide.QtGui.QMatrix4x4.row(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QVector4D`




    Returns the elements of row ``index`` as a 4D vector.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.setRow`  :meth:`PySide.QtGui.QMatrix4x4.column` 


.. method:: PySide.QtGui.QMatrix4x4.scale(x, y, z)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param z: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Multiplies this matrix by another that scales coordinates by the components ``x`` , ``y`` , and ``z`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.translate`  :meth:`PySide.QtGui.QMatrix4x4.rotate` 


.. method:: PySide.QtGui.QMatrix4x4.scale(x, y)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Multiplies this matrix by another that scales coordinates by the components ``x`` , and ``y`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.translate`  :meth:`PySide.QtGui.QMatrix4x4.rotate` 


.. method:: PySide.QtGui.QMatrix4x4.scale(factor)


    :param factor: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Multiplies this matrix by another that scales coordinates by the given ``factor`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.translate`  :meth:`PySide.QtGui.QMatrix4x4.rotate` 


.. method:: PySide.QtGui.QMatrix4x4.scale(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`




    Multiplies this matrix by another that scales coordinates by the components of ``vector`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.translate`  :meth:`PySide.QtGui.QMatrix4x4.rotate` 


.. method:: PySide.QtGui.QMatrix4x4.setColumn(index, value)


    :param index: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector4D`




    Sets the elements of column ``index`` to the components of ``value`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.column`  :meth:`PySide.QtGui.QMatrix4x4.setRow` 


.. method:: PySide.QtGui.QMatrix4x4.setRow(index, value)


    :param index: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector4D`




    Sets the elements of row ``index`` to the components of ``value`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.row`  :meth:`PySide.QtGui.QMatrix4x4.setColumn` 


.. method:: PySide.QtGui.QMatrix4x4.setToIdentity()






    Sets this matrix to the identity.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.isIdentity` 


.. method:: PySide.QtGui.QMatrix4x4.toAffine()


    :rtype: :class:`PySide.QtGui.QMatrix`




    Returns the conventional Qt 2D affine transformation matrix that corresponds to this matrix. It is assumed that this matrix only contains 2D affine transformation elements.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.toTransform` 


.. method:: PySide.QtGui.QMatrix4x4.toTransform(distanceToPlane)


    :param distanceToPlane: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the conventional Qt 2D transformation matrix that corresponds to this matrix.

    If ``distanceToPlane`` is non-zero, it indicates a projection factor to use to adjust for the z co-ordinate. The value of 1024 corresponds to the projection factor used by :meth:`QTransform.rotate()<PySide.QtGui.QTransform.rotate>` for the x and y axes.

    If ``distanceToPlane`` is zero, then the returned :class:`PySide.QtGui.QTransform` is formed by simply dropping the third row and third column of the :class:`PySide.QtGui.QMatrix4x4` . This is suitable for implementing orthographic projections where the z co-ordinate should be dropped rather than projected.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.toAffine` 


.. method:: PySide.QtGui.QMatrix4x4.toTransform()


    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the conventional Qt 2D transformation matrix that corresponds to this matrix.

    The returned :class:`PySide.QtGui.QTransform` is formed by simply dropping the third row and third column of the :class:`PySide.QtGui.QMatrix4x4` . This is suitable for implementing orthographic projections where the z co-ordinate should be dropped rather than projected.

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.toAffine` 


.. method:: PySide.QtGui.QMatrix4x4.translate(x, y, z)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param z: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Multiplies this matrix by another that translates coordinates by the components ``x`` , ``y`` , and ``z`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.scale`  :meth:`PySide.QtGui.QMatrix4x4.rotate` 


.. method:: PySide.QtGui.QMatrix4x4.translate(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`




    Multiplies this matrix by another that translates coordinates by the components of ``vector`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.scale`  :meth:`PySide.QtGui.QMatrix4x4.rotate` 


.. method:: PySide.QtGui.QMatrix4x4.translate(x, y)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Multiplies this matrix by another that translates coordinates by the components ``x`` , and ``y`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix4x4.scale`  :meth:`PySide.QtGui.QMatrix4x4.rotate` 


.. method:: PySide.QtGui.QMatrix4x4.transposed()


    :rtype: :class:`PySide.QtGui.QMatrix4x4`




    Returns this matrix, transposed about its diagonal.




