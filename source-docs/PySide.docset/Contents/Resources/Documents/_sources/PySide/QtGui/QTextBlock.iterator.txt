.. module:: PySide.QtGui
.. _QTextBlock.iterator:

QTextBlock.iterator
*******************

.. inheritance-diagram:: QTextBlock.iterator
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtGui.QTextBlock.iterator.__eq__>` (o)
*    def :meth:`__iter__<PySide.QtGui.QTextBlock.iterator.__iter__>` ()
*    def :meth:`__ne__<PySide.QtGui.QTextBlock.iterator.__ne__>` (o)
*    def :meth:`__next__<PySide.QtGui.QTextBlock.iterator.__next__>` ()
*    def :meth:`atEnd<PySide.QtGui.QTextBlock.iterator.atEnd>` ()
*    def :meth:`fragment<PySide.QtGui.QTextBlock.iterator.fragment>` ()
*    def :meth:`operator++<PySide.QtGui.QTextBlock.iterator.operator++>` (arg__1)
*    def :meth:`operator--<PySide.QtGui.QTextBlock.iterator.operator-->` (arg__1)


Detailed Description
--------------------



    The :class:`QTextBlock.iterator` class provides an iterator for reading the contents of a :class:`PySide.QtGui.QTextBlock` .

    A block consists of a sequence of text fragments. This class provides a way to iterate over these, and read their contents. It does not provide a way to modify the internal structure or contents of the block.

    An iterator can be constructed and used to access the fragments within a text block in the following way:

    ::

            QTextBlock::iterator it;
            for (it = currentBlock.begin(); !(it.atEnd()); ++it) {
                QTextFragment currentFragment = it.fragment();
                if (currentFragment.isValid())

                    processFragment(currentFragment);
            }


    .. seealso::  :class:`PySide.QtGui.QTextFragment` 

.. class:: PySide.QtGui.QTextBlock.iterator()
           PySide.QtGui.QTextBlock.iterator(o)

    :param o: :class:`PySide.QtGui.QTextBlock::iterator`

    Constructs an iterator for this text block.


    Copy constructor. Constructs a copy of the ``other`` iterator.


.. method:: PySide.QtGui.QTextBlock.iterator.__iter__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QTextBlock.iterator.__next__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QTextBlock.iterator.atEnd()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the current item is the last item in the text block.



.. method:: PySide.QtGui.QTextBlock.iterator.fragment()


    :rtype: :class:`PySide.QtGui.QTextFragment`




    Returns the text fragment the iterator currently points to.



.. method:: PySide.QtGui.QTextBlock.iterator.__ne__(o)


    :param o: :class:`PySide.QtGui.QTextBlock::iterator`
    :rtype: :class:`PySide.QtCore.bool`




    Retuns true if this iterator is different from the ``other`` iterator; otherwise returns false.



.. method:: PySide.QtGui.QTextBlock.iterator.operator++(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextBlock::iterator`




    The postfix ++ operator (``i++`` ) advances the iterator to the next item in the text block and returns an iterator to the old current item.



.. method:: PySide.QtGui.QTextBlock.iterator.operator--(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextBlock::iterator`




    The postfix -- operator (``i--`` ) makes the preceding item current and returns an iterator to the old current item.



.. method:: PySide.QtGui.QTextBlock.iterator.__eq__(o)


    :param o: :class:`PySide.QtGui.QTextBlock::iterator`
    :rtype: :class:`PySide.QtCore.bool`




    Retuns true if this iterator is the same as the ``other`` iterator; otherwise returns false.




