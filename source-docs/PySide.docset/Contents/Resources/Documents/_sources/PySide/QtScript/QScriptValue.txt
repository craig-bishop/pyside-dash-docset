.. module:: PySide.QtScript
.. _QScriptValue:

QScriptValue
************

.. inheritance-diagram:: QScriptValue
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__iter__<PySide.QtScript.QScriptValue.__iter__>` ()
*    def :meth:`__mgetitem__<PySide.QtScript.QScriptValue.__mgetitem__>` ()
*    def :meth:`__repr__<PySide.QtScript.QScriptValue.__repr__>` ()
*    def :meth:`call<PySide.QtScript.QScriptValue.call>` ([thisObject=QScriptValue()[, args=QScriptValueList()]])
*    def :meth:`call<PySide.QtScript.QScriptValue.call>` (thisObject, arguments)
*    def :meth:`construct<PySide.QtScript.QScriptValue.construct>` ([args=QScriptValueList()])
*    def :meth:`construct<PySide.QtScript.QScriptValue.construct>` (arguments)
*    def :meth:`data<PySide.QtScript.QScriptValue.data>` ()
*    def :meth:`engine<PySide.QtScript.QScriptValue.engine>` ()
*    def :meth:`equals<PySide.QtScript.QScriptValue.equals>` (other)
*    def :meth:`instanceOf<PySide.QtScript.QScriptValue.instanceOf>` (other)
*    def :meth:`isArray<PySide.QtScript.QScriptValue.isArray>` ()
*    def :meth:`isBool<PySide.QtScript.QScriptValue.isBool>` ()
*    def :meth:`isBoolean<PySide.QtScript.QScriptValue.isBoolean>` ()
*    def :meth:`isDate<PySide.QtScript.QScriptValue.isDate>` ()
*    def :meth:`isError<PySide.QtScript.QScriptValue.isError>` ()
*    def :meth:`isFunction<PySide.QtScript.QScriptValue.isFunction>` ()
*    def :meth:`isNull<PySide.QtScript.QScriptValue.isNull>` ()
*    def :meth:`isNumber<PySide.QtScript.QScriptValue.isNumber>` ()
*    def :meth:`isObject<PySide.QtScript.QScriptValue.isObject>` ()
*    def :meth:`isQMetaObject<PySide.QtScript.QScriptValue.isQMetaObject>` ()
*    def :meth:`isQObject<PySide.QtScript.QScriptValue.isQObject>` ()
*    def :meth:`isRegExp<PySide.QtScript.QScriptValue.isRegExp>` ()
*    def :meth:`isString<PySide.QtScript.QScriptValue.isString>` ()
*    def :meth:`isUndefined<PySide.QtScript.QScriptValue.isUndefined>` ()
*    def :meth:`isValid<PySide.QtScript.QScriptValue.isValid>` ()
*    def :meth:`isVariant<PySide.QtScript.QScriptValue.isVariant>` ()
*    def :meth:`lessThan<PySide.QtScript.QScriptValue.lessThan>` (other)
*    def :meth:`objectId<PySide.QtScript.QScriptValue.objectId>` ()
*    def :meth:`property<PySide.QtScript.QScriptValue.property>` (arrayIndex[, mode=QScriptValue.ResolvePrototype])
*    def :meth:`property<PySide.QtScript.QScriptValue.property>` (name[, mode=QScriptValue.ResolvePrototype])
*    def :meth:`property<PySide.QtScript.QScriptValue.property>` (name[, mode=QScriptValue.ResolvePrototype])
*    def :meth:`propertyFlags<PySide.QtScript.QScriptValue.propertyFlags>` (name[, mode=QScriptValue.ResolvePrototype])
*    def :meth:`propertyFlags<PySide.QtScript.QScriptValue.propertyFlags>` (name[, mode=QScriptValue.ResolvePrototype])
*    def :meth:`prototype<PySide.QtScript.QScriptValue.prototype>` ()
*    def :meth:`scope<PySide.QtScript.QScriptValue.scope>` ()
*    def :meth:`scriptClass<PySide.QtScript.QScriptValue.scriptClass>` ()
*    def :meth:`setData<PySide.QtScript.QScriptValue.setData>` (data)
*    def :meth:`setProperty<PySide.QtScript.QScriptValue.setProperty>` (arrayIndex, value[, flags=QScriptValue.KeepExistingFlags])
*    def :meth:`setProperty<PySide.QtScript.QScriptValue.setProperty>` (name, value[, flags=QScriptValue.KeepExistingFlags])
*    def :meth:`setProperty<PySide.QtScript.QScriptValue.setProperty>` (name, value[, flags=QScriptValue.KeepExistingFlags])
*    def :meth:`setPrototype<PySide.QtScript.QScriptValue.setPrototype>` (prototype)
*    def :meth:`setScope<PySide.QtScript.QScriptValue.setScope>` (scope)
*    def :meth:`setScriptClass<PySide.QtScript.QScriptValue.setScriptClass>` (scriptClass)
*    def :meth:`strictlyEquals<PySide.QtScript.QScriptValue.strictlyEquals>` (other)
*    def :meth:`toBool<PySide.QtScript.QScriptValue.toBool>` ()
*    def :meth:`toBoolean<PySide.QtScript.QScriptValue.toBoolean>` ()
*    def :meth:`toDateTime<PySide.QtScript.QScriptValue.toDateTime>` ()
*    def :meth:`toInt32<PySide.QtScript.QScriptValue.toInt32>` ()
*    def :meth:`toInteger<PySide.QtScript.QScriptValue.toInteger>` ()
*    def :meth:`toNumber<PySide.QtScript.QScriptValue.toNumber>` ()
*    def :meth:`toObject<PySide.QtScript.QScriptValue.toObject>` ()
*    def :meth:`toQMetaObject<PySide.QtScript.QScriptValue.toQMetaObject>` ()
*    def :meth:`toQObject<PySide.QtScript.QScriptValue.toQObject>` ()
*    def :meth:`toRegExp<PySide.QtScript.QScriptValue.toRegExp>` ()
*    def :meth:`toString<PySide.QtScript.QScriptValue.toString>` ()
*    def :meth:`toUInt16<PySide.QtScript.QScriptValue.toUInt16>` ()
*    def :meth:`toUInt32<PySide.QtScript.QScriptValue.toUInt32>` ()
*    def :meth:`toVariant<PySide.QtScript.QScriptValue.toVariant>` ()


Detailed Description
--------------------



    The :class:`PySide.QtScript.QScriptValue` class acts as a container for the Qt Script data types.

    :class:`PySide.QtScript.QScriptValue` supports the types defined in the :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` standard: The primitive types, which are Undefined, Null, Boolean, Number, and String; and the Object type. Additionally, Qt Script has built-in support for :class:`PySide.QtCore.QVariant` , :class:`PySide.QtCore.QObject` and :class:`PySide.QtCore.QMetaObject` .

    For the object-based types (including Date and RegExp), use the newT() functions in :class:`PySide.QtScript.QScriptEngine` (e.g. :meth:`QScriptEngine.newObject()<PySide.QtScript.QScriptEngine.newObject>` ) to create a :class:`PySide.QtScript.QScriptValue` of the desired type. For the primitive types, use one of the :class:`PySide.QtScript.QScriptValue` constructor overloads.

    The methods named isT() (e.g. :meth:`PySide.QtScript.QScriptValue.isBool` , :meth:`PySide.QtScript.QScriptValue.isUndefined` ) can be used to test if a value is of a certain type. The methods named toT() (e.g. :meth:`PySide.QtScript.QScriptValue.toBool` , :meth:`PySide.QtScript.QScriptValue.toString` ) can be used to convert a :class:`PySide.QtScript.QScriptValue` to another type. You can also use the generic :meth:`~PySide.QtScript.QScriptValue.qscriptvalue\_cast` function.

    Object values have zero or more properties which are themselves QScriptValues. Use :meth:`PySide.QtScript.QScriptValue.setProperty` to set a property of an object, and call :meth:`PySide.QtScript.QScriptValue.property` to retrieve the value of a property.

    ::

        myEngine = QScriptEngine()
        myObject = myEngine.newObject()
        myOtherObject = myEngine.newObject()
        myObject.setProperty("myChild", myOtherObject)
        myObject.setProperty("name", "John Doe")


    Each property can have a set of attributes; these are specified as the third (optional) argument to :meth:`PySide.QtScript.QScriptValue.setProperty` . The attributes of a property can be queried by calling the :meth:`PySide.QtScript.QScriptValue.propertyFlags` function. The following code snippet creates a property that cannot be modified by script code:

    ::

        val = QScriptValue(myEngine, 123)
        myObject.setProperty("myReadOnlyProperty", val, QScriptValue.ReadOnly)


    If you want to iterate over the properties of a script object, use the :class:`PySide.QtScript.QScriptValueIterator` class.

    Object values have an internal ``prototype`` property, which can be accessed with :meth:`PySide.QtScript.QScriptValue.prototype` and :meth:`PySide.QtScript.QScriptValue.setPrototype` . Properties added to a prototype are shared by all objects having that prototype; this is referred to as prototype-based inheritance. In practice, it means that (by default) the :meth:`PySide.QtScript.QScriptValue.property` function will automatically attempt to look up look the property in the :meth:`PySide.QtScript.QScriptValue.prototype` (and in the prototype of the :meth:`PySide.QtScript.QScriptValue.prototype` , and so on), if the object itself does not have the requested property. Note that this prototype-based lookup is not performed by :meth:`PySide.QtScript.QScriptValue.setProperty` ; :meth:`PySide.QtScript.QScriptValue.setProperty` will always create the property in the script object itself. For more information, see the :ref:`QtScript` documentation.

    Function objects (objects for which :meth:`PySide.QtScript.QScriptValue.isFunction` returns true) can be invoked by calling :meth:`PySide.QtScript.QScriptValue.call` . Constructor functions can be used to construct new objects by calling :meth:`PySide.QtScript.QScriptValue.construct` .

    Use :meth:`PySide.QtScript.QScriptValue.equals` , :meth:`PySide.QtScript.QScriptValue.strictlyEquals` and :meth:`PySide.QtScript.QScriptValue.lessThan` to compare a :class:`PySide.QtScript.QScriptValue` to another.

    Object values can have custom data associated with them; see the :meth:`PySide.QtScript.QScriptValue.setData` and :meth:`PySide.QtScript.QScriptValue.data` functions. By default, this data is not accessible to scripts; it can be used to store any data you want to associate with the script object. Typically this is used by custom class objects (see :class:`PySide.QtScript.QScriptClass` ) to store a C++ type that contains the "native" object data.

    Note that a :class:`PySide.QtScript.QScriptValue` for which :meth:`PySide.QtScript.QScriptValue.isObject` is true only carries a reference to an actual object; copying the :class:`PySide.QtScript.QScriptValue` will only copy the object reference, not the object itself. If you want to clone an object (i.e. copy an object's properties to another object), you can do so with the help of a ``for-in`` statement in script code, or :class:`PySide.QtScript.QScriptValueIterator` in C++.

    .. seealso::  :class:`PySide.QtScript.QScriptEngine`  :class:`PySide.QtScript.QScriptValueIterator` 

.. class:: QScriptValue()
           QScriptValue(engine, val)
           QScriptValue(engine, val)
           QScriptValue(engine, val)
           QScriptValue(engine, val)
           QScriptValue(engine, val)
           QScriptValue(engine, val)
           QScriptValue(engine, val)
           QScriptValue(value)
           QScriptValue(value)
           QScriptValue(other)
           QScriptValue(value)
           QScriptValue(value)
           QScriptValue(value)
           QScriptValue(value)
           QScriptValue(value)

    :param engine: :class:`PySide.QtScript.QScriptEngine`
    :param val: :attr:`PySide.QtScript.QScriptValue.SpecialValue`
    :param other: :class:`PySide.QtScript.QScriptValue`
    :param value: :attr:`PySide.QtScript.QScriptValue.SpecialValue`

    Constructs an invalid :class:`PySide.QtScript.QScriptValue` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with the special ``value`` and registers it with the script ``engine`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with the boolean ``value`` and registers it with the script ``engine`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with the string ``value`` and registers it with the script ``engine`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with the string ``value`` and registers it with the script ``engine`` .




    Constructs a new :class:`PySide.QtScript.QScriptValue` with the integer ``value`` and registers it with the script ``engine`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with the unsigned integer ``value`` and registers it with the script ``engine`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with a special ``value`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with a boolean ``value`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` that is a copy of ``other`` .

    Note that if ``other`` is an object (i.e., :meth:`PySide.QtScript.QScriptValue.isObject` would return true), then only a reference to the underlying object is copied into the new script value (i.e., the object itself is not copied).


    Constructs a new :class:`PySide.QtScript.QScriptValue` with a string ``value`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with a string ``value`` .




    Constructs a new :class:`PySide.QtScript.QScriptValue` with a number ``value`` .


    Constructs a new :class:`PySide.QtScript.QScriptValue` with a number ``value`` .


.. attribute:: PySide.QtScript.QScriptValue.ResolveFlag

    This enum specifies how to look up a property of an object.

    +-----------------------------+----------------------------------------------------------------------------------------------+
    |Constant                     |Description                                                                                   |
    +=============================+==============================================================================================+
    |QScriptValue.ResolveLocal    |Only check the object's own properties.                                                       |
    +-----------------------------+----------------------------------------------------------------------------------------------+
    |QScriptValue.ResolvePrototype|Check the object's own properties first, then search the prototype chain. This is the default.|
    +-----------------------------+----------------------------------------------------------------------------------------------+

    Check the object's own properties first, then search the scope chain.

    Check the object's own properties first, then search the prototype chain, and finally search the scope chain.


.. attribute:: PySide.QtScript.QScriptValue.PropertyFlag

    This enum describes the attributes of a property.

    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                      |Description                                                                                                                                                                                              |
    +==============================+=========================================================================================================================================================================================================+
    |QScriptValue.ReadOnly         |The property is read-only. Attempts by Qt Script code to write to the property will be ignored.                                                                                                          |
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptValue.Undeletable      |Attempts by Qt Script code to ``delete`` the property will be ignored.                                                                                                                                   |
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptValue.SkipInEnumeration|The property is not to be enumerated by a ``for-in`` enumeration.                                                                                                                                        |
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptValue.PropertyGetter   |The property is defined by a function which will be called to get the property value.                                                                                                                    |
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptValue.PropertySetter   |The property is defined by a function which will be called to set the property value.                                                                                                                    |
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptValue.QObjectMember    |This flag is used to indicate that an existing property is a :class:`PySide.QtCore.QObject` member (a property or method).                                                                               |
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptValue.KeepExistingFlags|This value is used to indicate to :meth:`PySide.QtScript.QScriptValue.setProperty` that the property's flags should be left unchanged. If the property doesn't exist, the default flags (0) will be used.|
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QScriptValue.UserRange        |Flags in this range are not used by Qt Script, and can be used for custom purposes.                                                                                                                      |
    +------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtScript.QScriptValue.SpecialValue

    This enum is used to specify a single-valued type.

    +---------------------------+-------------------+
    |Constant                   |Description        |
    +===========================+===================+
    |QScriptValue.UndefinedValue|An undefined value.|
    +---------------------------+-------------------+
    |QScriptValue.NullValue     |A null value.      |
    +---------------------------+-------------------+


.. method:: PySide.QtScript.QScriptValue.__iter__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtScript.QScriptValue.__mgetitem__()









.. method:: PySide.QtScript.QScriptValue.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtScript.QScriptValue.call(thisObject, arguments)


    :param thisObject: :class:`PySide.QtScript.QScriptValue`
    :param arguments: :class:`PySide.QtScript.QScriptValue`
    :rtype: :class:`PySide.QtScript.QScriptValue`




    Calls this :class:`PySide.QtScript.QScriptValue` as a function, using ``thisObject`` as the `this' object in the function call, and passing ``arguments`` as arguments to the function. Returns the value returned from the function.

    If this :class:`PySide.QtScript.QScriptValue` is not a function, :meth:`PySide.QtScript.QScriptValue.call` does nothing and returns an invalid :class:`PySide.QtScript.QScriptValue` .

    ``arguments`` can be an arguments object, an array, null or undefined; any other type will cause a TypeError to be thrown.

    Note that if ``thisObject`` is not an object, the global object (see :meth:`QScriptEngine.globalObject()<PySide.QtScript.QScriptEngine.globalObject>` ) will be used as the `this' object.

    One common usage of this function is to forward native function calls to another function:

    ::


        def myNativeFunction(context, engine):
            otherFunction = ...

            return otherFunction.call(context.thisObject(), context.argumentsObject())



    .. seealso::  :meth:`PySide.QtScript.QScriptValue.construct`  :meth:`QScriptContext.argumentsObject()<PySide.QtScript.QScriptContext.argumentsObject>` 


.. method:: PySide.QtScript.QScriptValue.call([thisObject=QScriptValue()[, args=QScriptValueList()]])


    :param thisObject: :class:`PySide.QtScript.QScriptValue`
    :param args: 
    :rtype: :class:`PySide.QtScript.QScriptValue`







.. method:: PySide.QtScript.QScriptValue.construct([args=QScriptValueList()])


    :param args: 
    :rtype: :class:`PySide.QtScript.QScriptValue`







.. method:: PySide.QtScript.QScriptValue.construct(arguments)


    :param arguments: :class:`PySide.QtScript.QScriptValue`
    :rtype: :class:`PySide.QtScript.QScriptValue`




    Creates a new ``Object`` and calls this :class:`PySide.QtScript.QScriptValue` as a constructor, using the created object as the `this' object and passing ``arguments`` as arguments. If the return value from the constructor call is an object, then that object is returned; otherwise the default constructed object is returned.

    If this :class:`PySide.QtScript.QScriptValue` is not a function, :meth:`PySide.QtScript.QScriptValue.construct` does nothing and returns an invalid :class:`PySide.QtScript.QScriptValue` .

    ``arguments`` can be an arguments object, an array, null or undefined. Any other type will cause a TypeError to be thrown.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.call`  :meth:`QScriptEngine.newObject()<PySide.QtScript.QScriptEngine.newObject>`  :meth:`QScriptContext.argumentsObject()<PySide.QtScript.QScriptContext.argumentsObject>` 


.. method:: PySide.QtScript.QScriptValue.data()


    :rtype: :class:`PySide.QtScript.QScriptValue`




    Returns the internal data of this :class:`PySide.QtScript.QScriptValue` object. :ref:`QtScript` uses this property to store the primitive value of Date, String, Number and Boolean objects. For other types of object, custom data may be stored using :meth:`PySide.QtScript.QScriptValue.setData` .

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.setData` 


.. method:: PySide.QtScript.QScriptValue.engine()


    :rtype: :class:`PySide.QtScript.QScriptEngine`




    Returns the :class:`PySide.QtScript.QScriptEngine` that created this :class:`PySide.QtScript.QScriptValue` , or 0 if this :class:`PySide.QtScript.QScriptValue` is invalid or the value is not associated with a particular engine.



.. method:: PySide.QtScript.QScriptValue.equals(other)


    :param other: :class:`PySide.QtScript.QScriptValue`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is equal to ``other`` , otherwise returns false. The comparison follows the behavior described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 11.9.3, "The Abstract Equality Comparison Algorithm".

    This function can return true even if the type of this :class:`PySide.QtScript.QScriptValue` is different from the type of the ``other`` value; i.e. the comparison is not strict. For example, comparing the number 9 to the string "9" returns true; comparing an undefined value to a null value returns true; comparing a ``Number`` object whose primitive value is 6 to a ``String`` object whose primitive value is "6" returns true; and comparing the number 1 to the boolean value ``true`` returns true. If you want to perform a comparison without such implicit value conversion, use :meth:`PySide.QtScript.QScriptValue.strictlyEquals` .

    Note that if this :class:`PySide.QtScript.QScriptValue` or the ``other`` value are objects, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.strictlyEquals`  :meth:`PySide.QtScript.QScriptValue.lessThan` 


.. method:: PySide.QtScript.QScriptValue.instanceOf(other)


    :param other: :class:`PySide.QtScript.QScriptValue`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is an instance of ``other`` ; otherwise returns false.

    This :class:`PySide.QtScript.QScriptValue` is considered to be an instance of ``other`` if ``other`` is a function and the value of the ``prototype`` property of ``other`` is in the prototype chain of this :class:`PySide.QtScript.QScriptValue` .



.. method:: PySide.QtScript.QScriptValue.isArray()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is an object of the Array class; otherwise returns false.

    .. seealso::  :meth:`QScriptEngine.newArray()<PySide.QtScript.QScriptEngine.newArray>` 


.. method:: PySide.QtScript.QScriptValue.isBool()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is of the primitive type Boolean; otherwise returns false.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toBool` 


.. method:: PySide.QtScript.QScriptValue.isBoolean()


    :rtype: :class:`PySide.QtCore.bool`




    Use :meth:`PySide.QtScript.QScriptValue.isBool` instead.



.. method:: PySide.QtScript.QScriptValue.isDate()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is an object of the Date class; otherwise returns false.

    .. seealso::  :meth:`QScriptEngine.newDate()<PySide.QtScript.QScriptEngine.newDate>` 


.. method:: PySide.QtScript.QScriptValue.isError()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is an object of the Error class; otherwise returns false.

    .. seealso::  :meth:`QScriptContext.throwError()<PySide.QtScript.QScriptContext.throwError>` 


.. method:: PySide.QtScript.QScriptValue.isFunction()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is a function; otherwise returns false.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.call` 


.. method:: PySide.QtScript.QScriptValue.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is of the primitive type Null; otherwise returns false.

    .. seealso::  :meth:`QScriptEngine.nullValue()<PySide.QtScript.QScriptEngine.nullValue>` 


.. method:: PySide.QtScript.QScriptValue.isNumber()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is of the primitive type Number; otherwise returns false.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toNumber` 


.. method:: PySide.QtScript.QScriptValue.isObject()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is of the Object type; otherwise returns false.

    Note that function values, variant values, and :class:`PySide.QtCore.QObject` values are objects, so this function returns true for such values.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toObject`  :meth:`QScriptEngine.newObject()<PySide.QtScript.QScriptEngine.newObject>` 


.. method:: PySide.QtScript.QScriptValue.isQMetaObject()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is a :class:`PySide.QtCore.QMetaObject` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toQMetaObject`  :meth:`QScriptEngine.newQMetaObject()<PySide.QtScript.QScriptEngine.newQMetaObject>` 


.. method:: PySide.QtScript.QScriptValue.isQObject()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is a :class:`PySide.QtCore.QObject` ; otherwise returns false.

    Note: This function returns true even if the :class:`PySide.QtCore.QObject` that this :class:`PySide.QtScript.QScriptValue` wraps has been deleted.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toQObject`  :meth:`QScriptEngine.newQObject()<PySide.QtScript.QScriptEngine.newQObject>` 


.. method:: PySide.QtScript.QScriptValue.isRegExp()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is an object of the RegExp class; otherwise returns false.

    .. seealso::  :meth:`QScriptEngine.newRegExp()<PySide.QtScript.QScriptEngine.newRegExp>` 


.. method:: PySide.QtScript.QScriptValue.isString()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is of the primitive type String; otherwise returns false.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toString` 


.. method:: PySide.QtScript.QScriptValue.isUndefined()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is of the primitive type Undefined; otherwise returns false.

    .. seealso::  :meth:`QScriptEngine.undefinedValue()<PySide.QtScript.QScriptEngine.undefinedValue>` 


.. method:: PySide.QtScript.QScriptValue.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is valid; otherwise returns false.



.. method:: PySide.QtScript.QScriptValue.isVariant()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is a variant value; otherwise returns false.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toVariant`  :meth:`QScriptEngine.newVariant()<PySide.QtScript.QScriptEngine.newVariant>` 


.. method:: PySide.QtScript.QScriptValue.lessThan(other)


    :param other: :class:`PySide.QtScript.QScriptValue`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is less than ``other`` , otherwise returns false. The comparison follows the behavior described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 11.8.5, "The Abstract Relational Comparison Algorithm".

    Note that if this :class:`PySide.QtScript.QScriptValue` or the ``other`` value are objects, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.equals` 


.. method:: PySide.QtScript.QScriptValue.objectId()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the ID of this object, or -1 if this :class:`PySide.QtScript.QScriptValue` is not an object.

    .. seealso::  :meth:`QScriptEngine.objectById()<PySide.QtScript.QScriptEngine.objectById>` 


.. method:: PySide.QtScript.QScriptValue.property(arrayIndex[, mode=QScriptValue.ResolvePrototype])


    :param arrayIndex: :class:`PySide.QtCore.quint32`
    :param mode: :class:`PySide.QtScript.QScriptValue.ResolveFlags`
    :rtype: :class:`PySide.QtScript.QScriptValue`




    This is an overloaded function.

    Returns the property at the given ``arrayIndex`` , using the given ``mode`` to resolve the property.

    This function is provided for convenience and performance when working with array objects.

    If this :class:`PySide.QtScript.QScriptValue` is not an Array object, this function behaves as if :meth:`PySide.QtScript.QScriptValue.property` was called with the string representation of ``arrayIndex`` .



.. method:: PySide.QtScript.QScriptValue.property(name[, mode=QScriptValue.ResolvePrototype])


    :param name: unicode
    :param mode: :class:`PySide.QtScript.QScriptValue.ResolveFlags`
    :rtype: :class:`PySide.QtScript.QScriptValue`




    Returns the value of this :class:`PySide.QtScript.QScriptValue` 's property with the given ``name`` , using the given ``mode`` to resolve the property.

    If no such property exists, an invalid :class:`PySide.QtScript.QScriptValue` is returned.

    If the property is implemented using a getter function (i.e. has the :attr:`PropertyGetter<QScriptValue.PropertyFlag>` flag set), calling :meth:`PySide.QtScript.QScriptValue.property` has side-effects on the script engine, since the getter function will be called (possibly resulting in an uncaught script exception). If an exception occurred, :meth:`PySide.QtScript.QScriptValue.property` returns the value that was thrown (typically an ``Error`` object).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.setProperty`  :meth:`PySide.QtScript.QScriptValue.propertyFlags`  :class:`PySide.QtScript.QScriptValueIterator` 


.. method:: PySide.QtScript.QScriptValue.property(name[, mode=QScriptValue.ResolvePrototype])


    :param name: :class:`PySide.QtScript.QScriptString`
    :param mode: :class:`PySide.QtScript.QScriptValue.ResolveFlags`
    :rtype: :class:`PySide.QtScript.QScriptValue`




    Returns the value of this :class:`PySide.QtScript.QScriptValue` 's property with the given ``name`` , using the given ``mode`` to resolve the property.

    This overload of :meth:`PySide.QtScript.QScriptValue.property` is useful when you need to look up the same property repeatedly, since the lookup can be performed faster when the name is represented as an interned string.

    .. seealso::  :meth:`QScriptEngine.toStringHandle()<PySide.QtScript.QScriptEngine.toStringHandle>`  :meth:`PySide.QtScript.QScriptValue.setProperty` 


.. method:: PySide.QtScript.QScriptValue.propertyFlags(name[, mode=QScriptValue.ResolvePrototype])


    :param name: unicode
    :param mode: :class:`PySide.QtScript.QScriptValue.ResolveFlags`
    :rtype: :class:`PySide.QtScript.QScriptValue.PropertyFlags`




    Returns the flags of the property with the given ``name`` , using the given ``mode`` to resolve the property.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.property` 


.. method:: PySide.QtScript.QScriptValue.propertyFlags(name[, mode=QScriptValue.ResolvePrototype])


    :param name: :class:`PySide.QtScript.QScriptString`
    :param mode: :class:`PySide.QtScript.QScriptValue.ResolveFlags`
    :rtype: :class:`PySide.QtScript.QScriptValue.PropertyFlags`




    Returns the flags of the property with the given ``name`` , using the given ``mode`` to resolve the property.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.property` 


.. method:: PySide.QtScript.QScriptValue.prototype()


    :rtype: :class:`PySide.QtScript.QScriptValue`




    If this :class:`PySide.QtScript.QScriptValue` is an object, returns the internal prototype (``__proto__`` property) of this object; otherwise returns an invalid :class:`PySide.QtScript.QScriptValue` .

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.setPrototype`  :meth:`PySide.QtScript.QScriptValue.isObject` 


.. method:: PySide.QtScript.QScriptValue.scope()


    :rtype: :class:`PySide.QtScript.QScriptValue`






.. method:: PySide.QtScript.QScriptValue.scriptClass()


    :rtype: :class:`PySide.QtScript.QScriptClass`




    Returns the custom script class that this script object is an instance of, or 0 if the object is not of a custom class.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.setScriptClass` 


.. method:: PySide.QtScript.QScriptValue.setData(data)


    :param data: :class:`PySide.QtScript.QScriptValue`




    Sets the internal ``data`` of this :class:`PySide.QtScript.QScriptValue` object. You can use this function to set object-specific data that won't be directly accessible to scripts, but may be retrieved in C++ using the :meth:`PySide.QtScript.QScriptValue.data` function.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.data`  :meth:`QScriptEngine.reportAdditionalMemoryCost()<PySide.QtScript.QScriptEngine.reportAdditionalMemoryCost>` 


.. method:: PySide.QtScript.QScriptValue.setProperty(name, value[, flags=QScriptValue.KeepExistingFlags])


    :param name: unicode
    :param value: :class:`PySide.QtScript.QScriptValue`
    :param flags: :class:`PySide.QtScript.QScriptValue.PropertyFlags`




    Sets the value of this :class:`PySide.QtScript.QScriptValue` 's property with the given ``name`` to the given ``value`` .

    If this :class:`PySide.QtScript.QScriptValue` is not an object, this function does nothing.

    If this :class:`PySide.QtScript.QScriptValue` does not already have a property with name ``name`` , a new property is created; the given ``flags`` then specify how this property may be accessed by script code.

    If ``value`` is invalid, the property is removed.

    If the property is implemented using a setter function (i.e. has the :attr:`PropertySetter<QScriptValue.PropertyFlag>` flag set), calling :meth:`PySide.QtScript.QScriptValue.setProperty` has side-effects on the script engine, since the setter function will be called with the given ``value`` as argument (possibly resulting in an uncaught script exception).

    Note that you cannot specify custom getter or setter functions for built-in properties, such as the ``length`` property of Array objects or meta properties of :class:`PySide.QtCore.QObject` objects.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.property` 


.. method:: PySide.QtScript.QScriptValue.setProperty(arrayIndex, value[, flags=QScriptValue.KeepExistingFlags])


    :param arrayIndex: :class:`PySide.QtCore.quint32`
    :param value: :class:`PySide.QtScript.QScriptValue`
    :param flags: :class:`PySide.QtScript.QScriptValue.PropertyFlags`




    This is an overloaded function.

    Sets the property at the given ``arrayIndex`` to the given ``value`` .

    This function is provided for convenience and performance when working with array objects.

    If this :class:`PySide.QtScript.QScriptValue` is not an Array object, this function behaves as if :meth:`PySide.QtScript.QScriptValue.setProperty` was called with the string representation of ``arrayIndex`` .



.. method:: PySide.QtScript.QScriptValue.setProperty(name, value[, flags=QScriptValue.KeepExistingFlags])


    :param name: :class:`PySide.QtScript.QScriptString`
    :param value: :class:`PySide.QtScript.QScriptValue`
    :param flags: :class:`PySide.QtScript.QScriptValue.PropertyFlags`




    Sets the value of this :class:`PySide.QtScript.QScriptValue` 's property with the given ``name`` to the given ``value`` . The given ``flags`` specify how this property may be accessed by script code.

    This overload of :meth:`PySide.QtScript.QScriptValue.setProperty` is useful when you need to set the same property repeatedly, since the operation can be performed faster when the name is represented as an interned string.

    .. seealso::  :meth:`QScriptEngine.toStringHandle()<PySide.QtScript.QScriptEngine.toStringHandle>` 


.. method:: PySide.QtScript.QScriptValue.setPrototype(prototype)


    :param prototype: :class:`PySide.QtScript.QScriptValue`




    If this :class:`PySide.QtScript.QScriptValue` is an object, sets the internal prototype (``__proto__`` property) of this object to be ``prototype`` ; otherwise does nothing.

    The internal prototype should not be confused with the public property with name "prototype"; the public prototype is usually only set on functions that act as constructors.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.prototype`  :meth:`PySide.QtScript.QScriptValue.isObject` 


.. method:: PySide.QtScript.QScriptValue.setScope(scope)


    :param scope: :class:`PySide.QtScript.QScriptValue`






.. method:: PySide.QtScript.QScriptValue.setScriptClass(scriptClass)


    :param scriptClass: :class:`PySide.QtScript.QScriptClass`




    Sets the custom script class of this script object to ``scriptClass`` . This can be used to "promote" a plain script object (e.g. created by the "new" operator in a script, or by :meth:`QScriptEngine.newObject()<PySide.QtScript.QScriptEngine.newObject>` in C++) to an object of a custom type.

    If ``scriptClass`` is 0, the object will be demoted to a plain script object.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.scriptClass`  :meth:`PySide.QtScript.QScriptValue.setData` 


.. method:: PySide.QtScript.QScriptValue.strictlyEquals(other)


    :param other: :class:`PySide.QtScript.QScriptValue`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptValue` is equal to ``other`` using strict comparison (no conversion), otherwise returns false. The comparison follows the behavior described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 11.9.6, "The Strict Equality Comparison Algorithm".

    If the type of this :class:`PySide.QtScript.QScriptValue` is different from the type of the ``other`` value, this function returns false. If the types are equal, the result depends on the type, as shown in the following table:

    +---------+--------------------------------------------------------------------------------------+
    |Type     |Result                                                                                |
    +---------+--------------------------------------------------------------------------------------+
    |Undefined|true                                                                                  |
    +---------+--------------------------------------------------------------------------------------+
    |Null     |true                                                                                  |
    +---------+--------------------------------------------------------------------------------------+
    |Boolean  |true if both values are true, false otherwise                                         |
    +---------+--------------------------------------------------------------------------------------+
    |Number   |false if either value is NaN (Not-a-Number); true if values are equal, false otherwise|
    +---------+--------------------------------------------------------------------------------------+
    |String   |true if both values are exactly the same sequence of characters, false otherwise      |
    +---------+--------------------------------------------------------------------------------------+
    |Object   |true if both values refer to the same object, false otherwise                         |
    +---------+--------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.equals` 


.. method:: PySide.QtScript.QScriptValue.toBool()


    :rtype: :class:`PySide.QtCore.bool`




    Returns the boolean value of this :class:`PySide.QtScript.QScriptValue` , using the conversion rules described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 9.2, "ToBoolean".

    Note that if this :class:`PySide.QtScript.QScriptValue` is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isBool` 


.. method:: PySide.QtScript.QScriptValue.toBoolean()


    :rtype: :class:`PySide.QtCore.bool`




    Use :meth:`PySide.QtScript.QScriptValue.toBool` instead.



.. method:: PySide.QtScript.QScriptValue.toDateTime()


    :rtype: :class:`PySide.QtCore.QDateTime`




    Returns a :class:`PySide.QtCore.QDateTime` representation of this value, in local time. If this :class:`PySide.QtScript.QScriptValue` is not a date, or the value of the date is NaN (Not-a-Number), an invalid :class:`PySide.QtCore.QDateTime` is returned.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isDate` 


.. method:: PySide.QtScript.QScriptValue.toInt32()


    :rtype: :class:`PySide.QtCore.qint32`




    Returns the signed 32-bit integer value of this :class:`PySide.QtScript.QScriptValue` , using the conversion rules described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 9.5, "ToInt32".

    Note that if this :class:`PySide.QtScript.QScriptValue` is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toNumber`  :meth:`PySide.QtScript.QScriptValue.toUInt32` 


.. method:: PySide.QtScript.QScriptValue.toInteger()


    :rtype: :class:`PySide.QtCore.double`




    Returns the integer value of this :class:`PySide.QtScript.QScriptValue` , using the conversion rules described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 9.4, "ToInteger".

    Note that if this :class:`PySide.QtScript.QScriptValue` is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toNumber` 


.. method:: PySide.QtScript.QScriptValue.toNumber()


    :rtype: :class:`PySide.QtCore.double`




    Returns the number value of this :class:`PySide.QtScript.QScriptValue` , as defined in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 9.3, "ToNumber".

    Note that if this :class:`PySide.QtScript.QScriptValue` is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isNumber`  :meth:`PySide.QtScript.QScriptValue.toInteger`  :meth:`PySide.QtScript.QScriptValue.toInt32`  :meth:`PySide.QtScript.QScriptValue.toUInt32`  :meth:`PySide.QtScript.QScriptValue.toUInt16` 


.. method:: PySide.QtScript.QScriptValue.toObject()


    :rtype: :class:`PySide.QtScript.QScriptValue`




    This function is obsolete; use :meth:`QScriptEngine.toObject()<PySide.QtScript.QScriptEngine.toObject>` instead.



.. method:: PySide.QtScript.QScriptValue.toQMetaObject()


    :rtype: :class:`PySide.QtCore.QMetaObject`




    If this :class:`PySide.QtScript.QScriptValue` is a :class:`PySide.QtCore.QMetaObject` , returns the :class:`PySide.QtCore.QMetaObject` pointer that the :class:`PySide.QtScript.QScriptValue` represents; otherwise, returns 0.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isQMetaObject` 


.. method:: PySide.QtScript.QScriptValue.toQObject()


    :rtype: :class:`PySide.QtCore.QObject`




    If this :class:`PySide.QtScript.QScriptValue` is a :class:`PySide.QtCore.QObject` , returns the :class:`PySide.QtCore.QObject` pointer that the :class:`PySide.QtScript.QScriptValue` represents; otherwise, returns 0.

    If the :class:`PySide.QtCore.QObject` that this :class:`PySide.QtScript.QScriptValue` wraps has been deleted, this function returns 0 (i.e. it is possible for :meth:`PySide.QtScript.QScriptValue.toQObject` to return 0 even when :meth:`PySide.QtScript.QScriptValue.isQObject` returns true).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isQObject` 


.. method:: PySide.QtScript.QScriptValue.toRegExp()


    :rtype: :class:`PySide.QtCore.QRegExp`




    Returns the :class:`PySide.QtCore.QRegExp` representation of this value. If this :class:`PySide.QtScript.QScriptValue` is not a regular expression, an empty :class:`PySide.QtCore.QRegExp` is returned.

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isRegExp` 


.. method:: PySide.QtScript.QScriptValue.toString()


    :rtype: unicode




    Returns the string value of this :class:`PySide.QtScript.QScriptValue` , as defined in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 9.8, "ToString".

    Note that if this :class:`PySide.QtScript.QScriptValue` is an object, calling this function has side effects on the script engine, since the engine will call the object's :meth:`PySide.QtScript.QScriptValue.toString` function (and possibly valueOf()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isString` 


.. method:: PySide.QtScript.QScriptValue.toUInt16()


    :rtype: :class:`PySide.QtCore.quint16`




    Returns the unsigned 16-bit integer value of this :class:`PySide.QtScript.QScriptValue` , using the conversion rules described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 9.7, "ToUint16".

    Note that if this :class:`PySide.QtScript.QScriptValue` is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toNumber` 


.. method:: PySide.QtScript.QScriptValue.toUInt32()


    :rtype: :class:`PySide.QtCore.quint32`




    Returns the unsigned 32-bit integer value of this :class:`PySide.QtScript.QScriptValue` , using the conversion rules described in :ref:`ECMA-262<http://www.ecma-international.org/publications/standards/Ecma-262.htm>` section 9.6, "ToUint32".

    Note that if this :class:`PySide.QtScript.QScriptValue` is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly :meth:`PySide.QtScript.QScriptValue.toString` ) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.toNumber`  :meth:`PySide.QtScript.QScriptValue.toInt32` 


.. method:: PySide.QtScript.QScriptValue.toVariant()


    :rtype: object




    Returns the :class:`PySide.QtCore.QVariant` value of this :class:`PySide.QtScript.QScriptValue` , if it can be converted to a :class:`PySide.QtCore.QVariant` ; otherwise returns an invalid :class:`PySide.QtCore.QVariant` . The conversion is performed according to the following table:

    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Input Type                            |Result                                                                                                                                                                                |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Undefined                             |An invalid :class:`PySide.QtCore.QVariant` .                                                                                                                                          |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Null                                  |An invalid :class:`PySide.QtCore.QVariant` .                                                                                                                                          |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Boolean                               |A :class:`PySide.QtCore.QVariant` containing the value of the boolean.                                                                                                                |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Number                                |A :class:`PySide.QtCore.QVariant` containing the value of the number.                                                                                                                 |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |String                                |A :class:`PySide.QtCore.QVariant` containing the value of the string.                                                                                                                 |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |:class:`PySide.QtCore.QVariant` Object|The result is the :class:`PySide.QtCore.QVariant` value of the object (no conversion).                                                                                                |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |:class:`PySide.QtCore.QObject` Object |A :class:`PySide.QtCore.QVariant` containing a pointer to the :class:`PySide.QtCore.QObject` .                                                                                        |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Date Object                           |A :class:`PySide.QtCore.QVariant` containing the date value ( :meth:`PySide.QtScript.QScriptValue.toDateTime` ).                                                                      |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |RegExp Object                         |A :class:`PySide.QtCore.QVariant` containing the regular expression value ( :meth:`PySide.QtScript.QScriptValue.toRegExp` ).                                                          |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Array Object                          |The array is converted to a :class:`~PySide.QtScript.QVariantList` . Each element is converted to a :class:`PySide.QtCore.QVariant` , recursively; cyclic references are not followed.|
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Object                                |The object is converted to a :class:`PySide.QtCore.QVariantMap` . Each property is converted to a :class:`PySide.QtCore.QVariant` , recursively; cyclic references are not followed.  |
    +--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtScript.QScriptValue.isVariant` 



