.. module:: PySide.QtScript
.. _QScriptEngineAgent:

QScriptEngineAgent
******************

.. inheritance-diagram:: QScriptEngineAgent
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`engine<PySide.QtScript.QScriptEngineAgent.engine>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`contextPop<PySide.QtScript.QScriptEngineAgent.contextPop>` ()
*    def :meth:`contextPush<PySide.QtScript.QScriptEngineAgent.contextPush>` ()
*    def :meth:`exceptionCatch<PySide.QtScript.QScriptEngineAgent.exceptionCatch>` (scriptId, exception)
*    def :meth:`exceptionThrow<PySide.QtScript.QScriptEngineAgent.exceptionThrow>` (scriptId, exception, hasHandler)
*    def :meth:`extension<PySide.QtScript.QScriptEngineAgent.extension>` (extension[, argument=None])
*    def :meth:`functionEntry<PySide.QtScript.QScriptEngineAgent.functionEntry>` (scriptId)
*    def :meth:`functionExit<PySide.QtScript.QScriptEngineAgent.functionExit>` (scriptId, returnValue)
*    def :meth:`positionChange<PySide.QtScript.QScriptEngineAgent.positionChange>` (scriptId, lineNumber, columnNumber)
*    def :meth:`scriptLoad<PySide.QtScript.QScriptEngineAgent.scriptLoad>` (id, program, fileName, baseLineNumber)
*    def :meth:`scriptUnload<PySide.QtScript.QScriptEngineAgent.scriptUnload>` (id)
*    def :meth:`supportsExtension<PySide.QtScript.QScriptEngineAgent.supportsExtension>` (extension)


Detailed Description
--------------------



    The :class:`PySide.QtScript.QScriptEngineAgent` class provides an interface to report events pertaining to :class:`PySide.QtScript.QScriptEngine` execution.

    The :class:`PySide.QtScript.QScriptEngineAgent` class is the basis of tools that monitor and/or control the execution of a :class:`PySide.QtScript.QScriptEngine` , such as debuggers and profilers.

    To process script loading and unloading events, reimplement the :meth:`PySide.QtScript.QScriptEngineAgent.scriptLoad` and :meth:`PySide.QtScript.QScriptEngineAgent.scriptUnload` functions. :meth:`PySide.QtScript.QScriptEngineAgent.scriptLoad` is called after the input to :meth:`QScriptEngine.evaluate()<PySide.QtScript.QScriptEngine.evaluate>` has been parsed, right before the given script is executed. The engine assigns each script an ID, which is available as one of the arguments to :meth:`PySide.QtScript.QScriptEngineAgent.scriptLoad` ; subsequently, other event handlers can use the ID to identify a particular script. One common usage of :meth:`PySide.QtScript.QScriptEngineAgent.scriptLoad` is to retain the script text, filename and base line number (the original input to :meth:`QScriptEngine.evaluate()<PySide.QtScript.QScriptEngine.evaluate>` ), so that other event handlers can e.g. map a line number to the corresponding line of text.

    :meth:`PySide.QtScript.QScriptEngineAgent.scriptUnload` is called when the :class:`PySide.QtScript.QScriptEngine` has no further use for a script; the :class:`PySide.QtScript.QScriptEngineAgent` may at this point safely discard any resources associated with the script (such as the script text). Note that after :meth:`PySide.QtScript.QScriptEngineAgent.scriptUnload` has been called, the :class:`PySide.QtScript.QScriptEngine` may reuse the relevant script ID for new scripts (i.e. as argument to a subsequent call to :meth:`PySide.QtScript.QScriptEngineAgent.scriptLoad` ).

    Evaluating the following script will result in :meth:`PySide.QtScript.QScriptEngineAgent.scriptUnload` being called immediately after evaluation has completed:

    ::

        var a = Math.random() + 2;


    Evaluating the following script will \b{not} result in a call to :meth:`PySide.QtScript.QScriptEngineAgent.scriptUnload` when evaluation has completed:

    ::

        function cube(a) {
            return a * a * a;
        }

        var a = cube(3);


    The script isn't unloaded because it defines a function (``cube`` ) that remains in the script environment after evaluation has completed. If a subsequent script removed the ``cube`` function (e.g. by setting it to ``null`` ), :meth:`PySide.QtScript.QScriptEngineAgent.scriptUnload` would be called when the function is garbage collected. In general terms, a script isn't unloaded until the engine has determined that none of its contents is referenced.

    To process script function calls and returns, reimplement the :meth:`PySide.QtScript.QScriptEngineAgent.functionEntry` and :meth:`PySide.QtScript.QScriptEngineAgent.functionExit` functions. :meth:`PySide.QtScript.QScriptEngineAgent.functionEntry` is called when a script function is about to be executed; :meth:`PySide.QtScript.QScriptEngineAgent.functionExit` is called when a script function is about to return, either normally or due to an exception.

    To process individual script statements, reimplement :meth:`PySide.QtScript.QScriptEngineAgent.positionChange` . :meth:`PySide.QtScript.QScriptEngineAgent.positionChange` is called each time the engine is about to execute a new statement of a script, and thus offers the finest level of script monitoring.

    To process exceptions, reimplement :meth:`PySide.QtScript.QScriptEngineAgent.exceptionThrow` and :meth:`PySide.QtScript.QScriptEngineAgent.exceptionCatch` . :meth:`PySide.QtScript.QScriptEngineAgent.exceptionThrow` is called when a script exception is thrown, before it has been handled. :meth:`PySide.QtScript.QScriptEngineAgent.exceptionCatch` is called when an exception handler is present, and execution is about to be resumed at the handler code.

    .. seealso::  :meth:`QScriptEngine.setAgent()<PySide.QtScript.QScriptEngine.setAgent>`  :class:`PySide.QtScript.QScriptContextInfo` 

.. class:: QScriptEngineAgent(engine)

    :param engine: :class:`PySide.QtScript.QScriptEngine`

    Constructs a :class:`PySide.QtScript.QScriptEngineAgent` object for the given ``engine`` .

    The engine takes ownership of the agent.

    Call :meth:`QScriptEngine.setAgent()<PySide.QtScript.QScriptEngine.setAgent>` to make this agent the active agent.


.. attribute:: PySide.QtScript.QScriptEngineAgent.Extension

    This enum specifies the possible extensions to a :class:`PySide.QtScript.QScriptEngineAgent` .

    +--------------------------------------------+-------------------------------------------------+
    |Constant                                    |Description                                      |
    +============================================+=================================================+
    |QScriptEngineAgent.DebuggerInvocationRequest|The agent handles ``debugger`` script statements.|
    +--------------------------------------------+-------------------------------------------------+

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.extension` 

.. method:: PySide.QtScript.QScriptEngineAgent.contextPop()






    This function is called when the current script context is about to be popped.

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.contextPush`  :meth:`PySide.QtScript.QScriptEngineAgent.functionExit` 


.. method:: PySide.QtScript.QScriptEngineAgent.contextPush()






    This function is called when a new script context has been pushed.

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.contextPop`  :meth:`PySide.QtScript.QScriptEngineAgent.functionEntry` 


.. method:: PySide.QtScript.QScriptEngineAgent.engine()


    :rtype: :class:`PySide.QtScript.QScriptEngine`




    Returns the :class:`PySide.QtScript.QScriptEngine` that this agent is associated with.



.. method:: PySide.QtScript.QScriptEngineAgent.exceptionCatch(scriptId, exception)


    :param scriptId: :class:`PySide.QtCore.qint64`
    :param exception: :class:`PySide.QtScript.QScriptValue`




    This function is called when the given ``exception`` is about to be caught, in the script identified by ``scriptId`` .

    Reimplement this function if you want to handle this event.

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.exceptionThrow` 


.. method:: PySide.QtScript.QScriptEngineAgent.exceptionThrow(scriptId, exception, hasHandler)


    :param scriptId: :class:`PySide.QtCore.qint64`
    :param exception: :class:`PySide.QtScript.QScriptValue`
    :param hasHandler: :class:`PySide.QtCore.bool`




    This function is called when the given ``exception`` has occurred in the engine, in the script identified by ``scriptId`` . If the exception was thrown by a native Qt Script function, ``scriptId`` is -1.

    If ``hasHandler`` is true, there is a ``catch`` or ``finally`` block that will handle the exception. If ``hasHandler`` is false, there is no handler for the exception.

    Reimplement this function if you want to handle this event. For example, a debugger can notify the user when an uncaught exception occurs (i.e. ``hasHandler`` is false).

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.exceptionCatch` 


.. method:: PySide.QtScript.QScriptEngineAgent.extension(extension[, argument=None])


    :param extension: :attr:`PySide.QtScript.QScriptEngineAgent.Extension`
    :param argument: object
    :rtype: object




    This virtual function can be reimplemented in a :class:`PySide.QtScript.QScriptEngineAgent` subclass to provide support for extensions. The optional ``argument`` can be provided as input to the ``extension`` ; the result must be returned in the form of a :class:`PySide.QtCore.QVariant` . You can call :meth:`PySide.QtScript.QScriptEngineAgent.supportsExtension` to check if an extension is supported by the :class:`PySide.QtScript.QScriptEngineAgent` . By default, no extensions are supported, and this function returns an invalid :class:`PySide.QtCore.QVariant` .

    If you implement the :attr:`DebuggerInvocationRequest<QScriptEngineAgent.Extension>` extension, Qt Script will call this function when a ``debugger`` statement is encountered in a script. The ``argument`` is a :class:`~PySide.QtScript.QVariantList` containing three items: The first item is the scriptId (a qint64), the second item is the line number (an int), and the third item is the column number (an int).

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.supportsExtension` 


.. method:: PySide.QtScript.QScriptEngineAgent.functionEntry(scriptId)


    :param scriptId: :class:`PySide.QtCore.qint64`




    This function is called when a script function is called in the engine. If the script function is not a native Qt Script function, it resides in the script identified by ``scriptId`` ; otherwise, ``scriptId`` is -1.

    This function is called just before execution of the script function begins. You can obtain the :class:`PySide.QtScript.QScriptContext` associated with the function call with :meth:`QScriptEngine.currentContext()<PySide.QtScript.QScriptEngine.currentContext>` . The arguments passed to the function are available.

    Reimplement this function to handle this event. For example, a debugger implementation could reimplement this function (and :meth:`PySide.QtScript.QScriptEngineAgent.functionExit` ) to keep track of the call stack and provide step-over functionality.

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.functionExit`  :meth:`PySide.QtScript.QScriptEngineAgent.positionChange`  :meth:`QScriptEngine.currentContext()<PySide.QtScript.QScriptEngine.currentContext>` 


.. method:: PySide.QtScript.QScriptEngineAgent.functionExit(scriptId, returnValue)


    :param scriptId: :class:`PySide.QtCore.qint64`
    :param returnValue: :class:`PySide.QtScript.QScriptValue`




    This function is called when the currently executing script function is about to return. If the script function is not a native Qt Script function, it resides in the script identified by ``scriptId`` ; otherwise, ``scriptId`` is -1. The ``returnValue`` is the value that the script function will return.

    This function is called just before the script function returns. You can still access the :class:`PySide.QtScript.QScriptContext` associated with the script function call with :meth:`QScriptEngine.currentContext()<PySide.QtScript.QScriptEngine.currentContext>` .

    If the engine's :meth:`PySide.QtScript.QScriptEngine.hasUncaughtException` () function returns true, the script function is exiting due to an exception; otherwise, the script function is returning normally.

    Reimplement this function to handle this event; typically you will then also want to reimplement :meth:`PySide.QtScript.QScriptEngineAgent.functionEntry` .

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.functionEntry`  :meth:`QScriptEngine.hasUncaughtException()<PySide.QtScript.QScriptEngine.hasUncaughtException>` 


.. method:: PySide.QtScript.QScriptEngineAgent.positionChange(scriptId, lineNumber, columnNumber)


    :param scriptId: :class:`PySide.QtCore.qint64`
    :param lineNumber: :class:`PySide.QtCore.int`
    :param columnNumber: :class:`PySide.QtCore.int`




    This function is called when the engine is about to execute a new statement in the script identified by ``scriptId`` . The statement begins on the line and column specified by ``lineNumber`` This event is not generated for native Qt Script functions.

    Reimplement this function to handle this event. For example, a debugger implementation could reimplement this function to provide line-by-line stepping, and a profiler implementation could use it to count the number of times each statement is executed.

    The default implementation does nothing.

    .. note:: \ ``columnNumber`` is undefined

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.scriptLoad`  :meth:`PySide.QtScript.QScriptEngineAgent.functionEntry` 


.. method:: PySide.QtScript.QScriptEngineAgent.scriptLoad(id, program, fileName, baseLineNumber)


    :param id: :class:`PySide.QtCore.qint64`
    :param program: unicode
    :param fileName: unicode
    :param baseLineNumber: :class:`PySide.QtCore.int`




    This function is called when the engine has parsed a script and has associated it with the given ``id`` . The id can be used to identify this particular script in subsequent event notifications.

    ``program`` , ``fileName`` and ``baseLineNumber`` are the original arguments to the :meth:`QScriptEngine.evaluate()<PySide.QtScript.QScriptEngine.evaluate>` call that triggered this event.

    This function is called just before the script is about to be evaluated.

    You can reimplement this function to record information about the script; for example, by retaining the script text, you can obtain the line of text corresponding to a line number in a subsequent call to :meth:`PySide.QtScript.QScriptEngineAgent.positionChange` .

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.scriptUnload` 


.. method:: PySide.QtScript.QScriptEngineAgent.scriptUnload(id)


    :param id: :class:`PySide.QtCore.qint64`




    This function is called when the engine has discarded the script identified by the given ``id`` .

    You can reimplement this function to clean up any resources you have associated with the script.

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.scriptLoad` 


.. method:: PySide.QtScript.QScriptEngineAgent.supportsExtension(extension)


    :param extension: :attr:`PySide.QtScript.QScriptEngineAgent.Extension`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the :class:`PySide.QtScript.QScriptEngineAgent` supports the given ``extension`` ; otherwise, false is returned. By default, no extensions are supported.

    .. seealso::  :meth:`PySide.QtScript.QScriptEngineAgent.extension` 



