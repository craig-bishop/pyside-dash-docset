.. module:: PySide.QtWebKit
.. _QWebElement:

QWebElement
***********

.. inheritance-diagram:: QWebElement
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtWebKit.QWebElement.__eq__>` (o)
*    def :meth:`__ne__<PySide.QtWebKit.QWebElement.__ne__>` (o)
*    def :meth:`addClass<PySide.QtWebKit.QWebElement.addClass>` (name)
*    def :meth:`appendInside<PySide.QtWebKit.QWebElement.appendInside>` (element)
*    def :meth:`appendInside<PySide.QtWebKit.QWebElement.appendInside>` (markup)
*    def :meth:`appendOutside<PySide.QtWebKit.QWebElement.appendOutside>` (element)
*    def :meth:`appendOutside<PySide.QtWebKit.QWebElement.appendOutside>` (markup)
*    def :meth:`attribute<PySide.QtWebKit.QWebElement.attribute>` (name[, defaultValue=""])
*    def :meth:`attributeNS<PySide.QtWebKit.QWebElement.attributeNS>` (namespaceUri, name[, defaultValue=""])
*    def :meth:`attributeNames<PySide.QtWebKit.QWebElement.attributeNames>` ([namespaceUri=""])
*    def :meth:`classes<PySide.QtWebKit.QWebElement.classes>` ()
*    def :meth:`clone<PySide.QtWebKit.QWebElement.clone>` ()
*    def :meth:`document<PySide.QtWebKit.QWebElement.document>` ()
*    def :meth:`encloseContentsWith<PySide.QtWebKit.QWebElement.encloseContentsWith>` (element)
*    def :meth:`encloseContentsWith<PySide.QtWebKit.QWebElement.encloseContentsWith>` (markup)
*    def :meth:`encloseWith<PySide.QtWebKit.QWebElement.encloseWith>` (element)
*    def :meth:`encloseWith<PySide.QtWebKit.QWebElement.encloseWith>` (markup)
*    def :meth:`evaluateJavaScript<PySide.QtWebKit.QWebElement.evaluateJavaScript>` (scriptSource)
*    def :meth:`findAll<PySide.QtWebKit.QWebElement.findAll>` (selectorQuery)
*    def :meth:`findFirst<PySide.QtWebKit.QWebElement.findFirst>` (selectorQuery)
*    def :meth:`firstChild<PySide.QtWebKit.QWebElement.firstChild>` ()
*    def :meth:`geometry<PySide.QtWebKit.QWebElement.geometry>` ()
*    def :meth:`hasAttribute<PySide.QtWebKit.QWebElement.hasAttribute>` (name)
*    def :meth:`hasAttributeNS<PySide.QtWebKit.QWebElement.hasAttributeNS>` (namespaceUri, name)
*    def :meth:`hasAttributes<PySide.QtWebKit.QWebElement.hasAttributes>` ()
*    def :meth:`hasClass<PySide.QtWebKit.QWebElement.hasClass>` (name)
*    def :meth:`hasFocus<PySide.QtWebKit.QWebElement.hasFocus>` ()
*    def :meth:`isNull<PySide.QtWebKit.QWebElement.isNull>` ()
*    def :meth:`lastChild<PySide.QtWebKit.QWebElement.lastChild>` ()
*    def :meth:`localName<PySide.QtWebKit.QWebElement.localName>` ()
*    def :meth:`namespaceUri<PySide.QtWebKit.QWebElement.namespaceUri>` ()
*    def :meth:`nextSibling<PySide.QtWebKit.QWebElement.nextSibling>` ()
*    def :meth:`parent<PySide.QtWebKit.QWebElement.parent>` ()
*    def :meth:`prefix<PySide.QtWebKit.QWebElement.prefix>` ()
*    def :meth:`prependInside<PySide.QtWebKit.QWebElement.prependInside>` (element)
*    def :meth:`prependInside<PySide.QtWebKit.QWebElement.prependInside>` (markup)
*    def :meth:`prependOutside<PySide.QtWebKit.QWebElement.prependOutside>` (element)
*    def :meth:`prependOutside<PySide.QtWebKit.QWebElement.prependOutside>` (markup)
*    def :meth:`previousSibling<PySide.QtWebKit.QWebElement.previousSibling>` ()
*    def :meth:`removeAllChildren<PySide.QtWebKit.QWebElement.removeAllChildren>` ()
*    def :meth:`removeAttribute<PySide.QtWebKit.QWebElement.removeAttribute>` (name)
*    def :meth:`removeAttributeNS<PySide.QtWebKit.QWebElement.removeAttributeNS>` (namespaceUri, name)
*    def :meth:`removeClass<PySide.QtWebKit.QWebElement.removeClass>` (name)
*    def :meth:`removeFromDocument<PySide.QtWebKit.QWebElement.removeFromDocument>` ()
*    def :meth:`render<PySide.QtWebKit.QWebElement.render>` (painter)
*    def :meth:`render<PySide.QtWebKit.QWebElement.render>` (painter, clipRect)
*    def :meth:`replace<PySide.QtWebKit.QWebElement.replace>` (element)
*    def :meth:`replace<PySide.QtWebKit.QWebElement.replace>` (markup)
*    def :meth:`setAttribute<PySide.QtWebKit.QWebElement.setAttribute>` (name, value)
*    def :meth:`setAttributeNS<PySide.QtWebKit.QWebElement.setAttributeNS>` (namespaceUri, name, value)
*    def :meth:`setFocus<PySide.QtWebKit.QWebElement.setFocus>` ()
*    def :meth:`setInnerXml<PySide.QtWebKit.QWebElement.setInnerXml>` (markup)
*    def :meth:`setOuterXml<PySide.QtWebKit.QWebElement.setOuterXml>` (markup)
*    def :meth:`setPlainText<PySide.QtWebKit.QWebElement.setPlainText>` (text)
*    def :meth:`setStyleProperty<PySide.QtWebKit.QWebElement.setStyleProperty>` (name, value)
*    def :meth:`styleProperty<PySide.QtWebKit.QWebElement.styleProperty>` (name, strategy)
*    def :meth:`tagName<PySide.QtWebKit.QWebElement.tagName>` ()
*    def :meth:`takeFromDocument<PySide.QtWebKit.QWebElement.takeFromDocument>` ()
*    def :meth:`toInnerXml<PySide.QtWebKit.QWebElement.toInnerXml>` ()
*    def :meth:`toOuterXml<PySide.QtWebKit.QWebElement.toOuterXml>` ()
*    def :meth:`toPlainText<PySide.QtWebKit.QWebElement.toPlainText>` ()
*    def :meth:`toggleClass<PySide.QtWebKit.QWebElement.toggleClass>` (name)
*    def :meth:`webFrame<PySide.QtWebKit.QWebElement.webFrame>` ()


Detailed Description
--------------------



    The :class:`PySide.QtWebKit.QWebElement` class provides convenient access to DOM elements in a :class:`PySide.QtWebKit.QWebFrame` .

    A :class:`PySide.QtWebKit.QWebElement` object allows easy access to the document model, represented by a tree-like structure of DOM elements. The root of the tree is called the document element and can be accessed using :meth:`QWebFrame.documentElement()<PySide.QtWebKit.QWebFrame.documentElement>` .

    Specific elements can be accessed using :meth:`PySide.QtWebKit.QWebElement.findAll` and :meth:`PySide.QtWebKit.QWebElement.findFirst` . These elements are identified using CSS selectors. The code snippet below demonstrates the use of :meth:`PySide.QtWebKit.QWebElement.findAll` .

    ::

            document = frame.documentElement()
            # Assume the document has the following structure:
            #
            #   <p class=intro>
            #     <span>Intro</span>
            #     <span>Snippets</span>
            #   </p>
            #   <p>
            #     <span>Content</span>
            #     <span>Here</span>
            #   </p>


            allSpans = document.findAll("span")
            introSpans = document.findAll("p.intro span")


    The first list contains all ``span`` elements in the document. The second list contains ``span`` elements that are children of ``p`` , classified with ``intro`` .

    Using :meth:`PySide.QtWebKit.QWebElement.findFirst` is more efficient than calling :meth:`PySide.QtWebKit.QWebElement.findAll` , and extracting the first element only in the list returned.

    Alternatively you can traverse the document manually using :meth:`PySide.QtWebKit.QWebElement.firstChild` and :meth:`PySide.QtWebKit.QWebElement.nextSibling` :

    ::

            frame.setHtml("<html><body><p>First Paragraph</p><p>Second Paragraph</p></body></html>")
            doc = frame.documentElement()
            body = doc.firstChild()
            firstParagraph = body.firstChild()
            secondParagraph = firstParagraph.nextSibling()


    Individual elements can be inspected or changed using methods such as :meth:`PySide.QtWebKit.QWebElement.attribute` or :meth:`PySide.QtWebKit.QWebElement.setAttribute` . For examle, to capture the user's input in a text field for later use (auto-completion), a browser could do something like this:

    ::

            firstTextInput = document.findFirst("input[type=text]")
            storedText = firstTextInput.attribute("value")


    When the same page is later revisited, the browser can fill in the text field automatically by modifying the value attribute of the input element:

    ::

            firstTextInput = document.findFirst("input[type=text]")
            textInput.setAttribute("value", storedText)


    Another use case is to emulate a click event on an element. The following code snippet demonstrates how to call the JavaScript DOM method click() of a submit button:

    ::


            document = frame.documentElement()
            # Assume that the document has the following structure:
            #
            #    <form name="myform" action="submit_form.asp" method="get">
            #        <input type="text" name="myfield">
            #        <input type="submit" value="Submit">
            #    </form>

            button = document.findFirst("input[type=submit]")
            button.evaluateJavaScript("click()")



    The underlying content of :class:`PySide.QtWebKit.QWebElement` is explicitly shared. Creating a copy of a :class:`PySide.QtWebKit.QWebElement` does not create a copy of the content. Instead, both instances point to the same element.

    The contents of child elements can be converted to plain text with :meth:`PySide.QtWebKit.QWebElement.toPlainText` ; to XHTML using :meth:`PySide.QtWebKit.QWebElement.toInnerXml` . To include the element's tag in the output, use :meth:`PySide.QtWebKit.QWebElement.toOuterXml` .

    It is possible to replace the contents of child elements using :meth:`PySide.QtWebKit.QWebElement.setPlainText` and :meth:`PySide.QtWebKit.QWebElement.setInnerXml` . To replace the element itself and its contents, use :meth:`PySide.QtWebKit.QWebElement.setOuterXml` .

    .. _PySide.QtWebKit.QWebElement_examples:



Examples
^^^^^^^^

    The :ref:`DOM Traversal Example<webkit/domtraversal>` shows one way to traverse documents in a running example.

    The :ref:`Simple Selector Example<webkit/simpleselector>` can be used to experiment with the searching features of this class and provides sample code you can start working with.


.. class:: QWebElement()
           QWebElement(arg__1)

    :param arg__1: :class:`PySide.QtWebKit.QWebElement`

    Constructs a null web element.


    Constructs a copy of ``other`` .


.. attribute:: PySide.QtWebKit.QWebElement.StyleResolveStrategy

    This enum describes how :class:`PySide.QtWebKit.QWebElement` 's styleProperty resolves the given property name.

    +-------------------------+--------------------------------------------------------------------------------------------------------------------+
    |Constant                 |Description                                                                                                         |
    +=========================+====================================================================================================================+
    |QWebElement.InlineStyle  |Return the property value as it is defined in the element, without respecting style inheritance and other CSS rules.|
    +-------------------------+--------------------------------------------------------------------------------------------------------------------+
    |QWebElement.CascadedStyle|The property's value is determined using the inheritance and importance rules defined in the document's stylesheet. |
    +-------------------------+--------------------------------------------------------------------------------------------------------------------+
    |QWebElement.ComputedStyle|The property's value is the absolute value of the style property resolved from the environment.                     |
    +-------------------------+--------------------------------------------------------------------------------------------------------------------+


.. method:: PySide.QtWebKit.QWebElement.addClass(name)


    :param name: unicode




    Adds the specified class with the given ``name`` to the element.



.. method:: PySide.QtWebKit.QWebElement.appendInside(element)


    :param element: :class:`PySide.QtWebKit.QWebElement`




    Appends the given ``element`` as the element's last child.

    If ``element`` is the child of another element, it is re-parented to this element. If ``element`` is a child of this element, then its position in the list of children is changed.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.prependInside`  :meth:`PySide.QtWebKit.QWebElement.prependOutside`  :meth:`PySide.QtWebKit.QWebElement.appendOutside` 


.. method:: PySide.QtWebKit.QWebElement.appendInside(markup)


    :param markup: unicode




    Appends the result of parsing ``markup`` as the element's last child.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.prependInside`  :meth:`PySide.QtWebKit.QWebElement.prependOutside`  :meth:`PySide.QtWebKit.QWebElement.appendOutside` 


.. method:: PySide.QtWebKit.QWebElement.appendOutside(markup)


    :param markup: unicode




    Inserts the result of parsing ``markup`` after this element.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.appendInside`  :meth:`PySide.QtWebKit.QWebElement.prependInside`  :meth:`PySide.QtWebKit.QWebElement.prependOutside` 


.. method:: PySide.QtWebKit.QWebElement.appendOutside(element)


    :param element: :class:`PySide.QtWebKit.QWebElement`




    Inserts the given ``element`` after this element.

    If ``element`` is the child of another element, it is re-parented to the parent of this element.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.appendInside`  :meth:`PySide.QtWebKit.QWebElement.prependInside`  :meth:`PySide.QtWebKit.QWebElement.prependOutside` 


.. method:: PySide.QtWebKit.QWebElement.attribute(name[, defaultValue=""])


    :param name: unicode
    :param defaultValue: unicode
    :rtype: unicode




    Returns the attribute with the given ``name`` . If the attribute does not exist, ``defaultValue`` is returned.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.setAttribute`  :meth:`PySide.QtWebKit.QWebElement.setAttributeNS`  :meth:`PySide.QtWebKit.QWebElement.attributeNS` 


.. method:: PySide.QtWebKit.QWebElement.attributeNS(namespaceUri, name[, defaultValue=""])


    :param namespaceUri: unicode
    :param name: unicode
    :param defaultValue: unicode
    :rtype: unicode




    Returns the attribute with the given ``name`` in ``namespaceUri`` . If the attribute does not exist, ``defaultValue`` is returned.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.setAttributeNS`  :meth:`PySide.QtWebKit.QWebElement.setAttribute`  :meth:`PySide.QtWebKit.QWebElement.attribute` 


.. method:: PySide.QtWebKit.QWebElement.attributeNames([namespaceUri=""])


    :param namespaceUri: unicode
    :rtype: list of strings




    Return the list of attributes for the namespace given as ``namespaceUri`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attribute`  :meth:`PySide.QtWebKit.QWebElement.setAttribute` 


.. method:: PySide.QtWebKit.QWebElement.classes()


    :rtype: list of strings




    Returns the list of classes of this element.



.. method:: PySide.QtWebKit.QWebElement.clone()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns a clone of this element.

    The clone may be inserted at any point in the document.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.appendInside`  :meth:`PySide.QtWebKit.QWebElement.prependInside`  :meth:`PySide.QtWebKit.QWebElement.prependOutside`  :meth:`PySide.QtWebKit.QWebElement.appendOutside` 


.. method:: PySide.QtWebKit.QWebElement.document()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the document which this element belongs to.



.. method:: PySide.QtWebKit.QWebElement.encloseContentsWith(markup)


    :param markup: unicode




    Encloses the contents of this element with the result of parsing ``markup`` . This element becomes the child of the deepest descendant within ``markup`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.encloseWith` 


.. method:: PySide.QtWebKit.QWebElement.encloseContentsWith(element)


    :param element: :class:`PySide.QtWebKit.QWebElement`




    Encloses the contents of this element with ``element`` . This element becomes the child of the deepest descendant within ``element`` .

    ### illustration

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.encloseWith` 


.. method:: PySide.QtWebKit.QWebElement.encloseWith(element)


    :param element: :class:`PySide.QtWebKit.QWebElement`




    Encloses this element with ``element`` . This element becomes the child of the deepest descendant within ``element`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.replace` 


.. method:: PySide.QtWebKit.QWebElement.encloseWith(markup)


    :param markup: unicode




    Encloses this element with the result of parsing ``markup`` . This element becomes the child of the deepest descendant within ``markup`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.replace` 


.. method:: PySide.QtWebKit.QWebElement.evaluateJavaScript(scriptSource)


    :param scriptSource: unicode
    :rtype: object




    Executes ``scriptSource`` with this element as ``this`` object.



.. method:: PySide.QtWebKit.QWebElement.findAll(selectorQuery)


    :param selectorQuery: unicode
    :rtype: :class:`PySide.QtWebKit.QWebElementCollection`




    Returns a new list of child elements matching the given CSS selector ``selectorQuery`` . If there are no matching elements, an empty list is returned.

    :ref:`Standard CSS2 selector<http://www.w3.org/TR/REC-CSS2/selector.html#q1>` syntax is used for the query.

    .. note::  This search is performed recursively.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.findFirst` 


.. method:: PySide.QtWebKit.QWebElement.findFirst(selectorQuery)


    :param selectorQuery: unicode
    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the first child element that matches the given CSS selector ``selectorQuery`` .

    :ref:`Standard CSS2 selector<http://www.w3.org/TR/REC-CSS2/selector.html#q1>` syntax is used for the query.

    .. note::  This search is performed recursively.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.findAll` 


.. method:: PySide.QtWebKit.QWebElement.firstChild()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the element's first child.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.lastChild`  :meth:`PySide.QtWebKit.QWebElement.previousSibling`  :meth:`PySide.QtWebKit.QWebElement.nextSibling` 


.. method:: PySide.QtWebKit.QWebElement.geometry()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns the geometry of this element, relative to its containing frame.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.tagName` 


.. method:: PySide.QtWebKit.QWebElement.hasAttribute(name)


    :param name: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this element has an attribute with the given ``name`` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attribute`  :meth:`PySide.QtWebKit.QWebElement.setAttribute` 


.. method:: PySide.QtWebKit.QWebElement.hasAttributeNS(namespaceUri, name)


    :param namespaceUri: unicode
    :param name: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this element has an attribute with the given ``name`` , in ``namespaceUri`` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attributeNS`  :meth:`PySide.QtWebKit.QWebElement.setAttributeNS` 


.. method:: PySide.QtWebKit.QWebElement.hasAttributes()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the element has any attributes defined; otherwise returns false;

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attribute`  :meth:`PySide.QtWebKit.QWebElement.setAttribute` 


.. method:: PySide.QtWebKit.QWebElement.hasClass(name)


    :param name: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this element has a class with the given ``name`` ; otherwise returns false.



.. method:: PySide.QtWebKit.QWebElement.hasFocus()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the element has keyboard input focus; otherwise, returns false

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.setFocus` 


.. method:: PySide.QtWebKit.QWebElement.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the element is a null element; otherwise returns false.



.. method:: PySide.QtWebKit.QWebElement.lastChild()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the element's last child.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.firstChild`  :meth:`PySide.QtWebKit.QWebElement.previousSibling`  :meth:`PySide.QtWebKit.QWebElement.nextSibling` 


.. method:: PySide.QtWebKit.QWebElement.localName()


    :rtype: unicode




    Returns the local name of the element. If the element does not use namespaces, an empty string is returned.



.. method:: PySide.QtWebKit.QWebElement.namespaceUri()


    :rtype: unicode




    Returns the namespace URI of this element. If the element has no namespace URI, an empty string is returned.



.. method:: PySide.QtWebKit.QWebElement.nextSibling()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the element's next sibling.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.firstChild`  :meth:`PySide.QtWebKit.QWebElement.previousSibling`  :meth:`PySide.QtWebKit.QWebElement.lastChild` 


.. method:: PySide.QtWebKit.QWebElement.__ne__(o)


    :param o: :class:`PySide.QtWebKit.QWebElement`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this element points to a different underlying DOM object than ``o`` ; otherwise returns false.



.. method:: PySide.QtWebKit.QWebElement.__eq__(o)


    :param o: :class:`PySide.QtWebKit.QWebElement`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this element points to the same underlying DOM object as ``o`` ; otherwise returns false.



.. method:: PySide.QtWebKit.QWebElement.parent()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the parent element of this elemen. If this element is the root document element, a null element is returned.



.. method:: PySide.QtWebKit.QWebElement.prefix()


    :rtype: unicode




    Returns the namespace prefix of the element. If the element has no namespace prefix, empty string is returned.



.. method:: PySide.QtWebKit.QWebElement.prependInside(element)


    :param element: :class:`PySide.QtWebKit.QWebElement`




    Prepends ``element`` as the element's first child.

    If ``element`` is the child of another element, it is re-parented to this element. If ``element`` is a child of this element, then its position in the list of children is changed.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.appendInside`  :meth:`PySide.QtWebKit.QWebElement.prependOutside`  :meth:`PySide.QtWebKit.QWebElement.appendOutside` 


.. method:: PySide.QtWebKit.QWebElement.prependInside(markup)


    :param markup: unicode




    Prepends the result of parsing ``markup`` as the element's first child.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.appendInside`  :meth:`PySide.QtWebKit.QWebElement.prependOutside`  :meth:`PySide.QtWebKit.QWebElement.appendOutside` 


.. method:: PySide.QtWebKit.QWebElement.prependOutside(markup)


    :param markup: unicode




    Inserts the result of parsing ``markup`` before this element.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.appendInside`  :meth:`PySide.QtWebKit.QWebElement.prependInside`  :meth:`PySide.QtWebKit.QWebElement.appendOutside` 


.. method:: PySide.QtWebKit.QWebElement.prependOutside(element)


    :param element: :class:`PySide.QtWebKit.QWebElement`




    Inserts the given ``element`` before this element.

    If ``element`` is the child of another element, it is re-parented to the parent of this element.

    Calling this function on a null element does nothing.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.appendInside`  :meth:`PySide.QtWebKit.QWebElement.prependInside`  :meth:`PySide.QtWebKit.QWebElement.appendOutside` 


.. method:: PySide.QtWebKit.QWebElement.previousSibling()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the element's previous sibling.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.firstChild`  :meth:`PySide.QtWebKit.QWebElement.nextSibling`  :meth:`PySide.QtWebKit.QWebElement.lastChild` 


.. method:: PySide.QtWebKit.QWebElement.removeAllChildren()






    Removes all children from this element.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.removeFromDocument`  :meth:`PySide.QtWebKit.QWebElement.takeFromDocument` 


.. method:: PySide.QtWebKit.QWebElement.removeAttribute(name)


    :param name: unicode




    Removes the attribute with the given ``name`` from this element.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attribute`  :meth:`PySide.QtWebKit.QWebElement.setAttribute`  :meth:`PySide.QtWebKit.QWebElement.hasAttribute` 


.. method:: PySide.QtWebKit.QWebElement.removeAttributeNS(namespaceUri, name)


    :param namespaceUri: unicode
    :param name: unicode




    Removes the attribute with the given ``name`` , in ``namespaceUri`` , from this element.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attributeNS`  :meth:`PySide.QtWebKit.QWebElement.setAttributeNS`  :meth:`PySide.QtWebKit.QWebElement.hasAttributeNS` 


.. method:: PySide.QtWebKit.QWebElement.removeClass(name)


    :param name: unicode




    Removes the specified class with the given ``name`` from the element.



.. method:: PySide.QtWebKit.QWebElement.removeFromDocument()






    Removes this element from the document and makes it a null element.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.removeAllChildren`  :meth:`PySide.QtWebKit.QWebElement.takeFromDocument` 


.. method:: PySide.QtWebKit.QWebElement.render(painter)


    :param painter: :class:`PySide.QtGui.QPainter`




    Render the element into ``painter`` .



.. method:: PySide.QtWebKit.QWebElement.render(painter, clipRect)


    :param painter: :class:`PySide.QtGui.QPainter`
    :param clipRect: :class:`PySide.QtCore.QRect`







.. method:: PySide.QtWebKit.QWebElement.replace(element)


    :param element: :class:`PySide.QtWebKit.QWebElement`




    Replaces this element with ``element`` .

    This method will not replace the <html>, <head> or <body> elements.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.encloseWith` 


.. method:: PySide.QtWebKit.QWebElement.replace(markup)


    :param markup: unicode




    Replaces this element with the result of parsing ``markup`` .

    This method will not replace the <html>, <head> or <body> elements.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.encloseWith` 


.. method:: PySide.QtWebKit.QWebElement.setAttribute(name, value)


    :param name: unicode
    :param value: unicode




    Adds an attribute with the given ``name`` and ``value`` . If an attribute with the same name exists, its value is replaced by ``value`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attribute`  :meth:`PySide.QtWebKit.QWebElement.attributeNS`  :meth:`PySide.QtWebKit.QWebElement.setAttributeNS` 


.. method:: PySide.QtWebKit.QWebElement.setAttributeNS(namespaceUri, name, value)


    :param namespaceUri: unicode
    :param name: unicode
    :param value: unicode




    Adds an attribute with the given ``name`` in ``namespaceUri`` with ``value`` . If an attribute with the same name exists, its value is replaced by ``value`` .

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.attributeNS`  :meth:`PySide.QtWebKit.QWebElement.attribute`  :meth:`PySide.QtWebKit.QWebElement.setAttribute` 


.. method:: PySide.QtWebKit.QWebElement.setFocus()






    Gives keyboard input focus to this element

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.hasFocus` 


.. method:: PySide.QtWebKit.QWebElement.setInnerXml(markup)


    :param markup: unicode




    Replaces the contents of this element with ``markup`` . The string may contain HTML or XML tags, which is parsed and formatted before insertion into the document.

    .. note::  This is currently implemented for (X)HTML elements only.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.toInnerXml`  :meth:`PySide.QtWebKit.QWebElement.toOuterXml`  :meth:`PySide.QtWebKit.QWebElement.setOuterXml` 


.. method:: PySide.QtWebKit.QWebElement.setOuterXml(markup)


    :param markup: unicode




    Replaces the contents of this element as well as its own tag with ``markup`` . The string may contain HTML or XML tags, which is parsed and formatted before insertion into the document.

    .. note::  This is currently only implemented for (X)HTML elements.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.toOuterXml`  :meth:`PySide.QtWebKit.QWebElement.toInnerXml`  :meth:`PySide.QtWebKit.QWebElement.setInnerXml` 


.. method:: PySide.QtWebKit.QWebElement.setPlainText(text)


    :param text: unicode




    Replaces the existing content of this element with ``text`` .

    This is equivalent to setting the HTML innerText property.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.toPlainText` 


.. method:: PySide.QtWebKit.QWebElement.setStyleProperty(name, value)


    :param name: unicode
    :param value: unicode




    Sets the value of the inline style with the given ``name`` to ``value`` .

    Setting a value, does not necessarily mean that it will become the applied value, due to the fact that the style property's value might have been set earlier with a higher priority in external or embedded style declarations.

    In order to ensure that the value will be applied, you may have to append "!important" to the value.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.styleProperty` 


.. method:: PySide.QtWebKit.QWebElement.styleProperty(name, strategy)


    :param name: unicode
    :param strategy: :attr:`PySide.QtWebKit.QWebElement.StyleResolveStrategy`
    :rtype: unicode




    Returns the value of the style with the given ``name`` using the specified ``strategy`` . If a style with ``name`` does not exist, an empty string is returned.

    In CSS, the cascading part depends on which CSS rule has priority and is thus applied. Generally, the last defined rule has priority. Thus, an inline style rule has priority over an embedded block style rule, which in return has priority over an external style rule.

    If the "!important" declaration is set on one of those, the declaration receives highest priority, unless other declarations also use the "!important" declaration. Then, the last "!important" declaration takes predecence.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.setStyleProperty` 


.. method:: PySide.QtWebKit.QWebElement.tagName()


    :rtype: unicode




    Returns the tag name of this element.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.geometry` 


.. method:: PySide.QtWebKit.QWebElement.takeFromDocument()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Removes this element from the document and returns a reference to it.

    The element is still valid after removal, and can be inserted into other parts of the document.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.removeAllChildren`  :meth:`PySide.QtWebKit.QWebElement.removeFromDocument` 


.. method:: PySide.QtWebKit.QWebElement.toInnerXml()


    :rtype: unicode




    Returns the XML content between the element's start and end tags.

    .. note::  This is currently implemented for (X)HTML elements only.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.setInnerXml`  :meth:`PySide.QtWebKit.QWebElement.setOuterXml`  :meth:`PySide.QtWebKit.QWebElement.toOuterXml` 


.. method:: PySide.QtWebKit.QWebElement.toOuterXml()


    :rtype: unicode




    Returns this element converted to XML, including the start and the end tags as well as its attributes.

    .. note::  This is currently implemented for (X)HTML elements only.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.setOuterXml`  :meth:`PySide.QtWebKit.QWebElement.setInnerXml`  :meth:`PySide.QtWebKit.QWebElement.toInnerXml` 


.. method:: PySide.QtWebKit.QWebElement.toPlainText()


    :rtype: unicode




    Returns the text between the start and the end tag of this element.

    This is equivalent to reading the HTML innerText property.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElement.setPlainText` 


.. method:: PySide.QtWebKit.QWebElement.toggleClass(name)


    :param name: unicode




    Adds the specified class with the given ``name`` if it is not present. If the class is already present, it will be removed.



.. method:: PySide.QtWebKit.QWebElement.webFrame()


    :rtype: :class:`PySide.QtWebKit.QWebFrame`




    Returns the web frame which this element is a part of. If the element is a null element, null is returned.




