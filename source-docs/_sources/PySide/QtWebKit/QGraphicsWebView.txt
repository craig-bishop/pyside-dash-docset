.. module:: PySide.QtWebKit
.. _QGraphicsWebView:

QGraphicsWebView
****************

.. inheritance-diagram:: QGraphicsWebView
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`findText<PySide.QtWebKit.QGraphicsWebView.findText>` (subString[, options=0])
*    def :meth:`history<PySide.QtWebKit.QGraphicsWebView.history>` ()
*    def :meth:`icon<PySide.QtWebKit.QGraphicsWebView.icon>` ()
*    def :meth:`isModified<PySide.QtWebKit.QGraphicsWebView.isModified>` ()
*    def :meth:`isTiledBackingStoreFrozen<PySide.QtWebKit.QGraphicsWebView.isTiledBackingStoreFrozen>` ()
*    def :meth:`load<PySide.QtWebKit.QGraphicsWebView.load>` (request[, operation=QNetworkAccessManager.GetOperation[, body=QByteArray()]])
*    def :meth:`load<PySide.QtWebKit.QGraphicsWebView.load>` (url)
*    def :meth:`page<PySide.QtWebKit.QGraphicsWebView.page>` ()
*    def :meth:`pageAction<PySide.QtWebKit.QGraphicsWebView.pageAction>` (action)
*    def :meth:`renderHints<PySide.QtWebKit.QGraphicsWebView.renderHints>` ()
*    def :meth:`resizesToContents<PySide.QtWebKit.QGraphicsWebView.resizesToContents>` ()
*    def :meth:`setContent<PySide.QtWebKit.QGraphicsWebView.setContent>` (data[, mimeType=""[, baseUrl=QUrl()]])
*    def :meth:`setHtml<PySide.QtWebKit.QGraphicsWebView.setHtml>` (html[, baseUrl=QUrl()])
*    def :meth:`setPage<PySide.QtWebKit.QGraphicsWebView.setPage>` (arg__1)
*    def :meth:`setRenderHint<PySide.QtWebKit.QGraphicsWebView.setRenderHint>` (arg__1[, enabled=true])
*    def :meth:`setRenderHints<PySide.QtWebKit.QGraphicsWebView.setRenderHints>` (arg__1)
*    def :meth:`setResizesToContents<PySide.QtWebKit.QGraphicsWebView.setResizesToContents>` (enabled)
*    def :meth:`setTiledBackingStoreFrozen<PySide.QtWebKit.QGraphicsWebView.setTiledBackingStoreFrozen>` (frozen)
*    def :meth:`setUrl<PySide.QtWebKit.QGraphicsWebView.setUrl>` (arg__1)
*    def :meth:`setZoomFactor<PySide.QtWebKit.QGraphicsWebView.setZoomFactor>` (arg__1)
*    def :meth:`settings<PySide.QtWebKit.QGraphicsWebView.settings>` ()
*    def :meth:`title<PySide.QtWebKit.QGraphicsWebView.title>` ()
*    def :meth:`triggerPageAction<PySide.QtWebKit.QGraphicsWebView.triggerPageAction>` (action[, checked=false])
*    def :meth:`url<PySide.QtWebKit.QGraphicsWebView.url>` ()
*    def :meth:`zoomFactor<PySide.QtWebKit.QGraphicsWebView.zoomFactor>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`back<PySide.QtWebKit.QGraphicsWebView.back>` ()
*    def :meth:`forward<PySide.QtWebKit.QGraphicsWebView.forward>` ()
*    def :meth:`reload<PySide.QtWebKit.QGraphicsWebView.reload>` ()
*    def :meth:`stop<PySide.QtWebKit.QGraphicsWebView.stop>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`iconChanged<PySide.QtWebKit.QGraphicsWebView.iconChanged>` ()
*    def :meth:`linkClicked<PySide.QtWebKit.QGraphicsWebView.linkClicked>` (arg__1)
*    def :meth:`loadFinished<PySide.QtWebKit.QGraphicsWebView.loadFinished>` (arg__1)
*    def :meth:`loadProgress<PySide.QtWebKit.QGraphicsWebView.loadProgress>` (progress)
*    def :meth:`loadStarted<PySide.QtWebKit.QGraphicsWebView.loadStarted>` ()
*    def :meth:`statusBarMessage<PySide.QtWebKit.QGraphicsWebView.statusBarMessage>` (message)
*    def :meth:`titleChanged<PySide.QtWebKit.QGraphicsWebView.titleChanged>` (arg__1)
*    def :meth:`urlChanged<PySide.QtWebKit.QGraphicsWebView.urlChanged>` (arg__1)


Detailed Description
--------------------



    The :class:`PySide.QtWebKit.QGraphicsWebView` class allows Web content to be added to a :ref:`GraphicsView<graphicsview.html>` .

    An instance of this class renders Web content from a URL or supplied as data, using features of the :ref:`QtWebKit` module.

    If the width and height of the item are not set, they will default to 800 and 600, respectively. If the Web page contents is larger than that, scrollbars will be shown if not disabled explicitly.

    .. _PySide.QtWebKit.QGraphicsWebView_browser-features:



Browser Features
^^^^^^^^^^^^^^^^

    Many of the functions, signals and properties provided by :class:`PySide.QtWebKit.QWebView` are also available for this item, making it simple to adapt existing code to use :class:`PySide.QtWebKit.QGraphicsWebView` instead of :class:`PySide.QtWebKit.QWebView` .

    The item uses a :class:`PySide.QtWebKit.QWebPage` object to perform the rendering of Web content, and this can be obtained with the :meth:`PySide.QtWebKit.QGraphicsWebView.page` function, enabling the document itself to be accessed and modified.

    As with :class:`PySide.QtWebKit.QWebView` , the item records the browsing history using a :class:`PySide.QtWebKit.QWebHistory` object, accessible using the :meth:`PySide.QtWebKit.QGraphicsWebView.history` function. The :class:`PySide.QtWebKit.QWebSettings` object that defines the configuration of the browser can be obtained with the :meth:`PySide.QtWebKit.QGraphicsWebView.settings` function, enabling features like plugin support to be customized for each item.

    .. seealso::  :class:`PySide.QtWebKit.QWebView`  :class:`PySide.QtGui.QGraphicsTextItem` 

.. class:: QGraphicsWebView([parent=None])

    :param parent: :class:`PySide.QtGui.QGraphicsItem`

    Constructs an empty :class:`PySide.QtWebKit.QGraphicsWebView` with parent ``parent`` .

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.load` 

.. method:: PySide.QtWebKit.QGraphicsWebView.back()






    Convenience slot that loads the previous document in the list of documents built by navigating links. Does nothing if there is no previous document.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.forward` 


.. method:: PySide.QtWebKit.QGraphicsWebView.findText(subString[, options=0])


    :param subString: unicode
    :param options: :class:`PySide.QtWebKit.QWebPage.FindFlags`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtWebKit.QGraphicsWebView.forward()






    Convenience slot that loads the next document in the list of documents built by navigating links. Does nothing if there is no next document.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.back` 


.. method:: PySide.QtWebKit.QGraphicsWebView.history()


    :rtype: :class:`PySide.QtWebKit.QWebHistory`




    Returns a pointer to the view's history of navigated web pages.

    It is equivalent to

    ::

            view.page().history()




.. method:: PySide.QtWebKit.QGraphicsWebView.icon()


    :rtype: :class:`PySide.QtGui.QIcon`




    This property holds the icon associated with the web page currently viewed.

    By default, this property contains a null icon.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.iconChanged`  :meth:`QWebSettings.iconForUrl()<PySide.QtWebKit.QWebSettings.iconForUrl>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.iconChanged()








.. method:: PySide.QtWebKit.QGraphicsWebView.isModified()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the document was modified by the user.

    Parts of HTML documents can be editable for example through the ``contenteditable`` attribute on HTML elements.

    By default, this property is false.



.. method:: PySide.QtWebKit.QGraphicsWebView.isTiledBackingStoreFrozen()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the tiled backing store updates its contents.

    If the tiled backing store is enabled using :attr:`QWebSettings.TiledBackingStoreEnabled<QWebSettings.WebAttribute>` attribute, this property can be used to disable backing store updates temporarily. This can be useful for example for running a smooth animation that changes the scale of the :class:`PySide.QtWebKit.QGraphicsWebView` .

    When the backing store is unfrozen, its contents will be automatically updated to match the current state of the document. If the :class:`PySide.QtWebKit.QGraphicsWebView` scale was changed, the backing store is also re-rendered using the new scale.

    If the tiled backing store is not enabled, this property does nothing.

    .. seealso::  :attr:`QWebSettings.TiledBackingStoreEnabled<QWebSettings.WebAttribute>`  :meth:`QGraphicsObject.scale<PySide.QtGui.QGraphicsObject.scale>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.linkClicked(arg__1)


    :param arg__1: :class:`PySide.QtCore.QUrl`






.. method:: PySide.QtWebKit.QGraphicsWebView.load(request[, operation=QNetworkAccessManager.GetOperation[, body=QByteArray()]])


    :param request: :class:`PySide.QtNetwork.QNetworkRequest`
    :param operation: :attr:`PySide.QtNetwork.QNetworkAccessManager.Operation`
    :param body: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtWebKit.QGraphicsWebView.load(url)


    :param url: :class:`PySide.QtCore.QUrl`




    Loads the specified ``url`` and displays it.

    .. note::  The view remains the same until enough data has arrived to display the new ``url`` .

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.setUrl`  :meth:`PySide.QtWebKit.QGraphicsWebView.url`  :meth:`PySide.QtWebKit.QGraphicsWebView.urlChanged` 


.. method:: PySide.QtWebKit.QGraphicsWebView.loadFinished(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtWebKit.QGraphicsWebView.loadProgress(progress)


    :param progress: :class:`PySide.QtCore.int`






.. method:: PySide.QtWebKit.QGraphicsWebView.loadStarted()








.. method:: PySide.QtWebKit.QGraphicsWebView.page()


    :rtype: :class:`PySide.QtWebKit.QWebPage`




    Returns a pointer to the underlying web page.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.setPage` 


.. method:: PySide.QtWebKit.QGraphicsWebView.pageAction(action)


    :param action: :attr:`PySide.QtWebKit.QWebPage.WebAction`
    :rtype: :class:`PySide.QtGui.QAction`







.. method:: PySide.QtWebKit.QGraphicsWebView.reload()






    Reloads the current document.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.stop`  :meth:`PySide.QtWebKit.QGraphicsWebView.loadStarted` 


.. method:: PySide.QtWebKit.QGraphicsWebView.renderHints()


    :rtype: :class:`PySide.QtGui.QPainter.RenderHints`







.. method:: PySide.QtWebKit.QGraphicsWebView.resizesToContents()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the size of the :class:`PySide.QtWebKit.QGraphicsWebView` and its viewport changes to match the contents size.

    If this property is set, the :class:`PySide.QtWebKit.QGraphicsWebView` will automatically change its size to match the size of the main frame contents. As a result the top level frame will never have scrollbars. It will also make CSS fixed positioning to behave like absolute positioning with elements positioned relative to the document instead of the viewport.

    This property should be used in conjunction with the :meth:`QWebPage.preferredContentsSize<PySide.QtWebKit.QWebPage.preferredContentsSize>` property. If not explicitly set, the preferredContentsSize is automatically set to a reasonable value.

    .. seealso::  :meth:`QWebPage.setPreferredContentsSize()<PySide.QtWebKit.QWebPage.setPreferredContentsSize>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.setContent(data[, mimeType=""[, baseUrl=QUrl()]])


    :param data: :class:`PySide.QtCore.QByteArray`
    :param mimeType: unicode
    :param baseUrl: :class:`PySide.QtCore.QUrl`




    Sets the content of the web graphicsitem to the specified content ``data`` . If the ``mimeType`` argument is empty it is currently assumed that the content is HTML but in future versions we may introduce auto-detection.

    External objects referenced in the content are located relative to ``baseUrl`` .

    The ``data`` is loaded immediately; external objects are loaded asynchronously.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.load`  :meth:`PySide.QtWebKit.QGraphicsWebView.setHtml`  :meth:`QWebFrame.toHtml()<PySide.QtWebKit.QWebFrame.toHtml>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.setHtml(html[, baseUrl=QUrl()])


    :param html: unicode
    :param baseUrl: :class:`PySide.QtCore.QUrl`




    Sets the content of the web view to the specified ``html`` .

    External objects such as stylesheets or images referenced in the HTML document are located relative to ``baseUrl`` .

    The ``html`` is loaded immediately; external objects are loaded asynchronously.

    When using this method, WebKit assumes that external resources such as JavaScript programs or style sheets are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the charset attribute of the HTML script tag. Alternatively, the encoding can also be specified by the web server.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.load`  :meth:`PySide.QtWebKit.QGraphicsWebView.setContent`  :meth:`QWebFrame.toHtml()<PySide.QtWebKit.QWebFrame.toHtml>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.setPage(arg__1)


    :param arg__1: :class:`PySide.QtWebKit.QWebPage`




    Makes ``page`` the new web page of the web graphicsitem.

    The parent :class:`PySide.QtCore.QObject` of the provided page remains the owner of the object. If the current document is a child of the web view, it will be deleted.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.page` 


.. method:: PySide.QtWebKit.QGraphicsWebView.setRenderHint(arg__1[, enabled=true])


    :param arg__1: :attr:`PySide.QtGui.QPainter.RenderHint`
    :param enabled: :class:`PySide.QtCore.bool`







.. method:: PySide.QtWebKit.QGraphicsWebView.setRenderHints(arg__1)


    :param arg__1: :class:`PySide.QtGui.QPainter.RenderHints`







.. method:: PySide.QtWebKit.QGraphicsWebView.setResizesToContents(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether the size of the :class:`PySide.QtWebKit.QGraphicsWebView` and its viewport changes to match the contents size.

    If this property is set, the :class:`PySide.QtWebKit.QGraphicsWebView` will automatically change its size to match the size of the main frame contents. As a result the top level frame will never have scrollbars. It will also make CSS fixed positioning to behave like absolute positioning with elements positioned relative to the document instead of the viewport.

    This property should be used in conjunction with the :meth:`QWebPage.preferredContentsSize<PySide.QtWebKit.QWebPage.preferredContentsSize>` property. If not explicitly set, the preferredContentsSize is automatically set to a reasonable value.

    .. seealso::  :meth:`QWebPage.setPreferredContentsSize()<PySide.QtWebKit.QWebPage.setPreferredContentsSize>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.setTiledBackingStoreFrozen(frozen)


    :param frozen: :class:`PySide.QtCore.bool`




    This property holds whether the tiled backing store updates its contents.

    If the tiled backing store is enabled using :attr:`QWebSettings.TiledBackingStoreEnabled<QWebSettings.WebAttribute>` attribute, this property can be used to disable backing store updates temporarily. This can be useful for example for running a smooth animation that changes the scale of the :class:`PySide.QtWebKit.QGraphicsWebView` .

    When the backing store is unfrozen, its contents will be automatically updated to match the current state of the document. If the :class:`PySide.QtWebKit.QGraphicsWebView` scale was changed, the backing store is also re-rendered using the new scale.

    If the tiled backing store is not enabled, this property does nothing.

    .. seealso::  :attr:`QWebSettings.TiledBackingStoreEnabled<QWebSettings.WebAttribute>`  :meth:`QGraphicsObject.scale<PySide.QtGui.QGraphicsObject.scale>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.setUrl(arg__1)


    :param arg__1: :class:`PySide.QtCore.QUrl`




    This property holds the url of the web page currently viewed.

    Setting this property clears the view and loads the URL.

    By default, this property contains an empty, invalid URL.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.load`  :meth:`PySide.QtWebKit.QGraphicsWebView.urlChanged` 


.. method:: PySide.QtWebKit.QGraphicsWebView.setZoomFactor(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`




    This property holds the zoom factor for the view.



.. method:: PySide.QtWebKit.QGraphicsWebView.settings()


    :rtype: :class:`PySide.QtWebKit.QWebSettings`




    Returns a pointer to the view/page specific settings object.

    It is equivalent to

    ::

            view.page().settings()


    .. seealso::  :meth:`QWebSettings.globalSettings()<PySide.QtWebKit.QWebSettings.globalSettings>` 


.. method:: PySide.QtWebKit.QGraphicsWebView.statusBarMessage(message)


    :param message: unicode






.. method:: PySide.QtWebKit.QGraphicsWebView.stop()






    Convenience slot that stops loading the document.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.reload`  :meth:`PySide.QtWebKit.QGraphicsWebView.loadFinished` 


.. method:: PySide.QtWebKit.QGraphicsWebView.title()


    :rtype: unicode




    This property holds the title of the web page currently viewed.

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.titleChanged` 


.. method:: PySide.QtWebKit.QGraphicsWebView.titleChanged(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtWebKit.QGraphicsWebView.triggerPageAction(action[, checked=false])


    :param action: :attr:`PySide.QtWebKit.QWebPage.WebAction`
    :param checked: :class:`PySide.QtCore.bool`







.. method:: PySide.QtWebKit.QGraphicsWebView.url()


    :rtype: :class:`PySide.QtCore.QUrl`




    This property holds the url of the web page currently viewed.

    Setting this property clears the view and loads the URL.

    By default, this property contains an empty, invalid URL.

    .. seealso::  :meth:`PySide.QtWebKit.QGraphicsWebView.load`  :meth:`PySide.QtWebKit.QGraphicsWebView.urlChanged` 


.. method:: PySide.QtWebKit.QGraphicsWebView.urlChanged(arg__1)


    :param arg__1: :class:`PySide.QtCore.QUrl`






.. method:: PySide.QtWebKit.QGraphicsWebView.zoomFactor()


    :rtype: :class:`PySide.QtCore.qreal`




    This property holds the zoom factor for the view.




