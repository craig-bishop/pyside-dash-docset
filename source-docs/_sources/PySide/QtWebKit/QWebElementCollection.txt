.. module:: PySide.QtWebKit
.. _QWebElementCollection:

QWebElementCollection
*********************

.. inheritance-diagram:: QWebElementCollection
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtWebKit.QWebElementCollection.__add__>` (other)
*    def :meth:`__getitem__<PySide.QtWebKit.QWebElementCollection.__getitem__>` ()
*    def :meth:`__iadd__<PySide.QtWebKit.QWebElementCollection.__iadd__>` (other)
*    def :meth:`__len__<PySide.QtWebKit.QWebElementCollection.__len__>` ()
*    def :meth:`append<PySide.QtWebKit.QWebElementCollection.append>` (collection)
*    def :meth:`at<PySide.QtWebKit.QWebElementCollection.at>` (i)
*    def :meth:`count<PySide.QtWebKit.QWebElementCollection.count>` ()
*    def :meth:`first<PySide.QtWebKit.QWebElementCollection.first>` ()
*    def :meth:`last<PySide.QtWebKit.QWebElementCollection.last>` ()
*    def :meth:`operator[]<PySide.QtWebKit.QWebElementCollection.operator[]>` (i)
*    def :meth:`toList<PySide.QtWebKit.QWebElementCollection.toList>` ()


Detailed Description
--------------------



    The :class:`PySide.QtWebKit.QWebElementCollection` class represents a collection of web elements.

    Elements in a document can be selected using :meth:`QWebElement.findAll()<PySide.QtWebKit.QWebElement.findAll>` or using the :class:`PySide.QtWebKit.QWebElement` constructor. The collection is composed by choosing all elements in the document that match a specified CSS selector expression.

    The number of selected elements is provided through the :meth:`PySide.QtWebKit.QWebElementCollection.count` property. Individual elements can be retrieved by index using :meth:`PySide.QtWebKit.QWebElementCollection.at` .

    It is also possible to iterate through all elements in the collection using Qt's foreach macro:

    ::

                QWebElementCollection collection = document.findAll("p");
                foreach (QWebElement paraElement, collection) {
                    ...
                }



.. class:: QWebElementCollection()
           QWebElementCollection(contextElement, query)
           QWebElementCollection(arg__1)

    :param query: unicode
    :param contextElement: :class:`PySide.QtWebKit.QWebElement`
    :param arg__1: :class:`PySide.QtWebKit.QWebElementCollection`

    Constructs an empty collection.


    Constructs a collection of elements from the list of child elements of ``contextElement`` that match the specified CSS selector ``query`` .


    Constructs a copy of ``other`` .


.. method:: PySide.QtWebKit.QWebElementCollection.__getitem__()









.. method:: PySide.QtWebKit.QWebElementCollection.__len__()









.. method:: PySide.QtWebKit.QWebElementCollection.append(collection)


    :param collection: :class:`PySide.QtWebKit.QWebElementCollection`




    Extends the collection by appending all items of ``other`` .

    The resulting collection may include duplicate elements.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElementCollection.operator+=` 


.. method:: PySide.QtWebKit.QWebElementCollection.at(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the element at index position ``i`` in the collection.



.. method:: PySide.QtWebKit.QWebElementCollection.count()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of elements in the collection.



.. method:: PySide.QtWebKit.QWebElementCollection.first()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the first element in the collection.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElementCollection.last`  :meth:`PySide.QtWebKit.QWebElementCollection.operator[]`  :meth:`PySide.QtWebKit.QWebElementCollection.at`  :meth:`PySide.QtWebKit.QWebElementCollection.count` 


.. method:: PySide.QtWebKit.QWebElementCollection.last()


    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the last element in the collection.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElementCollection.first`  :meth:`PySide.QtWebKit.QWebElementCollection.operator[]`  :meth:`PySide.QtWebKit.QWebElementCollection.at`  :meth:`PySide.QtWebKit.QWebElementCollection.count` 


.. method:: PySide.QtWebKit.QWebElementCollection.__add__(other)


    :param other: :class:`PySide.QtWebKit.QWebElementCollection`
    :rtype: :class:`PySide.QtWebKit.QWebElementCollection`




    Returns a collection that contains all the elements of this collection followed by all the elements in the ``other`` collection. Duplicates may occur in the result.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElementCollection.operator+=` 


.. method:: PySide.QtWebKit.QWebElementCollection.__iadd__(other)


    :param other: :class:`PySide.QtWebKit.QWebElementCollection`
    :rtype: :class:`PySide.QtWebKit.QWebElementCollection`




    Appends the items of the ``other`` list to this list and returns a reference to this list.

    .. seealso::  :meth:`PySide.QtWebKit.QWebElementCollection.operator+`  :meth:`PySide.QtWebKit.QWebElementCollection.append` 


.. method:: PySide.QtWebKit.QWebElementCollection.operator[](i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtWebKit.QWebElement`




    Returns the element at the specified ``position`` in the collection.



.. method:: PySide.QtWebKit.QWebElementCollection.toList()


    :rtype: 




    Returns a :class:`QList` object with the elements contained in this collection.




