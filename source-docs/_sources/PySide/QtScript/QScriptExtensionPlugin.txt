.. module:: PySide.QtScript
.. _QScriptExtensionPlugin:

QScriptExtensionPlugin
**********************

.. inheritance-diagram:: QScriptExtensionPlugin
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`setupPackage<PySide.QtScript.QScriptExtensionPlugin.setupPackage>` (key, engine)


Detailed Description
--------------------



    The :class:`PySide.QtScript.QScriptExtensionPlugin` class provides an abstract base for custom :ref:`QScript<qscript.html>` extension plugins.

    :class:`PySide.QtScript.QScriptExtensionPlugin` is a plugin interface that makes it possible to offer extensions that can be loaded dynamically into applications using the :class:`PySide.QtScript.QScriptEngine` class.

    Writing a script extension plugin is achieved by subclassing this base class, reimplementing the pure virtual :meth:`PySide.QtScript.QScriptExtensionPlugin.keys` and :meth:`PySide.QtScript.QScriptExtensionPlugin.initialize` functions, and exporting the class using the :meth:`~PySide.QtScript.QScriptExtensionPlugin.Q\_EXPORT\_PLUGIN2` macro. See :ref:`How to Create Qt Plugins<plugins-howto.html>` for details.

    .. seealso::  :meth:`QScriptEngine.importExtension()<PySide.QtScript.QScriptEngine.importExtension>`  :ref:`Creating QtScript Extensions<qtscriptextensions.html>` 

.. class:: QScriptExtensionPlugin([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a script extension plugin with the given ``parent`` .

    Note that this constructor is invoked automatically by the :meth:`~PySide.QtScript.QScriptExtensionPlugin.Q\_EXPORT\_PLUGIN2` macro, so there is no need for calling it explicitly.


.. method:: PySide.QtScript.QScriptExtensionPlugin.setupPackage(key, engine)


    :param key: unicode
    :param engine: :class:`PySide.QtScript.QScriptEngine`
    :rtype: :class:`PySide.QtScript.QScriptValue`




    This function is provided for convenience when reimplementing :meth:`PySide.QtScript.QScriptExtensionPlugin.initialize` . It splits the given ``key`` on ``'.'`` (dot), and ensures that there's a corresponding path of objects in the environment of the given ``engine`` , creating new objects to complete the path if necessary. E.g. if the key is "com.trolltech", after the call to :meth:`PySide.QtScript.QScriptExtensionPlugin.setupPackage` the script expression ``com.trolltech`` will evaluate to an object. More specifically, the engine's Global Object will have a property called "com", which in turn has a property called "trolltech".

    Use this function to avoid global namespace pollution when installing your extensions in the engine.

    .. seealso::  :meth:`PySide.QtScript.QScriptExtensionPlugin.initialize` 



