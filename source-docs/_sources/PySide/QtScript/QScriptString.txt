.. module:: PySide.QtScript
.. _QScriptString:

QScriptString
*************

.. inheritance-diagram:: QScriptString
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtScript.QScriptString.__eq__>` (other)
*    def :meth:`__ne__<PySide.QtScript.QScriptString.__ne__>` (other)
*    def :meth:`isValid<PySide.QtScript.QScriptString.isValid>` ()
*    def :meth:`toArrayIndex<PySide.QtScript.QScriptString.toArrayIndex>` ()
*    def :meth:`toString<PySide.QtScript.QScriptString.toString>` ()


Detailed Description
--------------------



    The :class:`PySide.QtScript.QScriptString` class acts as a handle to "interned" strings in a :class:`PySide.QtScript.QScriptEngine` .

    :class:`PySide.QtScript.QScriptString` can be used to achieve faster (repeated) property getting/setting, and comparison of property names, of script objects.

    To get a :class:`PySide.QtScript.QScriptString` representation of a string, pass the string to :meth:`QScriptEngine.toStringHandle()<PySide.QtScript.QScriptEngine.toStringHandle>` . The typical usage pattern is to register one or more pre-defined strings when setting up your script environment, then subsequently use the relevant :class:`PySide.QtScript.QScriptString` as argument to e.g. :meth:`QScriptValue.property()<PySide.QtScript.QScriptValue.property>` .

    Call the :meth:`PySide.QtScript.QScriptString.toString` function to obtain the string that a :class:`PySide.QtScript.QScriptString` represents.

    Call the :meth:`PySide.QtScript.QScriptString.toArrayIndex` function to convert a :class:`PySide.QtScript.QScriptString` to an array index. This is useful when using :class:`PySide.QtScript.QScriptClass` to implement array-like objects.


.. class:: QScriptString()
           QScriptString(other)

    :param other: :class:`PySide.QtScript.QScriptString`

    Constructs an invalid :class:`PySide.QtScript.QScriptString` .


    Constructs a new :class:`PySide.QtScript.QScriptString` that is a copy of ``other`` .


.. method:: PySide.QtScript.QScriptString.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptString` is valid; otherwise returns false.



.. method:: PySide.QtScript.QScriptString.__ne__(other)


    :param other: :class:`PySide.QtScript.QScriptString`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptString` is not equal to ``other`` ; otherwise returns false.



.. method:: PySide.QtScript.QScriptString.__eq__(other)


    :param other: :class:`PySide.QtScript.QScriptString`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtScript.QScriptString` is equal to ``other`` ; otherwise returns false.



.. method:: PySide.QtScript.QScriptString.toArrayIndex()


    :rtype: :class:`PySide.QtCore.quint32`




    Attempts to convert this :class:`PySide.QtScript.QScriptString` to a :ref:`QtScript` array index, and returns the result.

    If a conversion error occurs, \*``ok`` is set to false; otherwise \*``ok`` is set to true.



.. method:: PySide.QtScript.QScriptString.toString()


    :rtype: unicode




    Returns the string that this :class:`PySide.QtScript.QScriptString` represents, or a null string if this :class:`PySide.QtScript.QScriptString` is not valid.

    .. seealso::  :meth:`PySide.QtScript.QScriptString.isValid` 



