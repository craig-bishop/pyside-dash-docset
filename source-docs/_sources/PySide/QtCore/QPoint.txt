.. module:: PySide.QtCore
.. _QPoint:

QPoint
******

.. inheritance-diagram:: QPoint
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtCore.QPoint.__add__>` (, p2)
*    def :meth:`__div__<PySide.QtCore.QPoint.__div__>` (, c)
*    def :meth:`__eq__<PySide.QtCore.QPoint.__eq__>` (, p2)
*    def :meth:`__iadd__<PySide.QtCore.QPoint.__iadd__>` (p)
*    def :meth:`__idiv__<PySide.QtCore.QPoint.__idiv__>` (c)
*    def :meth:`__imul__<PySide.QtCore.QPoint.__imul__>` (c)
*    def :meth:`__isub__<PySide.QtCore.QPoint.__isub__>` (p)
*    def :meth:`__mul__<PySide.QtCore.QPoint.__mul__>` (, c)
*    def :meth:`__mul__<PySide.QtCore.QPoint.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtCore.QPoint.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtCore.QPoint.__mul__>` (, matrix)
*    def :meth:`__mul__<PySide.QtCore.QPoint.__mul__>` (c)
*    def :meth:`__mul__<PySide.QtCore.QPoint.__mul__>` (matrix)
*    def :meth:`__ne__<PySide.QtCore.QPoint.__ne__>` (, p2)
*    def :meth:`__reduce__<PySide.QtCore.QPoint.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QPoint.__repr__>` ()
*    def :meth:`__sub__<PySide.QtCore.QPoint.__sub__>` ()
*    def :meth:`__sub__<PySide.QtCore.QPoint.__sub__>` (, p2)
*    def :meth:`isNull<PySide.QtCore.QPoint.isNull>` ()
*    def :meth:`manhattanLength<PySide.QtCore.QPoint.manhattanLength>` ()
*    def :meth:`setX<PySide.QtCore.QPoint.setX>` (x)
*    def :meth:`setY<PySide.QtCore.QPoint.setY>` (y)
*    def :meth:`toTuple<PySide.QtCore.QPoint.toTuple>` ()
*    def :meth:`x<PySide.QtCore.QPoint.x>` ()
*    def :meth:`y<PySide.QtCore.QPoint.y>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QPoint` class defines a point in the plane using integer precision.

    A point is specified by a x coordinate and an y coordinate which can be accessed using the :meth:`PySide.QtCore.QPoint.x` and :meth:`PySide.QtCore.QPoint.y` functions. The :meth:`PySide.QtCore.QPoint.isNull` function returns true if both x and y are set to 0. The coordinates can be set (or altered) using the :meth:`PySide.QtCore.QPoint.setX` and :meth:`PySide.QtCore.QPoint.setY` functions, or alternatively the :meth:`PySide.QtCore.QPoint.rx` and :meth:`PySide.QtCore.QPoint.ry` functions which return references to the coordinates (allowing direct manipulation).

    Given a point *p* , the following statements are all equivalent:

    ::

        p = QPoint()

        p.setX(p.x() + 1)
        p += QPoint(1, 0)


    A :class:`PySide.QtCore.QPoint` object can also be used as a vector: Addition and subtraction are defined as for vectors (each component is added separately). A :class:`PySide.QtCore.QPoint` object can also be divided or multiplied by an ``int`` or a ``qreal`` .

    In addition, the :class:`PySide.QtCore.QPoint` class provides the :meth:`PySide.QtCore.QPoint.manhattanLength` function which gives an inexpensive approximation of the length of the :class:`PySide.QtCore.QPoint` object interpreted as a vector. Finally, :class:`PySide.QtCore.QPoint` objects can be streamed as well as compared.

    .. seealso::  :class:`PySide.QtCore.QPointF`  :class:`PySide.QtGui.QPolygon` 

.. class:: QPoint()
           QPoint(QPoint)
           QPoint(xpos, ypos)

    :param ypos: :class:`PySide.QtCore.int`
    :param xpos: :class:`PySide.QtCore.int`
    :param QPoint: :class:`PySide.QtCore.QPoint`

    Constructs a null point, i.e. with coordinates (0, 0)

    .. seealso::  :meth:`PySide.QtCore.QPoint.isNull` 



    Constructs a point with the given coordinates (``x`` , ``y`` ).

    .. seealso::  :meth:`PySide.QtCore.QPoint.setX`  :meth:`PySide.QtCore.QPoint.setY` 

.. method:: PySide.QtCore.QPoint.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QPoint.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QPoint.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if both the x and y coordinates are set to 0, otherwise returns false.



.. method:: PySide.QtCore.QPoint.manhattanLength()


    :rtype: :class:`PySide.QtCore.int`




    Returns the sum of the absolute values of :meth:`PySide.QtCore.QPoint.x` and :meth:`PySide.QtCore.QPoint.y` , traditionally known as the "Manhattan length" of the vector from the origin to the point. For example:

    ::


        class MyWidget(QWidget):

            self.oldPosition = QPointer()

            # event : QMouseEvent
            def mouseMoveEvent(QMouseEvent event):
                point = event.pos() - self.oldPosition
                if (point.manhattanLength() > 3):
                    # the mouse has moved more than 3 pixels since the oldPosition
                    pass


    This is a useful, and quick to calculate, approximation to the true length:

    ::

        trueLength = sqrt(pow(x(), 2) + pow(y(), 2))


    The tradition of "Manhattan length" arises because such distances apply to travelers who can only travel on a rectangular grid, like the streets of Manhattan.



.. method:: PySide.QtCore.QPoint.__ne__(, p2)


    :param p2: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QPoint.__mul__(, c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__mul__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__mul__(, m)


    :param m: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__mul__(, matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__mul__(, m)


    :param m: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__mul__(matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__imul__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPoint`




    Multiplies this point's coordinates by the given ``factor`` , and returns a reference to this point. For example:

    ::

        p = QPoint(-1, 4)
        p *= 2.5  # p becomes (-3, 10)


    Note that the result is rounded to the nearest integer as points are held as integers. Use :class:`PySide.QtCore.QPointF` for floating point accuracy.

    .. seealso::  :meth:`PySide.QtCore.QPoint.operator/=` 


.. method:: PySide.QtCore.QPoint.__add__(, p2)


    :param p2: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__iadd__(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`




    Adds the given ``point`` to this point and returns a reference to this point. For example:

    ::

        p = QPoint( 3, 7)
        q = QPoint(-1, 4)
        p += q    # p becomes (2, 11)


    .. seealso::  :meth:`PySide.QtCore.QPoint.operator-=` 


.. method:: PySide.QtCore.QPoint.__sub__()


    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__sub__(, p2)


    :param p2: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__isub__(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`




    Subtracts the given ``point`` from this point and returns a reference to this point. For example:

    ::

        p = QPoint( 3, 7)
        q = QPoint(-1, 4)
        p -= q    # p becomes (4, 3)


    .. seealso::  :meth:`PySide.QtCore.QPoint.operator+=` 


.. method:: PySide.QtCore.QPoint.__div__(, c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPoint`







.. method:: PySide.QtCore.QPoint.__idiv__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Divides both x and y by the given ``divisor`` , and returns a reference to this point. For example:

    ::

        p = QPoint(-3, 10)
        p /= 2.5  # p becomes (-1, 4)


    Note that the result is rounded to the nearest integer as points are held as integers. Use :class:`PySide.QtCore.QPointF` for floating point accuracy.

    .. seealso::  :meth:`PySide.QtCore.QPoint.operator\*=` 


.. method:: PySide.QtCore.QPoint.__eq__(, p2)


    :param p2: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QPoint.setX(x)


    :param x: :class:`PySide.QtCore.int`




    Sets the x coordinate of this point to the given ``x`` coordinate.

    .. seealso::  :meth:`PySide.QtCore.QPoint.x`  :meth:`PySide.QtCore.QPoint.setY` 


.. method:: PySide.QtCore.QPoint.setY(y)


    :param y: :class:`PySide.QtCore.int`




    Sets the y coordinate of this point to the given ``y`` coordinate.

    .. seealso::  :meth:`PySide.QtCore.QPoint.y`  :meth:`PySide.QtCore.QPoint.setX` 


.. method:: PySide.QtCore.QPoint.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QPoint.x()


    :rtype: :class:`PySide.QtCore.int`




    Returns the x coordinate of this point.

    .. seealso::  :meth:`PySide.QtCore.QPoint.setX`  :meth:`PySide.QtCore.QPoint.rx` 


.. method:: PySide.QtCore.QPoint.y()


    :rtype: :class:`PySide.QtCore.int`




    Returns the y coordinate of this point.

    .. seealso::  :meth:`PySide.QtCore.QPoint.setY`  :meth:`PySide.QtCore.QPoint.ry` 



