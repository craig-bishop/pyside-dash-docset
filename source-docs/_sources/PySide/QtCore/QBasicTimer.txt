.. module:: PySide.QtCore
.. _QBasicTimer:

QBasicTimer
***********

.. inheritance-diagram:: QBasicTimer
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`isActive<PySide.QtCore.QBasicTimer.isActive>` ()
*    def :meth:`start<PySide.QtCore.QBasicTimer.start>` (msec, obj)
*    def :meth:`stop<PySide.QtCore.QBasicTimer.stop>` ()
*    def :meth:`timerId<PySide.QtCore.QBasicTimer.timerId>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QBasicTimer` class provides timer events for objects.

    This is a fast, lightweight, and low-level class used by Qt internally. We recommend using the higher-level :class:`PySide.QtCore.QTimer` class rather than this class if you want to use timers in your applications. Note that this timer is a repeating timer that will send subsequent timer events unless the :meth:`PySide.QtCore.QBasicTimer.stop` function is called.

    To use this class, create a :class:`PySide.QtCore.QBasicTimer` , and call its :meth:`PySide.QtCore.QBasicTimer.start` function with a timeout interval and with a pointer to a :class:`PySide.QtCore.QObject` subclass. When the timer times out it will send a timer event to the :class:`PySide.QtCore.QObject` subclass. The timer can be stopped at any time using :meth:`PySide.QtCore.QBasicTimer.stop` . :meth:`PySide.QtCore.QBasicTimer.isActive` returns true for a timer that is running; i.e. it has been started, has not reached the timeout time, and has not been stopped. The timer's ID can be retrieved using :meth:`PySide.QtCore.QBasicTimer.timerId` .

    The :ref:`Wiggly<widgets/wiggly>` example uses :class:`PySide.QtCore.QBasicTimer` to repaint a widget at regular intervals.

    .. seealso::  :class:`PySide.QtCore.QTimer`  :class:`PySide.QtCore.QTimerEvent`  :meth:`QObject.timerEvent()<PySide.QtCore.QObject.timerEvent>`  :ref:`Timers<timers.html>`  :ref:`Wiggly Example<widgets/wiggly>` 

.. class:: QBasicTimer()
           QBasicTimer(QBasicTimer)

    :param QBasicTimer: :class:`PySide.QtCore.QBasicTimer`

    Contructs a basic timer.

    .. seealso::  :meth:`PySide.QtCore.QBasicTimer.start` 



.. method:: PySide.QtCore.QBasicTimer.isActive()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the timer is running and has not been stopped; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QBasicTimer.start`  :meth:`PySide.QtCore.QBasicTimer.stop` 


.. method:: PySide.QtCore.QBasicTimer.start(msec, obj)


    :param msec: :class:`PySide.QtCore.int`
    :param obj: :class:`PySide.QtCore.QObject`




    Starts (or restarts) the timer with a ``msec`` milliseconds timeout.

    The given ``object`` will receive timer events.

    .. seealso::  :meth:`PySide.QtCore.QBasicTimer.stop`  :meth:`PySide.QtCore.QBasicTimer.isActive`  :meth:`QObject.timerEvent()<PySide.QtCore.QObject.timerEvent>` 


.. method:: PySide.QtCore.QBasicTimer.stop()






    Stops the timer.

    .. seealso::  :meth:`PySide.QtCore.QBasicTimer.start`  :meth:`PySide.QtCore.QBasicTimer.isActive` 


.. method:: PySide.QtCore.QBasicTimer.timerId()


    :rtype: :class:`PySide.QtCore.int`




    Returns the timer's ID.

    .. seealso::  :meth:`QTimerEvent.timerId()<PySide.QtCore.QTimerEvent.timerId>` 



