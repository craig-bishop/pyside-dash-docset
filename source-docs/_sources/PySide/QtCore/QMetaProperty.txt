.. module:: PySide.QtCore
.. _QMetaProperty:

QMetaProperty
*************

.. inheritance-diagram:: QMetaProperty
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`enumerator<PySide.QtCore.QMetaProperty.enumerator>` ()
*    def :meth:`hasNotifySignal<PySide.QtCore.QMetaProperty.hasNotifySignal>` ()
*    def :meth:`hasStdCppSet<PySide.QtCore.QMetaProperty.hasStdCppSet>` ()
*    def :meth:`isConstant<PySide.QtCore.QMetaProperty.isConstant>` ()
*    def :meth:`isDesignable<PySide.QtCore.QMetaProperty.isDesignable>` ([obj=None])
*    def :meth:`isEditable<PySide.QtCore.QMetaProperty.isEditable>` ([obj=None])
*    def :meth:`isEnumType<PySide.QtCore.QMetaProperty.isEnumType>` ()
*    def :meth:`isFinal<PySide.QtCore.QMetaProperty.isFinal>` ()
*    def :meth:`isFlagType<PySide.QtCore.QMetaProperty.isFlagType>` ()
*    def :meth:`isReadable<PySide.QtCore.QMetaProperty.isReadable>` ()
*    def :meth:`isResettable<PySide.QtCore.QMetaProperty.isResettable>` ()
*    def :meth:`isScriptable<PySide.QtCore.QMetaProperty.isScriptable>` ([obj=None])
*    def :meth:`isStored<PySide.QtCore.QMetaProperty.isStored>` ([obj=None])
*    def :meth:`isUser<PySide.QtCore.QMetaProperty.isUser>` ([obj=None])
*    def :meth:`isValid<PySide.QtCore.QMetaProperty.isValid>` ()
*    def :meth:`isWritable<PySide.QtCore.QMetaProperty.isWritable>` ()
*    def :meth:`name<PySide.QtCore.QMetaProperty.name>` ()
*    def :meth:`notifySignal<PySide.QtCore.QMetaProperty.notifySignal>` ()
*    def :meth:`notifySignalIndex<PySide.QtCore.QMetaProperty.notifySignalIndex>` ()
*    def :meth:`propertyIndex<PySide.QtCore.QMetaProperty.propertyIndex>` ()
*    def :meth:`read<PySide.QtCore.QMetaProperty.read>` (obj)
*    def :meth:`reset<PySide.QtCore.QMetaProperty.reset>` (obj)
*    def :meth:`revision<PySide.QtCore.QMetaProperty.revision>` ()
*    def :meth:`type<PySide.QtCore.QMetaProperty.type>` ()
*    def :meth:`typeName<PySide.QtCore.QMetaProperty.typeName>` ()
*    def :meth:`userType<PySide.QtCore.QMetaProperty.userType>` ()
*    def :meth:`write<PySide.QtCore.QMetaProperty.write>` (obj, value)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QMetaProperty` class provides meta-data about a property.

    Property meta-data is obtained from an object's meta-object. See :meth:`QMetaObject.property()<PySide.QtCore.QMetaObject.property>` and :meth:`QMetaObject.propertyCount()<PySide.QtCore.QMetaObject.propertyCount>` for details.

    .. _PySide.QtCore.QMetaProperty_property-meta-data:



Property Meta-Data
^^^^^^^^^^^^^^^^^^

    A property has a :meth:`PySide.QtCore.QMetaProperty.name` and a :meth:`PySide.QtCore.QMetaProperty.type` , as well as various attributes that specify its behavior: :meth:`PySide.QtCore.QMetaProperty.isReadable` , :meth:`PySide.QtCore.QMetaProperty.isWritable` , :meth:`PySide.QtCore.QMetaProperty.isDesignable` , :meth:`PySide.QtCore.QMetaProperty.isScriptable` , and :meth:`PySide.QtCore.QMetaProperty.isStored` .

    If the property is an enumeration, :meth:`PySide.QtCore.QMetaProperty.isEnumType` returns true; if the property is an enumeration that is also a flag (i.e. its values can be combined using the OR operator), :meth:`PySide.QtCore.QMetaProperty.isEnumType` and :meth:`PySide.QtCore.QMetaProperty.isFlagType` both return true. The enumerator for these types is available from :meth:`PySide.QtCore.QMetaProperty.enumerator` .

    The property's values are set and retrieved with :meth:`PySide.QtCore.QMetaProperty.read` , :meth:`PySide.QtCore.QMetaProperty.write` , and :meth:`PySide.QtCore.QMetaProperty.reset` ; they can also be changed through :class:`PySide.QtCore.QObject` 's set and get functions. See :meth:`QObject.setProperty()<PySide.QtCore.QObject.setProperty>` and :meth:`QObject.property()<PySide.QtCore.QObject.property>` for details.

    .. _PySide.QtCore.QMetaProperty_copying-and-assignment:



Copying and Assignment
^^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtCore.QMetaProperty` objects can be copied by value. However, each copy will refer to the same underlying property meta-data.

    .. seealso::  :class:`PySide.QtCore.QMetaObject`  :class:`PySide.QtCore.QMetaEnum`  :class:`PySide.QtCore.QMetaMethod`  :ref:`Qt's Property System<properties.html>` 

.. class:: QMetaProperty()
           QMetaProperty(QMetaProperty)

    :param QMetaProperty: :class:`PySide.QtCore.QMetaProperty`




.. method:: PySide.QtCore.QMetaProperty.enumerator()


    :rtype: :class:`PySide.QtCore.QMetaEnum`




    Returns the enumerator if this property's type is an enumerator type; otherwise the returned value is undefined.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isEnumType`  :meth:`PySide.QtCore.QMetaProperty.isFlagType` 


.. method:: PySide.QtCore.QMetaProperty.hasNotifySignal()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this property has a corresponding change notify signal; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.notifySignal` 


.. method:: PySide.QtCore.QMetaProperty.hasStdCppSet()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property has a C++ setter function that follows Qt's standard "name" / "setName" pattern. Designer and uic query :meth:`PySide.QtCore.QMetaProperty.hasStdCppSet` in order to avoid expensive :meth:`QObject.setProperty()<PySide.QtCore.QObject.setProperty>` calls. All properties in Qt [should] follow this pattern.



.. method:: PySide.QtCore.QMetaProperty.isConstant()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property is constant; otherwise returns false.

    A property is constant if the ``Q_PROPERTY()`` 's ``CONSTANT`` attribute is set.



.. method:: PySide.QtCore.QMetaProperty.isDesignable([obj=None])


    :param obj: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this property is designable for the given ``object`` ; otherwise returns false.

    If no ``object`` is given, the function returns false if the ``Q_PROPERTY()`` 's ``DESIGNABLE`` attribute is false; otherwise returns true (if the attribute is true or is a function or expression).

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isScriptable`  :meth:`PySide.QtCore.QMetaProperty.isStored` 


.. method:: PySide.QtCore.QMetaProperty.isEditable([obj=None])


    :param obj: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property is editable for the given ``object`` ; otherwise returns false.

    If no ``object`` is given, the function returns false if the ``Q_PROPERTY()`` 's ``EDITABLE`` attribute is false; otherwise returns true (if the attribute is true or is a function or expression).

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isDesignable`  :meth:`PySide.QtCore.QMetaProperty.isScriptable`  :meth:`PySide.QtCore.QMetaProperty.isStored` 


.. method:: PySide.QtCore.QMetaProperty.isEnumType()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property's type is an enumeration value; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.enumerator`  :meth:`PySide.QtCore.QMetaProperty.isFlagType` 


.. method:: PySide.QtCore.QMetaProperty.isFinal()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property is final; otherwise returns false.

    A property is final if the ``Q_PROPERTY()`` 's ``FINAL`` attribute is set.



.. method:: PySide.QtCore.QMetaProperty.isFlagType()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property's type is an enumeration value that is used as a flag; otherwise returns false.

    Flags can be combined using the OR operator. A flag type is implicitly also an enum type.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isEnumType`  :meth:`PySide.QtCore.QMetaProperty.enumerator`  :meth:`QMetaEnum.isFlag()<PySide.QtCore.QMetaEnum.isFlag>` 


.. method:: PySide.QtCore.QMetaProperty.isReadable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this property is readable; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isWritable`  :meth:`PySide.QtCore.QMetaProperty.read`  :meth:`PySide.QtCore.QMetaProperty.isValid` 


.. method:: PySide.QtCore.QMetaProperty.isResettable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this property can be reset to a default value; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.reset` 


.. method:: PySide.QtCore.QMetaProperty.isScriptable([obj=None])


    :param obj: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property is scriptable for the given ``object`` ; otherwise returns false.

    If no ``object`` is given, the function returns false if the ``Q_PROPERTY()`` 's ``SCRIPTABLE`` attribute is false; otherwise returns true (if the attribute is true or is a function or expression).

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isDesignable`  :meth:`PySide.QtCore.QMetaProperty.isStored` 


.. method:: PySide.QtCore.QMetaProperty.isStored([obj=None])


    :param obj: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the property is stored for ``object`` ; otherwise returns false.

    If no ``object`` is given, the function returns false if the ``Q_PROPERTY()`` 's ``STORED`` attribute is false; otherwise returns true (if the attribute is true or is a function or expression).

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isDesignable`  :meth:`PySide.QtCore.QMetaProperty.isScriptable` 


.. method:: PySide.QtCore.QMetaProperty.isUser([obj=None])


    :param obj: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this property is designated as the ``USER`` property, i.e., the one that the user can edit for ``object`` or that is significant in some other way. Otherwise it returns false. e.g., the ``text`` property is the ``USER`` editable property of a :class:`PySide.QtGui.QLineEdit` .

    If ``object`` is null, the function returns false if the ``Q_PROPERTY()`` 's ``USER`` attribute is false. Otherwise it returns true.

    .. seealso::  :meth:`QMetaObject.userProperty()<PySide.QtCore.QMetaObject.userProperty>`  :meth:`PySide.QtCore.QMetaProperty.isDesignable`  :meth:`PySide.QtCore.QMetaProperty.isScriptable` 


.. method:: PySide.QtCore.QMetaProperty.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this property is valid (readable); otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isReadable` 


.. method:: PySide.QtCore.QMetaProperty.isWritable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this property is writable; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.isReadable`  :meth:`PySide.QtCore.QMetaProperty.write` 


.. method:: PySide.QtCore.QMetaProperty.name()


    :rtype: str




    Returns this property's name.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.type`  :meth:`PySide.QtCore.QMetaProperty.typeName` 


.. method:: PySide.QtCore.QMetaProperty.notifySignal()


    :rtype: :class:`PySide.QtCore.QMetaMethod`




    Returns the :class:`PySide.QtCore.QMetaMethod` instance of the property change notifying signal if one was specified, otherwise returns an invalid :class:`PySide.QtCore.QMetaMethod` .

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.hasNotifySignal` 


.. method:: PySide.QtCore.QMetaProperty.notifySignalIndex()


    :rtype: :class:`PySide.QtCore.int`




    Returns the index of the property change notifying signal if one was specified, otherwise returns -1.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.hasNotifySignal` 


.. method:: PySide.QtCore.QMetaProperty.propertyIndex()


    :rtype: :class:`PySide.QtCore.int`




    Returns this property's index.



.. method:: PySide.QtCore.QMetaProperty.read(obj)


    :param obj: :class:`PySide.QtCore.QObject`
    :rtype: object




    Reads the property's value from the given ``object`` . Returns the value if it was able to read it; otherwise returns an invalid variant.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.write`  :meth:`PySide.QtCore.QMetaProperty.reset`  :meth:`PySide.QtCore.QMetaProperty.isReadable` 


.. method:: PySide.QtCore.QMetaProperty.reset(obj)


    :param obj: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.QtCore.bool`




    Resets the property for the given ``object`` with a reset method. Returns true if the reset worked; otherwise returns false.

    Reset methods are optional; only a few properties support them.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.read`  :meth:`PySide.QtCore.QMetaProperty.write` 


.. method:: PySide.QtCore.QMetaProperty.revision()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QMetaProperty.type()


    :rtype: :class:`PySide.QtCore.QVariant::Type`




    Returns this property's type. The return value is one of the values of the :attr:`QVariant.Type` enumeration.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.userType`  :meth:`PySide.QtCore.QMetaProperty.typeName`  :meth:`PySide.QtCore.QMetaProperty.name` 


.. method:: PySide.QtCore.QMetaProperty.typeName()


    :rtype: str




    Returns the name of this property's type.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.type`  :meth:`PySide.QtCore.QMetaProperty.name` 


.. method:: PySide.QtCore.QMetaProperty.userType()


    :rtype: :class:`PySide.QtCore.int`




    Returns this property's user type. The return value is one of the values that are registered with :class:`~PySide.QtCore.QMetaType` , or 0 if the type is not registered.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.type`  :class:`~PySide.QtCore.QMetaType`  :meth:`PySide.QtCore.QMetaProperty.typeName` 


.. method:: PySide.QtCore.QMetaProperty.write(obj, value)


    :param obj: :class:`PySide.QtCore.QObject`
    :param value: object
    :rtype: :class:`PySide.QtCore.bool`




    Writes ``value`` as the property's value to the given ``object`` . Returns true if the write succeeded; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QMetaProperty.read`  :meth:`PySide.QtCore.QMetaProperty.reset`  :meth:`PySide.QtCore.QMetaProperty.isWritable` 



