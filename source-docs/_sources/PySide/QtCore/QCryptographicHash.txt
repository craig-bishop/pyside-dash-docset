.. module:: PySide.QtCore
.. _QCryptographicHash:

QCryptographicHash
******************

.. inheritance-diagram:: QCryptographicHash
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addData<PySide.QtCore.QCryptographicHash.addData>` (data)
*    def :meth:`addData<PySide.QtCore.QCryptographicHash.addData>` (data)
*    def :meth:`reset<PySide.QtCore.QCryptographicHash.reset>` ()
*    def :meth:`result<PySide.QtCore.QCryptographicHash.result>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`hash<PySide.QtCore.QCryptographicHash.hash>` (data, method)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QCryptographicHash` class provides a way to generate cryptographic hashes.

    :class:`PySide.QtCore.QCryptographicHash` can be used to generate cryptographic hashes of binary or text data.

    Currently MD4, MD5, and SHA-1 are supported.


.. class:: QCryptographicHash(method)

    :param method: :attr:`PySide.QtCore.QCryptographicHash.Algorithm`

    Constructs an object that can be used to create a cryptographic hash from data using ``method`` .


.. attribute:: PySide.QtCore.QCryptographicHash.Algorithm

    +-----------------------+-------------------------+
    |Constant               |Description              |
    +=======================+=========================+
    |QCryptographicHash.Md4 |Generate an MD4 hash sum |
    +-----------------------+-------------------------+
    |QCryptographicHash.Md5 |Generate an MD5 hash sum |
    +-----------------------+-------------------------+
    |QCryptographicHash.Sha1|Generate an SHA1 hash sum|
    +-----------------------+-------------------------+


.. method:: PySide.QtCore.QCryptographicHash.addData(data)


    :param data: :class:`PySide.QtCore.QByteArray`




    This function overloads :meth:`PySide.QtCore.QCryptographicHash.addData` .



.. method:: PySide.QtCore.QCryptographicHash.addData(data)


    :param data: str




    Adds the first ``length`` chars of ``data`` to the cryptographic hash.



.. staticmethod:: PySide.QtCore.QCryptographicHash.hash(data, method)


    :param data: :class:`PySide.QtCore.QByteArray`
    :param method: :attr:`PySide.QtCore.QCryptographicHash.Algorithm`
    :rtype: :class:`PySide.QtCore.QByteArray`




    Returns the hash of ``data`` using ``method`` .



.. method:: PySide.QtCore.QCryptographicHash.reset()






    Resets the object.



.. method:: PySide.QtCore.QCryptographicHash.result()


    :rtype: :class:`PySide.QtCore.QByteArray`




    Returns the final hash value.

    .. seealso::  :meth:`QByteArray.toHex()<PySide.QtCore.QByteArray.toHex>` 



