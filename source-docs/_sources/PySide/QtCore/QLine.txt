.. module:: PySide.QtCore
.. _QLine:

QLine
*****

.. inheritance-diagram:: QLine
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtCore.QLine.__eq__>` (d)
*    def :meth:`__mul__<PySide.QtCore.QLine.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtCore.QLine.__mul__>` (, m)
*    def :meth:`__ne__<PySide.QtCore.QLine.__ne__>` (d)
*    def :meth:`__reduce__<PySide.QtCore.QLine.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QLine.__repr__>` ()
*    def :meth:`dx<PySide.QtCore.QLine.dx>` ()
*    def :meth:`dy<PySide.QtCore.QLine.dy>` ()
*    def :meth:`isNull<PySide.QtCore.QLine.isNull>` ()
*    def :meth:`p1<PySide.QtCore.QLine.p1>` ()
*    def :meth:`p2<PySide.QtCore.QLine.p2>` ()
*    def :meth:`setLine<PySide.QtCore.QLine.setLine>` (x1, y1, x2, y2)
*    def :meth:`setP1<PySide.QtCore.QLine.setP1>` (p1)
*    def :meth:`setP2<PySide.QtCore.QLine.setP2>` (p2)
*    def :meth:`setPoints<PySide.QtCore.QLine.setPoints>` (p1, p2)
*    def :meth:`toTuple<PySide.QtCore.QLine.toTuple>` ()
*    def :meth:`translate<PySide.QtCore.QLine.translate>` (dx, dy)
*    def :meth:`translate<PySide.QtCore.QLine.translate>` (p)
*    def :meth:`translated<PySide.QtCore.QLine.translated>` (dx, dy)
*    def :meth:`translated<PySide.QtCore.QLine.translated>` (p)
*    def :meth:`x1<PySide.QtCore.QLine.x1>` ()
*    def :meth:`x2<PySide.QtCore.QLine.x2>` ()
*    def :meth:`y1<PySide.QtCore.QLine.y1>` ()
*    def :meth:`y2<PySide.QtCore.QLine.y2>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QLine` class provides a two-dimensional vector using integer precision.

    A :class:`PySide.QtCore.QLine` describes a finite length line (or a line segment) on a two-dimensional surface. The start and end points of the line are specified using integer point accuracy for coordinates. Use the :class:`PySide.QtCore.QLineF` constructor to retrieve a floating point copy.

    +-----------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qline-point.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qline-coordinates.png|
    +-----------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+

    The positions of the line's start and end points can be retrieved using the :meth:`PySide.QtCore.QLine.p1` , :meth:`PySide.QtCore.QLine.x1` , :meth:`PySide.QtCore.QLine.y1` , :meth:`PySide.QtCore.QLine.p2` , :meth:`PySide.QtCore.QLine.x2` , and :meth:`PySide.QtCore.QLine.y2` functions. The :meth:`PySide.QtCore.QLine.dx` and :meth:`PySide.QtCore.QLine.dy` functions return the horizontal and vertical components of the line. Use :meth:`PySide.QtCore.QLine.isNull` to determine whether the :class:`PySide.QtCore.QLine` represents a valid line or a null line.

    Finally, the line can be translated a given offset using the :meth:`PySide.QtCore.QLine.translate` function.

    .. seealso::  :class:`PySide.QtCore.QLineF`  :class:`PySide.QtGui.QPolygon`  :class:`PySide.QtCore.QRect` 

.. class:: QLine()
           QLine(QLine)
           QLine(pt1, pt2)
           QLine(x1, y1, x2, y2)

    :param pt1: :class:`PySide.QtCore.QPoint`
    :param pt2: :class:`PySide.QtCore.QPoint`
    :param y1: :class:`PySide.QtCore.int`
    :param x1: :class:`PySide.QtCore.int`
    :param y2: :class:`PySide.QtCore.int`
    :param x2: :class:`PySide.QtCore.int`
    :param QLine: :class:`PySide.QtCore.QLine`

    Constructs a null line.




    Constructs a line object that represents the line between ``p1`` and ``p2`` .


    Constructs a line object that represents the line between (``x1`` , ``y1`` ) and (``x2`` , ``y2`` ).


.. method:: PySide.QtCore.QLine.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QLine.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QLine.dx()


    :rtype: :class:`PySide.QtCore.int`




    Returns the horizontal component of the line's vector.

    .. seealso::  :meth:`PySide.QtCore.QLine.dy` 


.. method:: PySide.QtCore.QLine.dy()


    :rtype: :class:`PySide.QtCore.int`




    Returns the vertical component of the line's vector.

    .. seealso::  :meth:`PySide.QtCore.QLine.dx` 


.. method:: PySide.QtCore.QLine.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the line is not set up with valid start and end point; otherwise returns false.



.. method:: PySide.QtCore.QLine.__ne__(d)


    :param d: :class:`PySide.QtCore.QLine`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``line`` is not the same as *this* line.

    A line is different from another line if any of their start or end points differ, or the internal order of the points is different.



.. method:: PySide.QtCore.QLine.__mul__(, m)


    :param m: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtCore.QLine`







.. method:: PySide.QtCore.QLine.__mul__(, m)


    :param m: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.QLine`







.. method:: PySide.QtCore.QLine.__eq__(d)


    :param d: :class:`PySide.QtCore.QLine`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``line`` is the same as *this* line.

    A line is identical to another line if the start and end points are identical, and the internal order of the points is the same.



.. method:: PySide.QtCore.QLine.p1()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the line's start point.

    .. seealso::  :meth:`PySide.QtCore.QLine.setP1`  :meth:`PySide.QtCore.QLine.x1`  :meth:`PySide.QtCore.QLine.y1`  :meth:`PySide.QtCore.QLine.p2` 


.. method:: PySide.QtCore.QLine.p2()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the line's end point.

    .. seealso::  :meth:`PySide.QtCore.QLine.setP2`  :meth:`PySide.QtCore.QLine.x2`  :meth:`PySide.QtCore.QLine.y2`  :meth:`PySide.QtCore.QLine.p1` 


.. method:: PySide.QtCore.QLine.setLine(x1, y1, x2, y2)


    :param x1: :class:`PySide.QtCore.int`
    :param y1: :class:`PySide.QtCore.int`
    :param x2: :class:`PySide.QtCore.int`
    :param y2: :class:`PySide.QtCore.int`




    Sets this line to the start in ``x1`` , ``y1`` and end in ``x2`` , ``y2`` .

    .. seealso::  :meth:`PySide.QtCore.QLine.setP1`  :meth:`PySide.QtCore.QLine.setP2`  :meth:`PySide.QtCore.QLine.p1`  :meth:`PySide.QtCore.QLine.p2` 


.. method:: PySide.QtCore.QLine.setP1(p1)


    :param p1: :class:`PySide.QtCore.QPoint`




    Sets the starting point of this line to ``p1`` .

    .. seealso::  :meth:`PySide.QtCore.QLine.setP2`  :meth:`PySide.QtCore.QLine.p1` 


.. method:: PySide.QtCore.QLine.setP2(p2)


    :param p2: :class:`PySide.QtCore.QPoint`




    Sets the end point of this line to ``p2`` .

    .. seealso::  :meth:`PySide.QtCore.QLine.setP1`  :meth:`PySide.QtCore.QLine.p2` 


.. method:: PySide.QtCore.QLine.setPoints(p1, p2)


    :param p1: :class:`PySide.QtCore.QPoint`
    :param p2: :class:`PySide.QtCore.QPoint`




    Sets the start point of this line to ``p1`` and the end point of this line to ``p2`` .

    .. seealso::  :meth:`PySide.QtCore.QLine.setP1`  :meth:`PySide.QtCore.QLine.setP2`  :meth:`PySide.QtCore.QLine.p1`  :meth:`PySide.QtCore.QLine.p2` 


.. method:: PySide.QtCore.QLine.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QLine.translate(dx, dy)


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Translates this line the distance specified by ``dx`` and ``dy`` .



.. method:: PySide.QtCore.QLine.translate(p)


    :param p: :class:`PySide.QtCore.QPoint`




    Translates this line by the given ``offset`` .



.. method:: PySide.QtCore.QLine.translated(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QLine`




    Returns this line translated by the given ``offset`` .



.. method:: PySide.QtCore.QLine.translated(dx, dy)


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QLine`




    This is an overloaded function.

    Returns this line translated the distance specified by ``dx`` and ``dy`` .



.. method:: PySide.QtCore.QLine.x1()


    :rtype: :class:`PySide.QtCore.int`




    Returns the x-coordinate of the line's start point.

    .. seealso::  :meth:`PySide.QtCore.QLine.p1` 


.. method:: PySide.QtCore.QLine.x2()


    :rtype: :class:`PySide.QtCore.int`




    Returns the x-coordinate of the line's end point.

    .. seealso::  :meth:`PySide.QtCore.QLine.p2` 


.. method:: PySide.QtCore.QLine.y1()


    :rtype: :class:`PySide.QtCore.int`




    Returns the y-coordinate of the line's start point.

    .. seealso::  :meth:`PySide.QtCore.QLine.p1` 


.. method:: PySide.QtCore.QLine.y2()


    :rtype: :class:`PySide.QtCore.int`




    Returns the y-coordinate of the line's end point.

    .. seealso::  :meth:`PySide.QtCore.QLine.p2` 



