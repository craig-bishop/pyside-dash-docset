.. module:: PySide.QtCore
.. _QUuid:

QUuid
*****

.. inheritance-diagram:: QUuid
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtCore.QUuid.__eq__>` (orig)
*    def :meth:`__gt__<PySide.QtCore.QUuid.__gt__>` (other)
*    def :meth:`__lt__<PySide.QtCore.QUuid.__lt__>` (other)
*    def :meth:`__ne__<PySide.QtCore.QUuid.__ne__>` (orig)
*    def :meth:`__reduce__<PySide.QtCore.QUuid.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QUuid.__repr__>` ()
*    def :meth:`isNull<PySide.QtCore.QUuid.isNull>` ()
*    def :meth:`toString<PySide.QtCore.QUuid.toString>` ()
*    def :meth:`variant<PySide.QtCore.QUuid.variant>` ()
*    def :meth:`version<PySide.QtCore.QUuid.version>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`createUuid<PySide.QtCore.QUuid.createUuid>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QUuid` class stores a Universally Unique Identifier (UUID).

    Using *U*\ niversally *U*\ nique *ID*\ entifiers (UUID) is a standard way to uniquely identify entities in a distributed computing environment. A UUID is a 16-byte (128-bit) number generated by some algorithm that is meant to guarantee that the UUID will be unique in the distributed computing environment where it is used. The acronym GUID is often used instead, *G*\ lobally *U*\ nique *ID*\ entifiers, but it refers to the same thing.

    Actually, the GUID is one *variant* of UUID. Multiple variants are in use. Each UUID contains a bit field that specifies which type (variant) of UUID it is. Call :meth:`PySide.QtCore.QUuid.variant` to discover which type of UUID an instance of :class:`PySide.QtCore.QUuid` contains. It extracts the three most signifcant bits of byte 8 of the 16 bytes. In :class:`PySide.QtCore.QUuid` , byte 8 is ``QUuid::data4[0]`` . If you create instances of :class:`PySide.QtCore.QUuid` using the constructor that accepts all the numeric values as parameters, use the following table to set the three most significant bits of parameter ``b1`` , which becomes ``QUuid::data4[0]`` and contains the variant field in its three most significant bits. In the table, 'x' means *don't care* .

    +----+----+----+---------------------------------------+
    |msb0|msb1|msb2|Variant                                |
    +----+----+----+---------------------------------------+
    |0   |x   |x   |NCS (Network Computing System)         |
    +----+----+----+---------------------------------------+
    |1   |0   |x   |DCE (Distributed Computing Environment)|
    +----+----+----+---------------------------------------+
    |1   |1   |0   |Microsoft (GUID)                       |
    +----+----+----+---------------------------------------+
    |1   |1   |1   |Reserved for future expansion          |
    +----+----+----+---------------------------------------+

    If :meth:`PySide.QtCore.QUuid.variant` returns :attr:`QUuid.DCE<QUuid.Variant>` , the UUID also contains a *version* field in the four most significant bits of ``QUuid::data3`` , and you can call :meth:`PySide.QtCore.QUuid.version` to discover which version your :class:`PySide.QtCore.QUuid` contains. If you create instances of :class:`PySide.QtCore.QUuid` using the constructor that accepts all the numeric values as parameters, use the following table to set the four most significant bits of parameter ``w2`` , which becomes ``QUuid::data3`` and contains the version field in its four most significant bits.

    +----+----+----+----+--------------+
    |msb0|msb1|msb2|msb3|Version       |
    +----+----+----+----+--------------+
    |0   |0   |0   |1   |Time          |
    +----+----+----+----+--------------+
    |0   |0   |1   |0   |Embedded POSIX|
    +----+----+----+----+--------------+
    |0   |0   |1   |1   |Name          |
    +----+----+----+----+--------------+
    |0   |1   |0   |0   |Random        |
    +----+----+----+----+--------------+

    The field layouts for the DCE versions listed in the table above are specified in the Network Working Group UUID Specification.

    Most platforms provide a tool for generating new UUIDs, e.g. ``uuidgen`` and ``guidgen`` . You can also use :meth:`PySide.QtCore.QUuid.createUuid` . UUIDs generated by :meth:`PySide.QtCore.QUuid.createUuid` are of the random type. Their :attr:`QUuid.Version` bits are set to :attr:`QUuid.Random<QUuid.Version>` , and their :attr:`QUuid.Variant` bits are set to :attr:`QUuid.DCE<QUuid.Variant>` . The rest of the UUID is composed of random numbers. Theoretically, this means there is a small chance that a UUID generated by :meth:`PySide.QtCore.QUuid.createUuid` will not be unique. But it is a *very* small chance.

    UUIDs can be constructed from numeric values or from strings, or using the static :meth:`PySide.QtCore.QUuid.createUuid` function. They can be converted to a string with :meth:`PySide.QtCore.QUuid.toString` . UUIDs have a :meth:`PySide.QtCore.QUuid.variant` and a :meth:`PySide.QtCore.QUuid.version` , and null UUIDs return true from :meth:`PySide.QtCore.QUuid.isNull` .


.. class:: QUuid()
           QUuid(arg__1)
           QUuid(QUuid)
           QUuid(arg__1)
           QUuid(l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)

    :param b1: :class:`PySide.QtCore.uchar`
    :param b2: :class:`PySide.QtCore.uchar`
    :param b3: :class:`PySide.QtCore.uchar`
    :param b4: :class:`PySide.QtCore.uchar`
    :param QUuid: :class:`PySide.QtCore.QUuid`
    :param l: :class:`PySide.QtCore.uint`
    :param b5: :class:`PySide.QtCore.uchar`
    :param b6: :class:`PySide.QtCore.uchar`
    :param b7: :class:`PySide.QtCore.uchar`
    :param b8: :class:`PySide.QtCore.uchar`
    :param arg__1: unicode
    :param w1: :class:`PySide.QtCore.ushort`
    :param w2: :class:`PySide.QtCore.ushort`

    Creates the null UUID. :meth:`PySide.QtCore.QUuid.toString` will output the null UUID as "{00000000-0000-0000-0000-000000000000}".


    Creates a :class:`PySide.QtCore.QUuid` object from the string ``text`` , which must be formatted as five hex fields separated by '-', e.g., "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is created. See :meth:`PySide.QtCore.QUuid.toString` for an explanation of how the five hex fields map to the public data members in :class:`PySide.QtCore.QUuid` .

    .. seealso::  :meth:`PySide.QtCore.QUuid.toString`  :meth:`PySide.QtCore.QUuid.QUuid` 




    Creates a UUID with the value specified by the parameters, ``l`` , ``w1`` , ``w2`` , ``b1`` , ``b2`` , ``b3`` , ``b4`` , ``b5`` , ``b6`` , ``b7`` , ``b8`` .

    Example:

    ::

        # {67C8770B-44F1-410A-AB9A-F9B5446F13EE}
        IID_MyInterface = QUuid(0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a, 0xf9, 0xb5, 0x44, 0x6f, 0x13, 0xee)



.. attribute:: PySide.QtCore.QUuid.Variant

    This enum defines the values used in the :class:`variant field<~PySide.QtCore.Variant field>` of the UUID. The value in the variant field determines the layout of the 128-bit value.

    +----------------+----------------------------------------------------------------------------------+
    |Constant        |Description                                                                       |
    +================+==================================================================================+
    |QUuid.VarUnknown|Variant is unknown                                                                |
    +----------------+----------------------------------------------------------------------------------+
    |QUuid.NCS       |Reserved for NCS (Network Computing System) backward compatibility                |
    +----------------+----------------------------------------------------------------------------------+
    |QUuid.DCE       |Distributed Computing Environment, the scheme used by :class:`PySide.QtCore.QUuid`|
    +----------------+----------------------------------------------------------------------------------+
    |QUuid.Microsoft |Reserved for Microsoft backward compatibility (GUID)                              |
    +----------------+----------------------------------------------------------------------------------+
    |QUuid.Reserved  |Reserved for future definition                                                    |
    +----------------+----------------------------------------------------------------------------------+


.. attribute:: PySide.QtCore.QUuid.Version

    This enum defines the values used in the :class:`version field<~PySide.QtCore.Version field>` of the UUID. The version field is meaningful only if the value in the :class:`variant field<~PySide.QtCore.Variant field>` is :attr:`QUuid.DCE<QUuid.Variant>` .

    +-------------------+-----------------------------------------------------------------------------------------------------------------+
    |Constant           |Description                                                                                                      |
    +===================+=================================================================================================================+
    |QUuid.VerUnknown   |Version is unknown                                                                                               |
    +-------------------+-----------------------------------------------------------------------------------------------------------------+
    |QUuid.Time         |Time-based, by using timestamp, clock sequence, and MAC network card address (if available) for the node sections|
    +-------------------+-----------------------------------------------------------------------------------------------------------------+
    |QUuid.EmbeddedPOSIX|DCE Security version, with embedded POSIX UUIDs                                                                  |
    +-------------------+-----------------------------------------------------------------------------------------------------------------+
    |QUuid.Name         |Name-based, by using values from a name for all sections                                                         |
    +-------------------+-----------------------------------------------------------------------------------------------------------------+
    |QUuid.Random       |Random-based, by using random numbers for all sections                                                           |
    +-------------------+-----------------------------------------------------------------------------------------------------------------+


.. method:: PySide.QtCore.QUuid.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QUuid.__repr__()


    :rtype: :class:`PyObject`







.. staticmethod:: PySide.QtCore.QUuid.createUuid()


    :rtype: :class:`PySide.QtCore.QUuid`




    On any platform other than Windows, this function returns a new UUID with variant :attr:`QUuid.DCE<QUuid.Variant>` and version :attr:`QUuid.Random<QUuid.Version>` . If the /dev/urandom device exists, then the numbers used to construct the UUID will be of cryptographic quality, which will make the UUID unique. Otherwise, the numbers of the UUID will be obtained from the local pseudo-random number generator ( :meth:`~PySide.QtCore.QUuid.qrand` , which is seeded by :meth:`~PySide.QtCore.QUuid.qsrand` ) which is usually not of cryptograhic quality, which means that the UUID can't be guaranteed to be unique.

    On a Windows platform, a GUID is generated, which almost certainly *will* be unique, on this or any other system, networked or not.

    .. seealso::  :meth:`PySide.QtCore.QUuid.variant`  :meth:`PySide.QtCore.QUuid.version` 


.. method:: PySide.QtCore.QUuid.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this is the null UUID {00000000-0000-0000-0000-000000000000}; otherwise returns false.



.. method:: PySide.QtCore.QUuid.__ne__(orig)


    :param orig: :class:`PySide.QtCore.QUuid`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtCore.QUuid` and the ``other``\ :class:`PySide.QtCore.QUuid` are different; otherwise returns false.



.. method:: PySide.QtCore.QUuid.__lt__(other)


    :param other: :class:`PySide.QtCore.QUuid`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtCore.QUuid` has the same :class:`variant field<~PySide.QtCore.Variant field>` as the ``other``\ :class:`PySide.QtCore.QUuid` and is lexicographically *before* the ``other``\ :class:`PySide.QtCore.QUuid` . If the ``other``\ :class:`PySide.QtCore.QUuid` has a different variant field, the return value is determined by comparing the two :attr:`variants<QUuid.Variant>` .

    .. seealso::  :meth:`PySide.QtCore.QUuid.variant` 


.. method:: PySide.QtCore.QUuid.__eq__(orig)


    :param orig: :class:`PySide.QtCore.QUuid`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtCore.QUuid` and the ``other``\ :class:`PySide.QtCore.QUuid` are identical; otherwise returns false.



.. method:: PySide.QtCore.QUuid.__gt__(other)


    :param other: :class:`PySide.QtCore.QUuid`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtCore.QUuid` has the same :class:`variant field<~PySide.QtCore.Variant field>` as the ``other``\ :class:`PySide.QtCore.QUuid` and is lexicographically *after* the ``other``\ :class:`PySide.QtCore.QUuid` . If the ``other``\ :class:`PySide.QtCore.QUuid` has a different variant field, the return value is determined by comparing the two :attr:`variants<QUuid.Variant>` .

    .. seealso::  :meth:`PySide.QtCore.QUuid.variant` 


.. method:: PySide.QtCore.QUuid.toString()


    :rtype: unicode




    Returns the string representation of this :class:`PySide.QtCore.QUuid` . The string is formatted as five hex fields separated by '-' and enclosed in curly braces, i.e., "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where 'x' is a hex digit. From left to right, the five hex fields are obtained from the four public data members in :class:`PySide.QtCore.QUuid` as follows:

    +-------+--------------------+
    |Field #|Source              |
    +-------+--------------------+
    |1      |data1               |
    +-------+--------------------+
    |2      |data2               |
    +-------+--------------------+
    |3      |data3               |
    +-------+--------------------+
    |4      |data4[0] .. data4[1]|
    +-------+--------------------+
    |5      |data4[2] .. data4[7]|
    +-------+--------------------+



.. method:: PySide.QtCore.QUuid.variant()


    :rtype: :attr:`PySide.QtCore.QUuid.Variant`




    Returns the value in the :class:`variant field<~PySide.QtCore.Variant field>` of the UUID. If the return value is :attr:`QUuid.DCE<QUuid.Variant>` , call :meth:`PySide.QtCore.QUuid.version` to see which layout it uses. The null UUID is considered to be of an unknown variant.

    .. seealso::  :meth:`PySide.QtCore.QUuid.version` 


.. method:: PySide.QtCore.QUuid.version()


    :rtype: :attr:`PySide.QtCore.QUuid.Version`




    Returns the :class:`version field<~PySide.QtCore.Version field>` of the UUID, if the UUID's :class:`variant field<~PySide.QtCore.Variant field>` is :attr:`QUuid.DCE<QUuid.Variant>` . Otherwise it returns :attr:`QUuid.VerUnknown<QUuid.Version>` .

    .. seealso::  :meth:`PySide.QtCore.QUuid.variant` 



