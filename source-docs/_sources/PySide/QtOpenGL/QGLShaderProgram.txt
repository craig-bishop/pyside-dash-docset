.. module:: PySide.QtOpenGL
.. _QGLShaderProgram:

QGLShaderProgram
****************

.. inheritance-diagram:: QGLShaderProgram
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addShader<PySide.QtOpenGL.QGLShaderProgram.addShader>` (shader)
*    def :meth:`addShaderFromSourceCode<PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceCode>` (type, source)
*    def :meth:`addShaderFromSourceCode<PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceCode>` (type, source)
*    def :meth:`addShaderFromSourceCode<PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceCode>` (type, source)
*    def :meth:`addShaderFromSourceFile<PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceFile>` (type, fileName)
*    def :meth:`attributeLocation<PySide.QtOpenGL.QGLShaderProgram.attributeLocation>` (name)
*    def :meth:`attributeLocation<PySide.QtOpenGL.QGLShaderProgram.attributeLocation>` (name)
*    def :meth:`attributeLocation<PySide.QtOpenGL.QGLShaderProgram.attributeLocation>` (name)
*    def :meth:`bind<PySide.QtOpenGL.QGLShaderProgram.bind>` ()
*    def :meth:`bindAttributeLocation<PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation>` (name, location)
*    def :meth:`bindAttributeLocation<PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation>` (name, location)
*    def :meth:`bindAttributeLocation<PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation>` (name, location)
*    def :meth:`disableAttributeArray<PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray>` (location)
*    def :meth:`disableAttributeArray<PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray>` (name)
*    def :meth:`enableAttributeArray<PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray>` (location)
*    def :meth:`enableAttributeArray<PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray>` (name)
*    def :meth:`geometryInputType<PySide.QtOpenGL.QGLShaderProgram.geometryInputType>` ()
*    def :meth:`geometryOutputType<PySide.QtOpenGL.QGLShaderProgram.geometryOutputType>` ()
*    def :meth:`geometryOutputVertexCount<PySide.QtOpenGL.QGLShaderProgram.geometryOutputVertexCount>` ()
*    def :meth:`init<PySide.QtOpenGL.QGLShaderProgram.init>` ()
*    def :meth:`isLinked<PySide.QtOpenGL.QGLShaderProgram.isLinked>` ()
*    def :meth:`log<PySide.QtOpenGL.QGLShaderProgram.log>` ()
*    def :meth:`maxGeometryOutputVertices<PySide.QtOpenGL.QGLShaderProgram.maxGeometryOutputVertices>` ()
*    def :meth:`programId<PySide.QtOpenGL.QGLShaderProgram.programId>` ()
*    def :meth:`release<PySide.QtOpenGL.QGLShaderProgram.release>` ()
*    def :meth:`removeAllShaders<PySide.QtOpenGL.QGLShaderProgram.removeAllShaders>` ()
*    def :meth:`removeShader<PySide.QtOpenGL.QGLShaderProgram.removeShader>` (shader)
*    def :meth:`setAttributeArray2D<PySide.QtOpenGL.QGLShaderProgram.setAttributeArray2D>` (location, values[, stride=0])
*    def :meth:`setAttributeArray2D<PySide.QtOpenGL.QGLShaderProgram.setAttributeArray2D>` (name, values[, stride=0])
*    def :meth:`setAttributeArray3D<PySide.QtOpenGL.QGLShaderProgram.setAttributeArray3D>` (location, values[, stride=0])
*    def :meth:`setAttributeArray3D<PySide.QtOpenGL.QGLShaderProgram.setAttributeArray3D>` (name, values[, stride=0])
*    def :meth:`setAttributeArray4D<PySide.QtOpenGL.QGLShaderProgram.setAttributeArray4D>` (location, values[, stride=0])
*    def :meth:`setAttributeArray4D<PySide.QtOpenGL.QGLShaderProgram.setAttributeArray4D>` (name, values[, stride=0])
*    def :meth:`setAttributeBuffer<PySide.QtOpenGL.QGLShaderProgram.setAttributeBuffer>` (location, type, offset, tupleSize[, stride=0])
*    def :meth:`setAttributeBuffer<PySide.QtOpenGL.QGLShaderProgram.setAttributeBuffer>` (name, type, offset, tupleSize[, stride=0])
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, x, y)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, x, y, z)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (location, x, y, z, w)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, value)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, x, y)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, x, y, z)
*    def :meth:`setAttributeValue<PySide.QtOpenGL.QGLShaderProgram.setAttributeValue>` (name, x, y, z, w)
*    def :meth:`setGeometryInputType<PySide.QtOpenGL.QGLShaderProgram.setGeometryInputType>` (inputType)
*    def :meth:`setGeometryOutputType<PySide.QtOpenGL.QGLShaderProgram.setGeometryOutputType>` (outputType)
*    def :meth:`setGeometryOutputVertexCount<PySide.QtOpenGL.QGLShaderProgram.setGeometryOutputVertexCount>` (count)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, color)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, point)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, point)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, size)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, size)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, x, y)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, x, y, z)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (location, x, y, z, w)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, color)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, point)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, point)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, size)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, size)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, value)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, x, y)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, x, y, z)
*    def :meth:`setUniformValue<PySide.QtOpenGL.QGLShaderProgram.setUniformValue>` (name, x, y, z, w)
*    def :meth:`setUniformValueArray2D<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2D>` (location, values)
*    def :meth:`setUniformValueArray2D<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2D>` (name, values)
*    def :meth:`setUniformValueArray2x2<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x2>` (location, values)
*    def :meth:`setUniformValueArray2x2<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x2>` (name, values)
*    def :meth:`setUniformValueArray2x3<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x3>` (location, values)
*    def :meth:`setUniformValueArray2x3<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x3>` (name, values)
*    def :meth:`setUniformValueArray2x4<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x4>` (location, values)
*    def :meth:`setUniformValueArray2x4<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x4>` (name, values)
*    def :meth:`setUniformValueArray3D<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3D>` (location, values)
*    def :meth:`setUniformValueArray3D<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3D>` (name, values)
*    def :meth:`setUniformValueArray3x2<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x2>` (location, values)
*    def :meth:`setUniformValueArray3x2<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x2>` (name, values)
*    def :meth:`setUniformValueArray3x3<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x3>` (location, values)
*    def :meth:`setUniformValueArray3x3<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x3>` (name, values)
*    def :meth:`setUniformValueArray3x4<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x4>` (location, values)
*    def :meth:`setUniformValueArray3x4<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x4>` (name, values)
*    def :meth:`setUniformValueArray4D<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4D>` (location, values)
*    def :meth:`setUniformValueArray4D<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4D>` (name, values)
*    def :meth:`setUniformValueArray4x2<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x2>` (location, values)
*    def :meth:`setUniformValueArray4x2<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x2>` (name, values)
*    def :meth:`setUniformValueArray4x3<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x3>` (location, values)
*    def :meth:`setUniformValueArray4x3<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x3>` (name, values)
*    def :meth:`setUniformValueArray4x4<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x4>` (location, values)
*    def :meth:`setUniformValueArray4x4<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x4>` (name, values)
*    def :meth:`setUniformValueArrayInt<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayInt>` (location, values)
*    def :meth:`setUniformValueArrayInt<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayInt>` (name, values)
*    def :meth:`setUniformValueArrayUint<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayUint>` (location, values)
*    def :meth:`setUniformValueArrayUint<PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayUint>` (name, values)
*    def :meth:`shaders<PySide.QtOpenGL.QGLShaderProgram.shaders>` ()
*    def :meth:`uniformLocation<PySide.QtOpenGL.QGLShaderProgram.uniformLocation>` (name)
*    def :meth:`uniformLocation<PySide.QtOpenGL.QGLShaderProgram.uniformLocation>` (name)
*    def :meth:`uniformLocation<PySide.QtOpenGL.QGLShaderProgram.uniformLocation>` (name)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`link<PySide.QtOpenGL.QGLShaderProgram.link>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`shaderDestroyed<PySide.QtOpenGL.QGLShaderProgram.shaderDestroyed>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`hasOpenGLShaderPrograms<PySide.QtOpenGL.QGLShaderProgram.hasOpenGLShaderPrograms>` ([context=None])


Detailed Description
--------------------



    The :class:`PySide.QtOpenGL.QGLShaderProgram` class allows OpenGL shader programs to be linked and used.

    .. _PySide.QtOpenGL.QGLShaderProgram_introduction:



Introduction
^^^^^^^^^^^^

    This class supports shader programs written in the OpenGL Shading Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).

    :class:`PySide.QtOpenGL.QGLShader` and :class:`PySide.QtOpenGL.QGLShaderProgram` shelter the programmer from the details of compiling and linking vertex and fragment shaders.

    The following example creates a vertex shader program using the supplied source ``code`` . Once compiled and linked, the shader program is activated in the current :class:`PySide.QtOpenGL.QGLContext` by calling :meth:`QGLShaderProgram.bind()<PySide.QtOpenGL.QGLShaderProgram.bind>` :

    ::

        shader = QGLShader(QGLShader.Vertex)
        shader.compileSourceCode(code)

        program = QGLShaderProgram(context)
        program.addShader(shader)
        program.link()

        program.bind()


    .. _PySide.QtOpenGL.QGLShaderProgram_writing-portable-shaders:



Writing portable shaders
^^^^^^^^^^^^^^^^^^^^^^^^

    Shader programs can be difficult to reuse across OpenGL implementations because of varying levels of support for standard vertex attributes and uniform variables. In particular, GLSL/ES lacks all of the standard variables that are present on desktop OpenGL systems: ``gl_Vertex`` , ``gl_Normal`` , ``gl_Color`` , and so on. Desktop OpenGL lacks the variable qualifiers ``highp`` , ``mediump`` , and ``lowp`` .

    The :class:`PySide.QtOpenGL.QGLShaderProgram` class makes the process of writing portable shaders easier by prefixing all shader programs with the following lines on desktop OpenGL:

    ::

                #define highp
                #define mediump
                #define lowp


    This makes it possible to run most GLSL/ES shader programs on desktop systems. The programmer should restrict themselves to just features that are present in GLSL/ES, and avoid standard variable names that only work on the desktop.

    .. _PySide.QtOpenGL.QGLShaderProgram_simple-shader-example:



Simple shader example
^^^^^^^^^^^^^^^^^^^^^

    ::

        program.addShaderFromSourceCode(QGLShader.Vertex,
            "attribute highp vec4 vertex\n" \
            "attribute mediump mat4 matrix\n" \
            "void main(void)\n" \
            "{\n" \
            "   gl_Position = matrix * vertex\n" \
            "}")
        program.addShaderFromSourceCode(QGLShader.Fragment,
            "uniform mediump vec4 color\n" \
            "void main(void)\n" \
            "{\n" \
            "   gl_FragColor = color\n" \
            "}")
        program.link()
        program.bind()

        vertexLocation = program.attributeLocation("vertex")
        matrixLocation = program.attributeLocation("matrix")
        colorLocation = program.uniformLocation("color")


    With the above shader program active, we can draw a green triangle as follows:

    ::

        triangleVertices = (
            60.0f,  10.0f,  0.0f,
            110.0f, 110.0f, 0.0f,
            10.0f,  110.0f, 0.0f)

        color = QColor(0, 255, 0, 255)

        pmvMatrix = QMatrix4x4()
        pmvMatrix.ortho(self.rect())

        program.enableAttributeArray(vertexLocation)
        program.setAttributeArray(vertexLocation, triangleVertices, 3)
        program.setUniformValue(matrixLocation, pmvMatrix)
        program.setUniformValue(colorLocation, color)

        glDrawArrays(GL_TRIANGLES, 0, 3)

        program.disableAttributeArray(vertexLocation)


    .. _PySide.QtOpenGL.QGLShaderProgram_binary-shaders-and-programs:



Binary shaders and programs
^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Binary shaders may be specified using ``glShaderBinary()`` on the return value from :meth:`QGLShader.shaderId()<PySide.QtOpenGL.QGLShader.shaderId>` . The :class:`PySide.QtOpenGL.QGLShader` instance containing the binary can then be added to the shader program with :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` and linked in the usual fashion with :meth:`PySide.QtOpenGL.QGLShaderProgram.link` .

    Binary programs may be specified using ``glProgramBinaryOES()`` on the return value from :meth:`PySide.QtOpenGL.QGLShaderProgram.programId` . Then the application should call :meth:`PySide.QtOpenGL.QGLShaderProgram.link` , which will notice that the program has already been specified and linked, allowing other operations to be performed on the shader program.

    .. seealso::  :class:`PySide.QtOpenGL.QGLShader` 

.. class:: QGLShaderProgram([parent=None])
           QGLShaderProgram(context[, parent=None])

    :param parent: :class:`PySide.QtCore.QObject`
    :param context: :class:`PySide.QtOpenGL.QGLContext`

    Constructs a new shader program and attaches it to ``parent`` . The program will be invalid until :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` is called.

    The shader program will be associated with the current :class:`PySide.QtOpenGL.QGLContext` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` 

    Constructs a new shader program and attaches it to ``parent`` . The program will be invalid until :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` is called.

    The shader program will be associated with ``context`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` 

.. method:: PySide.QtOpenGL.QGLShaderProgram.addShader(shader)


    :param shader: :class:`PySide.QtOpenGL.QGLShader`
    :rtype: :class:`PySide.QtCore.bool`




    Adds a compiled ``shader`` to this shader program. Returns true if the shader could be added, or false otherwise.

    Ownership of the ``shader`` object remains with the caller. It will not be deleted when this :class:`PySide.QtOpenGL.QGLShaderProgram` instance is deleted. This allows the caller to add the same shader to multiple shader programs.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceCode`  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceFile`  :meth:`PySide.QtOpenGL.QGLShaderProgram.removeShader`  :meth:`PySide.QtOpenGL.QGLShaderProgram.link`  :meth:`PySide.QtOpenGL.QGLShaderProgram.removeAllShaders` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceCode(type, source)


    :param type: :class:`PySide.QtOpenGL.QGLShader.ShaderType`
    :param source: unicode
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceCode(type, source)


    :param type: :class:`PySide.QtOpenGL.QGLShader.ShaderType`
    :param source: str
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceCode(type, source)


    :param type: :class:`PySide.QtOpenGL.QGLShader.ShaderType`
    :param source: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtOpenGL.QGLShaderProgram.addShaderFromSourceFile(type, fileName)


    :param type: :class:`PySide.QtOpenGL.QGLShader.ShaderType`
    :param fileName: unicode
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtOpenGL.QGLShaderProgram.attributeLocation(name)


    :param name: str
    :rtype: :class:`PySide.QtCore.int`




    Returns the location of the attribute ``name`` within this shader program's parameter list. Returns -1 if ``name`` is not a valid attribute for this shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.uniformLocation`  :meth:`PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.attributeLocation(name)


    :param name: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Returns the location of the attribute ``name`` within this shader program's parameter list. Returns -1 if ``name`` is not a valid attribute for this shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.uniformLocation`  :meth:`PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.attributeLocation(name)


    :param name: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Returns the location of the attribute ``name`` within this shader program's parameter list. Returns -1 if ``name`` is not a valid attribute for this shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.uniformLocation`  :meth:`PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.bind()


    :rtype: :class:`PySide.QtCore.bool`




    Binds this shader program to the active :class:`PySide.QtOpenGL.QGLContext` and makes it the current shader program. Any previously bound shader program is released. This is equivalent to calling ``glUseProgram()`` on :meth:`PySide.QtOpenGL.QGLShaderProgram.programId` . Returns true if the program was successfully bound; false otherwise. If the shader program has not yet been linked, or it needs to be re-linked, this function will call :meth:`PySide.QtOpenGL.QGLShaderProgram.link` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.link`  :meth:`PySide.QtOpenGL.QGLShaderProgram.release` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation(name, location)


    :param name: str
    :param location: :class:`PySide.QtCore.int`




    Binds the attribute ``name`` to the specified ``location`` . This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.

    When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.attributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation(name, location)


    :param name: :class:`PySide.QtCore.QByteArray`
    :param location: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Binds the attribute ``name`` to the specified ``location`` . This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.

    When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.attributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.bindAttributeLocation(name, location)


    :param name: unicode
    :param location: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Binds the attribute ``name`` to the specified ``location`` . This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.

    When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.attributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray(location)


    :param location: :class:`PySide.QtCore.int`




    Disables the vertex array at ``location`` in this shader program that was enabled by a previous call to :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray(name)


    :param name: str




    This is an overloaded function.

    Disables the vertex array called ``name`` in this shader program that was enabled by a previous call to :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray(location)


    :param location: :class:`PySide.QtCore.int`




    Enables the vertex array at ``location`` in this shader program so that the value set by :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray` on ``location`` will be used by the shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray(name)


    :param name: str




    This is an overloaded function.

    Enables the vertex array called ``name`` in this shader program so that the value set by :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray` on ``name`` will be used by the shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.geometryInputType()


    :rtype: :class:`PySide.QtOpenGL.GLenum`




    Returns the geometry shader input type, if active.

    This parameter takes effect the next time the program is linked.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setGeometryInputType` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.geometryOutputType()


    :rtype: :class:`PySide.QtOpenGL.GLenum`




    Returns the geometry shader output type, if active.

    This parameter takes effect the next time the program is linked.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setGeometryOutputType` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.geometryOutputVertexCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the maximum number of vertices the current geometry shader program will produce, if active.

    This parameter takes effect the ntext time the program is linked.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setGeometryOutputVertexCount` 


.. staticmethod:: PySide.QtOpenGL.QGLShaderProgram.hasOpenGLShaderPrograms([context=None])


    :param context: :class:`PySide.QtOpenGL.QGLContext`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if shader programs written in the OpenGL Shading Language (GLSL) are supported on this system; false otherwise.

    The ``context`` is used to resolve the GLSL extensions. If ``context`` is null, then :meth:`QGLContext.currentContext()<PySide.QtOpenGL.QGLContext.currentContext>` is used.



.. method:: PySide.QtOpenGL.QGLShaderProgram.init()


    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtOpenGL.QGLShaderProgram.isLinked()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this shader program has been linked; false otherwise.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.link` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.link()


    :rtype: :class:`PySide.QtCore.bool`




    Links together the shaders that were added to this program with :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` . Returns true if the link was successful or false otherwise. If the link failed, the error messages can be retrieved with :meth:`PySide.QtOpenGL.QGLShaderProgram.log` .

    Subclasses can override this function to initialize attributes and uniform variables for use in specific shader programs.

    If the shader program was already linked, calling this function again will force it to be re-linked.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader`  :meth:`PySide.QtOpenGL.QGLShaderProgram.log` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.log()


    :rtype: unicode




    Returns the errors and warnings that occurred during the last :meth:`PySide.QtOpenGL.QGLShaderProgram.link` or :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` with explicitly specified source code.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.link` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.maxGeometryOutputVertices()


    :rtype: :class:`PySide.QtCore.int`




    Returns the hardware limit for how many vertices a geometry shader can output.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setGeometryOutputVertexCount` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.programId()


    :rtype: :class:`PySide.QtOpenGL.GLuint`




    Returns the OpenGL identifier associated with this shader program.

    .. seealso::  :meth:`QGLShader.shaderId()<PySide.QtOpenGL.QGLShader.shaderId>` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.release()






    Releases the active shader program from the current :class:`PySide.QtOpenGL.QGLContext` . This is equivalent to calling ``glUseProgram(0)`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.bind` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.removeAllShaders()






    Removes all of the shaders that were added to this program previously. The :class:`PySide.QtOpenGL.QGLShader` objects for the shaders will not be deleted if they were constructed externally. :class:`PySide.QtOpenGL.QGLShader` objects that are constructed internally by :class:`PySide.QtOpenGL.QGLShaderProgram` will be deleted.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader`  :meth:`PySide.QtOpenGL.QGLShaderProgram.removeShader` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.removeShader(shader)


    :param shader: :class:`PySide.QtOpenGL.QGLShader`




    Removes ``shader`` from this shader program. The object is not deleted.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader`  :meth:`PySide.QtOpenGL.QGLShaderProgram.link`  :meth:`PySide.QtOpenGL.QGLShaderProgram.removeAllShaders` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeArray2D(name, values[, stride=0])


    :param name: str
    :param values: :class:`PySide.QtGui.QVector2D`
    :param stride: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Sets an array of 2D vertex ``values`` on the attribute called ``name`` in this shader program. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in ``values`` .

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on ``name`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``name`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeArray2D(location, values[, stride=0])


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QVector2D`
    :param stride: :class:`PySide.QtCore.int`




    Sets an array of 2D vertex ``values`` on the attribute at ``location`` in this shader program. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in ``values`` .

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on the ``location`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``location`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeArray3D(location, values[, stride=0])


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QVector3D`
    :param stride: :class:`PySide.QtCore.int`




    Sets an array of 3D vertex ``values`` on the attribute at ``location`` in this shader program. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in ``values`` .

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on the ``location`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``location`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeArray3D(name, values[, stride=0])


    :param name: str
    :param values: :class:`PySide.QtGui.QVector3D`
    :param stride: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Sets an array of 3D vertex ``values`` on the attribute called ``name`` in this shader program. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in ``values`` .

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on ``name`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``name`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeArray4D(location, values[, stride=0])


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QVector4D`
    :param stride: :class:`PySide.QtCore.int`




    Sets an array of 4D vertex ``values`` on the attribute at ``location`` in this shader program. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in ``values`` .

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on the ``location`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``location`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeArray4D(name, values[, stride=0])


    :param name: str
    :param values: :class:`PySide.QtGui.QVector4D`
    :param stride: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Sets an array of 4D vertex ``values`` on the attribute called ``name`` in this shader program. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in ``values`` .

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on ``name`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``name`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue`  :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray`  :meth:`PySide.QtOpenGL.QGLShaderProgram.disableAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeBuffer(name, type, offset, tupleSize[, stride=0])


    :param name: str
    :param type: :class:`PySide.QtOpenGL.GLenum`
    :param offset: :class:`PySide.QtCore.int`
    :param tupleSize: :class:`PySide.QtCore.int`
    :param stride: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Sets an array of vertex values on the attribute called ``name`` in this shader program, starting at a specific ``offset`` in the currently bound vertex buffer. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in the value array.

    The ``type`` indicates the type of elements in the vertex value array, usually ``GL_FLOAT`` , ``GL_UNSIGNED_BYTE`` , etc. The ``tupleSize`` indicates the number of components per vertex: 1, 2, 3, or 4.

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on the ``name`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``name`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeBuffer(location, type, offset, tupleSize[, stride=0])


    :param location: :class:`PySide.QtCore.int`
    :param type: :class:`PySide.QtOpenGL.GLenum`
    :param offset: :class:`PySide.QtCore.int`
    :param tupleSize: :class:`PySide.QtCore.int`
    :param stride: :class:`PySide.QtCore.int`




    Sets an array of vertex values on the attribute at ``location`` in this shader program, starting at a specific ``offset`` in the currently bound vertex buffer. The ``stride`` indicates the number of bytes between vertices. A default ``stride`` value of zero indicates that the vertices are densely packed in the value array.

    The ``type`` indicates the type of elements in the vertex value array, usually ``GL_FLOAT`` , ``GL_UNSIGNED_BYTE`` , etc. The ``tupleSize`` indicates the number of components per vertex: 1, 2, 3, or 4.

    The array will become active when :meth:`PySide.QtOpenGL.QGLShaderProgram.enableAttributeArray` is called on the ``location`` . Otherwise the value specified with :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` for ``location`` will be used.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeArray` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, x, y, z, w)


    :param location: :class:`PySide.QtCore.int`
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`
    :param w: :class:`PySide.QtOpenGL.GLfloat`




    Sets the attribute at ``location`` in the current context to the 4D vector (``x`` , ``y`` , ``z`` , ``w`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, x, y, z)


    :param location: :class:`PySide.QtCore.int`
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`




    Sets the attribute at ``location`` in the current context to the 3D vector (``x`` , ``y`` , ``z`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QColor`




    Sets the attribute at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, x, y)


    :param location: :class:`PySide.QtCore.int`
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`




    Sets the attribute at ``location`` in the current context to the 2D vector (``x`` , ``y`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector4D`




    Sets the attribute at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector2D`




    Sets the attribute at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector3D`




    Sets the attribute at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtOpenGL.GLfloat`




    Sets the attribute at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, x, y, z)


    :param name: str
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to the 3D vector (``x`` , ``y`` , ``z`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, x, y)


    :param name: str
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to the 2D vector (``x`` , ``y`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, x, y, z, w)


    :param name: str
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`
    :param w: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to the 4D vector (``x`` , ``y`` , ``z`` , ``w`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QVector3D`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QVector4D`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QVector2D`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setAttributeValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QColor`




    This is an overloaded function.

    Sets the attribute called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setUniformValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setGeometryInputType(inputType)


    :param inputType: :class:`PySide.QtOpenGL.GLenum`




    Sets the input type from ``inputType`` .

    This parameter takes effect the next time the program is linked.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.geometryInputType` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setGeometryOutputType(outputType)


    :param outputType: :class:`PySide.QtOpenGL.GLenum`




    Sets the output type from the geometry shader, if active, to ``outputType`` .

    This parameter takes effect the next time the program is linked.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.geometryOutputType` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setGeometryOutputVertexCount(count)


    :param count: :class:`PySide.QtCore.int`




    Sets the maximum number of vertices the current geometry shader program will produce, if active, to ``count`` .

    This parameter takes effect the next time the program is linked.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.geometryOutputVertexCount` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtOpenGL.GLuint`




    Sets the uniform variable at ``location`` in the current context to ``value`` . This function should be used when setting sampler values.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, color)


    :param location: :class:`PySide.QtCore.int`
    :param color: :class:`PySide.QtGui.QColor`




    Sets the uniform variable at ``location`` in the current context to the red, green, blue, and alpha components of ``color`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix2x2`




    Sets the uniform variable at ``location`` in the current context to a 2x2 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix2x3`




    Sets the uniform variable at ``location`` in the current context to a 2x3 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtOpenGL.GLint`




    Sets the uniform variable at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, x, y, z)


    :param location: :class:`PySide.QtCore.int`
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`




    Sets the uniform variable at ``location`` in the current context to the 3D vector (``x`` , ``y`` , ``z`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, x, y, z, w)


    :param location: :class:`PySide.QtCore.int`
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`
    :param w: :class:`PySide.QtOpenGL.GLfloat`




    Sets the uniform variable at ``location`` in the current context to the 4D vector (``x`` , ``y`` , ``z`` , ``w`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, x, y)


    :param location: :class:`PySide.QtCore.int`
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`




    Sets the uniform variable at ``location`` in the current context to the 2D vector (``x`` , ``y`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix2x4`




    Sets the uniform variable at ``location`` in the current context to a 2x4 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtOpenGL.GLfloat`




    Sets the uniform variable at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix3x3`




    Sets the uniform variable at ``location`` in the current context to a 3x3 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, size)


    :param location: :class:`PySide.QtCore.int`
    :param size: :class:`PySide.QtCore.QSizeF`




    Sets the uniform variable at ``location`` in the current context to the width and height of the given ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix3x2`




    Sets the uniform variable at ``location`` in the current context to a 3x2 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QTransform`




    Sets the uniform variable at ``location`` in the current context to a 3x3 transformation matrix ``value`` that is specified as a :class:`PySide.QtGui.QTransform` value.

    To set a :class:`PySide.QtGui.QTransform` value as a 4x4 matrix in a shader, use ``setUniformValue(location, QMatrix4x4(value))`` .



.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector3D`




    Sets the uniform variable at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector4D`




    Sets the uniform variable at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QVector2D`




    Sets the uniform variable at ``location`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, size)


    :param location: :class:`PySide.QtCore.int`
    :param size: :class:`PySide.QtCore.QSize`




    Sets the uniform variable at ``location`` in the current context to the width and height of the given ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, point)


    :param location: :class:`PySide.QtCore.int`
    :param point: :class:`PySide.QtCore.QPointF`




    Sets the uniform variable at ``location`` in the current context to the x and y coordinates of ``point`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix3x4`




    Sets the uniform variable at ``location`` in the current context to a 3x4 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix4x3`




    Sets the uniform variable at ``location`` in the current context to a 4x3 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, point)


    :param location: :class:`PySide.QtCore.int`
    :param point: :class:`PySide.QtCore.QPoint`




    Sets the uniform variable at ``location`` in the current context to the x and y coordinates of ``point`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix4x2`




    Sets the uniform variable at ``location`` in the current context to a 4x2 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(location, value)


    :param location: :class:`PySide.QtCore.int`
    :param value: :class:`PySide.QtGui.QMatrix4x4`




    Sets the uniform variable at ``location`` in the current context to a 4x4 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtOpenGL.GLint`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix2x4`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 2x4 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtOpenGL.GLuint`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to ``value`` . This function should be used when setting sampler values.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix2x2`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 2x2 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix2x3`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 2x3 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, color)


    :param name: str
    :param color: :class:`PySide.QtGui.QColor`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to the red, green, blue, and alpha components of ``color`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, x, y, z, w)


    :param name: str
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`
    :param w: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to the 4D vector (``x`` , ``y`` , ``z`` , ``w`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, x, y, z)


    :param name: str
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`
    :param z: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to the 3D vector (``x`` , ``y`` , ``z`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, x, y)


    :param name: str
    :param x: :class:`PySide.QtOpenGL.GLfloat`
    :param y: :class:`PySide.QtOpenGL.GLfloat`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to the 2D vector (``x`` , ``y`` ).

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QVector4D`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, size)


    :param name: str
    :param size: :class:`PySide.QtCore.QSize`




    This is an overloaded function.

    Sets the uniform variable associated with ``name`` in the current context to the width and height of the given ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, point)


    :param name: str
    :param point: :class:`PySide.QtCore.QPointF`




    This is an overloaded function.

    Sets the uniform variable associated with ``name`` in the current context to the x and y coordinates of ``point`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, size)


    :param name: str
    :param size: :class:`PySide.QtCore.QSizeF`




    This is an overloaded function.

    Sets the uniform variable associated with ``name`` in the current context to the width and height of the given ``size`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QVector2D`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QVector3D`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QTransform`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 3x3 transformation matrix ``value`` that is specified as a :class:`PySide.QtGui.QTransform` value.

    To set a :class:`PySide.QtGui.QTransform` value as a 4x4 matrix in a shader, use ``setUniformValue(name, QMatrix4x4(value))`` .



.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix3x2`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 3x2 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix3x3`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 3x3 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix3x4`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 3x4 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix4x2`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 4x2 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, point)


    :param name: str
    :param point: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Sets the uniform variable associated with ``name`` in the current context to the x and y coordinates of ``point`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix4x3`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 4x3 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValue(name, value)


    :param name: str
    :param value: :class:`PySide.QtGui.QMatrix4x4`




    This is an overloaded function.

    Sets the uniform variable called ``name`` in the current context to a 4x4 matrix ``value`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2D(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QVector2D`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 2D vector elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2D(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QVector2D`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 2D vector elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x2(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix2x2`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 2x2 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x2(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix2x2`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 2x2 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x3(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix2x3`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 2x3 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x3(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix2x3`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 2x3 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x4(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix2x4`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 2x4 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray2x4(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix2x4`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 2x4 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3D(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QVector3D`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 3D vector elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3D(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QVector3D`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 3D vector elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x2(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix3x2`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 3x2 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x2(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix3x2`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 3x2 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x3(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix3x3`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 3x3 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x3(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix3x3`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 3x3 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x4(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix3x4`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 3x4 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray3x4(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix3x4`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 3x4 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4D(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QVector4D`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 4D vector elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4D(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QVector4D`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 4D vector elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x2(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix4x2`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 4x2 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x2(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix4x2`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 4x2 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x3(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix4x3`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 4x3 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x3(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix4x3`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 4x3 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x4(name, values)


    :param name: str
    :param values: :class:`PySide.QtGui.QMatrix4x4`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` 4x4 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArray4x4(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtGui.QMatrix4x4`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` 4x4 matrix elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayInt(name, values)


    :param name: str
    :param values: :class:`PySide.QtOpenGL.GLint`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayInt(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtOpenGL.GLint`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` elements of ``values`` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayUint(name, values)


    :param name: str
    :param values: :class:`PySide.QtOpenGL.GLuint`




    This is an overloaded function.

    Sets the uniform variable array called ``name`` in the current context to the ``count`` elements of ``values`` . This overload should be used when setting an array of sampler values.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.setUniformValueArrayUint(location, values)


    :param location: :class:`PySide.QtCore.int`
    :param values: :class:`PySide.QtOpenGL.GLuint`




    Sets the uniform variable array at ``location`` in the current context to the ``count`` elements of ``values`` . This overload should be used when setting an array of sampler values.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.setAttributeValue` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.shaderDestroyed()








.. method:: PySide.QtOpenGL.QGLShaderProgram.shaders()


    :rtype: 




    Returns a list of all shaders that have been added to this shader program using :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader` .

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.addShader`  :meth:`PySide.QtOpenGL.QGLShaderProgram.removeShader` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.uniformLocation(name)


    :param name: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Returns the location of the uniform variable ``name`` within this shader program's parameter list. Returns -1 if ``name`` is not a valid uniform variable for this shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.attributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.uniformLocation(name)


    :param name: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Returns the location of the uniform variable ``name`` within this shader program's parameter list. Returns -1 if ``name`` is not a valid uniform variable for this shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.attributeLocation` 


.. method:: PySide.QtOpenGL.QGLShaderProgram.uniformLocation(name)


    :param name: str
    :rtype: :class:`PySide.QtCore.int`




    Returns the location of the uniform variable ``name`` within this shader program's parameter list. Returns -1 if ``name`` is not a valid uniform variable for this shader program.

    .. seealso::  :meth:`PySide.QtOpenGL.QGLShaderProgram.attributeLocation` 



