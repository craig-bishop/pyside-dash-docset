.. module:: PySide.QtGui
.. _QProxyModel:

QProxyModel
***********

.. inheritance-diagram:: QProxyModel
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`connectToModel<PySide.QtGui.QProxyModel.connectToModel>` (model)
*    def :meth:`disconnectFromModel<PySide.QtGui.QProxyModel.disconnectFromModel>` (model)
*    def :meth:`model<PySide.QtGui.QProxyModel.model>` ()
*    def :meth:`setProxyModel<PySide.QtGui.QProxyModel.setProxyModel>` (source_index)
*    def :meth:`setSourceModel<PySide.QtGui.QProxyModel.setSourceModel>` (proxy_index)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`setModel<PySide.QtGui.QProxyModel.setModel>` (model)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QProxyModel` class provides support for processing data passed between another model and a view.

    If you want to do filtering and sorting, see :class:`PySide.QtGui.QSortFilterProxyModel` .

    Proxy models provide a standard model interface that can be used to manipulate the data retrieved through an underlying model. They can be used to perform operations such as sorting and filtering on the data obtained without changing the contents of the model.

    Just as with subclasses of :class:`PySide.QtGui.QAbstractItemView` , :class:`PySide.QtGui.QProxyModel` provides the :meth:`PySide.QtGui.QProxyModel.setModel` function that is used to specify the model to be acted on by the proxy. Views can be connected to either the underlying model or the proxy model with :meth:`QAbstractItemView.setModel()<PySide.QtGui.QAbstractItemView.setModel>` .

    Since views rely on the information provided in model indexes to identify items of data from models, and to position these items in some visual representation, proxy models must create their own model indexes instead of supplying model indexes from their underlying models.

    .. seealso::  :ref:`Model/View Programming<model-view-programming.html>`  :class:`PySide.QtCore.QAbstractItemModel` 

.. class:: QProxyModel([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a proxy model with the given ``parent`` .


.. method:: PySide.QtGui.QProxyModel.connectToModel(model)


    :param model: :class:`PySide.QtCore.QAbstractItemModel`




    Connect to all the signals emitted by given ``model`` .



.. method:: PySide.QtGui.QProxyModel.disconnectFromModel(model)


    :param model: :class:`PySide.QtCore.QAbstractItemModel`




    Disconnect from all the signals emitted by the given ``model`` .



.. method:: PySide.QtGui.QProxyModel.model()


    :rtype: :class:`PySide.QtCore.QAbstractItemModel`




    Returns the model that contains the data that is available through the proxy model.

    .. seealso::  :meth:`PySide.QtGui.QProxyModel.setModel` 


.. method:: PySide.QtGui.QProxyModel.setModel(model)


    :param model: :class:`PySide.QtCore.QAbstractItemModel`




    Sets the given ``model`` to be processed by the proxy model.

    .. seealso::  :meth:`PySide.QtGui.QProxyModel.model` 


.. method:: PySide.QtGui.QProxyModel.setProxyModel(source_index)


    :param source_index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Change the model pointer in the given ``source_index`` to point to the proxy model.



.. method:: PySide.QtGui.QProxyModel.setSourceModel(proxy_index)


    :param proxy_index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Change the model pointer in the given ``proxy_index`` to point to the source model.




