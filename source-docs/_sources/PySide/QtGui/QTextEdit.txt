.. module:: PySide.QtGui
.. _QTextEdit:

QTextEdit
*********

.. inheritance-diagram:: QTextEdit
    :parts: 2

**Inherited by:** :ref:`QTextBrowser`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`acceptRichText<PySide.QtGui.QTextEdit.acceptRichText>` ()
*    def :meth:`alignment<PySide.QtGui.QTextEdit.alignment>` ()
*    def :meth:`anchorAt<PySide.QtGui.QTextEdit.anchorAt>` (pos)
*    def :meth:`autoFormatting<PySide.QtGui.QTextEdit.autoFormatting>` ()
*    def :meth:`canPaste<PySide.QtGui.QTextEdit.canPaste>` ()
*    def :meth:`createStandardContextMenu<PySide.QtGui.QTextEdit.createStandardContextMenu>` ()
*    def :meth:`createStandardContextMenu<PySide.QtGui.QTextEdit.createStandardContextMenu>` (position)
*    def :meth:`currentCharFormat<PySide.QtGui.QTextEdit.currentCharFormat>` ()
*    def :meth:`currentFont<PySide.QtGui.QTextEdit.currentFont>` ()
*    def :meth:`cursorForPosition<PySide.QtGui.QTextEdit.cursorForPosition>` (pos)
*    def :meth:`cursorRect<PySide.QtGui.QTextEdit.cursorRect>` ()
*    def :meth:`cursorRect<PySide.QtGui.QTextEdit.cursorRect>` (cursor)
*    def :meth:`cursorWidth<PySide.QtGui.QTextEdit.cursorWidth>` ()
*    def :meth:`document<PySide.QtGui.QTextEdit.document>` ()
*    def :meth:`documentTitle<PySide.QtGui.QTextEdit.documentTitle>` ()
*    def :meth:`ensureCursorVisible<PySide.QtGui.QTextEdit.ensureCursorVisible>` ()
*    def :meth:`extraSelections<PySide.QtGui.QTextEdit.extraSelections>` ()
*    def :meth:`find<PySide.QtGui.QTextEdit.find>` (exp[, options=0])
*    def :meth:`fontFamily<PySide.QtGui.QTextEdit.fontFamily>` ()
*    def :meth:`fontItalic<PySide.QtGui.QTextEdit.fontItalic>` ()
*    def :meth:`fontPointSize<PySide.QtGui.QTextEdit.fontPointSize>` ()
*    def :meth:`fontUnderline<PySide.QtGui.QTextEdit.fontUnderline>` ()
*    def :meth:`fontWeight<PySide.QtGui.QTextEdit.fontWeight>` ()
*    def :meth:`isReadOnly<PySide.QtGui.QTextEdit.isReadOnly>` ()
*    def :meth:`isUndoRedoEnabled<PySide.QtGui.QTextEdit.isUndoRedoEnabled>` ()
*    def :meth:`lineWrapColumnOrWidth<PySide.QtGui.QTextEdit.lineWrapColumnOrWidth>` ()
*    def :meth:`lineWrapMode<PySide.QtGui.QTextEdit.lineWrapMode>` ()
*    def :meth:`mergeCurrentCharFormat<PySide.QtGui.QTextEdit.mergeCurrentCharFormat>` (modifier)
*    def :meth:`moveCursor<PySide.QtGui.QTextEdit.moveCursor>` (operation[, mode=QTextCursor.MoveAnchor])
*    def :meth:`overwriteMode<PySide.QtGui.QTextEdit.overwriteMode>` ()
*    def :meth:`print_<PySide.QtGui.QTextEdit.print_>` (printer)
*    def :meth:`setAcceptRichText<PySide.QtGui.QTextEdit.setAcceptRichText>` (accept)
*    def :meth:`setAutoFormatting<PySide.QtGui.QTextEdit.setAutoFormatting>` (features)
*    def :meth:`setCurrentCharFormat<PySide.QtGui.QTextEdit.setCurrentCharFormat>` (format)
*    def :meth:`setCursorWidth<PySide.QtGui.QTextEdit.setCursorWidth>` (width)
*    def :meth:`setDocument<PySide.QtGui.QTextEdit.setDocument>` (document)
*    def :meth:`setDocumentTitle<PySide.QtGui.QTextEdit.setDocumentTitle>` (title)
*    def :meth:`setExtraSelections<PySide.QtGui.QTextEdit.setExtraSelections>` (selections)
*    def :meth:`setLineWrapColumnOrWidth<PySide.QtGui.QTextEdit.setLineWrapColumnOrWidth>` (w)
*    def :meth:`setLineWrapMode<PySide.QtGui.QTextEdit.setLineWrapMode>` (mode)
*    def :meth:`setOverwriteMode<PySide.QtGui.QTextEdit.setOverwriteMode>` (overwrite)
*    def :meth:`setReadOnly<PySide.QtGui.QTextEdit.setReadOnly>` (ro)
*    def :meth:`setTabChangesFocus<PySide.QtGui.QTextEdit.setTabChangesFocus>` (b)
*    def :meth:`setTabStopWidth<PySide.QtGui.QTextEdit.setTabStopWidth>` (width)
*    def :meth:`setTextCursor<PySide.QtGui.QTextEdit.setTextCursor>` (cursor)
*    def :meth:`setTextInteractionFlags<PySide.QtGui.QTextEdit.setTextInteractionFlags>` (flags)
*    def :meth:`setUndoRedoEnabled<PySide.QtGui.QTextEdit.setUndoRedoEnabled>` (enable)
*    def :meth:`setWordWrapMode<PySide.QtGui.QTextEdit.setWordWrapMode>` (policy)
*    def :meth:`tabChangesFocus<PySide.QtGui.QTextEdit.tabChangesFocus>` ()
*    def :meth:`tabStopWidth<PySide.QtGui.QTextEdit.tabStopWidth>` ()
*    def :meth:`textBackgroundColor<PySide.QtGui.QTextEdit.textBackgroundColor>` ()
*    def :meth:`textColor<PySide.QtGui.QTextEdit.textColor>` ()
*    def :meth:`textCursor<PySide.QtGui.QTextEdit.textCursor>` ()
*    def :meth:`textInteractionFlags<PySide.QtGui.QTextEdit.textInteractionFlags>` ()
*    def :meth:`toHtml<PySide.QtGui.QTextEdit.toHtml>` ()
*    def :meth:`toPlainText<PySide.QtGui.QTextEdit.toPlainText>` ()
*    def :meth:`wordWrapMode<PySide.QtGui.QTextEdit.wordWrapMode>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`canInsertFromMimeData<PySide.QtGui.QTextEdit.canInsertFromMimeData>` (source)
*    def :meth:`createMimeDataFromSelection<PySide.QtGui.QTextEdit.createMimeDataFromSelection>` ()
*    def :meth:`insertFromMimeData<PySide.QtGui.QTextEdit.insertFromMimeData>` (source)
*    def :meth:`loadResource<PySide.QtGui.QTextEdit.loadResource>` (type, name)


Slots
^^^^^
.. container:: function_list

*    def :meth:`append<PySide.QtGui.QTextEdit.append>` (text)
*    def :meth:`clear<PySide.QtGui.QTextEdit.clear>` ()
*    def :meth:`copy<PySide.QtGui.QTextEdit.copy>` ()
*    def :meth:`cut<PySide.QtGui.QTextEdit.cut>` ()
*    def :meth:`insertHtml<PySide.QtGui.QTextEdit.insertHtml>` (text)
*    def :meth:`insertPlainText<PySide.QtGui.QTextEdit.insertPlainText>` (text)
*    def :meth:`paste<PySide.QtGui.QTextEdit.paste>` ()
*    def :meth:`redo<PySide.QtGui.QTextEdit.redo>` ()
*    def :meth:`scrollToAnchor<PySide.QtGui.QTextEdit.scrollToAnchor>` (name)
*    def :meth:`selectAll<PySide.QtGui.QTextEdit.selectAll>` ()
*    def :meth:`setAlignment<PySide.QtGui.QTextEdit.setAlignment>` (a)
*    def :meth:`setCurrentFont<PySide.QtGui.QTextEdit.setCurrentFont>` (f)
*    def :meth:`setFontFamily<PySide.QtGui.QTextEdit.setFontFamily>` (fontFamily)
*    def :meth:`setFontItalic<PySide.QtGui.QTextEdit.setFontItalic>` (b)
*    def :meth:`setFontPointSize<PySide.QtGui.QTextEdit.setFontPointSize>` (s)
*    def :meth:`setFontUnderline<PySide.QtGui.QTextEdit.setFontUnderline>` (b)
*    def :meth:`setFontWeight<PySide.QtGui.QTextEdit.setFontWeight>` (w)
*    def :meth:`setHtml<PySide.QtGui.QTextEdit.setHtml>` (text)
*    def :meth:`setPlainText<PySide.QtGui.QTextEdit.setPlainText>` (text)
*    def :meth:`setText<PySide.QtGui.QTextEdit.setText>` (text)
*    def :meth:`setTextBackgroundColor<PySide.QtGui.QTextEdit.setTextBackgroundColor>` (c)
*    def :meth:`setTextColor<PySide.QtGui.QTextEdit.setTextColor>` (c)
*    def :meth:`undo<PySide.QtGui.QTextEdit.undo>` ()
*    def :meth:`zoomIn<PySide.QtGui.QTextEdit.zoomIn>` ([range=1])
*    def :meth:`zoomOut<PySide.QtGui.QTextEdit.zoomOut>` ([range=1])


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`copyAvailable<PySide.QtGui.QTextEdit.copyAvailable>` (b)
*    def :meth:`currentCharFormatChanged<PySide.QtGui.QTextEdit.currentCharFormatChanged>` (format)
*    def :meth:`cursorPositionChanged<PySide.QtGui.QTextEdit.cursorPositionChanged>` ()
*    def :meth:`redoAvailable<PySide.QtGui.QTextEdit.redoAvailable>` (b)
*    def :meth:`selectionChanged<PySide.QtGui.QTextEdit.selectionChanged>` ()
*    def :meth:`textChanged<PySide.QtGui.QTextEdit.textChanged>` ()
*    def :meth:`undoAvailable<PySide.QtGui.QTextEdit.undoAvailable>` (b)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTextEdit` class provides a widget that is used to edit and display both plain and rich text.

    .. _PySide.QtGui.QTextEdit_introduction-and-concepts:



Introduction and Concepts
^^^^^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QTextEdit` is an advanced WYSIWYG viewer/editor supporting rich text formatting using HTML-style tags. It is optimized to handle large documents and to respond quickly to user input.

    :class:`PySide.QtGui.QTextEdit` works on paragraphs and characters. A paragraph is a formatted string which is word-wrapped to fit into the width of the widget. By default when reading plain text, one newline signifies a paragraph. A document consists of zero or more paragraphs. The words in the paragraph are aligned in accordance with the paragraph's alignment. Paragraphs are separated by hard line breaks. Each character within a paragraph has its own attributes, for example, font and color.

    :class:`PySide.QtGui.QTextEdit` can display images, lists and tables. If the text is too large to view within the text edit's viewport, scroll bars will appear. The text edit can load both plain text and HTML files (a subset of HTML 3.2 and 4).

    If you just need to display a small piece of rich text use :class:`PySide.QtGui.QLabel` .

    The rich text support in Qt is designed to provide a fast, portable and efficient way to add reasonable online help facilities to applications, and to provide a basis for rich text editors. If you find the HTML support insufficient for your needs you may consider the use of :ref:`QtWebKit` , which provides a full-featured web browser widget.

    The shape of the mouse cursor on a :class:`PySide.QtGui.QTextEdit` is :attr:`Qt.IBeamCursor<Qt.CursorShape>` by default. It can be changed through the :meth:`PySide.QtGui.QAbstractScrollArea.viewport` 's cursor property.

    .. _PySide.QtGui.QTextEdit_using-qtextedit-as-a-display-widget:



Using QTextEdit as a Display Widget
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QTextEdit` can display a large HTML subset, including tables and images.

    The text is set or replaced using :meth:`PySide.QtGui.QTextEdit.setHtml` which deletes any existing text and replaces it with the text passed in the :meth:`PySide.QtGui.QTextEdit.setHtml` call. If you call :meth:`PySide.QtGui.QTextEdit.setHtml` with legacy HTML, and then call :meth:`PySide.QtGui.QTextEdit.toHtml` , the text that is returned may have different markup, but will render the same. The entire text can be deleted with :meth:`PySide.QtGui.QTextEdit.clear` .

    Text itself can be inserted using the :class:`PySide.QtGui.QTextCursor` class or using the convenience functions :meth:`PySide.QtGui.QTextEdit.insertHtml` , :meth:`PySide.QtGui.QTextEdit.insertPlainText` , :meth:`PySide.QtGui.QTextEdit.append` or :meth:`PySide.QtGui.QTextEdit.paste` . :class:`PySide.QtGui.QTextCursor` is also able to insert complex objects like tables or lists into the document, and it deals with creating selections and applying changes to selected text.

    By default the text edit wraps words at whitespace to fit within the text edit widget. The :meth:`PySide.QtGui.QTextEdit.setLineWrapMode` function is used to specify the kind of line wrap you want, or :attr:`NoWrap<QTextEdit.LineWrapMode>` if you don't want any wrapping. Call :meth:`PySide.QtGui.QTextEdit.setLineWrapMode` to set a fixed pixel width :attr:`FixedPixelWidth<QTextEdit.LineWrapMode>` , or character column (e.g. 80 column) :attr:`FixedColumnWidth<QTextEdit.LineWrapMode>` with the pixels or columns specified with :meth:`PySide.QtGui.QTextEdit.setLineWrapColumnOrWidth` . If you use word wrap to the widget's width :attr:`WidgetWidth<QTextEdit.LineWrapMode>` , you can specify whether to break on whitespace or anywhere with :meth:`PySide.QtGui.QTextEdit.setWordWrapMode` .

    The :meth:`PySide.QtGui.QTextEdit.find` function can be used to find and select a given string within the text.

    If you want to limit the total number of paragraphs in a :class:`PySide.QtGui.QTextEdit` , as it is for example open useful in a log viewer, then you can use :class:`PySide.QtGui.QTextDocument` 's maximumBlockCount property for that.

    .. _PySide.QtGui.QTextEdit_read-only-key-bindings:



Read-only Key Bindings
^^^^^^^^^^^^^^^^^^^^^^

    When :class:`PySide.QtGui.QTextEdit` is used read-only the key bindings are limited to navigation, and text may only be selected with the mouse:

    +----------+-------------------------------------------------------------+
    |Keypresses|Action                                                       |
    +----------+-------------------------------------------------------------+
    |Up        |Moves one line up.                                           |
    +----------+-------------------------------------------------------------+
    |Down      |Moves one line down.                                         |
    +----------+-------------------------------------------------------------+
    |Left      |Moves one character to the left.                             |
    +----------+-------------------------------------------------------------+
    |Right     |Moves one character to the right.                            |
    +----------+-------------------------------------------------------------+
    |PageUp    |Moves one (viewport) page up.                                |
    +----------+-------------------------------------------------------------+
    |PageDown  |Moves one (viewport) page down.                              |
    +----------+-------------------------------------------------------------+
    |Home      |Moves to the beginning of the text.                          |
    +----------+-------------------------------------------------------------+
    |End       |Moves to the end of the text.                                |
    +----------+-------------------------------------------------------------+
    |Alt+Wheel |Scrolls the page horizontally (the Wheel is the mouse wheel).|
    +----------+-------------------------------------------------------------+
    |Ctrl+Wheel|Zooms the text.                                              |
    +----------+-------------------------------------------------------------+
    |Ctrl+A    |Selects all text.                                            |
    +----------+-------------------------------------------------------------+

    The text edit may be able to provide some meta-information. For example, the :meth:`PySide.QtGui.QTextEdit.documentTitle` function will return the text from within HTML ``<title>`` tags.

    .. _PySide.QtGui.QTextEdit_using-qtextedit-as-an-editor:



Using QTextEdit as an Editor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    All the information about using :class:`PySide.QtGui.QTextEdit` as a display widget also applies here.

    The current char format's attributes are set with :meth:`PySide.QtGui.QTextEdit.setFontItalic` , :meth:`PySide.QtGui.QTextEdit.setFontWeight` , :meth:`PySide.QtGui.QTextEdit.setFontUnderline` , :meth:`PySide.QtGui.QTextEdit.setFontFamily` , :meth:`PySide.QtGui.QTextEdit.setFontPointSize` , :meth:`PySide.QtGui.QTextEdit.setTextColor` and :meth:`PySide.QtGui.QTextEdit.setCurrentFont` . The current paragraph's alignment is set with :meth:`PySide.QtGui.QTextEdit.setAlignment` .

    Selection of text is handled by the :class:`PySide.QtGui.QTextCursor` class, which provides functionality for creating selections, retrieving the text contents or deleting selections. You can retrieve the object that corresponds with the user-visible cursor using the :meth:`PySide.QtGui.QTextEdit.textCursor` method. If you want to set a selection in :class:`PySide.QtGui.QTextEdit` just create one on a :class:`PySide.QtGui.QTextCursor` object and then make that cursor the visible cursor using :meth:`PySide.QtGui.QTextEdit.setTextCursor` . The selection can be copied to the clipboard with :meth:`PySide.QtGui.QTextEdit.copy` , or cut to the clipboard with :meth:`PySide.QtGui.QTextEdit.cut` . The entire text can be selected using :meth:`PySide.QtGui.QTextEdit.selectAll` .

    When the cursor is moved and the underlying formatting attributes change, the :meth:`PySide.QtGui.QTextEdit.currentCharFormatChanged` signal is emitted to reflect the new attributes at the new cursor position.

    :class:`PySide.QtGui.QTextEdit` holds a :class:`PySide.QtGui.QTextDocument` object which can be retrieved using the :meth:`PySide.QtGui.QTextEdit.document` method. You can also set your own document object using :meth:`PySide.QtGui.QTextEdit.setDocument` . :class:`PySide.QtGui.QTextDocument` emits a :meth:`PySide.QtGui.QTextEdit.textChanged` signal if the text changes and it also provides a :meth:`~PySide.QtGui.QTextEdit.isModified` function which will return true if the text has been modified since it was either loaded or since the last call to setModified with false as argument. In addition it provides methods for undo and redo.

    .. _PySide.QtGui.QTextEdit_drag-and-drop:



Drag and Drop
^^^^^^^^^^^^^

    :class:`PySide.QtGui.QTextEdit` also supports custom drag and drop behavior. By default, :class:`PySide.QtGui.QTextEdit` will insert plain text, HTML and rich text when the user drops data of these MIME types onto a document. Reimplement :meth:`PySide.QtGui.QTextEdit.canInsertFromMimeData` and :meth:`PySide.QtGui.QTextEdit.insertFromMimeData` to add support for additional MIME types.

    For example, to allow the user to drag and drop an image onto a :class:`PySide.QtGui.QTextEdit` , you could the implement these functions in the following way:

    ::


        def canInsertFromMimeData(source):
            if source.hasImage:
                return True
            else:
                return QTextEdit.canInsertFromMimeData(source)



    We add support for image MIME types by returning true. For all other MIME types, we use the default implementation.

    ::

        void TextEdit::insertFromMimeData( const QMimeData *source )
        {
            if (source->hasImage())
            {
                QImage image = qvariant_cast<QImage>(source->imageData());
                QTextCursor cursor = this->textCursor();
                QTextDocument *document = this->document();
                document->addResource(QTextDocument::ImageResource, QUrl("image"), image);
                cursor.insertImage("image");
            }
        }


    We unpack the image from the :class:`PySide.QtCore.QVariant` held by the MIME source and insert it into the document as a resource.

    .. _PySide.QtGui.QTextEdit_editing-key-bindings:



Editing Key Bindings
^^^^^^^^^^^^^^^^^^^^

    The list of key bindings which are implemented for editing:

    +------------+-------------------------------------------------------------+
    |Keypresses  |Action                                                       |
    +------------+-------------------------------------------------------------+
    |Backspace   |Deletes the character to the left of the cursor.             |
    +------------+-------------------------------------------------------------+
    |Delete      |Deletes the character to the right of the cursor.            |
    +------------+-------------------------------------------------------------+
    |Ctrl+C      |Copy the selected text to the clipboard.                     |
    +------------+-------------------------------------------------------------+
    |Ctrl+Insert |Copy the selected text to the clipboard.                     |
    +------------+-------------------------------------------------------------+
    |Ctrl+K      |Deletes to the end of the line.                              |
    +------------+-------------------------------------------------------------+
    |Ctrl+V      |Pastes the clipboard text into text edit.                    |
    +------------+-------------------------------------------------------------+
    |Shift+Insert|Pastes the clipboard text into text edit.                    |
    +------------+-------------------------------------------------------------+
    |Ctrl+X      |Deletes the selected text and copies it to the clipboard.    |
    +------------+-------------------------------------------------------------+
    |Shift+Delete|Deletes the selected text and copies it to the clipboard.    |
    +------------+-------------------------------------------------------------+
    |Ctrl+Z      |Undoes the last operation.                                   |
    +------------+-------------------------------------------------------------+
    |Ctrl+Y      |Redoes the last operation.                                   |
    +------------+-------------------------------------------------------------+
    |Left        |Moves the cursor one character to the left.                  |
    +------------+-------------------------------------------------------------+
    |Ctrl+Left   |Moves the cursor one word to the left.                       |
    +------------+-------------------------------------------------------------+
    |Right       |Moves the cursor one character to the right.                 |
    +------------+-------------------------------------------------------------+
    |Ctrl+Right  |Moves the cursor one word to the right.                      |
    +------------+-------------------------------------------------------------+
    |Up          |Moves the cursor one line up.                                |
    +------------+-------------------------------------------------------------+
    |Down        |Moves the cursor one line down.                              |
    +------------+-------------------------------------------------------------+
    |PageUp      |Moves the cursor one page up.                                |
    +------------+-------------------------------------------------------------+
    |PageDown    |Moves the cursor one page down.                              |
    +------------+-------------------------------------------------------------+
    |Home        |Moves the cursor to the beginning of the line.               |
    +------------+-------------------------------------------------------------+
    |Ctrl+Home   |Moves the cursor to the beginning of the text.               |
    +------------+-------------------------------------------------------------+
    |End         |Moves the cursor to the end of the line.                     |
    +------------+-------------------------------------------------------------+
    |Ctrl+End    |Moves the cursor to the end of the text.                     |
    +------------+-------------------------------------------------------------+
    |Alt+Wheel   |Scrolls the page horizontally (the Wheel is the mouse wheel).|
    +------------+-------------------------------------------------------------+

    To select (mark) text hold down the Shift key whilst pressing one of the movement keystrokes, for example, *Shift+Right* will select the character to the right, and *Shift+Ctrl+Right* will select the word to the right, etc.

    .. seealso::  :class:`PySide.QtGui.QTextDocument`  :class:`PySide.QtGui.QTextCursor`  :ref:`Application Example<mainwindows/application>`  :ref:`Syntax Highlighter Example<richtext/syntaxhighlighter>`  :ref:`Rich Text Processing<richtext.html>` 

.. class:: QTextEdit([parent=None])
           QTextEdit(text[, parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`
    :param text: unicode

    Constructs an empty :class:`PySide.QtGui.QTextEdit` with parent ``parent`` .


    Constructs a :class:`PySide.QtGui.QTextEdit` with parent ``parent`` . The text edit will display the text ``text`` . The text is interpreted as html.


.. attribute:: PySide.QtGui.QTextEdit.AutoFormattingFlag

    +------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                |Description                                                                                                                                        |
    +========================+===================================================================================================================================================+
    |QTextEdit.AutoNone      |Don't do any automatic formatting.                                                                                                                 |
    +------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextEdit.AutoBulletList|Automatically create bullet lists (e.g. when the user enters an asterisk ('\*') in the left most column, or presses Enter in an existing list item.|
    +------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextEdit.AutoAll       |Apply all automatic formatting. Currently only automatic bullet lists are supported.                                                               |
    +------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QTextEdit.LineWrapMode

    +--------------------------+-----------+
    |Constant                  |Description|
    +==========================+===========+
    |QTextEdit.NoWrap          |           |
    +--------------------------+-----------+
    |QTextEdit.WidgetWidth     |           |
    +--------------------------+-----------+
    |QTextEdit.FixedPixelWidth |           |
    +--------------------------+-----------+
    |QTextEdit.FixedColumnWidth|           |
    +--------------------------+-----------+


.. method:: PySide.QtGui.QTextEdit.acceptRichText()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the text edit accepts rich text insertions by the user.

    When this propery is set to false text edit will accept only plain text input from the user. For example through clipboard or drag and drop.

    This property's default is true.



.. method:: PySide.QtGui.QTextEdit.alignment()


    :rtype: :class:`PySide.QtCore.Qt.Alignment`




    Returns the alignment of the current paragraph.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setAlignment` 


.. method:: PySide.QtGui.QTextEdit.anchorAt(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: unicode




    Returns the reference of the anchor at position ``pos`` , or an empty string if no anchor exists at that point.



.. method:: PySide.QtGui.QTextEdit.append(text)


    :param text: unicode




    Appends a new paragraph with ``text`` to the end of the text edit.

    .. note::  The new paragraph appended will have the same character format and block format as the current paragraph, determined by the position of the cursor.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.currentCharFormat`  :meth:`QTextCursor.blockFormat()<PySide.QtGui.QTextCursor.blockFormat>` 


.. method:: PySide.QtGui.QTextEdit.autoFormatting()


    :rtype: :class:`PySide.QtGui.QTextEdit.AutoFormatting`




    This property holds the enabled set of auto formatting features.

    The value can be any combination of the values in the :attr:`QTextEdit.AutoFormattingFlag` enum. The default is :attr:`AutoNone<QTextEdit.AutoFormattingFlag>` . Choose :attr:`AutoAll<QTextEdit.AutoFormattingFlag>` to enable all automatic formatting.

    Currently, the only automatic formatting feature provided is :attr:`AutoBulletList<QTextEdit.AutoFormattingFlag>` ; future versions of Qt may offer more.



.. method:: PySide.QtGui.QTextEdit.canInsertFromMimeData(source)


    :param source: :class:`PySide.QtCore.QMimeData`
    :rtype: :class:`PySide.QtCore.bool`




    This function returns true if the contents of the MIME data object, specified by ``source`` , can be decoded and inserted into the document. It is called for example when during a drag operation the mouse enters this widget and it is necessary to determine whether it is possible to accept the drag and drop operation.

    Reimplement this function to enable drag and drop support for additional MIME types.



.. method:: PySide.QtGui.QTextEdit.canPaste()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether text can be pasted from the clipboard into the textedit.



.. method:: PySide.QtGui.QTextEdit.clear()






    Deletes all the text in the text edit.

    Note that the undo/redo history is cleared by this function.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.cut`  :meth:`PySide.QtGui.QTextEdit.setPlainText`  :meth:`PySide.QtGui.QTextEdit.setHtml` 


.. method:: PySide.QtGui.QTextEdit.copy()






    Copies any selected text to the clipboard.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.copyAvailable` 


.. method:: PySide.QtGui.QTextEdit.copyAvailable(b)


    :param b: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTextEdit.createMimeDataFromSelection()


    :rtype: :class:`PySide.QtCore.QMimeData`




    This function returns a new MIME data object to represent the contents of the text edit's current selection. It is called when the selection needs to be encapsulated into a new :class:`PySide.QtCore.QMimeData` object; for example, when a drag and drop operation is started, or when data is copyied to the clipboard.

    If you reimplement this function, note that the ownership of the returned :class:`PySide.QtCore.QMimeData` object is passed to the caller. The selection can be retrieved by using the :meth:`PySide.QtGui.QTextEdit.textCursor` function.



.. method:: PySide.QtGui.QTextEdit.createStandardContextMenu()


    :rtype: :class:`PySide.QtGui.QMenu`




    This function creates the standard context menu which is shown when the user clicks on the text edit with the right mouse button. It is called from the default :meth:`PySide.QtGui.QTextEdit.contextMenuEvent` handler. The popup menu's ownership is transferred to the caller.

    We recommend that you use the createStandardContextMenu( :class:`PySide.QtCore.QPoint` ) version instead which will enable the actions that are sensitive to where the user clicked.



.. method:: PySide.QtGui.QTextEdit.createStandardContextMenu(position)


    :param position: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QMenu`




    This function creates the standard context menu which is shown when the user clicks on the text edit with the right mouse button. It is called from the default :meth:`PySide.QtGui.QTextEdit.contextMenuEvent` handler and it takes the ``position`` of where the mouse click was. This can enable actions that are sensitive to the position where the user clicked. The popup menu's ownership is transferred to the caller.



.. method:: PySide.QtGui.QTextEdit.currentCharFormat()


    :rtype: :class:`PySide.QtGui.QTextCharFormat`




    Returns the char format that is used when inserting new text.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setCurrentCharFormat` 


.. method:: PySide.QtGui.QTextEdit.currentCharFormatChanged(format)


    :param format: :class:`PySide.QtGui.QTextCharFormat`






.. method:: PySide.QtGui.QTextEdit.currentFont()


    :rtype: :class:`PySide.QtGui.QFont`




    Returns the font of the current format.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setCurrentFont`  :meth:`PySide.QtGui.QTextEdit.setFontFamily`  :meth:`PySide.QtGui.QTextEdit.setFontPointSize` 


.. method:: PySide.QtGui.QTextEdit.cursorForPosition(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QTextCursor`




    returns a :class:`PySide.QtGui.QTextCursor` at position ``pos`` (in viewport coordinates).



.. method:: PySide.QtGui.QTextEdit.cursorPositionChanged()








.. method:: PySide.QtGui.QTextEdit.cursorRect()


    :rtype: :class:`PySide.QtCore.QRect`




    returns a rectangle (in viewport coordinates) that includes the cursor of the text edit.



.. method:: PySide.QtGui.QTextEdit.cursorRect(cursor)


    :param cursor: :class:`PySide.QtGui.QTextCursor`
    :rtype: :class:`PySide.QtCore.QRect`




    returns a rectangle (in viewport coordinates) that includes the ``cursor`` .



.. method:: PySide.QtGui.QTextEdit.cursorWidth()


    :rtype: :class:`PySide.QtCore.int`




    This property specifies the width of the cursor in pixels. The default value is 1.



.. method:: PySide.QtGui.QTextEdit.cut()






    Copies the selected text to the clipboard and deletes it from the text edit.

    If there is no selected text nothing happens.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.copy`  :meth:`PySide.QtGui.QTextEdit.paste` 


.. method:: PySide.QtGui.QTextEdit.document()


    :rtype: :class:`PySide.QtGui.QTextDocument`




    Returns a pointer to the underlying document.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setDocument` 


.. method:: PySide.QtGui.QTextEdit.documentTitle()


    :rtype: unicode




    This property holds the title of the document parsed from the text..

    By default, for a newly-created, empty document, this property contains an empty string.



.. method:: PySide.QtGui.QTextEdit.ensureCursorVisible()






    Ensures that the cursor is visible by scrolling the text edit if necessary.



.. method:: PySide.QtGui.QTextEdit.extraSelections()


    :rtype: 




    Returns previously set extra selections.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setExtraSelections` 


.. method:: PySide.QtGui.QTextEdit.find(exp[, options=0])


    :param exp: unicode
    :param options: :class:`PySide.QtGui.QTextDocument.FindFlags`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QTextEdit.fontFamily()


    :rtype: unicode




    Returns the font family of the current format.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setFontFamily`  :meth:`PySide.QtGui.QTextEdit.setCurrentFont`  :meth:`PySide.QtGui.QTextEdit.setFontPointSize` 


.. method:: PySide.QtGui.QTextEdit.fontItalic()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the font of the current format is italic; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setFontItalic` 


.. method:: PySide.QtGui.QTextEdit.fontPointSize()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the point size of the font of the current format.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setFontFamily`  :meth:`PySide.QtGui.QTextEdit.setCurrentFont`  :meth:`PySide.QtGui.QTextEdit.setFontPointSize` 


.. method:: PySide.QtGui.QTextEdit.fontUnderline()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the font of the current format is underlined; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setFontUnderline` 


.. method:: PySide.QtGui.QTextEdit.fontWeight()


    :rtype: :class:`PySide.QtCore.int`




    Returns the font weight of the current format.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setFontWeight`  :meth:`PySide.QtGui.QTextEdit.setCurrentFont`  :meth:`PySide.QtGui.QTextEdit.setFontPointSize`  :attr:`QFont.Weight` 


.. method:: PySide.QtGui.QTextEdit.insertFromMimeData(source)


    :param source: :class:`PySide.QtCore.QMimeData`




    This function inserts the contents of the MIME data object, specified by ``source`` , into the text edit at the current cursor position. It is called whenever text is inserted as the result of a clipboard paste operation, or when the text edit accepts data from a drag and drop operation.

    Reimplement this function to enable drag and drop support for additional MIME types.



.. method:: PySide.QtGui.QTextEdit.insertHtml(text)


    :param text: unicode




    Convenience slot that inserts ``text`` which is assumed to be of html formatting at the current cursor position.

    It is equivalent to:

    ::

        edit.textCursor().insertHtml(fragment)


    .. note::  When using this function with a style sheet, the style sheet will only apply to the current block in the document. In order to apply a style sheet throughout a document, use :meth:`QTextDocument.setDefaultStyleSheet()<PySide.QtGui.QTextDocument.setDefaultStyleSheet>` instead.



.. method:: PySide.QtGui.QTextEdit.insertPlainText(text)


    :param text: unicode




    Convenience slot that inserts ``text`` at the current cursor position.

    It is equivalent to

    ::

        edit.textCursor().insertText(text)




.. method:: PySide.QtGui.QTextEdit.isReadOnly()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the text edit is read-only.

    In a read-only text edit the user can only navigate through the text and select text; modifying the text is not possible.

    This property's default is false.



.. method:: PySide.QtGui.QTextEdit.isUndoRedoEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether undo and redo are enabled.

    Users are only able to undo or redo actions if this property is true, and if there is an action that can be undone (or redone).



.. method:: PySide.QtGui.QTextEdit.lineWrapColumnOrWidth()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the position (in pixels or columns depending on the wrap mode) where text will be wrapped.

    If the wrap mode is :attr:`FixedPixelWidth<QTextEdit.LineWrapMode>` , the value is the number of pixels from the left edge of the text edit at which text should be wrapped. If the wrap mode is :attr:`FixedColumnWidth<QTextEdit.LineWrapMode>` , the value is the column number (in character columns) from the left edge of the text edit at which text should be wrapped.

    By default, this property contains a value of 0.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.lineWrapMode` 


.. method:: PySide.QtGui.QTextEdit.lineWrapMode()


    :rtype: :attr:`PySide.QtGui.QTextEdit.LineWrapMode`




    This property holds the line wrap mode.

    The default mode is :attr:`WidgetWidth<QTextEdit.LineWrapMode>` which causes words to be wrapped at the right edge of the text edit. Wrapping occurs at whitespace, keeping whole words intact. If you want wrapping to occur within words use :meth:`PySide.QtGui.QTextEdit.setWordWrapMode` . If you set a wrap mode of :attr:`FixedPixelWidth<QTextEdit.LineWrapMode>` or :attr:`FixedColumnWidth<QTextEdit.LineWrapMode>` you should also call :meth:`PySide.QtGui.QTextEdit.setLineWrapColumnOrWidth` with the width you want.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.lineWrapColumnOrWidth` 


.. method:: PySide.QtGui.QTextEdit.loadResource(type, name)


    :param type: :class:`PySide.QtCore.int`
    :param name: :class:`PySide.QtCore.QUrl`
    :rtype: object




    Loads the resource specified by the given ``type`` and ``name`` .

    This function is an extension of :meth:`QTextDocument.loadResource()<PySide.QtGui.QTextDocument.loadResource>` .

    .. seealso::  :meth:`QTextDocument.loadResource()<PySide.QtGui.QTextDocument.loadResource>` 


.. method:: PySide.QtGui.QTextEdit.mergeCurrentCharFormat(modifier)


    :param modifier: :class:`PySide.QtGui.QTextCharFormat`




    Merges the properties specified in ``modifier`` into the current character format by calling QTextCursor::mergeCharFormat on the editor's cursor. If the editor has a selection then the properties of ``modifier`` are directly applied to the selection.

    .. seealso::  :meth:`QTextCursor.mergeCharFormat()<PySide.QtGui.QTextCursor.mergeCharFormat>` 


.. method:: PySide.QtGui.QTextEdit.moveCursor(operation[, mode=QTextCursor.MoveAnchor])


    :param operation: :attr:`PySide.QtGui.QTextCursor.MoveOperation`
    :param mode: :attr:`PySide.QtGui.QTextCursor.MoveMode`







.. method:: PySide.QtGui.QTextEdit.overwriteMode()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether text entered by the user will overwrite existing text.

    As with many text editors, the text editor widget can be configured to insert or overwrite existing text with new text entered by the user.

    If this property is true, existing text is overwritten, character-for-character by new text; otherwise, text is inserted at the cursor position, displacing existing text.

    By default, this property is false (new text does not overwrite existing text).



.. method:: PySide.QtGui.QTextEdit.paste()






    Pastes the text from the clipboard into the text edit at the current cursor position.

    If there is no text in the clipboard nothing happens.

    To change the behavior of this function, i.e. to modify what :class:`PySide.QtGui.QTextEdit` can paste and how it is being pasted, reimplement the virtual :meth:`PySide.QtGui.QTextEdit.canInsertFromMimeData` and :meth:`PySide.QtGui.QTextEdit.insertFromMimeData` functions.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.cut`  :meth:`PySide.QtGui.QTextEdit.copy` 


.. method:: PySide.QtGui.QTextEdit.print_(printer)


    :param printer: :class:`PySide.QtGui.QPrinter`




    Convenience function to print the text edit's document to the given ``printer`` . This is equivalent to calling the print method on the document directly except that this function also supports :attr:`QPrinter.Selection<QPrinter.PrintRange>` as print range.

    .. seealso::  :meth:`QTextDocument.print()<PySide.QtGui.QTextDocument.print>` 


.. method:: PySide.QtGui.QTextEdit.redo()






    Redoes the last operation.

    If there is no operation to redo, i.e. there is no redo step in the undo/redo history, nothing happens.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.undo` 


.. method:: PySide.QtGui.QTextEdit.redoAvailable(b)


    :param b: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTextEdit.scrollToAnchor(name)


    :param name: unicode




    Scrolls the text edit so that the anchor with the given ``name`` is visible; does nothing if the ``name`` is empty, or is already visible, or isn't found.



.. method:: PySide.QtGui.QTextEdit.selectAll()






    Selects all text.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.copy`  :meth:`PySide.QtGui.QTextEdit.cut`  :meth:`PySide.QtGui.QTextEdit.textCursor` 


.. method:: PySide.QtGui.QTextEdit.selectionChanged()








.. method:: PySide.QtGui.QTextEdit.setAcceptRichText(accept)


    :param accept: :class:`PySide.QtCore.bool`




    This property holds whether the text edit accepts rich text insertions by the user.

    When this propery is set to false text edit will accept only plain text input from the user. For example through clipboard or drag and drop.

    This property's default is true.



.. method:: PySide.QtGui.QTextEdit.setAlignment(a)


    :param a: :class:`PySide.QtCore.Qt.Alignment`







.. method:: PySide.QtGui.QTextEdit.setAutoFormatting(features)


    :param features: :class:`PySide.QtGui.QTextEdit.AutoFormatting`




    This property holds the enabled set of auto formatting features.

    The value can be any combination of the values in the :attr:`QTextEdit.AutoFormattingFlag` enum. The default is :attr:`AutoNone<QTextEdit.AutoFormattingFlag>` . Choose :attr:`AutoAll<QTextEdit.AutoFormattingFlag>` to enable all automatic formatting.

    Currently, the only automatic formatting feature provided is :attr:`AutoBulletList<QTextEdit.AutoFormattingFlag>` ; future versions of Qt may offer more.



.. method:: PySide.QtGui.QTextEdit.setCurrentCharFormat(format)


    :param format: :class:`PySide.QtGui.QTextCharFormat`




    Sets the char format that is be used when inserting new text to ``format`` by calling :meth:`QTextCursor.setCharFormat()<PySide.QtGui.QTextCursor.setCharFormat>` on the editor's cursor. If the editor has a selection then the char format is directly applied to the selection.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.currentCharFormat` 


.. method:: PySide.QtGui.QTextEdit.setCurrentFont(f)


    :param f: :class:`PySide.QtGui.QFont`




    Sets the font of the current format to ``f`` .

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.currentFont`  :meth:`PySide.QtGui.QTextEdit.setFontPointSize`  :meth:`PySide.QtGui.QTextEdit.setFontFamily` 


.. method:: PySide.QtGui.QTextEdit.setCursorWidth(width)


    :param width: :class:`PySide.QtCore.int`




    This property specifies the width of the cursor in pixels. The default value is 1.



.. method:: PySide.QtGui.QTextEdit.setDocument(document)


    :param document: :class:`PySide.QtGui.QTextDocument`




    Makes ``document`` the new document of the text editor.

    .. note::  The editor *does not take ownership of the document* unless it is the document's parent object. The parent object of the provided document remains the owner of the object.

    The editor does not delete the current document, even if it is a child of the editor.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.document` 


.. method:: PySide.QtGui.QTextEdit.setDocumentTitle(title)


    :param title: unicode




    This property holds the title of the document parsed from the text..

    By default, for a newly-created, empty document, this property contains an empty string.



.. method:: PySide.QtGui.QTextEdit.setExtraSelections(selections)


    :param selections: 







.. method:: PySide.QtGui.QTextEdit.setFontFamily(fontFamily)


    :param fontFamily: unicode




    Sets the font family of the current format to ``fontFamily`` .

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.fontFamily`  :meth:`PySide.QtGui.QTextEdit.setCurrentFont` 


.. method:: PySide.QtGui.QTextEdit.setFontItalic(b)


    :param b: :class:`PySide.QtCore.bool`




    If ``italic`` is true, sets the current format to italic; otherwise sets the current format to non-italic.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.fontItalic` 


.. method:: PySide.QtGui.QTextEdit.setFontPointSize(s)


    :param s: :class:`PySide.QtCore.qreal`




    Sets the point size of the current format to ``s`` .

    Note that if ``s`` is zero or negative, the behavior of this function is not defined.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.fontPointSize`  :meth:`PySide.QtGui.QTextEdit.setCurrentFont`  :meth:`PySide.QtGui.QTextEdit.setFontFamily` 


.. method:: PySide.QtGui.QTextEdit.setFontUnderline(b)


    :param b: :class:`PySide.QtCore.bool`




    If ``underline`` is true, sets the current format to underline; otherwise sets the current format to non-underline.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.fontUnderline` 


.. method:: PySide.QtGui.QTextEdit.setFontWeight(w)


    :param w: :class:`PySide.QtCore.int`




    Sets the font weight of the current format to the given ``weight`` , where the value used is in the range defined by the :attr:`QFont.Weight` enum.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.fontWeight`  :meth:`PySide.QtGui.QTextEdit.setCurrentFont`  :meth:`PySide.QtGui.QTextEdit.setFontFamily` 


.. method:: PySide.QtGui.QTextEdit.setHtml(text)


    :param text: unicode




    This property provides an HTML interface to the text of the text edit.

    :meth:`PySide.QtGui.QTextEdit.toHtml` returns the text of the text edit as html.

    :meth:`PySide.QtGui.QTextEdit.setHtml` changes the text of the text edit. Any previous text is removed and the undo/redo history is cleared. The input text is interpreted as rich text in html format.

    .. note::  It is the responsibility of the caller to make sure that the text is correctly decoded when a :class:`PySide.QtCore.QString` containing HTML is created and passed to :meth:`PySide.QtGui.QTextEdit.setHtml` .

    By default, for a newly-created, empty document, this property contains text to describe an HTML 4.0 document with no body text.

    .. seealso::  :ref:`Supported HTML Subset<richtext-html-subset.html>`  :meth:`~PySide.QtGui.QTextEdit.plainText` 


.. method:: PySide.QtGui.QTextEdit.setLineWrapColumnOrWidth(w)


    :param w: :class:`PySide.QtCore.int`




    This property holds the position (in pixels or columns depending on the wrap mode) where text will be wrapped.

    If the wrap mode is :attr:`FixedPixelWidth<QTextEdit.LineWrapMode>` , the value is the number of pixels from the left edge of the text edit at which text should be wrapped. If the wrap mode is :attr:`FixedColumnWidth<QTextEdit.LineWrapMode>` , the value is the column number (in character columns) from the left edge of the text edit at which text should be wrapped.

    By default, this property contains a value of 0.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.lineWrapMode` 


.. method:: PySide.QtGui.QTextEdit.setLineWrapMode(mode)


    :param mode: :attr:`PySide.QtGui.QTextEdit.LineWrapMode`




    This property holds the line wrap mode.

    The default mode is :attr:`WidgetWidth<QTextEdit.LineWrapMode>` which causes words to be wrapped at the right edge of the text edit. Wrapping occurs at whitespace, keeping whole words intact. If you want wrapping to occur within words use :meth:`PySide.QtGui.QTextEdit.setWordWrapMode` . If you set a wrap mode of :attr:`FixedPixelWidth<QTextEdit.LineWrapMode>` or :attr:`FixedColumnWidth<QTextEdit.LineWrapMode>` you should also call :meth:`PySide.QtGui.QTextEdit.setLineWrapColumnOrWidth` with the width you want.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.lineWrapColumnOrWidth` 


.. method:: PySide.QtGui.QTextEdit.setOverwriteMode(overwrite)


    :param overwrite: :class:`PySide.QtCore.bool`




    This property holds whether text entered by the user will overwrite existing text.

    As with many text editors, the text editor widget can be configured to insert or overwrite existing text with new text entered by the user.

    If this property is true, existing text is overwritten, character-for-character by new text; otherwise, text is inserted at the cursor position, displacing existing text.

    By default, this property is false (new text does not overwrite existing text).



.. method:: PySide.QtGui.QTextEdit.setPlainText(text)


    :param text: unicode




    This property gets and sets the text editor's contents as plain text. Previous contents are removed and undo/redo history is reset when the property is set.

    If the text edit has another content type, it will not be replaced by plain text if you call :meth:`PySide.QtGui.QTextEdit.toPlainText` . The only exception to this is the non-break space, *nbsp;* , that will be converted into standard space.

    By default, for an editor with no contents, this property contains an empty string.

    .. seealso::  :meth:`~PySide.QtGui.QTextEdit.html` 


.. method:: PySide.QtGui.QTextEdit.setReadOnly(ro)


    :param ro: :class:`PySide.QtCore.bool`




    This property holds whether the text edit is read-only.

    In a read-only text edit the user can only navigate through the text and select text; modifying the text is not possible.

    This property's default is false.



.. method:: PySide.QtGui.QTextEdit.setTabChangesFocus(b)


    :param b: :class:`PySide.QtCore.bool`




    This property holds whether **Tab** changes focus or is accepted as input.

    In some occasions text edits should not allow the user to input tabulators or change indentation using the **Tab** key, as this breaks the focus chain. The default is false.



.. method:: PySide.QtGui.QTextEdit.setTabStopWidth(width)


    :param width: :class:`PySide.QtCore.int`




    This property holds the tab stop width in pixels.

    By default, this property contains a value of 80 pixels.



.. method:: PySide.QtGui.QTextEdit.setText(text)


    :param text: unicode




    Sets the text edit's ``text`` . The text can be plain text or HTML and the text edit will try to guess the right format.

    Use :meth:`PySide.QtGui.QTextEdit.setHtml` or :meth:`PySide.QtGui.QTextEdit.setPlainText` directly to avoid text edit's guessing.

    .. seealso::  :meth:`~PySide.QtGui.QTextEdit.text` 


.. method:: PySide.QtGui.QTextEdit.setTextBackgroundColor(c)


    :param c: :class:`PySide.QtGui.QColor`




    Sets the text background color of the current format to ``c`` .

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.textBackgroundColor` 


.. method:: PySide.QtGui.QTextEdit.setTextColor(c)


    :param c: :class:`PySide.QtGui.QColor`




    Sets the text color of the current format to ``c`` .

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.textColor` 


.. method:: PySide.QtGui.QTextEdit.setTextCursor(cursor)


    :param cursor: :class:`PySide.QtGui.QTextCursor`




    Sets the visible ``cursor`` .

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.textCursor` 


.. method:: PySide.QtGui.QTextEdit.setTextInteractionFlags(flags)


    :param flags: :class:`PySide.QtCore.Qt.TextInteractionFlags`




    Specifies how the widget should interact with user input.

    The default value depends on whether the :class:`PySide.QtGui.QTextEdit` is read-only or editable, and whether it is a :class:`PySide.QtGui.QTextBrowser` or not.



.. method:: PySide.QtGui.QTextEdit.setUndoRedoEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether undo and redo are enabled.

    Users are only able to undo or redo actions if this property is true, and if there is an action that can be undone (or redone).



.. method:: PySide.QtGui.QTextEdit.setWordWrapMode(policy)


    :param policy: :attr:`PySide.QtGui.QTextOption.WrapMode`







.. method:: PySide.QtGui.QTextEdit.tabChangesFocus()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether **Tab** changes focus or is accepted as input.

    In some occasions text edits should not allow the user to input tabulators or change indentation using the **Tab** key, as this breaks the focus chain. The default is false.



.. method:: PySide.QtGui.QTextEdit.tabStopWidth()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the tab stop width in pixels.

    By default, this property contains a value of 80 pixels.



.. method:: PySide.QtGui.QTextEdit.textBackgroundColor()


    :rtype: :class:`PySide.QtGui.QColor`




    Returns the text background color of the current format.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setTextBackgroundColor` 


.. method:: PySide.QtGui.QTextEdit.textChanged()








.. method:: PySide.QtGui.QTextEdit.textColor()


    :rtype: :class:`PySide.QtGui.QColor`




    Returns the text color of the current format.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setTextColor` 


.. method:: PySide.QtGui.QTextEdit.textCursor()


    :rtype: :class:`PySide.QtGui.QTextCursor`




    Returns a copy of the :class:`PySide.QtGui.QTextCursor` that represents the currently visible cursor. Note that changes on the returned cursor do not affect :class:`PySide.QtGui.QTextEdit` 's cursor; use :meth:`PySide.QtGui.QTextEdit.setTextCursor` to update the visible cursor.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setTextCursor` 


.. method:: PySide.QtGui.QTextEdit.textInteractionFlags()


    :rtype: :class:`PySide.QtCore.Qt.TextInteractionFlags`




    Specifies how the widget should interact with user input.

    The default value depends on whether the :class:`PySide.QtGui.QTextEdit` is read-only or editable, and whether it is a :class:`PySide.QtGui.QTextBrowser` or not.



.. method:: PySide.QtGui.QTextEdit.toHtml()


    :rtype: unicode




    This property provides an HTML interface to the text of the text edit.

    :meth:`PySide.QtGui.QTextEdit.toHtml` returns the text of the text edit as html.

    :meth:`PySide.QtGui.QTextEdit.setHtml` changes the text of the text edit. Any previous text is removed and the undo/redo history is cleared. The input text is interpreted as rich text in html format.

    .. note::  It is the responsibility of the caller to make sure that the text is correctly decoded when a :class:`PySide.QtCore.QString` containing HTML is created and passed to :meth:`PySide.QtGui.QTextEdit.setHtml` .

    By default, for a newly-created, empty document, this property contains text to describe an HTML 4.0 document with no body text.

    .. seealso::  :ref:`Supported HTML Subset<richtext-html-subset.html>`  :meth:`~PySide.QtGui.QTextEdit.plainText` 


.. method:: PySide.QtGui.QTextEdit.toPlainText()


    :rtype: unicode




    This property gets and sets the text editor's contents as plain text. Previous contents are removed and undo/redo history is reset when the property is set.

    If the text edit has another content type, it will not be replaced by plain text if you call :meth:`PySide.QtGui.QTextEdit.toPlainText` . The only exception to this is the non-break space, *nbsp;* , that will be converted into standard space.

    By default, for an editor with no contents, this property contains an empty string.

    .. seealso::  :meth:`~PySide.QtGui.QTextEdit.html` 


.. method:: PySide.QtGui.QTextEdit.undo()






    Undoes the last operation.

    If there is no operation to undo, i.e. there is no undo step in the undo/redo history, nothing happens.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.redo` 


.. method:: PySide.QtGui.QTextEdit.undoAvailable(b)


    :param b: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTextEdit.wordWrapMode()


    :rtype: :attr:`PySide.QtGui.QTextOption.WrapMode`




    .. seealso::  :meth:`PySide.QtGui.QTextEdit.setWordWrapMode` 


.. method:: PySide.QtGui.QTextEdit.zoomIn([range=1])


    :param range: :class:`PySide.QtCore.int`




    Zooms in on the text by making the base font size ``range`` points larger and recalculating all font sizes to be the new size. This does not change the size of any images.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.zoomOut` 


.. method:: PySide.QtGui.QTextEdit.zoomOut([range=1])


    :param range: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Zooms out on the text by making the base font size ``range`` points smaller and recalculating all font sizes to be the new size. This does not change the size of any images.

    .. seealso::  :meth:`PySide.QtGui.QTextEdit.zoomIn` 



