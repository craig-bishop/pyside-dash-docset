.. module:: PySide.QtGui
.. _QTextList:

QTextList
*********

.. inheritance-diagram:: QTextList
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`add<PySide.QtGui.QTextList.add>` (block)
*    def :meth:`count<PySide.QtGui.QTextList.count>` ()
*    def :meth:`item<PySide.QtGui.QTextList.item>` (i)
*    def :meth:`itemNumber<PySide.QtGui.QTextList.itemNumber>` (arg__1)
*    def :meth:`itemText<PySide.QtGui.QTextList.itemText>` (arg__1)
*    def :meth:`remove<PySide.QtGui.QTextList.remove>` (arg__1)
*    def :meth:`removeItem<PySide.QtGui.QTextList.removeItem>` (i)
*    def :meth:`setFormat<PySide.QtGui.QTextList.setFormat>` (format)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTextList` class provides a decorated list of items in a :class:`PySide.QtGui.QTextDocument` .

    A list contains a sequence of text blocks, each of which is marked with a bullet point or other symbol. Multiple levels of lists can be used, and the automatic numbering feature provides support for ordered numeric and alphabetical lists.

    Lists are created by using a text cursor to insert an empty list at the current position or by moving existing text into a new list. The :meth:`QTextCursor.insertList()<PySide.QtGui.QTextCursor.insertList>` function inserts an empty block into the document at the cursor position, and makes it the first item in a list.

    ::

            listFormat = QTextListFormat()
            if list:
                listFormat = list.format()
                listFormat.setIndent(listFormat.indent() + 1)

            listFormat.setStyle(QTextListFormat.ListDisc)
            cursor.insertList(listFormat)


    The :meth:`QTextCursor.createList()<PySide.QtGui.QTextCursor.createList>` function takes the contents of the cursor's current block and turns it into the first item of a new list.

    The cursor's current list is found with :meth:`QTextCursor.currentList()<PySide.QtGui.QTextCursor.currentList>` .

    The number of items in a list is given by :meth:`PySide.QtGui.QTextList.count` . Each item can be obtained by its index in the list with the :meth:`PySide.QtGui.QTextList.item` function. Similarly, the index of a given item can be found with :meth:`PySide.QtGui.QTextList.itemNumber` . The text of each item can be found with the :meth:`PySide.QtGui.QTextList.itemText` function.

    Note that the items in the list may not be adjacent elements in the document. For example, the top-level items in a multi-level list will be separated by the items in lower levels of the list.

    List items can be deleted by index with the :meth:`PySide.QtGui.QTextList.removeItem` function. :meth:`PySide.QtGui.QTextList.remove` deletes the specified item in the list.

    The list's format is set with :meth:`PySide.QtGui.QTextList.setFormat` and read with :meth:`PySide.QtGui.QTextList.format` . The format describes the decoration of the list itself, and not the individual items.

    .. seealso::  :class:`PySide.QtGui.QTextBlock`  :class:`PySide.QtGui.QTextListFormat`  :class:`PySide.QtGui.QTextCursor` 

.. class:: QTextList(doc)

    :param doc: :class:`PySide.QtGui.QTextDocument`


.. method:: PySide.QtGui.QTextList.add(block)


    :param block: :class:`PySide.QtGui.QTextBlock`




    Makes the given ``block`` part of the list.

    .. seealso::  :meth:`PySide.QtGui.QTextList.remove`  :meth:`PySide.QtGui.QTextList.removeItem` 


.. method:: PySide.QtGui.QTextList.count()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of items in the list.



.. method:: PySide.QtGui.QTextList.item(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextBlock`




    Returns the ``i`` -th text block in the list.

    .. seealso::  :meth:`PySide.QtGui.QTextList.count`  :meth:`PySide.QtGui.QTextList.itemText` 


.. method:: PySide.QtGui.QTextList.itemNumber(arg__1)


    :param arg__1: :class:`PySide.QtGui.QTextBlock`
    :rtype: :class:`PySide.QtCore.int`




    Returns the index of the list item that corresponds to the given ``block`` . Returns -1 if the block was not present in the list.



.. method:: PySide.QtGui.QTextList.itemText(arg__1)


    :param arg__1: :class:`PySide.QtGui.QTextBlock`
    :rtype: unicode




    Returns the text of the list item that corresponds to the given ``block`` .



.. method:: PySide.QtGui.QTextList.remove(arg__1)


    :param arg__1: :class:`PySide.QtGui.QTextBlock`




    Removes the given ``block`` from the list.

    .. seealso::  :meth:`PySide.QtGui.QTextList.add`  :meth:`PySide.QtGui.QTextList.removeItem` 


.. method:: PySide.QtGui.QTextList.removeItem(i)


    :param i: :class:`PySide.QtCore.int`




    Removes the item at item position ``i`` from the list. When the last item in the list is removed, the list is automatically deleted by the :class:`PySide.QtGui.QTextDocument` that owns it.

    .. seealso::  :meth:`PySide.QtGui.QTextList.add`  :meth:`PySide.QtGui.QTextList.remove` 


.. method:: PySide.QtGui.QTextList.setFormat(format)


    :param format: :class:`PySide.QtGui.QTextListFormat`




    Sets the list's format to ``format`` .

    .. seealso::  :meth:`PySide.QtGui.QTextList.format` 



