.. module:: PySide.QtGui
.. _QApplication:

QApplication
************

.. inheritance-diagram:: QApplication
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`inputContext<PySide.QtGui.QApplication.inputContext>` ()
*    def :meth:`isSessionRestored<PySide.QtGui.QApplication.isSessionRestored>` ()
*    def :meth:`sessionId<PySide.QtGui.QApplication.sessionId>` ()
*    def :meth:`sessionKey<PySide.QtGui.QApplication.sessionKey>` ()
*    def :meth:`setInputContext<PySide.QtGui.QApplication.setInputContext>` (arg__1)
*    def :meth:`styleSheet<PySide.QtGui.QApplication.styleSheet>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`commitData<PySide.QtGui.QApplication.commitData>` (sm)
*    def :meth:`saveState<PySide.QtGui.QApplication.saveState>` (sm)


Slots
^^^^^
.. container:: function_list

*    def :meth:`autoSipEnabled<PySide.QtGui.QApplication.autoSipEnabled>` ()
*    def :meth:`setAutoSipEnabled<PySide.QtGui.QApplication.setAutoSipEnabled>` (enabled)
*    def :meth:`setStyleSheet<PySide.QtGui.QApplication.setStyleSheet>` (sheet)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`commitDataRequest<PySide.QtGui.QApplication.commitDataRequest>` (sessionManager)
*    def :meth:`focusChanged<PySide.QtGui.QApplication.focusChanged>` (old, now)
*    def :meth:`fontDatabaseChanged<PySide.QtGui.QApplication.fontDatabaseChanged>` ()
*    def :meth:`lastWindowClosed<PySide.QtGui.QApplication.lastWindowClosed>` ()
*    def :meth:`saveStateRequest<PySide.QtGui.QApplication.saveStateRequest>` (sessionManager)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`aboutQt<PySide.QtGui.QApplication.aboutQt>` ()
*    def :meth:`activeModalWidget<PySide.QtGui.QApplication.activeModalWidget>` ()
*    def :meth:`activePopupWidget<PySide.QtGui.QApplication.activePopupWidget>` ()
*    def :meth:`activeWindow<PySide.QtGui.QApplication.activeWindow>` ()
*    def :meth:`alert<PySide.QtGui.QApplication.alert>` (widget[, duration=0])
*    def :meth:`allWidgets<PySide.QtGui.QApplication.allWidgets>` ()
*    def :meth:`beep<PySide.QtGui.QApplication.beep>` ()
*    def :meth:`changeOverrideCursor<PySide.QtGui.QApplication.changeOverrideCursor>` (arg__1)
*    def :meth:`clipboard<PySide.QtGui.QApplication.clipboard>` ()
*    def :meth:`closeAllWindows<PySide.QtGui.QApplication.closeAllWindows>` ()
*    def :meth:`colorSpec<PySide.QtGui.QApplication.colorSpec>` ()
*    def :meth:`cursorFlashTime<PySide.QtGui.QApplication.cursorFlashTime>` ()
*    def :meth:`desktop<PySide.QtGui.QApplication.desktop>` ()
*    def :meth:`desktopSettingsAware<PySide.QtGui.QApplication.desktopSettingsAware>` ()
*    def :meth:`doubleClickInterval<PySide.QtGui.QApplication.doubleClickInterval>` ()
*    def :meth:`focusWidget<PySide.QtGui.QApplication.focusWidget>` ()
*    def :meth:`font<PySide.QtGui.QApplication.font>` ()
*    def :meth:`font<PySide.QtGui.QApplication.font>` (arg__1)
*    def :meth:`font<PySide.QtGui.QApplication.font>` (className)
*    def :meth:`fontMetrics<PySide.QtGui.QApplication.fontMetrics>` ()
*    def :meth:`globalStrut<PySide.QtGui.QApplication.globalStrut>` ()
*    def :meth:`isEffectEnabled<PySide.QtGui.QApplication.isEffectEnabled>` (arg__1)
*    def :meth:`isLeftToRight<PySide.QtGui.QApplication.isLeftToRight>` ()
*    def :meth:`isRightToLeft<PySide.QtGui.QApplication.isRightToLeft>` ()
*    def :meth:`keyboardInputDirection<PySide.QtGui.QApplication.keyboardInputDirection>` ()
*    def :meth:`keyboardInputInterval<PySide.QtGui.QApplication.keyboardInputInterval>` ()
*    def :meth:`keyboardInputLocale<PySide.QtGui.QApplication.keyboardInputLocale>` ()
*    def :meth:`keyboardModifiers<PySide.QtGui.QApplication.keyboardModifiers>` ()
*    def :meth:`layoutDirection<PySide.QtGui.QApplication.layoutDirection>` ()
*    def :meth:`mouseButtons<PySide.QtGui.QApplication.mouseButtons>` ()
*    def :meth:`overrideCursor<PySide.QtGui.QApplication.overrideCursor>` ()
*    def :meth:`palette<PySide.QtGui.QApplication.palette>` ()
*    def :meth:`palette<PySide.QtGui.QApplication.palette>` (arg__1)
*    def :meth:`palette<PySide.QtGui.QApplication.palette>` (className)
*    def :meth:`quitOnLastWindowClosed<PySide.QtGui.QApplication.quitOnLastWindowClosed>` ()
*    def :meth:`restoreOverrideCursor<PySide.QtGui.QApplication.restoreOverrideCursor>` ()
*    def :meth:`setActiveWindow<PySide.QtGui.QApplication.setActiveWindow>` (act)
*    def :meth:`setColorSpec<PySide.QtGui.QApplication.setColorSpec>` (arg__1)
*    def :meth:`setCursorFlashTime<PySide.QtGui.QApplication.setCursorFlashTime>` (arg__1)
*    def :meth:`setDesktopSettingsAware<PySide.QtGui.QApplication.setDesktopSettingsAware>` (arg__1)
*    def :meth:`setDoubleClickInterval<PySide.QtGui.QApplication.setDoubleClickInterval>` (arg__1)
*    def :meth:`setEffectEnabled<PySide.QtGui.QApplication.setEffectEnabled>` (arg__1[, enable=true])
*    def :meth:`setFont<PySide.QtGui.QApplication.setFont>` (arg__1[, className=0])
*    def :meth:`setGlobalStrut<PySide.QtGui.QApplication.setGlobalStrut>` (arg__1)
*    def :meth:`setGraphicsSystem<PySide.QtGui.QApplication.setGraphicsSystem>` (arg__1)
*    def :meth:`setKeyboardInputInterval<PySide.QtGui.QApplication.setKeyboardInputInterval>` (arg__1)
*    def :meth:`setLayoutDirection<PySide.QtGui.QApplication.setLayoutDirection>` (direction)
*    def :meth:`setOverrideCursor<PySide.QtGui.QApplication.setOverrideCursor>` (arg__1)
*    def :meth:`setPalette<PySide.QtGui.QApplication.setPalette>` (arg__1[, className=0])
*    def :meth:`setQuitOnLastWindowClosed<PySide.QtGui.QApplication.setQuitOnLastWindowClosed>` (quit)
*    def :meth:`setStartDragDistance<PySide.QtGui.QApplication.setStartDragDistance>` (l)
*    def :meth:`setStartDragTime<PySide.QtGui.QApplication.setStartDragTime>` (ms)
*    def :meth:`setStyle<PySide.QtGui.QApplication.setStyle>` (arg__1)
*    def :meth:`setStyle<PySide.QtGui.QApplication.setStyle>` (arg__1)
*    def :meth:`setWheelScrollLines<PySide.QtGui.QApplication.setWheelScrollLines>` (arg__1)
*    def :meth:`setWindowIcon<PySide.QtGui.QApplication.setWindowIcon>` (icon)
*    def :meth:`startDragDistance<PySide.QtGui.QApplication.startDragDistance>` ()
*    def :meth:`startDragTime<PySide.QtGui.QApplication.startDragTime>` ()
*    def :meth:`style<PySide.QtGui.QApplication.style>` ()
*    def :meth:`syncX<PySide.QtGui.QApplication.syncX>` ()
*    def :meth:`topLevelAt<PySide.QtGui.QApplication.topLevelAt>` (p)
*    def :meth:`topLevelAt<PySide.QtGui.QApplication.topLevelAt>` (x, y)
*    def :meth:`topLevelWidgets<PySide.QtGui.QApplication.topLevelWidgets>` ()
*    def :meth:`type<PySide.QtGui.QApplication.type>` ()
*    def :meth:`wheelScrollLines<PySide.QtGui.QApplication.wheelScrollLines>` ()
*    def :meth:`widgetAt<PySide.QtGui.QApplication.widgetAt>` (p)
*    def :meth:`widgetAt<PySide.QtGui.QApplication.widgetAt>` (x, y)
*    def :meth:`windowIcon<PySide.QtGui.QApplication.windowIcon>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QApplication` class manages the GUI application's control flow and main settings.

    :class:`PySide.QtGui.QApplication` contains the main event loop, where all events from the window system and other sources are processed and dispatched. It also handles the application's initialization, finalization, and provides session management. In addition, :class:`PySide.QtGui.QApplication` handles most of the system-wide and application-wide settings.

    For any GUI application using Qt, there is precisely **one**\ :class:`PySide.QtGui.QApplication` object, no matter whether the application has 0, 1, 2 or more windows at any given time. For non-GUI Qt applications, use :class:`PySide.QtCore.QCoreApplication` instead, as it does not depend on the :ref:`QtGui` library.

    The :class:`PySide.QtGui.QApplication` object is accessible through the :meth:`PySide.QtCore.QCoreApplication.instance` function that returns a pointer equivalent to the global :meth:`~PySide.QtGui.QApplication.qApp` pointer.

    :class:`PySide.QtGui.QApplication` 's main areas of responsibility are:


    * It initializes the application with the user's desktop settings such as :meth:`PySide.QtGui.QApplication.palette` , :meth:`PySide.QtGui.QApplication.font` and :meth:`PySide.QtGui.QApplication.doubleClickInterval` . It keeps track of these properties in case the user changes the desktop globally, for example through some kind of control panel.
    * It performs event handling, meaning that it receives events from the underlying window system and dispatches them to the relevant widgets. By using :meth:`PySide.QtCore.QCoreApplication.sendEvent` and :meth:`PySide.QtCore.QCoreApplication.postEvent` you can send your own events to widgets.
    * It parses common command line arguments and sets its internal state accordingly. See the :meth:`constructor documentation<PySide.QtGui.QApplication.QApplication>` below for more details.
    * It defines the application's look and feel, which is encapsulated in a :class:`PySide.QtGui.QStyle` object. This can be changed at runtime with :meth:`PySide.QtGui.QApplication.setStyle` .
    * It specifies how the application is to allocate colors. See :meth:`PySide.QtGui.QApplication.setColorSpec` for details.
    * It provides localization of strings that are visible to the user via :meth:`PySide.QtCore.QCoreApplication.translate` .
    * It provides some magical objects like the :meth:`PySide.QtGui.QApplication.desktop` and the :meth:`PySide.QtGui.QApplication.clipboard` .
    * It knows about the application's windows. You can ask which widget is at a certain position using :meth:`PySide.QtGui.QApplication.widgetAt` , get a list of :meth:`PySide.QtGui.QApplication.topLevelWidgets` and :meth:`PySide.QtGui.QApplication.closeAllWindows` , etc.
    * It manages the application's mouse cursor handling, see :meth:`PySide.QtGui.QApplication.setOverrideCursor`
    * On the X window system, it provides functions to flush and sync the communication stream, see :meth:`~PySide.QtGui.QApplication.flushX` and :meth:`PySide.QtGui.QApplication.syncX` .
    * It provides support for sophisticated :ref:`session management<session.html>` . This makes it possible for applications to terminate gracefully when the user logs out, to cancel a shutdown process if termination isn't possible and even to preserve the entire application's state for a future session. See :meth:`PySide.QtGui.QApplication.isSessionRestored` , :meth:`PySide.QtGui.QApplication.sessionId` and :meth:`PySide.QtGui.QApplication.commitData` and :meth:`PySide.QtGui.QApplication.saveState` for details.

    Since the :class:`PySide.QtGui.QApplication` object does so much initialization, it *must* be created before any other objects related to the user interface are created. :class:`PySide.QtGui.QApplication` also deals with common command line arguments. Hence, it is usually a good idea to create it *before* any interpretation or modification of ``argv`` is done in the application itself.


    |Groups of functions                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    +-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |System settings :meth:`PySide.QtGui.QApplication.desktopSettingsAware` , :meth:`PySide.QtGui.QApplication.setDesktopSettingsAware` , :meth:`PySide.QtGui.QApplication.cursorFlashTime` , :meth:`PySide.QtGui.QApplication.setCursorFlashTime` , :meth:`PySide.QtGui.QApplication.doubleClickInterval` , :meth:`PySide.QtGui.QApplication.setDoubleClickInterval` , :meth:`PySide.QtGui.QApplication.setKeyboardInputInterval` , :meth:`PySide.QtGui.QApplication.wheelScrollLines` , :meth:`PySide.QtGui.QApplication.setWheelScrollLines` , :meth:`PySide.QtGui.QApplication.palette` , :meth:`PySide.QtGui.QApplication.setPalette` , :meth:`PySide.QtGui.QApplication.font` , :meth:`PySide.QtGui.QApplication.setFont` , :meth:`PySide.QtGui.QApplication.fontMetrics` .                                     |:meth:`PySide.QtGui.QApplication.desktopSettingsAware` , :meth:`PySide.QtGui.QApplication.setDesktopSettingsAware` , :meth:`PySide.QtGui.QApplication.cursorFlashTime` , :meth:`PySide.QtGui.QApplication.setCursorFlashTime` , :meth:`PySide.QtGui.QApplication.doubleClickInterval` , :meth:`PySide.QtGui.QApplication.setDoubleClickInterval` , :meth:`PySide.QtGui.QApplication.setKeyboardInputInterval` , :meth:`PySide.QtGui.QApplication.wheelScrollLines` , :meth:`PySide.QtGui.QApplication.setWheelScrollLines` , :meth:`PySide.QtGui.QApplication.palette` , :meth:`PySide.QtGui.QApplication.setPalette` , :meth:`PySide.QtGui.QApplication.font` , :meth:`PySide.QtGui.QApplication.setFont` , :meth:`PySide.QtGui.QApplication.fontMetrics` .                                      |

    |Event handling :meth:`~PySide.QtGui.QApplication.exec` , :meth:`PySide.QtCore.QCoreApplication.processEvents` , :meth:`PySide.QtCore.QCoreApplication.exit` , :meth:`PySide.QtCore.QCoreApplication.quit` . :meth:`PySide.QtCore.QCoreApplication.sendEvent` , :meth:`PySide.QtCore.QCoreApplication.postEvent` , :meth:`PySide.QtCore.QCoreApplication.sendPostedEvents` , :meth:`PySide.QtCore.QCoreApplication.removePostedEvents` , :meth:`PySide.QtCore.QCoreApplication.hasPendingEvents` , :meth:`PySide.QtGui.QApplication.notify` , :meth:`~PySide.QtGui.QApplication.macEventFilter` , :meth:`~PySide.QtGui.QApplication.qwsEventFilter` , :meth:`~PySide.QtGui.QApplication.x11EventFilter` , :meth:`~PySide.QtGui.QApplication.x11ProcessEvent` , :meth:`~PySide.QtGui.QApplication.winEventFilter` .|:meth:`~PySide.QtGui.QApplication.exec` , :meth:`PySide.QtCore.QCoreApplication.processEvents` , :meth:`PySide.QtCore.QCoreApplication.exit` , :meth:`PySide.QtCore.QCoreApplication.quit` . :meth:`PySide.QtCore.QCoreApplication.sendEvent` , :meth:`PySide.QtCore.QCoreApplication.postEvent` , :meth:`PySide.QtCore.QCoreApplication.sendPostedEvents` , :meth:`PySide.QtCore.QCoreApplication.removePostedEvents` , :meth:`PySide.QtCore.QCoreApplication.hasPendingEvents` , :meth:`PySide.QtGui.QApplication.notify` , :meth:`~PySide.QtGui.QApplication.macEventFilter` , :meth:`~PySide.QtGui.QApplication.qwsEventFilter` , :meth:`~PySide.QtGui.QApplication.x11EventFilter` , :meth:`~PySide.QtGui.QApplication.x11ProcessEvent` , :meth:`~PySide.QtGui.QApplication.winEventFilter` .|

    |GUI Styles :meth:`PySide.QtGui.QApplication.style` , :meth:`PySide.QtGui.QApplication.setStyle`|:meth:`PySide.QtGui.QApplication.style` , :meth:`PySide.QtGui.QApplication.setStyle`|

    |Color usage :meth:`PySide.QtGui.QApplication.colorSpec` , :meth:`PySide.QtGui.QApplication.setColorSpec` , :meth:`~PySide.QtGui.QApplication.qwsSetCustomColors`|:meth:`PySide.QtGui.QApplication.colorSpec` , :meth:`PySide.QtGui.QApplication.setColorSpec` , :meth:`~PySide.QtGui.QApplication.qwsSetCustomColors`|

    |Text handling :meth:`PySide.QtCore.QCoreApplication.installTranslator` , :meth:`PySide.QtCore.QCoreApplication.removeTranslator` :meth:`PySide.QtCore.QCoreApplication.translate`|:meth:`PySide.QtCore.QCoreApplication.installTranslator` , :meth:`PySide.QtCore.QCoreApplication.removeTranslator` :meth:`PySide.QtCore.QCoreApplication.translate`|
    +-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Widgets :meth:`PySide.QtGui.QApplication.allWidgets` , :meth:`PySide.QtGui.QApplication.topLevelWidgets` , :meth:`PySide.QtGui.QApplication.desktop` , :meth:`PySide.QtGui.QApplication.activePopupWidget` , :meth:`PySide.QtGui.QApplication.activeModalWidget` , :meth:`PySide.QtGui.QApplication.clipboard` , :meth:`PySide.QtGui.QApplication.focusWidget` , :meth:`PySide.QtGui.QApplication.activeWindow` , :meth:`PySide.QtGui.QApplication.widgetAt` .                                                                                                                                                                                                                                                                                                                                                   |:meth:`PySide.QtGui.QApplication.allWidgets` , :meth:`PySide.QtGui.QApplication.topLevelWidgets` , :meth:`PySide.QtGui.QApplication.desktop` , :meth:`PySide.QtGui.QApplication.activePopupWidget` , :meth:`PySide.QtGui.QApplication.activeModalWidget` , :meth:`PySide.QtGui.QApplication.clipboard` , :meth:`PySide.QtGui.QApplication.focusWidget` , :meth:`PySide.QtGui.QApplication.activeWindow` , :meth:`PySide.QtGui.QApplication.widgetAt` .                                                                                                                                                                                                                                                                                                                                            |

    |Advanced cursor handling :meth:`PySide.QtGui.QApplication.overrideCursor` , :meth:`PySide.QtGui.QApplication.setOverrideCursor` , :meth:`PySide.QtGui.QApplication.restoreOverrideCursor`|:meth:`PySide.QtGui.QApplication.overrideCursor` , :meth:`PySide.QtGui.QApplication.setOverrideCursor` , :meth:`PySide.QtGui.QApplication.restoreOverrideCursor`|

    |X Window System synchronization :meth:`~PySide.QtGui.QApplication.flushX` , :meth:`PySide.QtGui.QApplication.syncX`|:meth:`~PySide.QtGui.QApplication.flushX` , :meth:`PySide.QtGui.QApplication.syncX`|

    |Session management :meth:`PySide.QtGui.QApplication.isSessionRestored` , :meth:`PySide.QtGui.QApplication.sessionId` , :meth:`PySide.QtGui.QApplication.commitData` , :meth:`PySide.QtGui.QApplication.saveState`|:meth:`PySide.QtGui.QApplication.isSessionRestored` , :meth:`PySide.QtGui.QApplication.sessionId` , :meth:`PySide.QtGui.QApplication.commitData` , :meth:`PySide.QtGui.QApplication.saveState`|

    |Miscellaneous :meth:`PySide.QtGui.QApplication.closeAllWindows` , :meth:`PySide.QtCore.QCoreApplication.startingUp` , :meth:`PySide.QtCore.QCoreApplication.closingDown` , :meth:`PySide.QtGui.QApplication.type`|:meth:`PySide.QtGui.QApplication.closeAllWindows` , :meth:`PySide.QtCore.QCoreApplication.startingUp` , :meth:`PySide.QtCore.QCoreApplication.closingDown` , :meth:`PySide.QtGui.QApplication.type`|


    .. seealso::  :class:`PySide.QtCore.QCoreApplication`  :class:`PySide.QtCore.QAbstractEventDispatcher`  :class:`PySide.QtCore.QEventLoop`  :class:`PySide.QtCore.QSettings` 

.. class:: QApplication(arg__1)
           QApplication(arg__1, arg__2)
           QApplication(arg__1, arg__2)

    :param arg__1: :class:`PySequence`
    :param arg__2: :attr:`PySide.QtGui.QApplication.Type`







.. attribute:: PySide.QtGui.QApplication.Type

    +----------------------+----------------------------------------------------+
    |Constant              |Description                                         |
    +======================+====================================================+
    |QApplication.Tty      |a console application                               |
    +----------------------+----------------------------------------------------+
    |QApplication.GuiClient|a GUI client application                            |
    +----------------------+----------------------------------------------------+
    |QApplication.GuiServer|a GUI server application (for Qt for Embedded Linux)|
    +----------------------+----------------------------------------------------+


.. attribute:: PySide.QtGui.QApplication.ColorSpec

    +------------------------+----------------------------------------------------------------------------------------------------------------------+
    |Constant                |Description                                                                                                           |
    +========================+======================================================================================================================+
    |QApplication.NormalColor|the default color allocation policy                                                                                   |
    +------------------------+----------------------------------------------------------------------------------------------------------------------+
    |QApplication.CustomColor|the same as :attr:`NormalColor<QApplication.ColorSpec>` for X11; allocates colors to a palette on demand under Windows|
    +------------------------+----------------------------------------------------------------------------------------------------------------------+
    |QApplication.ManyColor  |the right choice for applications that use thousands of colors                                                        |
    +------------------------+----------------------------------------------------------------------------------------------------------------------+

    See :meth:`PySide.QtGui.QApplication.setColorSpec` for full details.


.. staticmethod:: PySide.QtGui.QApplication.aboutQt()






    Displays a simple message box about Qt. The message includes the version number of Qt being used by the application.

    This is useful for inclusion in the **Help** menu of an application, as shown in the :ref:`Menus<mainwindows/menus>` example.

    This function is a convenience slot for :meth:`QMessageBox.aboutQt()<PySide.QtGui.QMessageBox.aboutQt>` .



.. staticmethod:: PySide.QtGui.QApplication.activeModalWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the active modal widget.

    A modal widget is a special top-level widget which is a subclass of :class:`PySide.QtGui.QDialog` that specifies the modal parameter of the constructor as true. A modal widget must be closed before the user can continue with other parts of the program.

    Modal widgets are organized in a stack. This function returns the active modal widget at the top of the stack.

    .. seealso::  :meth:`PySide.QtGui.QApplication.activePopupWidget`  :meth:`PySide.QtGui.QApplication.topLevelWidgets` 


.. staticmethod:: PySide.QtGui.QApplication.activePopupWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the active popup widget.

    A popup widget is a special top-level widget that sets the ``Qt::WType_Popup`` widget flag, e.g. the :class:`PySide.QtGui.QMenu` widget. When the application opens a popup widget, all events are sent to the popup. Normal widgets and modal widgets cannot be accessed before the popup widget is closed.

    Only other popup widgets may be opened when a popup widget is shown. The popup widgets are organized in a stack. This function returns the active popup widget at the top of the stack.

    .. seealso::  :meth:`PySide.QtGui.QApplication.activeModalWidget`  :meth:`PySide.QtGui.QApplication.topLevelWidgets` 


.. staticmethod:: PySide.QtGui.QApplication.activeWindow()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the application top-level window that has the keyboard input focus, or 0 if no application window has the focus. There might be an :meth:`PySide.QtGui.QApplication.activeWindow` even if there is no :meth:`PySide.QtGui.QApplication.focusWidget` , for example if no widget in that window accepts key events.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setActiveWindow`  :meth:`QWidget.setFocus()<PySide.QtGui.QWidget.setFocus>`  :meth:`QWidget.hasFocus()<PySide.QtGui.QWidget.hasFocus>`  :meth:`PySide.QtGui.QApplication.focusWidget` 


.. staticmethod:: PySide.QtGui.QApplication.alert(widget[, duration=0])


    :param widget: :class:`PySide.QtGui.QWidget`
    :param duration: :class:`PySide.QtCore.int`




    Causes an alert to be shown for ``widget`` if the window is not the active window. The alert is shown for ``msec`` miliseconds. If ``msec`` is zero (the default), then the alert is shown indefinitely until the window becomes active again.

    Currently this function does nothing on Qt for Embedded Linux.

    On Mac OS X, this works more at the application level and will cause the application icon to bounce in the dock.

    On Windows, this causes the window's taskbar entry to flash for a time. If ``msec`` is zero, the flashing will stop and the taskbar entry will turn a different color (currently orange).

    On X11, this will cause the window to be marked as "demands attention", the window must not be hidden (i.e. not have hide() called on it, but be visible in some sort of way) in order for this to work.



.. staticmethod:: PySide.QtGui.QApplication.allWidgets()


    :rtype: 




    Returns a list of all the widgets in the application.

    The list is empty ( :meth:`QList.isEmpty` ) if there are no widgets.

    .. note::  Some of the widgets may be hidden.

    Example:

    ::

        def updateAllWidgets():
            for widget in QApplication.allWidgets()
                widget.update()


    .. seealso::  :meth:`PySide.QtGui.QApplication.topLevelWidgets`  :meth:`QWidget.isVisible()<PySide.QtGui.QWidget.isVisible>` 


.. method:: PySide.QtGui.QApplication.autoSipEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds toggles automatic SIP (software input panel) visibility.

    Set this property to ``true`` to automatically display the SIP when entering widgets that accept keyboard input. This property only affects widgets with the WA\_InputMethodEnabled attribute set, and is typically used to launch a virtual keyboard on devices which have very few or no keys.

    **The property only has an effect on platforms which use software input panels, such as Windows CE and Symbian.**\

    The default is platform dependent.



.. staticmethod:: PySide.QtGui.QApplication.beep()






    Sounds the bell, using the default volume and sound. The function is *not* available in Qt for Embedded Linux.



.. staticmethod:: PySide.QtGui.QApplication.changeOverrideCursor(arg__1)


    :param arg__1: :class:`PySide.QtGui.QCursor`




    Changes the currently active application override cursor to ``cursor`` .

    This function has no effect if :meth:`PySide.QtGui.QApplication.setOverrideCursor` was not called.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setOverrideCursor`  :meth:`PySide.QtGui.QApplication.overrideCursor`  :meth:`PySide.QtGui.QApplication.restoreOverrideCursor`  :meth:`QWidget.setCursor()<PySide.QtGui.QWidget.setCursor>` 


.. staticmethod:: PySide.QtGui.QApplication.clipboard()


    :rtype: :class:`PySide.QtGui.QClipboard`




    Returns a pointer to the application global clipboard.

    .. note::  The :class:`PySide.QtGui.QApplication` object should already be constructed before accessing the clipboard.



.. staticmethod:: PySide.QtGui.QApplication.closeAllWindows()






    Closes all top-level windows.

    This function is particularly useful for applications with many top-level windows. It could, for example, be connected to a **Exit** entry in the **File** menu:

    ::

            exitAct = QAction(tr("E&xit"), self)
            exitAct.setShortcut(tr("Ctrl+Q")")
            exitAct.setStatusTip(tr("Exit the application")")
            connect(exitAct, SIGNAL("triggered()"), qApp, SLOT("closeAllWindows()"))


    The windows are closed in random order, until one window does not accept the close event. The application quits when the last window was successfully closed; this can be turned off by setting :meth:`PySide.QtGui.QApplication.quitOnLastWindowClosed` to false.

    .. seealso::  :meth:`PySide.QtGui.QApplication.quitOnLastWindowClosed`  :meth:`PySide.QtGui.QApplication.lastWindowClosed`  :meth:`QWidget.close()<PySide.QtGui.QWidget.close>`  :meth:`QWidget.closeEvent()<PySide.QtGui.QWidget.closeEvent>`  :meth:`PySide.QtGui.QApplication.lastWindowClosed`  :meth:`PySide.QtCore.QCoreApplication.quit`  :meth:`PySide.QtGui.QApplication.topLevelWidgets`  :meth:`QWidget.isWindow()<PySide.QtGui.QWidget.isWindow>` 


.. staticmethod:: PySide.QtGui.QApplication.colorSpec()


    :rtype: :class:`PySide.QtCore.int`




    Returns the color specification.

    .. seealso::  :meth:`QApplication.setColorSpec()<PySide.QtGui.QApplication.setColorSpec>` 


.. method:: PySide.QtGui.QApplication.commitData(sm)


    :param sm: :class:`PySide.QtGui.QSessionManager`




    This function deals with :ref:`session management<session.html>` . It is invoked when the :class:`PySide.QtGui.QSessionManager` wants the application to commit all its data.

    Usually this means saving all open files, after getting permission from the user. Furthermore you may want to provide a means by which the user can cancel the shutdown.

    You should not exit the application within this function. Instead, the session manager may or may not do this afterwards, depending on the context.

    .. warning::  Within this function, no user interaction is possible, *unless* you ask the ``manager`` for explicit permission. See :meth:`QSessionManager.allowsInteraction()<PySide.QtGui.QSessionManager.allowsInteraction>` and :meth:`QSessionManager.allowsErrorInteraction()<PySide.QtGui.QSessionManager.allowsErrorInteraction>` for details and example usage.

    The default implementation requests interaction and sends a close event to all visible top-level widgets. If any event was rejected, the shutdown is canceled.

    .. seealso::  :meth:`PySide.QtGui.QApplication.isSessionRestored`  :meth:`PySide.QtGui.QApplication.sessionId`  :meth:`PySide.QtGui.QApplication.saveState`  :ref:`Session Management<session.html>` 


.. method:: PySide.QtGui.QApplication.commitDataRequest(sessionManager)


    :param sessionManager: :class:`PySide.QtGui.QSessionManager`






.. staticmethod:: PySide.QtGui.QApplication.cursorFlashTime()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the text cursor's flash (blink) time in milliseconds.

    The flash time is the time required to display, invert and restore the caret display. Usually the text cursor is displayed for half the cursor flash time, then hidden for the same amount of time, but this may vary.

    The default value on X11 is 1000 milliseconds. On Windows, the **Control Panel** value is used and setting this property sets the cursor flash time for all applications.

    We recommend that widgets do not cache this value as it may change at any time if the user changes the global desktop settings.



.. staticmethod:: PySide.QtGui.QApplication.desktop()


    :rtype: :class:`PySide.QtGui.QDesktopWidget`




    Returns the desktop widget (also called the root window).

    The desktop may be composed of multiple screens, so it would be incorrect, for example, to attempt to *center* some widget in the desktop's geometry. :class:`PySide.QtGui.QDesktopWidget` has various functions for obtaining useful geometries upon the desktop, such as :meth:`QDesktopWidget.screenGeometry()<PySide.QtGui.QDesktopWidget.screenGeometry>` and :meth:`QDesktopWidget.availableGeometry()<PySide.QtGui.QDesktopWidget.availableGeometry>` .

    On X11, it is also possible to draw on the desktop.



.. staticmethod:: PySide.QtGui.QApplication.desktopSettingsAware()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if Qt is set to use the system's standard colors, fonts, etc.; otherwise returns false. The default is true.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setDesktopSettingsAware` 


.. staticmethod:: PySide.QtGui.QApplication.doubleClickInterval()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks.

    The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used. However, on Windows and Symbian OS, calling this function sets the double click interval for all applications.



.. method:: PySide.QtGui.QApplication.focusChanged(old, now)


    :param old: :class:`PySide.QtGui.QWidget`
    :param now: :class:`PySide.QtGui.QWidget`






.. staticmethod:: PySide.QtGui.QApplication.focusWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the application widget that has the keyboard input focus, or 0 if no widget in this application has the focus.

    .. seealso::  :meth:`QWidget.setFocus()<PySide.QtGui.QWidget.setFocus>`  :meth:`QWidget.hasFocus()<PySide.QtGui.QWidget.hasFocus>`  :meth:`PySide.QtGui.QApplication.activeWindow`  :meth:`PySide.QtGui.QApplication.focusChanged` 


.. staticmethod:: PySide.QtGui.QApplication.font(arg__1)


    :param arg__1: :class:`PySide.QtGui.QWidget`
    :rtype: :class:`PySide.QtGui.QFont`




    This is an overloaded function.

    Returns the default font for the ``widget`` .

    .. seealso::  :meth:`PySide.QtGui.QApplication.fontMetrics`  :meth:`QWidget.setFont()<PySide.QtGui.QWidget.setFont>` 


.. staticmethod:: PySide.QtGui.QApplication.font()


    :rtype: :class:`PySide.QtGui.QFont`




    Returns the default application font.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setFont`  :meth:`PySide.QtGui.QApplication.fontMetrics`  :meth:`QWidget.font()<PySide.QtGui.QWidget.font>` 


.. staticmethod:: PySide.QtGui.QApplication.font(className)


    :param className: str
    :rtype: :class:`PySide.QtGui.QFont`




    This is an overloaded function.

    Returns the font for widgets of the given ``className`` .

    .. seealso::  :meth:`PySide.QtGui.QApplication.setFont`  :meth:`QWidget.font()<PySide.QtGui.QWidget.font>` 


.. method:: PySide.QtGui.QApplication.fontDatabaseChanged()








.. staticmethod:: PySide.QtGui.QApplication.fontMetrics()


    :rtype: :class:`PySide.QtGui.QFontMetrics`




    Returns display (screen) font metrics for the application font.

    .. seealso::  :meth:`PySide.QtGui.QApplication.font`  :meth:`PySide.QtGui.QApplication.setFont`  :meth:`QWidget.fontMetrics()<PySide.QtGui.QWidget.fontMetrics>`  :meth:`QPainter.fontMetrics()<PySide.QtGui.QPainter.fontMetrics>` 


.. staticmethod:: PySide.QtGui.QApplication.globalStrut()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds the minimum size that any GUI element that the user can interact with should have.

    For example, no button should be resized to be smaller than the global strut size. The strut size should be considered when reimplementing GUI controls that may be used on touch-screens or similar I/O devices.

    Example:

    ::

        class MyWidget (QWidget):
            # ...
            def sizeHint(self):
                return QSize(80, 25).expandedTo(QApplication.globalStrut())


    By default, this property contains a :class:`PySide.QtCore.QSize` object with zero width and height.



.. method:: PySide.QtGui.QApplication.inputContext()


    :rtype: :class:`PySide.QtGui.QInputContext`




    Returns the :class:`PySide.QtGui.QInputContext` instance used by the application.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setInputContext` 


.. staticmethod:: PySide.QtGui.QApplication.isEffectEnabled(arg__1)


    :param arg__1: :attr:`PySide.QtCore.Qt.UIEffect`
    :rtype: :class:`PySide.QtCore.bool`







.. staticmethod:: PySide.QtGui.QApplication.isLeftToRight()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the application's layout direction is :attr:`Qt.LeftToRight<Qt.LayoutDirection>` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QApplication.layoutDirection`  :meth:`PySide.QtGui.QApplication.isRightToLeft` 


.. staticmethod:: PySide.QtGui.QApplication.isRightToLeft()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the application's layout direction is :attr:`Qt.RightToLeft<Qt.LayoutDirection>` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QApplication.layoutDirection`  :meth:`PySide.QtGui.QApplication.isLeftToRight` 


.. method:: PySide.QtGui.QApplication.isSessionRestored()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the application has been restored from an earlier :ref:`session<session.html>` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QApplication.sessionId`  :meth:`PySide.QtGui.QApplication.commitData`  :meth:`PySide.QtGui.QApplication.saveState` 


.. staticmethod:: PySide.QtGui.QApplication.keyboardInputDirection()


    :rtype: :attr:`PySide.QtCore.Qt.LayoutDirection`




    Returns the current keyboard input direction.



.. staticmethod:: PySide.QtGui.QApplication.keyboardInputInterval()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the time limit in milliseconds that distinguishes a key press from two consecutive key presses.

    The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used.



.. staticmethod:: PySide.QtGui.QApplication.keyboardInputLocale()


    :rtype: :class:`PySide.QtCore.QLocale`




    Returns the current keyboard input locale.



.. staticmethod:: PySide.QtGui.QApplication.keyboardModifiers()


    :rtype: :class:`PySide.QtCore.Qt.KeyboardModifiers`




    Returns the current state of the modifier keys on the keyboard. The current state is updated sychronously as the event queue is emptied of events that will spontaneously change the keyboard state ( :attr:`QEvent.KeyPress<QEvent.Type>` and :attr:`QEvent.KeyRelease<QEvent.Type>` events).

    It should be noted this may not reflect the actual keys held on the input device at the time of calling but rather the modifiers as last reported in one of the above events. If no keys are being held :attr:`Qt.NoModifier<Qt.KeyboardModifier>` is returned.

    .. seealso::  :meth:`PySide.QtGui.QApplication.mouseButtons` 


.. method:: PySide.QtGui.QApplication.lastWindowClosed()








.. staticmethod:: PySide.QtGui.QApplication.layoutDirection()


    :rtype: :attr:`PySide.QtCore.Qt.LayoutDirection`




    This property holds the default layout direction for this application.

    On system start-up, the default layout direction depends on the application's language.

    .. seealso::  :meth:`QWidget.layoutDirection<PySide.QtGui.QWidget.layoutDirection>`  :meth:`PySide.QtGui.QApplication.isLeftToRight`  :meth:`PySide.QtGui.QApplication.isRightToLeft` 


.. staticmethod:: PySide.QtGui.QApplication.mouseButtons()


    :rtype: :class:`PySide.QtCore.Qt.MouseButtons`




    Returns the current state of the buttons on the mouse. The current state is updated syncronously as the event queue is emptied of events that will spontaneously change the mouse state ( :attr:`QEvent.MouseButtonPress<QEvent.Type>` and :attr:`QEvent.MouseButtonRelease<QEvent.Type>` events).

    It should be noted this may not reflect the actual buttons held on the input device at the time of calling but rather the mouse buttons as last reported in one of the above events. If no mouse buttons are being held :attr:`Qt.NoButton<Qt.MouseButton>` is returned.

    .. seealso::  :meth:`PySide.QtGui.QApplication.keyboardModifiers` 


.. staticmethod:: PySide.QtGui.QApplication.overrideCursor()


    :rtype: :class:`PySide.QtGui.QCursor`




    Returns the active application override cursor.

    This function returns 0 if no application cursor has been defined (i.e. the internal cursor stack is empty).

    .. seealso::  :meth:`PySide.QtGui.QApplication.setOverrideCursor`  :meth:`PySide.QtGui.QApplication.restoreOverrideCursor` 


.. staticmethod:: PySide.QtGui.QApplication.palette(arg__1)


    :param arg__1: :class:`PySide.QtGui.QWidget`
    :rtype: :class:`PySide.QtGui.QPalette`




    This is an overloaded function.

    If a ``widget`` is passed, the default palette for the widget's class is returned. This may or may not be the application palette. In most cases there is no special palette for certain types of widgets, but one notable exception is the popup menu under Windows, if the user has defined a special background color for menus in the display settings.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setPalette`  :meth:`QWidget.palette()<PySide.QtGui.QWidget.palette>` 


.. staticmethod:: PySide.QtGui.QApplication.palette(className)


    :param className: str
    :rtype: :class:`PySide.QtGui.QPalette`




    This is an overloaded function.

    Returns the palette for widgets of the given ``className`` .

    .. seealso::  :meth:`PySide.QtGui.QApplication.setPalette`  :meth:`QWidget.palette()<PySide.QtGui.QWidget.palette>` 


.. staticmethod:: PySide.QtGui.QApplication.palette()


    :rtype: :class:`PySide.QtGui.QPalette`




    Returns the application palette.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setPalette`  :meth:`QWidget.palette()<PySide.QtGui.QWidget.palette>` 


.. staticmethod:: PySide.QtGui.QApplication.quitOnLastWindowClosed()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the application implicitly quits when the last window is closed..

    The default is true.

    If this property is true, the applications quits when the last visible primary window (i.e. window with no parent) with the :attr:`Qt.WA_QuitOnClose<Qt.WidgetAttribute>` attribute set is closed. By default this attribute is set for all widgets except for sub-windows. Refer to :attr:`Qt.WindowType` for a detailed list of :attr:`Qt.Window<Qt.WindowType>` objects.

    .. seealso::  :meth:`PySide.QtCore.QCoreApplication.quit`  :meth:`QWidget.close()<PySide.QtGui.QWidget.close>` 


.. staticmethod:: PySide.QtGui.QApplication.restoreOverrideCursor()






    Undoes the last :meth:`PySide.QtGui.QApplication.setOverrideCursor` .

    If :meth:`PySide.QtGui.QApplication.setOverrideCursor` has been called twice, calling :meth:`PySide.QtGui.QApplication.restoreOverrideCursor` will activate the first cursor set. Calling this function a second time restores the original widgets' cursors.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setOverrideCursor`  :meth:`PySide.QtGui.QApplication.overrideCursor` 


.. method:: PySide.QtGui.QApplication.saveState(sm)


    :param sm: :class:`PySide.QtGui.QSessionManager`




    This function deals with :ref:`session management<session.html>` . It is invoked when the :class:`session manager<PySide.QtGui.QSessionManager>` wants the application to preserve its state for a future session.

    For example, a text editor would create a temporary file that includes the current contents of its edit buffers, the location of the cursor and other aspects of the current editing session.

    You should never exit the application within this function. Instead, the session manager may or may not do this afterwards, depending on the context. Futhermore, most session managers will very likely request a saved state immediately after the application has been started. This permits the session manager to learn about the application's restart policy.

    .. warning::  Within this function, no user interaction is possible, *unless* you ask the ``manager`` for explicit permission. See :meth:`QSessionManager.allowsInteraction()<PySide.QtGui.QSessionManager.allowsInteraction>` and :meth:`QSessionManager.allowsErrorInteraction()<PySide.QtGui.QSessionManager.allowsErrorInteraction>` for details.

    .. seealso::  :meth:`PySide.QtGui.QApplication.isSessionRestored`  :meth:`PySide.QtGui.QApplication.sessionId`  :meth:`PySide.QtGui.QApplication.commitData`  :ref:`Session Management<session.html>` 


.. method:: PySide.QtGui.QApplication.saveStateRequest(sessionManager)


    :param sessionManager: :class:`PySide.QtGui.QSessionManager`






.. method:: PySide.QtGui.QApplication.sessionId()


    :rtype: unicode




    Returns the current :ref:`session's<session.html>` identifier.

    If the application has been restored from an earlier session, this identifier is the same as it was in that previous session. The session identifier is guaranteed to be unique both for different applications and for different instances of the same application.

    .. seealso::  :meth:`PySide.QtGui.QApplication.isSessionRestored`  :meth:`PySide.QtGui.QApplication.sessionKey`  :meth:`PySide.QtGui.QApplication.commitData`  :meth:`PySide.QtGui.QApplication.saveState` 


.. method:: PySide.QtGui.QApplication.sessionKey()


    :rtype: unicode




    Returns the session key in the current :ref:`session<session.html>` .

    If the application has been restored from an earlier session, this key is the same as it was when the previous session ended.

    The session key changes with every call of :meth:`PySide.QtGui.QApplication.commitData` or :meth:`PySide.QtGui.QApplication.saveState` .

    .. seealso::  :meth:`PySide.QtGui.QApplication.isSessionRestored`  :meth:`PySide.QtGui.QApplication.sessionId`  :meth:`PySide.QtGui.QApplication.commitData`  :meth:`PySide.QtGui.QApplication.saveState` 


.. staticmethod:: PySide.QtGui.QApplication.setActiveWindow(act)


    :param act: :class:`PySide.QtGui.QWidget`




    Sets the active window to the ``active`` widget in response to a system event. The function is called from the platform specific event handlers.

    .. warning::  This function does *not* set the keyboard focus to the active widget. Call :meth:`QWidget.activateWindow()<PySide.QtGui.QWidget.activateWindow>` instead.

    It sets the :meth:`PySide.QtGui.QApplication.activeWindow` and :meth:`PySide.QtGui.QApplication.focusWidget` attributes and sends proper :attr:`WindowActivate<QEvent.Type>` / :attr:`WindowDeactivate<QEvent.Type>` and :attr:`FocusIn<QEvent.Type>` / :attr:`FocusOut<QEvent.Type>` events to all appropriate widgets. The window will then be painted in active state (e.g. cursors in line edits will blink), and it will have tool tips enabled.

    .. seealso::  :meth:`PySide.QtGui.QApplication.activeWindow`  :meth:`QWidget.activateWindow()<PySide.QtGui.QWidget.activateWindow>` 


.. method:: PySide.QtGui.QApplication.setAutoSipEnabled(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds toggles automatic SIP (software input panel) visibility.

    Set this property to ``true`` to automatically display the SIP when entering widgets that accept keyboard input. This property only affects widgets with the WA\_InputMethodEnabled attribute set, and is typically used to launch a virtual keyboard on devices which have very few or no keys.

    **The property only has an effect on platforms which use software input panels, such as Windows CE and Symbian.**\

    The default is platform dependent.



.. staticmethod:: PySide.QtGui.QApplication.setColorSpec(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the color specification for the application to ``spec`` .

    The color specification controls how the application allocates colors when run on a display with a limited amount of colors, e.g. 8 bit / 256 color displays.

    The color specification must be set before you create the :class:`PySide.QtGui.QApplication` object.

    The options are:

    Be aware that the :attr:`CustomColor<QApplication.ColorSpec>` and :attr:`ManyColor<QApplication.ColorSpec>` choices may lead to colormap flashing: The foreground application gets (most) of the available colors, while the background windows will look less attractive.

    Example:

    ::

        def main():
            QApplication.setColorSpec(QApplication.ManyColor)
            QApplication app(sys.argv)
            ...
            return app.exec_()



    .. seealso::  :meth:`PySide.QtGui.QApplication.colorSpec` 


.. staticmethod:: PySide.QtGui.QApplication.setCursorFlashTime(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the text cursor's flash (blink) time in milliseconds.

    The flash time is the time required to display, invert and restore the caret display. Usually the text cursor is displayed for half the cursor flash time, then hidden for the same amount of time, but this may vary.

    The default value on X11 is 1000 milliseconds. On Windows, the **Control Panel** value is used and setting this property sets the cursor flash time for all applications.

    We recommend that widgets do not cache this value as it may change at any time if the user changes the global desktop settings.



.. staticmethod:: PySide.QtGui.QApplication.setDesktopSettingsAware(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    Sets whether Qt should use the system's standard colors, fonts, etc., to ``on`` . By default, this is true.

    This function must be called before creating the :class:`PySide.QtGui.QApplication` object, like this:

    ::

        if __name__ == '__main__':
            QApplication.setDesktopSettingsAware(False)
            app = QApplication(sys.argv)
            # ...
            return app.exec_()


    .. seealso::  :meth:`PySide.QtGui.QApplication.desktopSettingsAware` 


.. staticmethod:: PySide.QtGui.QApplication.setDoubleClickInterval(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks.

    The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used. However, on Windows and Symbian OS, calling this function sets the double click interval for all applications.



.. staticmethod:: PySide.QtGui.QApplication.setEffectEnabled(arg__1[, enable=true])


    :param arg__1: :attr:`PySide.QtCore.Qt.UIEffect`
    :param enable: :class:`PySide.QtCore.bool`







.. staticmethod:: PySide.QtGui.QApplication.setFont(arg__1[, className=0])


    :param arg__1: :class:`PySide.QtGui.QFont`
    :param className: str




    Changes the default application font to ``font`` . If ``className`` is passed, the change applies only to classes that inherit ``className`` (as reported by :meth:`QObject.inherits()<PySide.QtCore.QObject.inherits>` ).

    On application start-up, the default font depends on the window system. It can vary depending on both the window system version and the locale. This function lets you override the default font; but overriding may be a bad idea because, for example, some locales need extra large fonts to support their special characters.

    .. warning::  Do not use this function in conjunction with :ref:`Qt Style Sheets<stylesheet.html>` . The font of an application can be customized using the "font" style sheet property. To set a bold font for all QPushButtons, set the application :meth:`PySide.QtGui.QApplication.styleSheet` as " :class:`PySide.QtGui.QPushButton` { font: bold }"

    .. seealso::  :meth:`PySide.QtGui.QApplication.font`  :meth:`PySide.QtGui.QApplication.fontMetrics`  :meth:`QWidget.setFont()<PySide.QtGui.QWidget.setFont>` 


.. staticmethod:: PySide.QtGui.QApplication.setGlobalStrut(arg__1)


    :param arg__1: :class:`PySide.QtCore.QSize`




    This property holds the minimum size that any GUI element that the user can interact with should have.

    For example, no button should be resized to be smaller than the global strut size. The strut size should be considered when reimplementing GUI controls that may be used on touch-screens or similar I/O devices.

    Example:

    ::

        class MyWidget (QWidget):
            # ...
            def sizeHint(self):
                return QSize(80, 25).expandedTo(QApplication.globalStrut())


    By default, this property contains a :class:`PySide.QtCore.QSize` object with zero width and height.



.. staticmethod:: PySide.QtGui.QApplication.setGraphicsSystem(arg__1)


    :param arg__1: unicode




    Sets the default graphics backend to ``system`` , which will be used for on-screen widgets and QPixmaps. The available systems are ``"native"`` , ``"raster"`` and ``"opengl"`` .

    There are several ways to set the graphics backend, in order of decreasing precedence:


    * the application commandline ``-graphicssystem`` switch
    * :meth:`QApplication.setGraphicsSystem()<PySide.QtGui.QApplication.setGraphicsSystem>`
    * the QT\_GRAPHICSSYSTEM environment variable
    * the Qt configure ``-graphicssystem`` switch

    If the highest precedence switch sets an invalid name, the error will be ignored and the default backend will be used.

    .. warning::  This function is only effective before the :class:`PySide.QtGui.QApplication` constructor is called.

    .. note::  The ``"opengl"`` option is currently experimental.



.. method:: PySide.QtGui.QApplication.setInputContext(arg__1)


    :param arg__1: :class:`PySide.QtGui.QInputContext`




    This function replaces the :class:`PySide.QtGui.QInputContext` instance used by the application with ``inputContext`` .

    Qt takes ownership of the given ``inputContext`` .

    .. seealso::  :meth:`PySide.QtGui.QApplication.inputContext` 


.. staticmethod:: PySide.QtGui.QApplication.setKeyboardInputInterval(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the time limit in milliseconds that distinguishes a key press from two consecutive key presses.

    The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used.



.. staticmethod:: PySide.QtGui.QApplication.setLayoutDirection(direction)


    :param direction: :attr:`PySide.QtCore.Qt.LayoutDirection`




    This property holds the default layout direction for this application.

    On system start-up, the default layout direction depends on the application's language.

    .. seealso::  :meth:`QWidget.layoutDirection<PySide.QtGui.QWidget.layoutDirection>`  :meth:`PySide.QtGui.QApplication.isLeftToRight`  :meth:`PySide.QtGui.QApplication.isRightToLeft` 


.. staticmethod:: PySide.QtGui.QApplication.setOverrideCursor(arg__1)


    :param arg__1: :class:`PySide.QtGui.QCursor`




    Sets the application override cursor to ``cursor`` .

    Application override cursors are intended for showing the user that the application is in a special state, for example during an operation that might take some time.

    This cursor will be displayed in all the application's widgets until :meth:`PySide.QtGui.QApplication.restoreOverrideCursor` or another :meth:`PySide.QtGui.QApplication.setOverrideCursor` is called.

    Application cursors are stored on an internal stack. :meth:`PySide.QtGui.QApplication.setOverrideCursor` pushes the cursor onto the stack, and :meth:`PySide.QtGui.QApplication.restoreOverrideCursor` pops the active cursor off the stack. :meth:`PySide.QtGui.QApplication.changeOverrideCursor` changes the curently active application override cursor.

    Every :meth:`PySide.QtGui.QApplication.setOverrideCursor` must eventually be followed by a corresponding :meth:`PySide.QtGui.QApplication.restoreOverrideCursor` , otherwise the stack will never be emptied.

    Example:

    ::

        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
        calculateHugeMandelbrot()              # lunch time...
        QApplication.restoreOverrideCursor()


    .. seealso::  :meth:`PySide.QtGui.QApplication.overrideCursor`  :meth:`PySide.QtGui.QApplication.restoreOverrideCursor`  :meth:`PySide.QtGui.QApplication.changeOverrideCursor`  :meth:`QWidget.setCursor()<PySide.QtGui.QWidget.setCursor>` 


.. staticmethod:: PySide.QtGui.QApplication.setPalette(arg__1[, className=0])


    :param arg__1: :class:`PySide.QtGui.QPalette`
    :param className: str




    Changes the default application palette to ``palette`` .

    If ``className`` is passed, the change applies only to widgets that inherit ``className`` (as reported by :meth:`QObject.inherits()<PySide.QtCore.QObject.inherits>` ). If ``className`` is left 0, the change affects all widgets, thus overriding any previously set class specific palettes.

    The palette may be changed according to the current GUI style in :meth:`QStyle.polish()<PySide.QtGui.QStyle.polish>` .

    .. warning::  Do not use this function in conjunction with :ref:`Qt Style Sheets<stylesheet.html>` . When using style sheets, the palette of a widget can be customized using the "color", "background-color", "selection-color", "selection-background-color" and "alternate-background-color".

    .. note::  Some styles do not use the palette for all drawing, for instance, if they make use of native theme engines. This is the case for the Windows XP, Windows Vista, and Mac OS X styles.

    .. seealso::  :meth:`QWidget.setPalette()<PySide.QtGui.QWidget.setPalette>`  :meth:`PySide.QtGui.QApplication.palette`  :meth:`QStyle.polish()<PySide.QtGui.QStyle.polish>` 


.. staticmethod:: PySide.QtGui.QApplication.setQuitOnLastWindowClosed(quit)


    :param quit: :class:`PySide.QtCore.bool`




    This property holds whether the application implicitly quits when the last window is closed..

    The default is true.

    If this property is true, the applications quits when the last visible primary window (i.e. window with no parent) with the :attr:`Qt.WA_QuitOnClose<Qt.WidgetAttribute>` attribute set is closed. By default this attribute is set for all widgets except for sub-windows. Refer to :attr:`Qt.WindowType` for a detailed list of :attr:`Qt.Window<Qt.WindowType>` objects.

    .. seealso::  :meth:`PySide.QtCore.QCoreApplication.quit`  :meth:`QWidget.close()<PySide.QtGui.QWidget.close>` 


.. staticmethod:: PySide.QtGui.QApplication.setStartDragDistance(l)


    :param l: :class:`PySide.QtCore.int`




    If you support drag and drop in your application, and want to start a drag and drop operation after the user has moved the cursor a certain distance with a button held down, you should use this property's value as the minimum distance required.

    For example, if the mouse position of the click is stored in ``startPos`` and the current position (e.g. in the mouse move event) is ``currentPos`` , you can find out if a drag should be started with code like this:

    ::

        if (startPos - currentPos).manhattanLength() >= QApplication.startDragDistance():
            startTheDrag()


    Qt uses this value internally, e.g. in :class:`PySide.QtGui.QFileDialog` .

    The default value is 4 pixels.

    .. seealso::  :meth:`PySide.QtGui.QApplication.startDragTime`  :meth:`QPoint.manhattanLength()<PySide.QtCore.QPoint.manhattanLength>`  :ref:`Drag and Drop<dnd.html>` 


.. staticmethod:: PySide.QtGui.QApplication.setStartDragTime(ms)


    :param ms: :class:`PySide.QtCore.int`




    This property holds the time in milliseconds that a mouse button must be held down before a drag and drop operation will begin.

    If you support drag and drop in your application, and want to start a drag and drop operation after the user has held down a mouse button for a certain amount of time, you should use this property's value as the delay.

    Qt also uses this delay internally, e.g. in :class:`PySide.QtGui.QTextEdit` and :class:`PySide.QtGui.QLineEdit` , for starting a drag.

    The default value is 500 ms.

    .. seealso::  :meth:`PySide.QtGui.QApplication.startDragDistance`  :ref:`Drag and Drop<dnd.html>` 


.. staticmethod:: PySide.QtGui.QApplication.setStyle(arg__1)


    :param arg__1: unicode
    :rtype: :class:`PySide.QtGui.QStyle`




    This is an overloaded function.

    Requests a :class:`PySide.QtGui.QStyle` object for ``style`` from the :class:`PySide.QtGui.QStyleFactory` .

    The string must be one of the :meth:`QStyleFactory.keys()<PySide.QtGui.QStyleFactory.keys>` , typically one of "windows", "motif", "cde", "plastique", "windowsxp", or "macintosh". Style names are case insensitive.

    Returns 0 if an unknown ``style`` is passed, otherwise the :class:`PySide.QtGui.QStyle` object returned is set as the application's GUI style.

    .. warning::  To ensure that the application's style is set correctly, it is best to call this function before the :class:`PySide.QtGui.QApplication` constructor, if possible.



.. staticmethod:: PySide.QtGui.QApplication.setStyle(arg__1)


    :param arg__1: :class:`PySide.QtGui.QStyle`




    Sets the application's GUI style to ``style`` . Ownership of the style object is transferred to :class:`PySide.QtGui.QApplication` , so :class:`PySide.QtGui.QApplication` will delete the style object on application exit or when a new style is set and the old style is still the parent of the application object.

    Example usage:

    ::

        QApplication.setStyle(QWindowsStyle())


    When switching application styles, the color palette is set back to the initial colors or the system defaults. This is necessary since certain styles have to adapt the color palette to be fully style-guide compliant.

    Setting the style before a palette has been se, i.e., before creating :class:`PySide.QtGui.QApplication` , will cause the application to use :meth:`QStyle.standardPalette()<PySide.QtGui.QStyle.standardPalette>` for the palette.

    .. warning::  Qt style sheets are currently not supported for custom :class:`PySide.QtGui.QStyle` subclasses. We plan to address this in some future release.

    .. seealso::  :meth:`PySide.QtGui.QApplication.style`  :class:`PySide.QtGui.QStyle`  :meth:`PySide.QtGui.QApplication.setPalette`  :meth:`PySide.QtGui.QApplication.desktopSettingsAware` 


.. method:: PySide.QtGui.QApplication.setStyleSheet(sheet)


    :param sheet: unicode




    This property holds the application style sheet.

    By default, this property returns an empty string unless the user specifies the ``-stylesheet`` option on the command line when running the application.

    .. seealso::  :meth:`QWidget.setStyle()<PySide.QtGui.QWidget.setStyle>`  :ref:`Qt Style Sheets<stylesheet.html>` 


.. staticmethod:: PySide.QtGui.QApplication.setWheelScrollLines(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the number of lines to scroll a widget, when the mouse wheel is rotated..

    If the value exceeds the widget's number of visible lines, the widget should interpret the scroll operation as a single *page up* or *page down* . If the widget is an :class:`item view class<PySide.QtGui.QAbstractItemView>` , then the result of scrolling one *line* depends on the setting of the widget's :meth:`scroll mode<PySide.QtGui.QAbstractItemView.verticalScrollMode>` . Scroll one *line* can mean :attr:`scroll one item<QAbstractItemView.ScrollMode>` or :attr:`scroll one pixel<QAbstractItemView.ScrollMode>` .

    By default, this property has a value of 3.



.. staticmethod:: PySide.QtGui.QApplication.setWindowIcon(icon)


    :param icon: :class:`PySide.QtGui.QIcon`




    This property holds the default window icon.

    .. seealso::  :meth:`QWidget.setWindowIcon()<PySide.QtGui.QWidget.setWindowIcon>`  :ref:`Setting the Application Icon<appicon.html>` 


.. staticmethod:: PySide.QtGui.QApplication.startDragDistance()


    :rtype: :class:`PySide.QtCore.int`




    If you support drag and drop in your application, and want to start a drag and drop operation after the user has moved the cursor a certain distance with a button held down, you should use this property's value as the minimum distance required.

    For example, if the mouse position of the click is stored in ``startPos`` and the current position (e.g. in the mouse move event) is ``currentPos`` , you can find out if a drag should be started with code like this:

    ::

        if (startPos - currentPos).manhattanLength() >= QApplication.startDragDistance():
            startTheDrag()


    Qt uses this value internally, e.g. in :class:`PySide.QtGui.QFileDialog` .

    The default value is 4 pixels.

    .. seealso::  :meth:`PySide.QtGui.QApplication.startDragTime`  :meth:`QPoint.manhattanLength()<PySide.QtCore.QPoint.manhattanLength>`  :ref:`Drag and Drop<dnd.html>` 


.. staticmethod:: PySide.QtGui.QApplication.startDragTime()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the time in milliseconds that a mouse button must be held down before a drag and drop operation will begin.

    If you support drag and drop in your application, and want to start a drag and drop operation after the user has held down a mouse button for a certain amount of time, you should use this property's value as the delay.

    Qt also uses this delay internally, e.g. in :class:`PySide.QtGui.QTextEdit` and :class:`PySide.QtGui.QLineEdit` , for starting a drag.

    The default value is 500 ms.

    .. seealso::  :meth:`PySide.QtGui.QApplication.startDragDistance`  :ref:`Drag and Drop<dnd.html>` 


.. staticmethod:: PySide.QtGui.QApplication.style()


    :rtype: :class:`PySide.QtGui.QStyle`




    Returns the application's style object.

    .. seealso::  :meth:`PySide.QtGui.QApplication.setStyle`  :class:`PySide.QtGui.QStyle` 


.. method:: PySide.QtGui.QApplication.styleSheet()


    :rtype: unicode




    This property holds the application style sheet.

    By default, this property returns an empty string unless the user specifies the ``-stylesheet`` option on the command line when running the application.

    .. seealso::  :meth:`QWidget.setStyle()<PySide.QtGui.QWidget.setStyle>`  :ref:`Qt Style Sheets<stylesheet.html>` 


.. staticmethod:: PySide.QtGui.QApplication.syncX()






    Synchronizes with the X server in the X11 implementation. This normally takes some time. Does nothing on other platforms.



.. staticmethod:: PySide.QtGui.QApplication.topLevelAt(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QWidget`




    This is an overloaded function.

    Returns the top-level widget at the point (``x`` , ``y`` ); returns 0 if there is no such widget.



.. staticmethod:: PySide.QtGui.QApplication.topLevelAt(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the top-level widget at the given ``point`` ; returns 0 if there is no such widget.



.. staticmethod:: PySide.QtGui.QApplication.topLevelWidgets()


    :rtype: 




    Returns a list of the top-level widgets (windows) in the application.

    .. note::  Some of the top-level widgets may be hidden, for example a tooltip if no tooltip is currently shown.

    Example:

    ::

        def showAllHiddenTopLevelWidgets():
            for widget in QApplication.topLevelWidgets():
                if widget.isHidden():
                    widget.show()


    .. seealso::  :meth:`PySide.QtGui.QApplication.allWidgets`  :meth:`QWidget.isWindow()<PySide.QtGui.QWidget.isWindow>`  :meth:`QWidget.isHidden()<PySide.QtGui.QWidget.isHidden>` 


.. staticmethod:: PySide.QtGui.QApplication.type()


    :rtype: :attr:`PySide.QtGui.QApplication.Type`




    Returns the type of application ( :attr:`Tty<QApplication.Type>` , :attr:`GuiClient<QApplication.Type>` , or :attr:`GuiServer<QApplication.Type>` ). The type is set when constructing the :class:`PySide.QtGui.QApplication` object.



.. staticmethod:: PySide.QtGui.QApplication.wheelScrollLines()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of lines to scroll a widget, when the mouse wheel is rotated..

    If the value exceeds the widget's number of visible lines, the widget should interpret the scroll operation as a single *page up* or *page down* . If the widget is an :class:`item view class<PySide.QtGui.QAbstractItemView>` , then the result of scrolling one *line* depends on the setting of the widget's :meth:`scroll mode<PySide.QtGui.QAbstractItemView.verticalScrollMode>` . Scroll one *line* can mean :attr:`scroll one item<QAbstractItemView.ScrollMode>` or :attr:`scroll one pixel<QAbstractItemView.ScrollMode>` .

    By default, this property has a value of 3.



.. staticmethod:: PySide.QtGui.QApplication.widgetAt(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QWidget`




    This is an overloaded function.

    Returns the widget at global screen position (``x`` , ``y`` ), or 0 if there is no Qt widget there.



.. staticmethod:: PySide.QtGui.QApplication.widgetAt(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget at global screen position ``point`` , or 0 if there is no Qt widget there.

    This function can be slow.

    .. seealso::  :meth:`QCursor.pos()<PySide.QtGui.QCursor.pos>`  :meth:`QWidget.grabMouse()<PySide.QtGui.QWidget.grabMouse>`  :meth:`QWidget.grabKeyboard()<PySide.QtGui.QWidget.grabKeyboard>` 


.. staticmethod:: PySide.QtGui.QApplication.windowIcon()


    :rtype: :class:`PySide.QtGui.QIcon`




    This property holds the default window icon.

    .. seealso::  :meth:`QWidget.setWindowIcon()<PySide.QtGui.QWidget.setWindowIcon>`  :ref:`Setting the Application Icon<appicon.html>` 



