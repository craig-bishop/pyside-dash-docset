.. module:: PySide.QtGui
.. _QTreeView:

QTreeView
*********

.. inheritance-diagram:: QTreeView
    :parts: 2

**Inherited by:** :ref:`QHelpContentWidget`, :ref:`QTreeWidget`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`allColumnsShowFocus<PySide.QtGui.QTreeView.allColumnsShowFocus>` ()
*    def :meth:`autoExpandDelay<PySide.QtGui.QTreeView.autoExpandDelay>` ()
*    def :meth:`columnAt<PySide.QtGui.QTreeView.columnAt>` (x)
*    def :meth:`columnViewportPosition<PySide.QtGui.QTreeView.columnViewportPosition>` (column)
*    def :meth:`columnWidth<PySide.QtGui.QTreeView.columnWidth>` (column)
*    def :meth:`drawTree<PySide.QtGui.QTreeView.drawTree>` (painter, region)
*    def :meth:`expandsOnDoubleClick<PySide.QtGui.QTreeView.expandsOnDoubleClick>` ()
*    def :meth:`header<PySide.QtGui.QTreeView.header>` ()
*    def :meth:`indentation<PySide.QtGui.QTreeView.indentation>` ()
*    def :meth:`indexAbove<PySide.QtGui.QTreeView.indexAbove>` (index)
*    def :meth:`indexBelow<PySide.QtGui.QTreeView.indexBelow>` (index)
*    def :meth:`indexRowSizeHint<PySide.QtGui.QTreeView.indexRowSizeHint>` (index)
*    def :meth:`isAnimated<PySide.QtGui.QTreeView.isAnimated>` ()
*    def :meth:`isColumnHidden<PySide.QtGui.QTreeView.isColumnHidden>` (column)
*    def :meth:`isExpanded<PySide.QtGui.QTreeView.isExpanded>` (index)
*    def :meth:`isFirstColumnSpanned<PySide.QtGui.QTreeView.isFirstColumnSpanned>` (row, parent)
*    def :meth:`isHeaderHidden<PySide.QtGui.QTreeView.isHeaderHidden>` ()
*    def :meth:`isRowHidden<PySide.QtGui.QTreeView.isRowHidden>` (row, parent)
*    def :meth:`isSortingEnabled<PySide.QtGui.QTreeView.isSortingEnabled>` ()
*    def :meth:`itemsExpandable<PySide.QtGui.QTreeView.itemsExpandable>` ()
*    def :meth:`rootIsDecorated<PySide.QtGui.QTreeView.rootIsDecorated>` ()
*    def :meth:`rowHeight<PySide.QtGui.QTreeView.rowHeight>` (index)
*    def :meth:`setAllColumnsShowFocus<PySide.QtGui.QTreeView.setAllColumnsShowFocus>` (enable)
*    def :meth:`setAnimated<PySide.QtGui.QTreeView.setAnimated>` (enable)
*    def :meth:`setAutoExpandDelay<PySide.QtGui.QTreeView.setAutoExpandDelay>` (delay)
*    def :meth:`setColumnHidden<PySide.QtGui.QTreeView.setColumnHidden>` (column, hide)
*    def :meth:`setColumnWidth<PySide.QtGui.QTreeView.setColumnWidth>` (column, width)
*    def :meth:`setExpanded<PySide.QtGui.QTreeView.setExpanded>` (index, expand)
*    def :meth:`setExpandsOnDoubleClick<PySide.QtGui.QTreeView.setExpandsOnDoubleClick>` (enable)
*    def :meth:`setFirstColumnSpanned<PySide.QtGui.QTreeView.setFirstColumnSpanned>` (row, parent, span)
*    def :meth:`setHeader<PySide.QtGui.QTreeView.setHeader>` (header)
*    def :meth:`setHeaderHidden<PySide.QtGui.QTreeView.setHeaderHidden>` (hide)
*    def :meth:`setIndentation<PySide.QtGui.QTreeView.setIndentation>` (i)
*    def :meth:`setItemsExpandable<PySide.QtGui.QTreeView.setItemsExpandable>` (enable)
*    def :meth:`setRootIsDecorated<PySide.QtGui.QTreeView.setRootIsDecorated>` (show)
*    def :meth:`setRowHidden<PySide.QtGui.QTreeView.setRowHidden>` (row, parent, hide)
*    def :meth:`setSortingEnabled<PySide.QtGui.QTreeView.setSortingEnabled>` (enable)
*    def :meth:`setUniformRowHeights<PySide.QtGui.QTreeView.setUniformRowHeights>` (uniform)
*    def :meth:`setWordWrap<PySide.QtGui.QTreeView.setWordWrap>` (on)
*    def :meth:`sortByColumn<PySide.QtGui.QTreeView.sortByColumn>` (column, order)
*    def :meth:`uniformRowHeights<PySide.QtGui.QTreeView.uniformRowHeights>` ()
*    def :meth:`visualIndex<PySide.QtGui.QTreeView.visualIndex>` (index)
*    def :meth:`wordWrap<PySide.QtGui.QTreeView.wordWrap>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`drawBranches<PySide.QtGui.QTreeView.drawBranches>` (painter, rect, index)
*    def :meth:`drawRow<PySide.QtGui.QTreeView.drawRow>` (painter, options, index)


Slots
^^^^^
.. container:: function_list

*    def :meth:`collapse<PySide.QtGui.QTreeView.collapse>` (index)
*    def :meth:`collapseAll<PySide.QtGui.QTreeView.collapseAll>` ()
*    def :meth:`columnCountChanged<PySide.QtGui.QTreeView.columnCountChanged>` (oldCount, newCount)
*    def :meth:`columnMoved<PySide.QtGui.QTreeView.columnMoved>` ()
*    def :meth:`columnResized<PySide.QtGui.QTreeView.columnResized>` (column, oldSize, newSize)
*    def :meth:`expand<PySide.QtGui.QTreeView.expand>` (index)
*    def :meth:`expandAll<PySide.QtGui.QTreeView.expandAll>` ()
*    def :meth:`expandToDepth<PySide.QtGui.QTreeView.expandToDepth>` (depth)
*    def :meth:`hideColumn<PySide.QtGui.QTreeView.hideColumn>` (column)
*    def :meth:`reexpand<PySide.QtGui.QTreeView.reexpand>` ()
*    def :meth:`resizeColumnToContents<PySide.QtGui.QTreeView.resizeColumnToContents>` (column)
*    def :meth:`rowsRemoved<PySide.QtGui.QTreeView.rowsRemoved>` (parent, first, last)
*    def :meth:`showColumn<PySide.QtGui.QTreeView.showColumn>` (column)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`collapsed<PySide.QtGui.QTreeView.collapsed>` (index)
*    def :meth:`expanded<PySide.QtGui.QTreeView.expanded>` (index)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTreeView` class provides a default model/view implementation of a tree view.

    A :class:`PySide.QtGui.QTreeView` implements a tree representation of items from a model. This class is used to provide standard hierarchical lists that were previously provided by the ``QListView`` class, but using the more flexible approach provided by Qt's model/view architecture.

    The :class:`PySide.QtGui.QTreeView` class is one of the :ref:`Model/View Classes<model-view>` and is part of Qt's :ref:`model/view framework<model-view-programming.html>` .

    :class:`PySide.QtGui.QTreeView` implements the interfaces defined by the :class:`PySide.QtGui.QAbstractItemView` class to allow it to display data provided by models derived from the :class:`PySide.QtCore.QAbstractItemModel` class.

    It is simple to construct a tree view displaying data from a model. In the following example, the contents of a directory are supplied by a :class:`PySide.QtGui.QDirModel` and displayed as a tree:

    ::

            model = QFileSystemModel()
            model.setRootPath(QDir.currentPath())

            tree =  QTreeView()
            tree.setModel(model)


    The model/view architecture ensures that the contents of the tree view are updated as the model changes.

    Items that have children can be in an expanded (children are visible) or collapsed (children are hidden) state. When this state changes a :meth:`PySide.QtGui.QTreeView.collapsed` or :meth:`PySide.QtGui.QTreeView.expanded` signal is emitted with the model index of the relevant item.

    The amount of indentation used to indicate levels of hierarchy is controlled by the :meth:`PySide.QtGui.QTreeView.indentation` property.

    Headers in tree views are constructed using the :class:`PySide.QtGui.QHeaderView` class and can be hidden using ``header()->hide()`` . Note that each header is configured with its :meth:`PySide.QtGui.QHeaderView.stretchLastSection` property set to true, ensuring that the view does not waste any of the space assigned to it for its header. If this value is set to true, this property will override the resize mode set on the last section in the header.

    .. _PySide.QtGui.QTreeView_key-bindings:



Key Bindings
^^^^^^^^^^^^

    :class:`PySide.QtGui.QTreeView` supports a set of key bindings that enable the user to navigate in the view and interact with the contents of items:

    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Key     |Action                                                                                                                                                                                                                                |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Up      |Moves the cursor to the item in the same column on the previous row. If the parent of the current item has no more rows to navigate to, the cursor moves to the relevant item in the last row of the sibling that precedes the parent.|
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Down    |Moves the cursor to the item in the same column on the next row. If the parent of the current item has no more rows to navigate to, the cursor moves to the relevant item in the first row of the sibling that follows the parent.    |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Left    |Hides the children of the current item (if present) by collapsing a branch.                                                                                                                                                           |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Minus   |Same as LeftArrow.                                                                                                                                                                                                                    |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Right   |Reveals the children of the current item (if present) by expanding a branch.                                                                                                                                                          |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Plus    |Same as RightArrow.                                                                                                                                                                                                                   |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Asterisk|Expands all children of the current item (if present).                                                                                                                                                                                |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |PageUp  |Moves the cursor up one page.                                                                                                                                                                                                         |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |PageDown|Moves the cursor down one page.                                                                                                                                                                                                       |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Home    |Moves the cursor to an item in the same column of the first row of the first top-level item in the model.                                                                                                                             |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |End     |Moves the cursor to an item in the same column of the last row of the last top-level item in the model.                                                                                                                               |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |F2      |In editable models, this opens the current item for editing. The Escape key can be used to cancel the editing process and revert any changes to the data displayed.                                                                   |
    +--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/windowsxp-treeview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/macintosh-treeview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-treeview.png|
    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
    |A :ref:`Windows XP style<gallery-windowsxp.html>` tree view.                                                |A :ref:`Macintosh style<gallery-macintosh.html>` tree view.                                                 |A :ref:`Plastique style<gallery-plastique.html>` tree view.                                                 |
    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+

    .. _PySide.QtGui.QTreeView_improving-performance:



Improving Performance
^^^^^^^^^^^^^^^^^^^^^

    It is possible to give the view hints about the data it is handling in order to improve its performance when displaying large numbers of items. One approach that can be taken for views that are intended to display items with equal heights is to set the :meth:`PySide.QtGui.QTreeView.uniformRowHeights` property to true.

    .. seealso::  :class:`PySide.QtGui.QListView`  :class:`PySide.QtGui.QTreeWidget`  :ref:`View Classes<model-view-programming.html>`  :class:`PySide.QtCore.QAbstractItemModel`  :class:`PySide.QtGui.QAbstractItemView`  :ref:`Dir View Example<itemviews/dirview>` 

.. class:: QTreeView([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Constructs a tree view with a ``parent`` to represent a model's data. Use :meth:`PySide.QtGui.QTreeView.setModel` to set the model.

    .. seealso::  :class:`PySide.QtCore.QAbstractItemModel` 

.. method:: PySide.QtGui.QTreeView.allColumnsShowFocus()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether items should show keyboard focus using all columns.

    If this property is true all columns will show focus, otherwise only one column will show focus.

    The default is false.



.. method:: PySide.QtGui.QTreeView.autoExpandDelay()


    :rtype: :class:`PySide.QtCore.int`




    This property holds The delay time before items in a tree are opened during a drag and drop operation..

    This property holds the amount of time in milliseconds that the user must wait over a node before that node will automatically open or close. If the time is set to less then 0 then it will not be activated.

    By default, this property has a value of -1, meaning that auto-expansion is disabled.



.. method:: PySide.QtGui.QTreeView.collapse(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Collapses the model item specified by the ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.collapsed` 


.. method:: PySide.QtGui.QTreeView.collapseAll()






    Collapses all expanded items.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.expandAll`  :meth:`PySide.QtGui.QTreeView.expand`  :meth:`PySide.QtGui.QTreeView.collapse`  :meth:`PySide.QtGui.QTreeView.setExpanded` 


.. method:: PySide.QtGui.QTreeView.collapsed(index)


    :param index: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtGui.QTreeView.columnAt(x)


    :param x: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the column in the tree view whose header covers the ``x`` coordinate given.



.. method:: PySide.QtGui.QTreeView.columnCountChanged(oldCount, newCount)


    :param oldCount: :class:`PySide.QtCore.int`
    :param newCount: :class:`PySide.QtCore.int`




    Informs the tree view that the number of columns in the tree view has changed from ``oldCount`` to ``newCount`` .



.. method:: PySide.QtGui.QTreeView.columnMoved()






    This slot is called whenever a column has been moved.



.. method:: PySide.QtGui.QTreeView.columnResized(column, oldSize, newSize)


    :param column: :class:`PySide.QtCore.int`
    :param oldSize: :class:`PySide.QtCore.int`
    :param newSize: :class:`PySide.QtCore.int`




    This function is called whenever ``column`` 's size is changed in the header. ``oldSize`` and ``newSize`` give the previous size and the new size in pixels.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.setColumnWidth` 


.. method:: PySide.QtGui.QTreeView.columnViewportPosition(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the horizontal position of the ``column`` in the viewport.



.. method:: PySide.QtGui.QTreeView.columnWidth(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the width of the ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.resizeColumnToContents`  :meth:`PySide.QtGui.QTreeView.setColumnWidth` 


.. method:: PySide.QtGui.QTreeView.drawBranches(painter, rect, index)


    :param painter: :class:`PySide.QtGui.QPainter`
    :param rect: :class:`PySide.QtCore.QRect`
    :param index: :class:`PySide.QtCore.QModelIndex`




    Draws the branches in the tree view on the same row as the model item ``index`` , using the ``painter`` given. The branches are drawn in the rectangle specified by ``rect`` .



.. method:: PySide.QtGui.QTreeView.drawRow(painter, options, index)


    :param painter: :class:`PySide.QtGui.QPainter`
    :param options: :class:`PySide.QtGui.QStyleOptionViewItem`
    :param index: :class:`PySide.QtCore.QModelIndex`




    Draws the row in the tree view that contains the model item ``index`` , using the ``painter`` given. The ``option`` control how the item is displayed.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setAlternatingRowColors` 


.. method:: PySide.QtGui.QTreeView.drawTree(painter, region)


    :param painter: :class:`PySide.QtGui.QPainter`
    :param region: :class:`PySide.QtGui.QRegion`




    Draws the part of the tree intersecting the given ``region`` using the specified ``painter`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.paintEvent` 


.. method:: PySide.QtGui.QTreeView.expand(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Expands the model item specified by the ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.expanded` 


.. method:: PySide.QtGui.QTreeView.expandAll()






    Expands all expandable items.

    Warning: if the model contains a large number of items, this function will take some time to execute.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.collapseAll`  :meth:`PySide.QtGui.QTreeView.expand`  :meth:`PySide.QtGui.QTreeView.collapse`  :meth:`PySide.QtGui.QTreeView.setExpanded` 


.. method:: PySide.QtGui.QTreeView.expandToDepth(depth)


    :param depth: :class:`PySide.QtCore.int`




    Expands all expandable items to the given ``depth`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.expandAll`  :meth:`PySide.QtGui.QTreeView.collapseAll`  :meth:`PySide.QtGui.QTreeView.expand`  :meth:`PySide.QtGui.QTreeView.collapse`  :meth:`PySide.QtGui.QTreeView.setExpanded` 


.. method:: PySide.QtGui.QTreeView.expanded(index)


    :param index: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtGui.QTreeView.expandsOnDoubleClick()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the items can be expanded by double-clicking..

    This property holds whether the user can expand and collapse items by double-clicking. The default value is true.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.itemsExpandable` 


.. method:: PySide.QtGui.QTreeView.header()


    :rtype: :class:`PySide.QtGui.QHeaderView`




    Returns the header for the tree view.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.setHeader`  :meth:`QAbstractItemModel.headerData()<PySide.QtCore.QAbstractItemModel.headerData>` 


.. method:: PySide.QtGui.QTreeView.hideColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Hides the ``column`` given.

    .. note::  This function should only be called after the model has been initialized, as the view needs to know the number of columns in order to hide ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.showColumn`  :meth:`PySide.QtGui.QTreeView.setColumnHidden` 


.. method:: PySide.QtGui.QTreeView.indentation()


    :rtype: :class:`PySide.QtCore.int`




    This property holds indentation of the items in the tree view..

    This property holds the indentation measured in pixels of the items for each level in the tree view. For top-level items, the indentation specifies the horizontal distance from the viewport edge to the items in the first column; for child items, it specifies their indentation from their parent items.

    By default, this property has a value of 20.



.. method:: PySide.QtGui.QTreeView.indexAbove(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the model index of the item above ``index`` .



.. method:: PySide.QtGui.QTreeView.indexBelow(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the model index of the item below ``index`` .



.. method:: PySide.QtGui.QTreeView.indexRowSizeHint(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.int`




    Returns the size hint for the row indicated by ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.sizeHintForColumn`  :meth:`PySide.QtGui.QTreeView.uniformRowHeights` 


.. method:: PySide.QtGui.QTreeView.isAnimated()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether animations are enabled.

    If this property is true the treeview will animate expandsion and collasping of branches. If this property is false, the treeview will expand or collapse branches immediately without showing the animation.

    By default, this property is false.



.. method:: PySide.QtGui.QTreeView.isColumnHidden(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the ``column`` is hidden; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.hideColumn`  :meth:`PySide.QtGui.QTreeView.isRowHidden` 


.. method:: PySide.QtGui.QTreeView.isExpanded(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the model item ``index`` is expanded; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.expand`  :meth:`PySide.QtGui.QTreeView.expanded`  :meth:`PySide.QtGui.QTreeView.setExpanded` 


.. method:: PySide.QtGui.QTreeView.isFirstColumnSpanned(row, parent)


    :param row: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item in first column in the given ``row`` of the ``parent`` is spanning all the columns; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.setFirstColumnSpanned` 


.. method:: PySide.QtGui.QTreeView.isHeaderHidden()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the header is shown or not..

    If this property is true, the header is not shown otherwise it is. The default value is false.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.header` 


.. method:: PySide.QtGui.QTreeView.isRowHidden(row, parent)


    :param row: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item in the given ``row`` of the ``parent`` is hidden; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.setRowHidden`  :meth:`PySide.QtGui.QTreeView.isColumnHidden` 


.. method:: PySide.QtGui.QTreeView.isSortingEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether sorting is enabled.

    If this property is true, sorting is enabled for the tree; if the property is false, sorting is not enabled. The default value is false.

    .. note::  In order to avoid performance issues, it is recommended that sorting is enabled *after* inserting the items into the tree. Alternatively, you could also insert the items into a list before inserting the items into the tree.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.sortByColumn` 


.. method:: PySide.QtGui.QTreeView.itemsExpandable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the items are expandable by the user..

    This property holds whether the user can expand and collapse items interactively.

    By default, this property is true.



.. method:: PySide.QtGui.QTreeView.reexpand()








.. method:: PySide.QtGui.QTreeView.resizeColumnToContents(column)


    :param column: :class:`PySide.QtCore.int`




    Resizes the ``column`` given to the size of its contents.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.columnWidth`  :meth:`PySide.QtGui.QTreeView.setColumnWidth` 


.. method:: PySide.QtGui.QTreeView.rootIsDecorated()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether to show controls for expanding and collapsing top-level items.

    Items with children are typically shown with controls to expand and collapse them, allowing their children to be shown or hidden. If this property is false, these controls are not shown for top-level items. This can be used to make a single level tree structure appear like a simple list of items.

    By default, this property is true.



.. method:: PySide.QtGui.QTreeView.rowHeight(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.int`




    Returns the height of the row indicated by the given ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.indexRowSizeHint` 


.. method:: PySide.QtGui.QTreeView.rowsRemoved(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`




    Informs the view that the rows from the ``start`` row to the ``end`` row inclusive have been removed from the given ``parent`` model item.



.. method:: PySide.QtGui.QTreeView.setAllColumnsShowFocus(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether items should show keyboard focus using all columns.

    If this property is true all columns will show focus, otherwise only one column will show focus.

    The default is false.



.. method:: PySide.QtGui.QTreeView.setAnimated(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether animations are enabled.

    If this property is true the treeview will animate expandsion and collasping of branches. If this property is false, the treeview will expand or collapse branches immediately without showing the animation.

    By default, this property is false.



.. method:: PySide.QtGui.QTreeView.setAutoExpandDelay(delay)


    :param delay: :class:`PySide.QtCore.int`




    This property holds The delay time before items in a tree are opened during a drag and drop operation..

    This property holds the amount of time in milliseconds that the user must wait over a node before that node will automatically open or close. If the time is set to less then 0 then it will not be activated.

    By default, this property has a value of -1, meaning that auto-expansion is disabled.



.. method:: PySide.QtGui.QTreeView.setColumnHidden(column, hide)


    :param column: :class:`PySide.QtCore.int`
    :param hide: :class:`PySide.QtCore.bool`




    If ``hide`` is true the ``column`` is hidden, otherwise the ``column`` is shown.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.isColumnHidden`  :meth:`PySide.QtGui.QTreeView.hideColumn`  :meth:`PySide.QtGui.QTreeView.setRowHidden` 


.. method:: PySide.QtGui.QTreeView.setColumnWidth(column, width)


    :param column: :class:`PySide.QtCore.int`
    :param width: :class:`PySide.QtCore.int`




    Sets the width of the given ``column`` to the ``width`` specified.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.columnWidth`  :meth:`PySide.QtGui.QTreeView.resizeColumnToContents` 


.. method:: PySide.QtGui.QTreeView.setExpanded(index, expand)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param expand: :class:`PySide.QtCore.bool`




    Sets the item referred to by ``index`` to either collapse or expanded, depending on the value of ``expanded`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeView.expanded`  :meth:`PySide.QtGui.QTreeView.expand`  :meth:`PySide.QtGui.QTreeView.isExpanded` 


.. method:: PySide.QtGui.QTreeView.setExpandsOnDoubleClick(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether the items can be expanded by double-clicking..

    This property holds whether the user can expand and collapse items by double-clicking. The default value is true.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.itemsExpandable` 


.. method:: PySide.QtGui.QTreeView.setFirstColumnSpanned(row, parent, span)


    :param row: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param span: :class:`PySide.QtCore.bool`




    If ``span`` is true the item in the first column in the ``row`` with the given ``parent`` is set to span all columns, otherwise all items on the ``row`` are shown.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.isFirstColumnSpanned` 


.. method:: PySide.QtGui.QTreeView.setHeader(header)


    :param header: :class:`PySide.QtGui.QHeaderView`




    Sets the header for the tree view, to the given ``header`` .

    The view takes ownership over the given ``header`` and deletes it when a new header is set.

    .. seealso::  :meth:`QAbstractItemModel.headerData()<PySide.QtCore.QAbstractItemModel.headerData>` 


.. method:: PySide.QtGui.QTreeView.setHeaderHidden(hide)


    :param hide: :class:`PySide.QtCore.bool`




    This property holds whether the header is shown or not..

    If this property is true, the header is not shown otherwise it is. The default value is false.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.header` 


.. method:: PySide.QtGui.QTreeView.setIndentation(i)


    :param i: :class:`PySide.QtCore.int`




    This property holds indentation of the items in the tree view..

    This property holds the indentation measured in pixels of the items for each level in the tree view. For top-level items, the indentation specifies the horizontal distance from the viewport edge to the items in the first column; for child items, it specifies their indentation from their parent items.

    By default, this property has a value of 20.



.. method:: PySide.QtGui.QTreeView.setItemsExpandable(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether the items are expandable by the user..

    This property holds whether the user can expand and collapse items interactively.

    By default, this property is true.



.. method:: PySide.QtGui.QTreeView.setRootIsDecorated(show)


    :param show: :class:`PySide.QtCore.bool`




    This property holds whether to show controls for expanding and collapsing top-level items.

    Items with children are typically shown with controls to expand and collapse them, allowing their children to be shown or hidden. If this property is false, these controls are not shown for top-level items. This can be used to make a single level tree structure appear like a simple list of items.

    By default, this property is true.



.. method:: PySide.QtGui.QTreeView.setRowHidden(row, parent, hide)


    :param row: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param hide: :class:`PySide.QtCore.bool`




    If ``hide`` is true the ``row`` with the given ``parent`` is hidden, otherwise the ``row`` is shown.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.isRowHidden`  :meth:`PySide.QtGui.QTreeView.setColumnHidden` 


.. method:: PySide.QtGui.QTreeView.setSortingEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether sorting is enabled.

    If this property is true, sorting is enabled for the tree; if the property is false, sorting is not enabled. The default value is false.

    .. note::  In order to avoid performance issues, it is recommended that sorting is enabled *after* inserting the items into the tree. Alternatively, you could also insert the items into a list before inserting the items into the tree.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.sortByColumn` 


.. method:: PySide.QtGui.QTreeView.setUniformRowHeights(uniform)


    :param uniform: :class:`PySide.QtCore.bool`




    This property holds whether all items in the treeview have the same height.

    This property should only be set to true if it is guaranteed that all items in the view has the same height. This enables the view to do some optimizations.

    The height is obtained from the first item in the view. It is updated when the data changes on that item.

    By default, this property is false.



.. method:: PySide.QtGui.QTreeView.setWordWrap(on)


    :param on: :class:`PySide.QtCore.bool`




    This property holds the item text word-wrapping policy.

    If this property is true then the item text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all. This property is false by default.

    Note that even if wrapping is enabled, the cell will not be expanded to fit all text. Ellipsis will be inserted according to the current :meth:`PySide.QtGui.QAbstractItemView.textElideMode` .



.. method:: PySide.QtGui.QTreeView.showColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Shows the given ``column`` in the tree view.

    .. seealso::  :meth:`PySide.QtGui.QTreeView.hideColumn`  :meth:`PySide.QtGui.QTreeView.setColumnHidden` 


.. method:: PySide.QtGui.QTreeView.sortByColumn(column, order)


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QTreeView.uniformRowHeights()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether all items in the treeview have the same height.

    This property should only be set to true if it is guaranteed that all items in the view has the same height. This enables the view to do some optimizations.

    The height is obtained from the first item in the view. It is updated when the data changes on that item.

    By default, this property is false.



.. method:: PySide.QtGui.QTreeView.visualIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTreeView.wordWrap()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds the item text word-wrapping policy.

    If this property is true then the item text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all. This property is false by default.

    Note that even if wrapping is enabled, the cell will not be expanded to fit all text. Ellipsis will be inserted according to the current :meth:`PySide.QtGui.QAbstractItemView.textElideMode` .




