.. module:: PySide.QtGui
.. _QAbstractItemView:

QAbstractItemView
*****************

.. inheritance-diagram:: QAbstractItemView
    :parts: 2

**Inherited by:** :ref:`QHeaderView`, :ref:`QTreeView`, :ref:`QHelpContentWidget`, :ref:`QTreeWidget`, :ref:`QListView`, :ref:`QHelpIndexWidget`, :ref:`QUndoView`, :ref:`QListWidget`, :ref:`QColumnView`, :ref:`QTableView`, :ref:`QTableWidget`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`alternatingRowColors<PySide.QtGui.QAbstractItemView.alternatingRowColors>` ()
*    def :meth:`autoScrollMargin<PySide.QtGui.QAbstractItemView.autoScrollMargin>` ()
*    def :meth:`closePersistentEditor<PySide.QtGui.QAbstractItemView.closePersistentEditor>` (index)
*    def :meth:`currentIndex<PySide.QtGui.QAbstractItemView.currentIndex>` ()
*    def :meth:`defaultDropAction<PySide.QtGui.QAbstractItemView.defaultDropAction>` ()
*    def :meth:`dirtyRegionOffset<PySide.QtGui.QAbstractItemView.dirtyRegionOffset>` ()
*    def :meth:`doAutoScroll<PySide.QtGui.QAbstractItemView.doAutoScroll>` ()
*    def :meth:`dragDropMode<PySide.QtGui.QAbstractItemView.dragDropMode>` ()
*    def :meth:`dragDropOverwriteMode<PySide.QtGui.QAbstractItemView.dragDropOverwriteMode>` ()
*    def :meth:`dragEnabled<PySide.QtGui.QAbstractItemView.dragEnabled>` ()
*    def :meth:`dropIndicatorPosition<PySide.QtGui.QAbstractItemView.dropIndicatorPosition>` ()
*    def :meth:`editTriggers<PySide.QtGui.QAbstractItemView.editTriggers>` ()
*    def :meth:`executeDelayedItemsLayout<PySide.QtGui.QAbstractItemView.executeDelayedItemsLayout>` ()
*    def :meth:`hasAutoScroll<PySide.QtGui.QAbstractItemView.hasAutoScroll>` ()
*    def :meth:`horizontalScrollMode<PySide.QtGui.QAbstractItemView.horizontalScrollMode>` ()
*    def :meth:`iconSize<PySide.QtGui.QAbstractItemView.iconSize>` ()
*    def :meth:`indexWidget<PySide.QtGui.QAbstractItemView.indexWidget>` (index)
*    def :meth:`itemDelegate<PySide.QtGui.QAbstractItemView.itemDelegate>` ()
*    def :meth:`itemDelegate<PySide.QtGui.QAbstractItemView.itemDelegate>` (index)
*    def :meth:`itemDelegateForColumn<PySide.QtGui.QAbstractItemView.itemDelegateForColumn>` (column)
*    def :meth:`itemDelegateForRow<PySide.QtGui.QAbstractItemView.itemDelegateForRow>` (row)
*    def :meth:`model<PySide.QtGui.QAbstractItemView.model>` ()
*    def :meth:`openPersistentEditor<PySide.QtGui.QAbstractItemView.openPersistentEditor>` (index)
*    def :meth:`rootIndex<PySide.QtGui.QAbstractItemView.rootIndex>` ()
*    def :meth:`scheduleDelayedItemsLayout<PySide.QtGui.QAbstractItemView.scheduleDelayedItemsLayout>` ()
*    def :meth:`scrollDirtyRegion<PySide.QtGui.QAbstractItemView.scrollDirtyRegion>` (dx, dy)
*    def :meth:`selectionBehavior<PySide.QtGui.QAbstractItemView.selectionBehavior>` ()
*    def :meth:`selectionMode<PySide.QtGui.QAbstractItemView.selectionMode>` ()
*    def :meth:`selectionModel<PySide.QtGui.QAbstractItemView.selectionModel>` ()
*    def :meth:`setAlternatingRowColors<PySide.QtGui.QAbstractItemView.setAlternatingRowColors>` (enable)
*    def :meth:`setAutoScroll<PySide.QtGui.QAbstractItemView.setAutoScroll>` (enable)
*    def :meth:`setAutoScrollMargin<PySide.QtGui.QAbstractItemView.setAutoScrollMargin>` (margin)
*    def :meth:`setDefaultDropAction<PySide.QtGui.QAbstractItemView.setDefaultDropAction>` (dropAction)
*    def :meth:`setDirtyRegion<PySide.QtGui.QAbstractItemView.setDirtyRegion>` (region)
*    def :meth:`setDragDropMode<PySide.QtGui.QAbstractItemView.setDragDropMode>` (behavior)
*    def :meth:`setDragDropOverwriteMode<PySide.QtGui.QAbstractItemView.setDragDropOverwriteMode>` (overwrite)
*    def :meth:`setDragEnabled<PySide.QtGui.QAbstractItemView.setDragEnabled>` (enable)
*    def :meth:`setDropIndicatorShown<PySide.QtGui.QAbstractItemView.setDropIndicatorShown>` (enable)
*    def :meth:`setEditTriggers<PySide.QtGui.QAbstractItemView.setEditTriggers>` (triggers)
*    def :meth:`setHorizontalScrollMode<PySide.QtGui.QAbstractItemView.setHorizontalScrollMode>` (mode)
*    def :meth:`setIconSize<PySide.QtGui.QAbstractItemView.setIconSize>` (size)
*    def :meth:`setIndexWidget<PySide.QtGui.QAbstractItemView.setIndexWidget>` (index, widget)
*    def :meth:`setItemDelegate<PySide.QtGui.QAbstractItemView.setItemDelegate>` (delegate)
*    def :meth:`setItemDelegateForColumn<PySide.QtGui.QAbstractItemView.setItemDelegateForColumn>` (column, delegate)
*    def :meth:`setItemDelegateForRow<PySide.QtGui.QAbstractItemView.setItemDelegateForRow>` (row, delegate)
*    def :meth:`setSelectionBehavior<PySide.QtGui.QAbstractItemView.setSelectionBehavior>` (behavior)
*    def :meth:`setSelectionMode<PySide.QtGui.QAbstractItemView.setSelectionMode>` (mode)
*    def :meth:`setState<PySide.QtGui.QAbstractItemView.setState>` (state)
*    def :meth:`setTabKeyNavigation<PySide.QtGui.QAbstractItemView.setTabKeyNavigation>` (enable)
*    def :meth:`setTextElideMode<PySide.QtGui.QAbstractItemView.setTextElideMode>` (mode)
*    def :meth:`setVerticalScrollMode<PySide.QtGui.QAbstractItemView.setVerticalScrollMode>` (mode)
*    def :meth:`showDropIndicator<PySide.QtGui.QAbstractItemView.showDropIndicator>` ()
*    def :meth:`sizeHintForIndex<PySide.QtGui.QAbstractItemView.sizeHintForIndex>` (index)
*    def :meth:`startAutoScroll<PySide.QtGui.QAbstractItemView.startAutoScroll>` ()
*    def :meth:`state<PySide.QtGui.QAbstractItemView.state>` ()
*    def :meth:`stopAutoScroll<PySide.QtGui.QAbstractItemView.stopAutoScroll>` ()
*    def :meth:`tabKeyNavigation<PySide.QtGui.QAbstractItemView.tabKeyNavigation>` ()
*    def :meth:`textElideMode<PySide.QtGui.QAbstractItemView.textElideMode>` ()
*    def :meth:`verticalScrollMode<PySide.QtGui.QAbstractItemView.verticalScrollMode>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`closeEditor<PySide.QtGui.QAbstractItemView.closeEditor>` (editor, hint)
*    def :meth:`commitData<PySide.QtGui.QAbstractItemView.commitData>` (editor)
*    def :meth:`currentChanged<PySide.QtGui.QAbstractItemView.currentChanged>` (current, previous)
*    def :meth:`dataChanged<PySide.QtGui.QAbstractItemView.dataChanged>` (topLeft, bottomRight)
*    def :meth:`doItemsLayout<PySide.QtGui.QAbstractItemView.doItemsLayout>` ()
*    def :meth:`edit<PySide.QtGui.QAbstractItemView.edit>` (index, trigger, event)
*    def :meth:`editorDestroyed<PySide.QtGui.QAbstractItemView.editorDestroyed>` (editor)
*    def :meth:`horizontalOffset<PySide.QtGui.QAbstractItemView.horizontalOffset>` ()
*    def :meth:`horizontalScrollbarAction<PySide.QtGui.QAbstractItemView.horizontalScrollbarAction>` (action)
*    def :meth:`horizontalScrollbarValueChanged<PySide.QtGui.QAbstractItemView.horizontalScrollbarValueChanged>` (value)
*    def :meth:`indexAt<PySide.QtGui.QAbstractItemView.indexAt>` (point)
*    def :meth:`isIndexHidden<PySide.QtGui.QAbstractItemView.isIndexHidden>` (index)
*    def :meth:`keyboardSearch<PySide.QtGui.QAbstractItemView.keyboardSearch>` (search)
*    def :meth:`moveCursor<PySide.QtGui.QAbstractItemView.moveCursor>` (cursorAction, modifiers)
*    def :meth:`reset<PySide.QtGui.QAbstractItemView.reset>` ()
*    def :meth:`rowsAboutToBeRemoved<PySide.QtGui.QAbstractItemView.rowsAboutToBeRemoved>` (parent, start, end)
*    def :meth:`rowsInserted<PySide.QtGui.QAbstractItemView.rowsInserted>` (parent, start, end)
*    def :meth:`scrollTo<PySide.QtGui.QAbstractItemView.scrollTo>` (index[, hint=EnsureVisible])
*    def :meth:`selectAll<PySide.QtGui.QAbstractItemView.selectAll>` ()
*    def :meth:`selectedIndexes<PySide.QtGui.QAbstractItemView.selectedIndexes>` ()
*    def :meth:`selectionChanged<PySide.QtGui.QAbstractItemView.selectionChanged>` (selected, deselected)
*    def :meth:`selectionCommand<PySide.QtGui.QAbstractItemView.selectionCommand>` (index[, event=None])
*    def :meth:`setModel<PySide.QtGui.QAbstractItemView.setModel>` (model)
*    def :meth:`setRootIndex<PySide.QtGui.QAbstractItemView.setRootIndex>` (index)
*    def :meth:`setSelection<PySide.QtGui.QAbstractItemView.setSelection>` (rect, command)
*    def :meth:`setSelectionModel<PySide.QtGui.QAbstractItemView.setSelectionModel>` (selectionModel)
*    def :meth:`sizeHintForColumn<PySide.QtGui.QAbstractItemView.sizeHintForColumn>` (column)
*    def :meth:`sizeHintForRow<PySide.QtGui.QAbstractItemView.sizeHintForRow>` (row)
*    def :meth:`startDrag<PySide.QtGui.QAbstractItemView.startDrag>` (supportedActions)
*    def :meth:`updateEditorData<PySide.QtGui.QAbstractItemView.updateEditorData>` ()
*    def :meth:`updateEditorGeometries<PySide.QtGui.QAbstractItemView.updateEditorGeometries>` ()
*    def :meth:`updateGeometries<PySide.QtGui.QAbstractItemView.updateGeometries>` ()
*    def :meth:`verticalOffset<PySide.QtGui.QAbstractItemView.verticalOffset>` ()
*    def :meth:`verticalScrollbarAction<PySide.QtGui.QAbstractItemView.verticalScrollbarAction>` (action)
*    def :meth:`verticalScrollbarValueChanged<PySide.QtGui.QAbstractItemView.verticalScrollbarValueChanged>` (value)
*    def :meth:`viewOptions<PySide.QtGui.QAbstractItemView.viewOptions>` ()
*    def :meth:`visualRect<PySide.QtGui.QAbstractItemView.visualRect>` (index)
*    def :meth:`visualRegionForSelection<PySide.QtGui.QAbstractItemView.visualRegionForSelection>` (selection)


Slots
^^^^^
.. container:: function_list

*    def :meth:`clearSelection<PySide.QtGui.QAbstractItemView.clearSelection>` ()
*    def :meth:`edit<PySide.QtGui.QAbstractItemView.edit>` (index)
*    def :meth:`scrollToBottom<PySide.QtGui.QAbstractItemView.scrollToBottom>` ()
*    def :meth:`scrollToTop<PySide.QtGui.QAbstractItemView.scrollToTop>` ()
*    def :meth:`setCurrentIndex<PySide.QtGui.QAbstractItemView.setCurrentIndex>` (index)
*    def :meth:`update<PySide.QtGui.QAbstractItemView.update>` (index)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`activated<PySide.QtGui.QAbstractItemView.activated>` (index)
*    def :meth:`clicked<PySide.QtGui.QAbstractItemView.clicked>` (index)
*    def :meth:`doubleClicked<PySide.QtGui.QAbstractItemView.doubleClicked>` (index)
*    def :meth:`entered<PySide.QtGui.QAbstractItemView.entered>` (index)
*    def :meth:`pressed<PySide.QtGui.QAbstractItemView.pressed>` (index)
*    def :meth:`viewportEntered<PySide.QtGui.QAbstractItemView.viewportEntered>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QAbstractItemView` class provides the basic functionality for item view classes.

    :class:`PySide.QtGui.QAbstractItemView` class is the base class for every standard view that uses a :class:`PySide.QtCore.QAbstractItemModel` . :class:`PySide.QtGui.QAbstractItemView` is an abstract class and cannot itself be instantiated. It provides a standard interface for interoperating with models through the signals and slots mechanism, enabling subclasses to be kept up-to-date with changes to their models. This class provides standard support for keyboard and mouse navigation, viewport scrolling, item editing, and selections. The keyboard navigation implements this functionality:

    +-----------------+-------------------------------------------------------------------------------------------+
    |Keys             |Functionality                                                                              |
    +-----------------+-------------------------------------------------------------------------------------------+
    |Arrow keys       |Changes the current item and selects it.                                                   |
    +-----------------+-------------------------------------------------------------------------------------------+
    |Ctrl+Arrow keys  |Changes the current item but does not select it.                                           |
    +-----------------+-------------------------------------------------------------------------------------------+
    |Shift+Arrow keys |Changes the current item and selects it. The previously selected item(s) is not deselected.|
    +-----------------+-------------------------------------------------------------------------------------------+
    |Ctr+Space        |Toggles selection of the current item.                                                     |
    +-----------------+-------------------------------------------------------------------------------------------+
    |Tab/Backtab      |Changes the current item to the next/previous item.                                        |
    +-----------------+-------------------------------------------------------------------------------------------+
    |Home/End         |Selects the first/last item in the model.                                                  |
    +-----------------+-------------------------------------------------------------------------------------------+
    |Page up/Page down|Scrolls the rows shown up/down by the number of visible rows in the view.                  |
    +-----------------+-------------------------------------------------------------------------------------------+
    |Ctrl+A           |Selects all items in the model.                                                            |
    +-----------------+-------------------------------------------------------------------------------------------+

    Note that the above table assumes that the :meth:`selection mode<PySide.QtGui.QAbstractItemView.selectionMode>` allows the operations. For instance, you cannot select items if the selection mode is :attr:`QAbstractItemView.NoSelection<QAbstractItemView.SelectionMode>` .

    The :class:`PySide.QtGui.QAbstractItemView` class is one of the :ref:`Model/View Classes<model-view>` and is part of Qt's :ref:`model/view framework<model-view-programming.html>` .

    The view classes that inherit :class:`PySide.QtGui.QAbstractItemView` only need to implement their own view-specific functionality, such as drawing items, returning the geometry of items, finding items, etc.

    :class:`PySide.QtGui.QAbstractItemView` provides common slots such as :meth:`PySide.QtGui.QAbstractItemView.edit` and :meth:`PySide.QtGui.QAbstractItemView.setCurrentIndex` . Many protected slots are also provided, including :meth:`PySide.QtGui.QAbstractItemView.dataChanged` , :meth:`PySide.QtGui.QAbstractItemView.rowsInserted` , :meth:`PySide.QtGui.QAbstractItemView.rowsAboutToBeRemoved` , :meth:`PySide.QtGui.QAbstractItemView.selectionChanged` , and :meth:`PySide.QtGui.QAbstractItemView.currentChanged` .

    The root item is returned by :meth:`PySide.QtGui.QAbstractItemView.rootIndex` , and the current item by :meth:`PySide.QtGui.QAbstractItemView.currentIndex` . To make sure that an item is visible use :meth:`PySide.QtGui.QAbstractItemView.scrollTo` .

    Some of :class:`PySide.QtGui.QAbstractItemView` 's functions are concerned with scrolling, for example :meth:`PySide.QtGui.QAbstractItemView.setHorizontalScrollMode` and :meth:`PySide.QtGui.QAbstractItemView.setVerticalScrollMode` . To set the range of the scroll bars, you can, for example, reimplement the view's :meth:`PySide.QtGui.QAbstractItemView.resizeEvent` function:

    ::

        def resizeEvent(self, event):
            horizontalScrollBar().setRange(0, realWidth - width())
            ...


    Note that the range is not updated until the widget is shown.

    Several other functions are concerned with selection control; for example :meth:`PySide.QtGui.QAbstractItemView.setSelectionMode` , and :meth:`PySide.QtGui.QAbstractItemView.setSelectionBehavior` . This class provides a default selection model to work with ( :meth:`PySide.QtGui.QAbstractItemView.selectionModel` ), but this can be replaced by using :meth:`PySide.QtGui.QAbstractItemView.setSelectionModel` with an instance of :class:`PySide.QtGui.QItemSelectionModel` .

    For complete control over the display and editing of items you can specify a delegate with :meth:`PySide.QtGui.QAbstractItemView.setItemDelegate` .

    :class:`PySide.QtGui.QAbstractItemView` provides a lot of protected functions. Some are concerned with editing, for example, :meth:`PySide.QtGui.QAbstractItemView.edit` , and :meth:`PySide.QtGui.QAbstractItemView.commitData` , whilst others are keyboard and mouse event handlers.

    .. note::  If you inherit :class:`PySide.QtGui.QAbstractItemView` and intend to update the contents of the viewport, you should use viewport-> :meth:`PySide.QtGui.QAbstractItemView.update` instead of :meth:`PySide.QtGui.QWidget.update` as all painting operations take place on the viewport.

    .. seealso::  :ref:`View Classes<model-view-programming.html>`  :ref:`Model/View Programming<model-view-programming.html>`  :class:`PySide.QtCore.QAbstractItemModel`  :ref:`Chart Example<itemviews/chart>` 

.. class:: QAbstractItemView([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Constructs an abstract item view with the given ``parent`` .


.. attribute:: PySide.QtGui.QAbstractItemView.DragDropMode

    Describes the various drag and drop events the view can act upon. By default the view does not support dragging or dropping (``NoDragDrop`` ).

    +------------------------------+-----------------------------------------------------------------+
    |Constant                      |Description                                                      |
    +==============================+=================================================================+
    |QAbstractItemView.NoDragDrop  |Does not support dragging or dropping.                           |
    +------------------------------+-----------------------------------------------------------------+
    |QAbstractItemView.DragOnly    |The view supports dragging of its own items                      |
    +------------------------------+-----------------------------------------------------------------+
    |QAbstractItemView.DropOnly    |The view accepts drops                                           |
    +------------------------------+-----------------------------------------------------------------+
    |QAbstractItemView.DragDrop    |The view supports both dragging and dropping                     |
    +------------------------------+-----------------------------------------------------------------+
    |QAbstractItemView.InternalMove|The view accepts move (**not copy**) operations only from itself.|
    +------------------------------+-----------------------------------------------------------------+

    Note that the model used needs to provide support for drag and drop operations.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setDragDropMode`  :ref:`Using drag and drop with item views<model-view-programming.html>` 

.. attribute:: PySide.QtGui.QAbstractItemView.SelectionBehavior

    +-------------------------------+-----------------------+
    |Constant                       |Description            |
    +===============================+=======================+
    |QAbstractItemView.SelectItems  |Selecting single items.|
    +-------------------------------+-----------------------+
    |QAbstractItemView.SelectRows   |Selecting only rows.   |
    +-------------------------------+-----------------------+
    |QAbstractItemView.SelectColumns|Selecting only columns.|
    +-------------------------------+-----------------------+


.. attribute:: PySide.QtGui.QAbstractItemView.EditTrigger

    This enum describes actions which will initiate item editing.

    +---------------------------------+------------------------------------------------------------------------+
    |Constant                         |Description                                                             |
    +=================================+========================================================================+
    |QAbstractItemView.NoEditTriggers |No editing possible.                                                    |
    +---------------------------------+------------------------------------------------------------------------+
    |QAbstractItemView.CurrentChanged |Editing start whenever current item changes.                            |
    +---------------------------------+------------------------------------------------------------------------+
    |QAbstractItemView.DoubleClicked  |Editing starts when an item is double clicked.                          |
    +---------------------------------+------------------------------------------------------------------------+
    |QAbstractItemView.SelectedClicked|Editing starts when clicking on an already selected item.               |
    +---------------------------------+------------------------------------------------------------------------+
    |QAbstractItemView.EditKeyPressed |Editing starts when the platform edit key has been pressed over an item.|
    +---------------------------------+------------------------------------------------------------------------+
    |QAbstractItemView.AnyKeyPressed  |Editing starts when any key is pressed over an item.                    |
    +---------------------------------+------------------------------------------------------------------------+
    |QAbstractItemView.AllEditTriggers|Editing starts for all above actions.                                   |
    +---------------------------------+------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QAbstractItemView.ScrollMode

    +--------------------------------+------------------------------------------------------+
    |Constant                        |Description                                           |
    +================================+======================================================+
    |QAbstractItemView.ScrollPerItem |The view will scroll the contents one item at a time. |
    +--------------------------------+------------------------------------------------------+
    |QAbstractItemView.ScrollPerPixel|The view will scroll the contents one pixel at a time.|
    +--------------------------------+------------------------------------------------------+


.. attribute:: PySide.QtGui.QAbstractItemView.CursorAction

    This enum describes the different ways to navigate between items,

    +------------------------------+-------------------------------------------+
    |Constant                      |Description                                |
    +==============================+===========================================+
    |QAbstractItemView.MoveUp      |Move to the item above the current item.   |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MoveDown    |Move to the item below the current item.   |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MoveLeft    |Move to the item left of the current item. |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MoveRight   |Move to the item right of the current item.|
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MoveHome    |Move to the top-left corner item.          |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MoveEnd     |Move to the bottom-right corner item.      |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MovePageUp  |Move one page up above the current item.   |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MovePageDown|Move one page down below the current item. |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MoveNext    |Move to the item after the current item.   |
    +------------------------------+-------------------------------------------+
    |QAbstractItemView.MovePrevious|Move to the item before the current item.  |
    +------------------------------+-------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.moveCursor` 

.. attribute:: PySide.QtGui.QAbstractItemView.DropIndicatorPosition

    This enum indicates the position of the drop indicator in relation to the index at the current mouse position:

    +----------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                    |Description                                                                                                                                                                            |
    +============================+=======================================================================================================================================================================================+
    |QAbstractItemView.OnItem    |The item will be dropped on the index.                                                                                                                                                 |
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QAbstractItemView.AboveItem |The item will be dropped above the index.                                                                                                                                              |
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QAbstractItemView.BelowItem |The item will be dropped below the index.                                                                                                                                              |
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QAbstractItemView.OnViewport|The item will be dropped onto a region of the viewport with no items. The way each view handles items dropped onto the viewport depends on the behavior of the underlying model in use.|
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QAbstractItemView.ScrollHint

    +----------------------------------+----------------------------------------------------------+
    |Constant                          |Description                                               |
    +==================================+==========================================================+
    |QAbstractItemView.EnsureVisible   |Scroll to ensure that the item is visible.                |
    +----------------------------------+----------------------------------------------------------+
    |QAbstractItemView.PositionAtTop   |Scroll to position the item at the top of the viewport.   |
    +----------------------------------+----------------------------------------------------------+
    |QAbstractItemView.PositionAtBottom|Scroll to position the item at the bottom of the viewport.|
    +----------------------------------+----------------------------------------------------------+
    |QAbstractItemView.PositionAtCenter|Scroll to position the item at the center of the viewport.|
    +----------------------------------+----------------------------------------------------------+


.. attribute:: PySide.QtGui.QAbstractItemView.SelectionMode

    This enum indicates how the view responds to user selections:


    |Constant                             |Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |

    |QAbstractItemView.SingleSelection    |When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item by clicking on it.                                                                                                                                                                                                                                                                                                                                                            |

    |QAbstractItemView.ContiguousSelection|When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.                                                                                                                                                                                                 |

    |QAbstractItemView.ExtendedSelection  |When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.|

    |QAbstractItemView.MultiSelection     |When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.                                                                                                                                                                                                                                                                                                           |

    |QAbstractItemView.NoSelection        |Items cannot be selected.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |


    The most commonly used modes are :attr:`SingleSelection<QAbstractItemView.SelectionMode>` and :attr:`ExtendedSelection<QAbstractItemView.SelectionMode>` .


.. attribute:: PySide.QtGui.QAbstractItemView.State

    Describes the different states the view can be in. This is usually only interesting when reimplementing your own view.

    +------------------------------------+-----------------------------------------------+
    |Constant                            |Description                                    |
    +====================================+===============================================+
    |QAbstractItemView.NoState           |The is the default state.                      |
    +------------------------------------+-----------------------------------------------+
    |QAbstractItemView.DraggingState     |The user is dragging items.                    |
    +------------------------------------+-----------------------------------------------+
    |QAbstractItemView.DragSelectingState|The user is selecting items.                   |
    +------------------------------------+-----------------------------------------------+
    |QAbstractItemView.EditingState      |The user is editing an item in a widget editor.|
    +------------------------------------+-----------------------------------------------+
    |QAbstractItemView.ExpandingState    |The user is opening a branch of items.         |
    +------------------------------------+-----------------------------------------------+
    |QAbstractItemView.CollapsingState   |The user is closing a branch of items.         |
    +------------------------------------+-----------------------------------------------+
    |QAbstractItemView.AnimatingState    |The item view is performing an animation.      |
    +------------------------------------+-----------------------------------------------+


.. method:: PySide.QtGui.QAbstractItemView.activated(index)


    :param index: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtGui.QAbstractItemView.alternatingRowColors()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether to draw the background using alternating colors.

    If this property is true, the item background will be drawn using :attr:`QPalette.Base<QPalette.ColorRole>` and :attr:`QPalette.AlternateBase<QPalette.ColorRole>` ; otherwise the background will be drawn using the :attr:`QPalette.Base<QPalette.ColorRole>` color.

    By default, this property is false.



.. method:: PySide.QtGui.QAbstractItemView.autoScrollMargin()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the size of the area when auto scrolling is triggered.

    This property controls the size of the area at the edge of the viewport that triggers autoscrolling. The default value is 16 pixels.



.. method:: PySide.QtGui.QAbstractItemView.clearSelection()






    Deselects all selected items. The current index will not be changed.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setSelection`  :meth:`PySide.QtGui.QAbstractItemView.selectAll` 


.. method:: PySide.QtGui.QAbstractItemView.clicked(index)


    :param index: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtGui.QAbstractItemView.closeEditor(editor, hint)


    :param editor: :class:`PySide.QtGui.QWidget`
    :param hint: :attr:`PySide.QtGui.QAbstractItemDelegate.EndEditHint`







.. method:: PySide.QtGui.QAbstractItemView.closePersistentEditor(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Closes the persistent editor for the item at the given ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.openPersistentEditor` 


.. method:: PySide.QtGui.QAbstractItemView.commitData(editor)


    :param editor: :class:`PySide.QtGui.QWidget`




    Commit the data in the ``editor`` to the model.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.closeEditor` 


.. method:: PySide.QtGui.QAbstractItemView.currentChanged(current, previous)


    :param current: :class:`PySide.QtCore.QModelIndex`
    :param previous: :class:`PySide.QtCore.QModelIndex`




    This slot is called when a new item becomes the current item. The previous current item is specified by the ``previous`` index, and the new item by the ``current`` index.

    If you want to know about changes to items see the :meth:`PySide.QtGui.QAbstractItemView.dataChanged` signal.



.. method:: PySide.QtGui.QAbstractItemView.currentIndex()


    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the model index of the current item.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setCurrentIndex` 


.. method:: PySide.QtGui.QAbstractItemView.dataChanged(topLeft, bottomRight)


    :param topLeft: :class:`PySide.QtCore.QModelIndex`
    :param bottomRight: :class:`PySide.QtCore.QModelIndex`




    This slot is called when items are changed in the model. The changed items are those from ``topLeft`` to ``bottomRight`` inclusive. If just one item is changed ``topLeft`` == ``bottomRight`` .



.. method:: PySide.QtGui.QAbstractItemView.defaultDropAction()


    :rtype: :attr:`PySide.QtCore.Qt.DropAction`




    This property holds the drop action that will be used by default in QAbstractItemView::drag().

    If the property is not set, the drop action is CopyAction when the supported actions support CopyAction.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.showDropIndicator`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode` 


.. method:: PySide.QtGui.QAbstractItemView.dirtyRegionOffset()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the offset of the dirty regions in the view.

    If you use :meth:`PySide.QtGui.QAbstractItemView.scrollDirtyRegion` and implement a :meth:`PySide.QtGui.QAbstractScrollArea.paintEvent` in a subclass of :class:`PySide.QtGui.QAbstractItemView` , you should translate the area given by the paint event with the offset returned from this function.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.scrollDirtyRegion`  :meth:`PySide.QtGui.QAbstractItemView.setDirtyRegion` 


.. method:: PySide.QtGui.QAbstractItemView.doAutoScroll()








.. method:: PySide.QtGui.QAbstractItemView.doItemsLayout()






    This function is intended to lay out the items in the view. The default implementation just calls :meth:`PySide.QtGui.QAbstractItemView.updateGeometries` and updates the viewport.



.. method:: PySide.QtGui.QAbstractItemView.doubleClicked(index)


    :param index: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtGui.QAbstractItemView.dragDropMode()


    :rtype: :attr:`PySide.QtGui.QAbstractItemView.DragDropMode`




    This property holds the drag and drop event the view will act upon.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.showDropIndicator`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode` 


.. method:: PySide.QtGui.QAbstractItemView.dragDropOverwriteMode()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds the view's drag and drop behavior.

    If its value is ``true`` , the selected data will overwrite the existing item data when dropped, while moving the data will clear the item. If its value is ``false`` , the selected data will be inserted as a new item when the data is dropped. When the data is moved, the item is removed as well.

    The default value is ``false`` , as in the :class:`PySide.QtGui.QListView` and :class:`PySide.QtGui.QTreeView` subclasses. In the :class:`PySide.QtGui.QTableView` subclass, on the other hand, the property has been set to ``true`` .

    Note: This is not intended to prevent overwriting of items. The model's implementation of :meth:`~PySide.QtGui.QAbstractItemView.flags` should do that by not returning :attr:`Qt.ItemIsDropEnabled<Qt.ItemFlag>` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.dragDropMode` 


.. method:: PySide.QtGui.QAbstractItemView.dragEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the view supports dragging of its own items.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.showDropIndicator`  :attr:`QAbstractItemView.DragDropMode`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode`  :meth:`PySide.QtGui.QWidget.acceptDrops` 


.. method:: PySide.QtGui.QAbstractItemView.dropIndicatorPosition()


    :rtype: :attr:`PySide.QtGui.QAbstractItemView.DropIndicatorPosition`




    Returns the position of the drop indicator in relation to the closest item.



.. method:: PySide.QtGui.QAbstractItemView.edit(index, trigger, event)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param trigger: :attr:`PySide.QtGui.QAbstractItemView.EditTrigger`
    :param event: :class:`PySide.QtCore.QEvent`
    :rtype: :class:`PySide.QtCore.bool`




    Starts editing the item at ``index`` , creating an editor if necessary, and returns true if the view's :attr:`QAbstractItemView.State` is now :attr:`EditingState<QAbstractItemView.State>` ; otherwise returns false.

    The action that caused the editing process is described by ``trigger`` , and the associated event is specified by ``event`` .

    Editing can be forced by specifying the ``trigger`` to be :attr:`QAbstractItemView.AllEditTriggers<QAbstractItemView.EditTrigger>` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.closeEditor` 


.. method:: PySide.QtGui.QAbstractItemView.edit(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Starts editing the item corresponding to the given ``index`` if it is editable.

    Note that this function does not change the current index. Since the current index defines the next and previous items to edit, users may find that keyboard navigation does not work as expected. To provide consistent navigation behavior, call :meth:`PySide.QtGui.QAbstractItemView.setCurrentIndex` before this function with the same model index.

    .. seealso::  :meth:`QModelIndex.flags()<PySide.QtCore.QModelIndex.flags>` 


.. method:: PySide.QtGui.QAbstractItemView.editTriggers()


    :rtype: :class:`PySide.QtGui.QAbstractItemView.EditTriggers`




    This property holds which actions will initiate item editing.

    This property is a selection of flags defined by :attr:`QAbstractItemView.EditTrigger` , combined using the OR operator. The view will only initiate the editing of an item if the action performed is set in this property.



.. method:: PySide.QtGui.QAbstractItemView.editorDestroyed(editor)


    :param editor: :class:`PySide.QtCore.QObject`




    This function is called when the given ``editor`` has been destroyed.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.closeEditor` 


.. method:: PySide.QtGui.QAbstractItemView.entered(index)


    :param index: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtGui.QAbstractItemView.executeDelayedItemsLayout()






    Executes the scheduled layouts without waiting for the event processing to begin.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.scheduleDelayedItemsLayout` 


.. method:: PySide.QtGui.QAbstractItemView.hasAutoScroll()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether autoscrolling in drag move events is enabled.

    If this property is set to true (the default), the :class:`PySide.QtGui.QAbstractItemView` automatically scrolls the contents of the view if the user drags within 16 pixels of the viewport edge. If the current item changes, then the view will scroll automatically to ensure that the current item is fully visible.

    This property only works if the viewport accepts drops. Autoscroll is switched off by setting this property to false.



.. method:: PySide.QtGui.QAbstractItemView.horizontalOffset()


    :rtype: :class:`PySide.QtCore.int`




    Returns the horizontal offset of the view.

    In the base class this is a pure virtual function.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.verticalOffset` 


.. method:: PySide.QtGui.QAbstractItemView.horizontalScrollMode()


    :rtype: :attr:`PySide.QtGui.QAbstractItemView.ScrollMode`




    This property holds how the view scrolls its contents in the horizontal direction.

    This property controls how the view scroll its contents horizontally. Scrolling can be done either per pixel or per item.



.. method:: PySide.QtGui.QAbstractItemView.horizontalScrollbarAction(action)


    :param action: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QAbstractItemView.horizontalScrollbarValueChanged(value)


    :param value: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QAbstractItemView.iconSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds the size of items' icons.

    Setting this property when the view is visible will cause the items to be laid out again.



.. method:: PySide.QtGui.QAbstractItemView.indexAt(point)


    :param point: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the model index of the item at the viewport coordinates ``point`` .

    In the base class this is a pure virtual function.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.visualRect` 


.. method:: PySide.QtGui.QAbstractItemView.indexWidget(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget for the item at the given ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setIndexWidget` 


.. method:: PySide.QtGui.QAbstractItemView.isIndexHidden(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item referred to by the given ``index`` is hidden in the view, otherwise returns false.

    Hiding is a view specific feature. For example in TableView a column can be marked as hidden or a row in the TreeView.

    In the base class this is a pure virtual function.



.. method:: PySide.QtGui.QAbstractItemView.itemDelegate()


    :rtype: :class:`PySide.QtGui.QAbstractItemDelegate`




    Returns the item delegate used by this view and model. This is either one set with :meth:`PySide.QtGui.QAbstractItemView.setItemDelegate` , or the default one.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setItemDelegate` 


.. method:: PySide.QtGui.QAbstractItemView.itemDelegate(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtGui.QAbstractItemDelegate`




    Returns the item delegate used by this view and model for the given ``index`` .



.. method:: PySide.QtGui.QAbstractItemView.itemDelegateForColumn(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QAbstractItemDelegate`




    Returns the item delegate used by this view and model for the given ``column`` . You can call :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` to get a pointer to the current delegate for a given index.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setItemDelegateForColumn`  :meth:`PySide.QtGui.QAbstractItemView.itemDelegateForRow`  :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` 


.. method:: PySide.QtGui.QAbstractItemView.itemDelegateForRow(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QAbstractItemDelegate`




    Returns the item delegate used by this view and model for the given ``row`` , or 0 if no delegate has been assigned. You can call :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` to get a pointer to the current delegate for a given index.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setItemDelegateForRow`  :meth:`PySide.QtGui.QAbstractItemView.itemDelegateForColumn`  :meth:`PySide.QtGui.QAbstractItemView.setItemDelegate` 


.. method:: PySide.QtGui.QAbstractItemView.keyboardSearch(search)


    :param search: unicode




    Moves to and selects the item best matching the string ``search`` . If no item is found nothing happens.

    In the default implementation, the search is reset if ``search`` is empty, or the time interval since the last search has exceeded :meth:`QApplication.keyboardInputInterval()<PySide.QtGui.QApplication.keyboardInputInterval>` .



.. method:: PySide.QtGui.QAbstractItemView.model()


    :rtype: :class:`PySide.QtCore.QAbstractItemModel`




    Returns the model that this view is presenting.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setModel` 


.. method:: PySide.QtGui.QAbstractItemView.moveCursor(cursorAction, modifiers)


    :param cursorAction: :attr:`PySide.QtGui.QAbstractItemView.CursorAction`
    :param modifiers: :class:`PySide.QtCore.Qt.KeyboardModifiers`
    :rtype: :class:`PySide.QtCore.QModelIndex`







.. method:: PySide.QtGui.QAbstractItemView.openPersistentEditor(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Opens a persistent editor on the item at the given ``index`` . If no editor exists, the delegate will create a new editor.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.closePersistentEditor` 


.. method:: PySide.QtGui.QAbstractItemView.pressed(index)


    :param index: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtGui.QAbstractItemView.reset()






    Reset the internal state of the view.

    .. warning::  This function will reset open editors, scroll bar positions, selections, etc. Existing changes will not be committed. If you would like to save your changes when resetting the view, you can reimplement this function, commit your changes, and then call the superclass' implementation.



.. method:: PySide.QtGui.QAbstractItemView.rootIndex()


    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the model index of the model's root item. The root item is the parent item to the view's toplevel items. The root can be invalid.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setRootIndex` 


.. method:: PySide.QtGui.QAbstractItemView.rowsAboutToBeRemoved(parent, start, end)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param start: :class:`PySide.QtCore.int`
    :param end: :class:`PySide.QtCore.int`




    This slot is called when rows are about to be removed. The deleted rows are those under the given ``parent`` from ``start`` to ``end`` inclusive.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.rowsInserted` 


.. method:: PySide.QtGui.QAbstractItemView.rowsInserted(parent, start, end)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param start: :class:`PySide.QtCore.int`
    :param end: :class:`PySide.QtCore.int`




    This slot is called when rows are inserted. The new rows are those under the given ``parent`` from ``start`` to ``end`` inclusive. The base class implementation calls fetchMore() on the model to check for more data.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.rowsAboutToBeRemoved` 


.. method:: PySide.QtGui.QAbstractItemView.scheduleDelayedItemsLayout()






    Schedules a layout of the items in the view to be executed when the event processing starts.

    Even if :meth:`PySide.QtGui.QAbstractItemView.scheduleDelayedItemsLayout` is called multiple times before events are processed, the view will only do the layout once.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.executeDelayedItemsLayout` 


.. method:: PySide.QtGui.QAbstractItemView.scrollDirtyRegion(dx, dy)


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`




    Prepares the view for scrolling by (``dx`` ,``dy`` ) pixels by moving the dirty regions in the opposite direction. You only need to call this function if you are implementing a scrolling viewport in your view subclass.

    If you implement :meth:`PySide.QtGui.QAbstractScrollArea.scrollContentsBy` in a subclass of :class:`PySide.QtGui.QAbstractItemView` , call this function before you call :meth:`QWidget.scroll()<PySide.QtGui.QWidget.scroll>` on the viewport. Alternatively, just call :meth:`PySide.QtGui.QAbstractItemView.update` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractScrollArea.scrollContentsBy`  :meth:`PySide.QtGui.QAbstractItemView.dirtyRegionOffset`  :meth:`PySide.QtGui.QAbstractItemView.setDirtyRegion` 


.. method:: PySide.QtGui.QAbstractItemView.scrollTo(index[, hint=EnsureVisible])


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param hint: :attr:`PySide.QtGui.QAbstractItemView.ScrollHint`




    Scrolls the view if necessary to ensure that the item at ``index`` is visible. The view will try to position the item according to the given ``hint`` .

    In the base class this is a pure virtual function.



.. method:: PySide.QtGui.QAbstractItemView.scrollToBottom()






    Scrolls the view to the bottom.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.scrollTo`  :meth:`PySide.QtGui.QAbstractItemView.scrollToTop` 


.. method:: PySide.QtGui.QAbstractItemView.scrollToTop()






    Scrolls the view to the top.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.scrollTo`  :meth:`PySide.QtGui.QAbstractItemView.scrollToBottom` 


.. method:: PySide.QtGui.QAbstractItemView.selectAll()






    Selects all items in the view. This function will use the selection behavior set on the view when selecting.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setSelection`  :meth:`PySide.QtGui.QAbstractItemView.selectedIndexes`  :meth:`PySide.QtGui.QAbstractItemView.clearSelection` 


.. method:: PySide.QtGui.QAbstractItemView.selectedIndexes()


    :rtype: :class:`PySide.QtCore.QModelIndexList`




    This convenience function returns a list of all selected and non-hidden item indexes in the view. The list contains no duplicates, and is not sorted.

    .. seealso::  :meth:`QItemSelectionModel.selectedIndexes()<PySide.QtGui.QItemSelectionModel.selectedIndexes>` 


.. method:: PySide.QtGui.QAbstractItemView.selectionBehavior()


    :rtype: :attr:`PySide.QtGui.QAbstractItemView.SelectionBehavior`




    This property holds which selection behavior the view uses.

    This property holds whether selections are done in terms of single items, rows or columns.

    .. seealso::  :attr:`QAbstractItemView.SelectionMode`  :attr:`QAbstractItemView.SelectionBehavior` 


.. method:: PySide.QtGui.QAbstractItemView.selectionChanged(selected, deselected)


    :param selected: :class:`PySide.QtGui.QItemSelection`
    :param deselected: :class:`PySide.QtGui.QItemSelection`




    This slot is called when the selection is changed. The previous selection (which may be empty), is specified by ``deselected`` , and the new selection by ``selected`` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setSelection` 


.. method:: PySide.QtGui.QAbstractItemView.selectionCommand(index[, event=None])


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param event: :class:`PySide.QtCore.QEvent`
    :rtype: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`




    Returns the SelectionFlags to be used when updating a selection with to include the ``index`` specified. The ``event`` is a user input event, such as a mouse or keyboard event.

    Reimplement this function to define your own selection behavior.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setSelection` 


.. method:: PySide.QtGui.QAbstractItemView.selectionMode()


    :rtype: :attr:`PySide.QtGui.QAbstractItemView.SelectionMode`




    This property holds which selection mode the view operates in.

    This property controls whether the user can select one or many items and, in many-item selections, whether the selection must be a continuous range of items.

    .. seealso::  :attr:`QAbstractItemView.SelectionMode`  :attr:`QAbstractItemView.SelectionBehavior` 


.. method:: PySide.QtGui.QAbstractItemView.selectionModel()


    :rtype: :class:`PySide.QtGui.QItemSelectionModel`




    Returns the current selection model.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setSelectionModel`  :meth:`PySide.QtGui.QAbstractItemView.selectedIndexes` 


.. method:: PySide.QtGui.QAbstractItemView.setAlternatingRowColors(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether to draw the background using alternating colors.

    If this property is true, the item background will be drawn using :attr:`QPalette.Base<QPalette.ColorRole>` and :attr:`QPalette.AlternateBase<QPalette.ColorRole>` ; otherwise the background will be drawn using the :attr:`QPalette.Base<QPalette.ColorRole>` color.

    By default, this property is false.



.. method:: PySide.QtGui.QAbstractItemView.setAutoScroll(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether autoscrolling in drag move events is enabled.

    If this property is set to true (the default), the :class:`PySide.QtGui.QAbstractItemView` automatically scrolls the contents of the view if the user drags within 16 pixels of the viewport edge. If the current item changes, then the view will scroll automatically to ensure that the current item is fully visible.

    This property only works if the viewport accepts drops. Autoscroll is switched off by setting this property to false.



.. method:: PySide.QtGui.QAbstractItemView.setAutoScrollMargin(margin)


    :param margin: :class:`PySide.QtCore.int`




    This property holds the size of the area when auto scrolling is triggered.

    This property controls the size of the area at the edge of the viewport that triggers autoscrolling. The default value is 16 pixels.



.. method:: PySide.QtGui.QAbstractItemView.setCurrentIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Sets the current item to be the item at ``index`` .

    Unless the current selection mode is :attr:`NoSelection<QAbstractItemView.SelectionMode>` , the item is also be selected. Note that this function also updates the starting position for any new selections the user performs.

    To set an item as the current item without selecting it, call

    ``selectionModel()->setCurrentIndex(index, QItemSelectionModel::NoUpdate);``\

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.currentIndex`  :meth:`PySide.QtGui.QAbstractItemView.currentChanged`  :meth:`PySide.QtGui.QAbstractItemView.selectionMode` 


.. method:: PySide.QtGui.QAbstractItemView.setDefaultDropAction(dropAction)


    :param dropAction: :attr:`PySide.QtCore.Qt.DropAction`




    This property holds the drop action that will be used by default in QAbstractItemView::drag().

    If the property is not set, the drop action is CopyAction when the supported actions support CopyAction.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.showDropIndicator`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode` 


.. method:: PySide.QtGui.QAbstractItemView.setDirtyRegion(region)


    :param region: :class:`PySide.QtGui.QRegion`




    Marks the given ``region`` as dirty and schedules it to be updated. You only need to call this function if you are implementing your own view subclass.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.scrollDirtyRegion`  :meth:`PySide.QtGui.QAbstractItemView.dirtyRegionOffset` 


.. method:: PySide.QtGui.QAbstractItemView.setDragDropMode(behavior)


    :param behavior: :attr:`PySide.QtGui.QAbstractItemView.DragDropMode`




    This property holds the drag and drop event the view will act upon.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.showDropIndicator`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode` 


.. method:: PySide.QtGui.QAbstractItemView.setDragDropOverwriteMode(overwrite)


    :param overwrite: :class:`PySide.QtCore.bool`




    This property holds the view's drag and drop behavior.

    If its value is ``true`` , the selected data will overwrite the existing item data when dropped, while moving the data will clear the item. If its value is ``false`` , the selected data will be inserted as a new item when the data is dropped. When the data is moved, the item is removed as well.

    The default value is ``false`` , as in the :class:`PySide.QtGui.QListView` and :class:`PySide.QtGui.QTreeView` subclasses. In the :class:`PySide.QtGui.QTableView` subclass, on the other hand, the property has been set to ``true`` .

    Note: This is not intended to prevent overwriting of items. The model's implementation of :meth:`~PySide.QtGui.QAbstractItemView.flags` should do that by not returning :attr:`Qt.ItemIsDropEnabled<Qt.ItemFlag>` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.dragDropMode` 


.. method:: PySide.QtGui.QAbstractItemView.setDragEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether the view supports dragging of its own items.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.showDropIndicator`  :attr:`QAbstractItemView.DragDropMode`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode`  :meth:`PySide.QtGui.QWidget.acceptDrops` 


.. method:: PySide.QtGui.QAbstractItemView.setDropIndicatorShown(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether the drop indicator is shown when dragging items and dropping..

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.dragEnabled`  :attr:`QAbstractItemView.DragDropMode`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode`  :meth:`PySide.QtGui.QWidget.acceptDrops` 


.. method:: PySide.QtGui.QAbstractItemView.setEditTriggers(triggers)


    :param triggers: :class:`PySide.QtGui.QAbstractItemView.EditTriggers`




    This property holds which actions will initiate item editing.

    This property is a selection of flags defined by :attr:`QAbstractItemView.EditTrigger` , combined using the OR operator. The view will only initiate the editing of an item if the action performed is set in this property.



.. method:: PySide.QtGui.QAbstractItemView.setHorizontalScrollMode(mode)


    :param mode: :attr:`PySide.QtGui.QAbstractItemView.ScrollMode`




    This property holds how the view scrolls its contents in the horizontal direction.

    This property controls how the view scroll its contents horizontally. Scrolling can be done either per pixel or per item.



.. method:: PySide.QtGui.QAbstractItemView.setIconSize(size)


    :param size: :class:`PySide.QtCore.QSize`




    This property holds the size of items' icons.

    Setting this property when the view is visible will cause the items to be laid out again.



.. method:: PySide.QtGui.QAbstractItemView.setIndexWidget(index, widget)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param widget: :class:`PySide.QtGui.QWidget`




    Sets the given ``widget`` on the item at the given ``index`` , passing the ownership of the widget to the viewport.

    If ``index`` is invalid (e.g., if you pass the root index), this function will do nothing.

    The given ``widget`` 's :class:`autoFillBackground<PySide.QtGui.QWidget>` property must be set to true, otherwise the widget's background will be transparent, showing both the model data and the item at the given ``index`` .

    If index widget A is replaced with index widget B, index widget A will be deleted. For example, in the code snippet below, the :class:`PySide.QtGui.QLineEdit` object will be deleted.

    ::

        setIndexWidget(index, QLineEdit())
        ...
        setIndexWidget(index, QTextEdit())


    This function should only be used to display static content within the visible area corresponding to an item of data. If you want to display custom dynamic content or implement a custom editor widget, subclass :class:`PySide.QtGui.QItemDelegate` instead.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.indexWidget`  :ref:`Delegate Classes<model-view-programming.html>` 


.. method:: PySide.QtGui.QAbstractItemView.setItemDelegate(delegate)


    :param delegate: :class:`PySide.QtGui.QAbstractItemDelegate`




    Sets the item delegate for this view and its model to ``delegate`` . This is useful if you want complete control over the editing and display of items.

    Any existing delegate will be removed, but not deleted. :class:`PySide.QtGui.QAbstractItemView` does not take ownership of ``delegate`` .

    .. warning::  You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the :meth:`PySide.QtGui.QAbstractItemDelegate.closeEditor` signal, and attempt to access, modify or close an editor that has already been closed.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` 


.. method:: PySide.QtGui.QAbstractItemView.setItemDelegateForColumn(column, delegate)


    :param column: :class:`PySide.QtCore.int`
    :param delegate: :class:`PySide.QtGui.QAbstractItemDelegate`




    Sets the given item ``delegate`` used by this view and model for the given ``column`` . All items on ``column`` will be drawn and managed by ``delegate`` instead of using the default delegate (i.e., :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` ).

    Any existing column delegate for ``column`` will be removed, but not deleted. :class:`PySide.QtGui.QAbstractItemView` does not take ownership of ``delegate`` .

    .. note::  If a delegate has been assigned to both a row and a column, the row delegate will take precedence and manage the intersecting cell index.

    .. warning::  You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the :meth:`PySide.QtGui.QAbstractItemDelegate.closeEditor` signal, and attempt to access, modify or close an editor that has already been closed.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.itemDelegateForColumn`  :meth:`PySide.QtGui.QAbstractItemView.setItemDelegateForRow`  :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` 


.. method:: PySide.QtGui.QAbstractItemView.setItemDelegateForRow(row, delegate)


    :param row: :class:`PySide.QtCore.int`
    :param delegate: :class:`PySide.QtGui.QAbstractItemDelegate`




    Sets the given item ``delegate`` used by this view and model for the given ``row`` . All items on ``row`` will be drawn and managed by ``delegate`` instead of using the default delegate (i.e., :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` ).

    Any existing row delegate for ``row`` will be removed, but not deleted. :class:`PySide.QtGui.QAbstractItemView` does not take ownership of ``delegate`` .

    .. note::  If a delegate has been assigned to both a row and a column, the row delegate (i.e., this delegate) will take precedence and manage the intersecting cell index.

    .. warning::  You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the :meth:`PySide.QtGui.QAbstractItemDelegate.closeEditor` signal, and attempt to access, modify or close an editor that has already been closed.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.itemDelegateForRow`  :meth:`PySide.QtGui.QAbstractItemView.setItemDelegateForColumn`  :meth:`PySide.QtGui.QAbstractItemView.itemDelegate` 


.. method:: PySide.QtGui.QAbstractItemView.setModel(model)


    :param model: :class:`PySide.QtCore.QAbstractItemModel`




    Sets the ``model`` for the view to present.

    This function will create and set a new selection model, replacing any model that was previously set with :meth:`PySide.QtGui.QAbstractItemView.setSelectionModel` . However, the old selection model will not be deleted as it may be shared between several views. We recommend that you delete the old selection model if it is no longer required. This is done with the following code:

    ::

        m = view->selectionModel()
        view->setModel(model())
        del m


    If both the old model and the old selection model do not have parents, or if their parents are long-lived objects, it may be preferable to call their :meth:`~PySide.QtGui.QAbstractItemView.deleteLater` functions to explicitly delete them.

    The view *does not* take ownership of the model unless it is the model's parent object because the view may be shared between many different views.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.model`  :meth:`PySide.QtGui.QAbstractItemView.selectionModel`  :meth:`PySide.QtGui.QAbstractItemView.setSelectionModel` 


.. method:: PySide.QtGui.QAbstractItemView.setRootIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Sets the root item to the item at the given ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.rootIndex` 


.. method:: PySide.QtGui.QAbstractItemView.setSelection(rect, command)


    :param rect: :class:`PySide.QtCore.QRect`
    :param command: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`







.. method:: PySide.QtGui.QAbstractItemView.setSelectionBehavior(behavior)


    :param behavior: :attr:`PySide.QtGui.QAbstractItemView.SelectionBehavior`




    This property holds which selection behavior the view uses.

    This property holds whether selections are done in terms of single items, rows or columns.

    .. seealso::  :attr:`QAbstractItemView.SelectionMode`  :attr:`QAbstractItemView.SelectionBehavior` 


.. method:: PySide.QtGui.QAbstractItemView.setSelectionMode(mode)


    :param mode: :attr:`PySide.QtGui.QAbstractItemView.SelectionMode`




    This property holds which selection mode the view operates in.

    This property controls whether the user can select one or many items and, in many-item selections, whether the selection must be a continuous range of items.

    .. seealso::  :attr:`QAbstractItemView.SelectionMode`  :attr:`QAbstractItemView.SelectionBehavior` 


.. method:: PySide.QtGui.QAbstractItemView.setSelectionModel(selectionModel)


    :param selectionModel: :class:`PySide.QtGui.QItemSelectionModel`




    Sets the current selection model to the given ``selectionModel`` .

    Note that, if you call :meth:`PySide.QtGui.QAbstractItemView.setModel` after this function, the given ``selectionModel`` will be replaced by one created by the view.

    .. note::  It is up to the application to delete the old selection model if it is no longer needed; i.e., if it is not being used by other views. This will happen automatically when its parent object is deleted. However, if it does not have a parent, or if the parent is a long-lived object, it may be preferable to call its :meth:`~PySide.QtGui.QAbstractItemView.deleteLater` function to explicitly delete it.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.selectionModel`  :meth:`PySide.QtGui.QAbstractItemView.setModel`  :meth:`PySide.QtGui.QAbstractItemView.clearSelection` 


.. method:: PySide.QtGui.QAbstractItemView.setState(state)


    :param state: :attr:`PySide.QtGui.QAbstractItemView.State`




    Sets the item view's state to the given ``state`` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.state` 


.. method:: PySide.QtGui.QAbstractItemView.setTabKeyNavigation(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether item navigation with tab and backtab is enabled..



.. method:: PySide.QtGui.QAbstractItemView.setTextElideMode(mode)


    :param mode: :attr:`PySide.QtCore.Qt.TextElideMode`




    This property holds the position of the "..." in elided text..

    The default value for all item views is :attr:`Qt.ElideRight<Qt.TextElideMode>` .



.. method:: PySide.QtGui.QAbstractItemView.setVerticalScrollMode(mode)


    :param mode: :attr:`PySide.QtGui.QAbstractItemView.ScrollMode`




    This property holds how the view scrolls its contents in the vertical direction.

    This property controls how the view scroll its contents vertically. Scrolling can be done either per pixel or per item.



.. method:: PySide.QtGui.QAbstractItemView.showDropIndicator()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the drop indicator is shown when dragging items and dropping..

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.dragEnabled`  :attr:`QAbstractItemView.DragDropMode`  :meth:`PySide.QtGui.QAbstractItemView.dragDropOverwriteMode`  :meth:`PySide.QtGui.QWidget.acceptDrops` 


.. method:: PySide.QtGui.QAbstractItemView.sizeHintForColumn(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the width size hint for the specified ``column`` or -1 if there is no model.

    This function is used in views with a horizontal header to find the size hint for a header section based on the contents of the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.sizeHintForRow` 


.. method:: PySide.QtGui.QAbstractItemView.sizeHintForIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QSize`




    Returns the size hint for the item with the specified ``index`` or an invalid size for invalid indexes.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.sizeHintForRow`  :meth:`PySide.QtGui.QAbstractItemView.sizeHintForColumn` 


.. method:: PySide.QtGui.QAbstractItemView.sizeHintForRow(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the height size hint for the specified ``row`` or -1 if there is no model.

    The returned height is calculated using the size hints of the given ``row`` 's items, i.e. the returned value is the maximum height among the items. Note that to control the height of a row, you must reimplement the :meth:`QAbstractItemDelegate.sizeHint()<PySide.QtGui.QAbstractItemDelegate.sizeHint>` function.

    This function is used in views with a vertical header to find the size hint for a header section based on the contents of the given ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.sizeHintForColumn` 


.. method:: PySide.QtGui.QAbstractItemView.startAutoScroll()








.. method:: PySide.QtGui.QAbstractItemView.startDrag(supportedActions)


    :param supportedActions: :class:`PySide.QtCore.Qt.DropActions`







.. method:: PySide.QtGui.QAbstractItemView.state()


    :rtype: :attr:`PySide.QtGui.QAbstractItemView.State`




    Returns the item view's state.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.setState` 


.. method:: PySide.QtGui.QAbstractItemView.stopAutoScroll()








.. method:: PySide.QtGui.QAbstractItemView.tabKeyNavigation()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether item navigation with tab and backtab is enabled..



.. method:: PySide.QtGui.QAbstractItemView.textElideMode()


    :rtype: :attr:`PySide.QtCore.Qt.TextElideMode`




    This property holds the position of the "..." in elided text..

    The default value for all item views is :attr:`Qt.ElideRight<Qt.TextElideMode>` .



.. method:: PySide.QtGui.QAbstractItemView.update(index)


    :param index: :class:`PySide.QtCore.QModelIndex`




    Updates the area occupied by the given ``index`` .



.. method:: PySide.QtGui.QAbstractItemView.updateEditorData()






    Updates the data shown in the open editor widgets in the view.



.. method:: PySide.QtGui.QAbstractItemView.updateEditorGeometries()






    Updates the geometry of the open editor widgets in the view.



.. method:: PySide.QtGui.QAbstractItemView.updateGeometries()






    Updates the geometry of the child widgets of the view.



.. method:: PySide.QtGui.QAbstractItemView.verticalOffset()


    :rtype: :class:`PySide.QtCore.int`




    Returns the vertical offset of the view.

    In the base class this is a pure virtual function.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.horizontalOffset` 


.. method:: PySide.QtGui.QAbstractItemView.verticalScrollMode()


    :rtype: :attr:`PySide.QtGui.QAbstractItemView.ScrollMode`




    This property holds how the view scrolls its contents in the vertical direction.

    This property controls how the view scroll its contents vertically. Scrolling can be done either per pixel or per item.



.. method:: PySide.QtGui.QAbstractItemView.verticalScrollbarAction(action)


    :param action: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QAbstractItemView.verticalScrollbarValueChanged(value)


    :param value: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QAbstractItemView.viewOptions()


    :rtype: :class:`PySide.QtGui.QStyleOptionViewItem`




    Returns a :class:`PySide.QtGui.QStyleOptionViewItem` structure populated with the view's palette, font, state, alignments etc.



.. method:: PySide.QtGui.QAbstractItemView.viewportEntered()








.. method:: PySide.QtGui.QAbstractItemView.visualRect(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QRect`




    Returns the rectangle on the viewport occupied by the item at ``index`` .

    If your item is displayed in several areas then visualRect should return the primary area that contains index and not the complete area that index might encompasses, touch or cause drawing.

    In the base class this is a pure virtual function.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.indexAt`  :meth:`PySide.QtGui.QAbstractItemView.visualRegionForSelection` 


.. method:: PySide.QtGui.QAbstractItemView.visualRegionForSelection(selection)


    :param selection: :class:`PySide.QtGui.QItemSelection`
    :rtype: :class:`PySide.QtGui.QRegion`




    Returns the region from the viewport of the items in the given ``selection`` .

    In the base class this is a pure virtual function.

    .. seealso::  :meth:`PySide.QtGui.QAbstractItemView.visualRect`  :meth:`PySide.QtGui.QAbstractItemView.selectedIndexes` 



