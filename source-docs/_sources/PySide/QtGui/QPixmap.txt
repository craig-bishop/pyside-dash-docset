.. module:: PySide.QtGui
.. _QPixmap:

QPixmap
*******

.. inheritance-diagram:: QPixmap
    :parts: 2

**Inherited by:** :ref:`QBitmap`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`alphaChannel<PySide.QtGui.QPixmap.alphaChannel>` ()
*    def :meth:`cacheKey<PySide.QtGui.QPixmap.cacheKey>` ()
*    def :meth:`convertFromImage<PySide.QtGui.QPixmap.convertFromImage>` (img[, flags=Qt.AutoColor])
*    def :meth:`copy<PySide.QtGui.QPixmap.copy>` ([rect=QRect()])
*    def :meth:`copy<PySide.QtGui.QPixmap.copy>` (x, y, width, height)
*    def :meth:`createHeuristicMask<PySide.QtGui.QPixmap.createHeuristicMask>` ([clipTight=true])
*    def :meth:`createMaskFromColor<PySide.QtGui.QPixmap.createMaskFromColor>` (maskColor)
*    def :meth:`createMaskFromColor<PySide.QtGui.QPixmap.createMaskFromColor>` (maskColor, mode)
*    def :meth:`deref<PySide.QtGui.QPixmap.deref>` ()
*    def :meth:`doImageIO<PySide.QtGui.QPixmap.doImageIO>` (io, quality)
*    def :meth:`fill<PySide.QtGui.QPixmap.fill>` ([fillColor=Qt.white])
*    def :meth:`fill<PySide.QtGui.QPixmap.fill>` (widget, ofs)
*    def :meth:`fill<PySide.QtGui.QPixmap.fill>` (widget, xofs, yofs)
*    def :meth:`handle<PySide.QtGui.QPixmap.handle>` ()
*    def :meth:`hasAlpha<PySide.QtGui.QPixmap.hasAlpha>` ()
*    def :meth:`hasAlphaChannel<PySide.QtGui.QPixmap.hasAlphaChannel>` ()
*    def :meth:`init<PySide.QtGui.QPixmap.init>` (arg__1, arg__2, arg__3)
*    def :meth:`init<PySide.QtGui.QPixmap.init>` (arg__1, arg__2[, arg__3=PixmapType])
*    def :meth:`isNull<PySide.QtGui.QPixmap.isNull>` ()
*    def :meth:`isQBitmap<PySide.QtGui.QPixmap.isQBitmap>` ()
*    def :meth:`load<PySide.QtGui.QPixmap.load>` (fileName[, format=0[, flags=Qt.AutoColor]])
*    def :meth:`loadFromData<PySide.QtGui.QPixmap.loadFromData>` (buf[, format=0[, flags=Qt.AutoColor]])
*    def :meth:`loadFromData<PySide.QtGui.QPixmap.loadFromData>` (data[, format=0[, flags=Qt.AutoColor]])
*    def :meth:`mask<PySide.QtGui.QPixmap.mask>` ()
*    def :meth:`rect<PySide.QtGui.QPixmap.rect>` ()
*    def :meth:`save<PySide.QtGui.QPixmap.save>` (device[, format=0[, quality=-1]])
*    def :meth:`save<PySide.QtGui.QPixmap.save>` (fileName[, format=0[, quality=-1]])
*    def :meth:`scaled<PySide.QtGui.QPixmap.scaled>` (s[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])
*    def :meth:`scaled<PySide.QtGui.QPixmap.scaled>` (w, h[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])
*    def :meth:`scaledToHeight<PySide.QtGui.QPixmap.scaledToHeight>` (h[, mode=Qt.FastTransformation])
*    def :meth:`scaledToWidth<PySide.QtGui.QPixmap.scaledToWidth>` (w[, mode=Qt.FastTransformation])
*    def :meth:`scroll<PySide.QtGui.QPixmap.scroll>` (dx, dy, rect[, exposed=0])
*    def :meth:`scroll<PySide.QtGui.QPixmap.scroll>` (dx, dy, x, y, width, height[, exposed=0])
*    def :meth:`setAlphaChannel<PySide.QtGui.QPixmap.setAlphaChannel>` (arg__1)
*    def :meth:`setMask<PySide.QtGui.QPixmap.setMask>` (arg__1)
*    def :meth:`size<PySide.QtGui.QPixmap.size>` ()
*    def :meth:`toImage<PySide.QtGui.QPixmap.toImage>` ()
*    def :meth:`transformed<PySide.QtGui.QPixmap.transformed>` (arg__1[, mode=Qt.FastTransformation])
*    def :meth:`transformed<PySide.QtGui.QPixmap.transformed>` (arg__1[, mode=Qt.FastTransformation])
*    def :meth:`x11Info<PySide.QtGui.QPixmap.x11Info>` ()
*    def :meth:`x11PictureHandle<PySide.QtGui.QPixmap.x11PictureHandle>` ()
*    def :meth:`x11SetScreen<PySide.QtGui.QPixmap.x11SetScreen>` (screen)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`defaultDepth<PySide.QtGui.QPixmap.defaultDepth>` ()
*    def :meth:`fromImage<PySide.QtGui.QPixmap.fromImage>` (image[, flags=Qt.AutoColor])
*    def :meth:`fromImageReader<PySide.QtGui.QPixmap.fromImageReader>` (imageReader[, flags=Qt.AutoColor])
*    def :meth:`fromX11Pixmap<PySide.QtGui.QPixmap.fromX11Pixmap>` (pixmap[, mode=ImplicitlyShared])
*    def :meth:`grabWidget<PySide.QtGui.QPixmap.grabWidget>` (widget, rect)
*    def :meth:`grabWidget<PySide.QtGui.QPixmap.grabWidget>` (widget[, x=0[, y=0[, w=-1[, h=-1]]]])
*    def :meth:`grabWindow<PySide.QtGui.QPixmap.grabWindow>` (arg__1[, x=0[, y=0[, w=-1[, h=-1]]]])
*    def :meth:`trueMatrix<PySide.QtGui.QPixmap.trueMatrix>` (m, w, h)
*    def :meth:`trueMatrix<PySide.QtGui.QPixmap.trueMatrix>` (m, w, h)
*    def :meth:`x11SetDefaultScreen<PySide.QtGui.QPixmap.x11SetDefaultScreen>` (screen)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QPixmap` class is an off-screen image representation that can be used as a paint device.

    Qt provides four classes for handling image data: :class:`PySide.QtGui.QImage` , :class:`PySide.QtGui.QPixmap` , :class:`PySide.QtGui.QBitmap` and :class:`PySide.QtGui.QPicture` . :class:`PySide.QtGui.QImage` is designed and optimized for I/O, and for direct pixel access and manipulation, while :class:`PySide.QtGui.QPixmap` is designed and optimized for showing images on screen. :class:`PySide.QtGui.QBitmap` is only a convenience class that inherits :class:`PySide.QtGui.QPixmap` , ensuring a depth of 1. The :meth:`PySide.QtGui.QPixmap.isQBitmap` function returns true if a :class:`PySide.QtGui.QPixmap` object is really a bitmap, otherwise returns false. Finally, the :class:`PySide.QtGui.QPicture` class is a paint device that records and replays :class:`PySide.QtGui.QPainter` commands.

    A :class:`PySide.QtGui.QPixmap` can easily be displayed on the screen using :class:`PySide.QtGui.QLabel` or one of :class:`PySide.QtGui.QAbstractButton` 's subclasses (such as :class:`PySide.QtGui.QPushButton` and :class:`PySide.QtGui.QToolButton` ). :class:`PySide.QtGui.QLabel` has a pixmap property, whereas :class:`PySide.QtGui.QAbstractButton` has an icon property.

    In addition to the ordinary constructors, a :class:`PySide.QtGui.QPixmap` can be constructed using the static :meth:`PySide.QtGui.QPixmap.grabWidget` and :meth:`PySide.QtGui.QPixmap.grabWindow` functions which creates a :class:`PySide.QtGui.QPixmap` and paints the given widget, or window, into it.

    :class:`PySide.QtGui.QPixmap` objects can be passed around by value since the :class:`PySide.QtGui.QPixmap` class uses implicit data sharing. For more information, see the :ref:`Implicit Data Sharing<implicit-sharing.html>` documentation. :class:`PySide.QtGui.QPixmap` objects can also be streamed.

    Depending on the system, :class:`PySide.QtGui.QPixmap` is stored using a RGB32 or a premultiplied alpha format. If the image has an alpha channel, and if the system allows, the preferred format is premultiplied alpha. Note also that :class:`PySide.QtGui.QPixmap` , unlike :class:`PySide.QtGui.QImage` , may be hardware dependent. On X11, Mac and Symbian, a :class:`PySide.QtGui.QPixmap` is stored on the server side while a :class:`PySide.QtGui.QImage` is stored on the client side (on Windows, these two classes have an equivalent internal representation, i.e. both :class:`PySide.QtGui.QImage` and :class:`PySide.QtGui.QPixmap` are stored on the client side and don't use any GDI resources).

    Note that the pixel data in a pixmap is internal and is managed by the underlying window system. Because :class:`PySide.QtGui.QPixmap` is a :class:`PySide.QtGui.QPaintDevice` subclass, :class:`PySide.QtGui.QPainter` can be used to draw directly onto pixmaps. Pixels can only be accessed through :class:`PySide.QtGui.QPainter` functions or by converting the :class:`PySide.QtGui.QPixmap` to a :class:`PySide.QtGui.QImage` . However, the :meth:`PySide.QtGui.QPixmap.fill` function is available for initializing the entire pixmap with a given color.

    There are functions to convert between :class:`PySide.QtGui.QImage` and :class:`PySide.QtGui.QPixmap` . Typically, the :class:`PySide.QtGui.QImage` class is used to load an image file, optionally manipulating the image data, before the :class:`PySide.QtGui.QImage` object is converted into a :class:`PySide.QtGui.QPixmap` to be shown on screen. Alternatively, if no manipulation is desired, the image file can be loaded directly into a :class:`PySide.QtGui.QPixmap` . On Windows, the :class:`PySide.QtGui.QPixmap` class also supports conversion between ``HBITMAP`` and :class:`PySide.QtGui.QPixmap` . On Symbian, the :class:`PySide.QtGui.QPixmap` class also supports conversion between CFbsBitmap and :class:`PySide.QtGui.QPixmap` .

    :class:`PySide.QtGui.QPixmap` provides a collection of functions that can be used to obtain a variety of information about the pixmap. In addition, there are several functions that enables transformation of the pixmap.

    .. _PySide.QtGui.QPixmap_reading-and-writing-image-files:



Reading and Writing Image Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QPixmap` provides several ways of reading an image file: The file can be loaded when constructing the :class:`PySide.QtGui.QPixmap` object, or by using the :meth:`PySide.QtGui.QPixmap.load` or :meth:`PySide.QtGui.QPixmap.loadFromData` functions later on. When loading an image, the file name can either refer to an actual file on disk or to one of the application's embedded resources. See :ref:`The Qt Resource System<resources.html>` overview for details on how to embed images and other resource files in the application's executable.

    Simply call the :meth:`PySide.QtGui.QPixmap.save` function to save a :class:`PySide.QtGui.QPixmap` object.

    The complete list of supported file formats are available through the :meth:`QImageReader.supportedImageFormats()<PySide.QtGui.QImageReader.supportedImageFormats>` and :meth:`QImageWriter.supportedImageFormats()<PySide.QtGui.QImageWriter.supportedImageFormats>` functions. New file formats can be added as plugins. By default, Qt supports the following formats:

    +------+-------------------------------------+------------+
    |Format|Description                          |Qt's support|
    +------+-------------------------------------+------------+
    |BMP   |Windows Bitmap                       |Read/write  |
    +------+-------------------------------------+------------+
    |GIF   |Graphic Interchange Format (optional)|Read        |
    +------+-------------------------------------+------------+
    |JPG   |Joint Photographic Experts Group     |Read/write  |
    +------+-------------------------------------+------------+
    |JPEG  |Joint Photographic Experts Group     |Read/write  |
    +------+-------------------------------------+------------+
    |PNG   |Portable Network Graphics            |Read/write  |
    +------+-------------------------------------+------------+
    |PBM   |Portable Bitmap                      |Read        |
    +------+-------------------------------------+------------+
    |PGM   |Portable Graymap                     |Read        |
    +------+-------------------------------------+------------+
    |PPM   |Portable Pixmap                      |Read/write  |
    +------+-------------------------------------+------------+
    |XBM   |X11 Bitmap                           |Read/write  |
    +------+-------------------------------------+------------+
    |XPM   |X11 Pixmap                           |Read/write  |
    +------+-------------------------------------+------------+

    .. _PySide.QtGui.QPixmap_pixmap-information:



Pixmap Information
^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QPixmap` provides a collection of functions that can be used to obtain a variety of information about the pixmap:

    +---------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |                     |Available Functions                                                                                                                                                                                                                                                                                                                                                                                                                                                        |
    +---------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Geometry             |The :meth:`PySide.QtGui.QPixmap.size` , :meth:`PySide.QtGui.QPixmap.width` and :meth:`PySide.QtGui.QPixmap.height` functions provide information about the pixmap's size. The :meth:`PySide.QtGui.QPixmap.rect` function returns the image's enclosing rectangle.                                                                                                                                                                                                          |
    +---------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Alpha component      |The :meth:`PySide.QtGui.QPixmap.hasAlphaChannel` returns true if the pixmap has a format that respects the alpha channel, otherwise returns false. The :meth:`PySide.QtGui.QPixmap.hasAlpha` , :meth:`PySide.QtGui.QPixmap.setMask` and :meth:`PySide.QtGui.QPixmap.mask` functions are legacy and should not be used. They are potentially very slow.                                                                                                                     |
    |                     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
    |                     |    The :meth:`PySide.QtGui.QPixmap.createHeuristicMask` function creates and returns a 1-bpp heuristic mask (i.e. a :class:`PySide.QtGui.QBitmap` ) for this pixmap. It works by selecting a color from one of the corners and then chipping away pixels of that color, starting at all the edges. The :meth:`PySide.QtGui.QPixmap.createMaskFromColor` function creates and returns a mask (i.e. a :class:`PySide.QtGui.QBitmap` ) for the pixmap based on a given color.|
    +---------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Low-level information|The :meth:`PySide.QtGui.QPixmap.depth` function returns the depth of the pixmap. The :meth:`PySide.QtGui.QPixmap.defaultDepth` function returns the default depth, i.e. the depth used by the application on the given screen.                                                                                                                                                                                                                                             |
    |                     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
    |                     |    The :meth:`PySide.QtGui.QPixmap.cacheKey` function returns a number that uniquely identifies the contents of the :class:`PySide.QtGui.QPixmap` object.                                                                                                                                                                                                                                                                                                                 |
    |                     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
    |                     |    The :meth:`PySide.QtGui.QPixmap.x11Info` function returns information about the configuration of the X display used by the screen to which the pixmap currently belongs. The :meth:`PySide.QtGui.QPixmap.x11PictureHandle` function returns the X11 Picture handle of the pixmap for XRender support. Note that the two latter functions are only available on x11.                                                                                                    |
    +---------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. _PySide.QtGui.QPixmap_pixmap-conversion:



Pixmap Conversion
^^^^^^^^^^^^^^^^^

    A :class:`PySide.QtGui.QPixmap` object can be converted into a :class:`PySide.QtGui.QImage` using the :meth:`PySide.QtGui.QPixmap.toImage` function. Likewise, a :class:`PySide.QtGui.QImage` can be converted into a :class:`PySide.QtGui.QPixmap` using the :meth:`PySide.QtGui.QPixmap.fromImage` . If this is too expensive an operation, you can use :meth:`QBitmap.fromImage()<PySide.QtGui.QBitmap.fromImage>` instead.

    In addition, on Windows, the :class:`PySide.QtGui.QPixmap` class supports conversion to and from HBITMAP: the :meth:`~PySide.QtGui.QPixmap.toWinHBITMAP` function creates a HBITMAP equivalent to the :class:`PySide.QtGui.QPixmap` , based on the given :attr:`QPixmap.HBitmapFormat` , and returns the HBITMAP handle. The :meth:`~PySide.QtGui.QPixmap.fromWinHBITMAP` function returns a :class:`PySide.QtGui.QPixmap` that is equivalent to the given bitmap which has the specified format. The :class:`PySide.QtGui.QPixmap` class also supports conversion to and from HICON: the :meth:`~PySide.QtGui.QPixmap.toWinHICON` function creates a HICON equivalent to the :class:`PySide.QtGui.QPixmap` , and returns the HICON handle. The :meth:`~PySide.QtGui.QPixmap.fromWinHICON` function returns a :class:`PySide.QtGui.QPixmap` that is equivalent to the given icon.

    In addition, on Symbian, the :class:`PySide.QtGui.QPixmap` class supports conversion to and from CFbsBitmap: the :meth:`~PySide.QtGui.QPixmap.toSymbianCFbsBitmap` function creates CFbsBitmap equivalent to the :class:`PySide.QtGui.QPixmap` , based on given mode and returns a CFbsBitmap object. The :meth:`~PySide.QtGui.QPixmap.fromSymbianCFbsBitmap` function returns a :class:`PySide.QtGui.QPixmap` that is equivalent to the given bitmap and given mode.

    .. _PySide.QtGui.QPixmap_pixmap-transformations:



Pixmap Transformations
^^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QPixmap` supports a number of functions for creating a new pixmap that is a transformed version of the original:

    The :meth:`PySide.QtGui.QPixmap.scaled` , :meth:`PySide.QtGui.QPixmap.scaledToWidth` and :meth:`PySide.QtGui.QPixmap.scaledToHeight` functions return scaled copies of the pixmap, while the :meth:`PySide.QtGui.QPixmap.copy` function creates a :class:`PySide.QtGui.QPixmap` that is a plain copy of the original one.

    The :meth:`PySide.QtGui.QPixmap.transformed` function returns a copy of the pixmap that is transformed with the given transformation matrix and transformation mode: Internally, the transformation matrix is adjusted to compensate for unwanted translation, i.e. :meth:`PySide.QtGui.QPixmap.transformed` returns the smallest pixmap containing all transformed points of the original pixmap. The static :meth:`PySide.QtGui.QPixmap.trueMatrix` function returns the actual matrix used for transforming the pixmap.

    .. note::  When using the native X11 graphics system, the pixmap becomes invalid when the :class:`PySide.QtGui.QApplication` instance is destroyed.

    .. seealso::  :class:`PySide.QtGui.QBitmap`  :class:`PySide.QtGui.QImage`  :class:`PySide.QtGui.QImageReader`  :class:`PySide.QtGui.QImageWriter` 

.. class:: QPixmap()
           QPixmap(image)
           QPixmap(arg__1)
           QPixmap(arg__1)
           QPixmap(fileName[, format=0[, flags=Qt.AutoColor]])
           QPixmap(xpm)
           QPixmap(w, h)

    :param w: :class:`PySide.QtCore.int`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :param h: :class:`PySide.QtCore.int`
    :param image: :class:`PySide.QtGui.QImage`
    :param format: str
    :param fileName: unicode
    :param arg__1: :class:`PySide.QtGui.QPixmap`
    :param xpm: :class:`PySide.QtCore.char`

    Constructs a null pixmap.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.isNull` 



    Constructs a pixmap that is a copy of the given ``pixmap`` .

    .. seealso::  :meth:`PySide.QtGui.QPixmap.copy` 

    This is an overloaded function.

    Constructs a pixmap of the given ``size`` .

    .. warning::  This will create a :class:`PySide.QtGui.QPixmap` with uninitialized data. Call :meth:`PySide.QtGui.QPixmap.fill` to fill the pixmap with an appropriate color before drawing onto it with :class:`PySide.QtGui.QPainter` .






    Constructs a pixmap with the given ``width`` and ``height`` . If either ``width`` or ``height`` is zero, a null pixmap is constructed.

    .. warning::  This will create a :class:`PySide.QtGui.QPixmap` with uninitialized data. Call :meth:`PySide.QtGui.QPixmap.fill` to fill the pixmap with an appropriate color before drawing onto it with :class:`PySide.QtGui.QPainter` .

    .. seealso::  :meth:`PySide.QtGui.QPixmap.isNull` 

.. attribute:: PySide.QtGui.QPixmap.ShareMode

    This enum type defines the share modes that are available when creating a :class:`PySide.QtGui.QPixmap` object from a raw X11 Pixmap handle.

    +------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                |Description                                                                                                                                                            |
    +========================+=======================================================================================================================================================================+
    |QPixmap.ImplicitlyShared|This mode will cause the :class:`PySide.QtGui.QPixmap` object to create a copy of the internal data before it is modified, thus keeping the original X11 pixmap intact.|
    +------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPixmap.ExplicitlyShared|In this mode, the pixmap data will *not* be copied before it is modified, which in effect will change the original X11 pixmap.                                         |
    +------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. warning::  This enum is only used for X11 specific functions; using it is non-portable.

    .. seealso::  :meth:`QPixmap.fromX11Pixmap()<PySide.QtGui.QPixmap.fromX11Pixmap>` 

.. attribute:: PySide.QtGui.QPixmap.Type



.. method:: PySide.QtGui.QPixmap.alphaChannel()


    :rtype: :class:`PySide.QtGui.QPixmap`




    Returns the alpha channel of the pixmap as a new grayscale :class:`PySide.QtGui.QPixmap` in which each pixel's red, green, and blue values are given the alpha value of the original pixmap. The color depth of the returned pixmap is the system depth on X11 and 8-bit on Windows and Mac OS X.

    You can use this function while debugging to get a visible image of the alpha channel. If the pixmap doesn't have an alpha channel, i.e., the alpha channel's value for all pixels equals 0xff), a null pixmap is returned. You can check this with the ``isNull()`` function.

    We show an example:

    ::

        	pixmap = QPixmap(100, 100)
        	pixmap.fill(Qt.transparent)

        	gradient = QRadialGradient(50, 50, 50, 50, 50)
        	gradient.setColorAt(0, QColor.fromRgbF(1, 0, 0, 1))
        	gradient.setColorAt(1, QColor.fromRgbF(0, 0, 0, 0))
        	painter = QPainter(pixmap)
        	painter.fillRect(0, 0, 100, 100, gradient)

        	channelImage = pixmap.alphaChannel()
        	update()


    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/alphachannelimage.png

    .. warning::  This is an expensive operation. The alpha channel of the pixmap is extracted dynamically from the pixeldata. Most usecases of this function are covered by :class:`PySide.QtGui.QPainter` and compositionModes which will normally execute faster.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.setAlphaChannel`  :class:`Pixmap Information<~PySide.QtGui.QPixmap#Pixmap Information>` 


.. method:: PySide.QtGui.QPixmap.cacheKey()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns a number that identifies this :class:`PySide.QtGui.QPixmap` . Distinct :class:`PySide.QtGui.QPixmap` objects can only have the same cache key if they refer to the same contents.

    The :meth:`PySide.QtGui.QPixmap.cacheKey` will change when the pixmap is altered.



.. method:: PySide.QtGui.QPixmap.convertFromImage(img[, flags=Qt.AutoColor])


    :param img: :class:`PySide.QtGui.QImage`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPixmap.copy(x, y, width, height)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param width: :class:`PySide.QtCore.int`
    :param height: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QPixmap`




    This is an overloaded function.

    Returns a deep copy of the subset of the pixmap that is specified by the rectangle :class:`PySide.QtCore.QRect` ( ``x`` , ``y`` , ``width`` , ``height`` ).



.. method:: PySide.QtGui.QPixmap.copy([rect=QRect()])


    :param rect: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtGui.QPixmap`




    Returns a deep copy of the subset of the pixmap that is specified by the given ``rectangle`` . For more information on deep copies, see the :ref:`Implicit Data Sharing<implicit-sharing.html>` documentation.

    If the given ``rectangle`` is empty, the whole image is copied.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.operator=`  :meth:`PySide.QtGui.QPixmap.QPixmap`  :class:`Pixmap Transformations<~PySide.QtGui.QPixmap#Pixmap Transformations>` 


.. method:: PySide.QtGui.QPixmap.createHeuristicMask([clipTight=true])


    :param clipTight: :class:`PySide.QtCore.bool`
    :rtype: :class:`PySide.QtGui.QBitmap`




    Creates and returns a heuristic mask for this pixmap.

    The function works by selecting a color from one of the corners and then chipping away pixels of that color, starting at all the edges. If ``clipTight`` is true (the default) the mask is just large enough to cover the pixels; otherwise, the mask is larger than the data pixels.

    The mask may not be perfect but it should be reasonable, so you can do things such as the following:

    ::

        myPixmap = QPixmap()
        myPixmap.setMask(myPixmap.createHeuristicMask())


    This function is slow because it involves converting to/from a :class:`PySide.QtGui.QImage` , and non-trivial computations.

    .. seealso::  :meth:`QImage.createHeuristicMask()<PySide.QtGui.QImage.createHeuristicMask>`  :meth:`PySide.QtGui.QPixmap.createMaskFromColor` 


.. method:: PySide.QtGui.QPixmap.createMaskFromColor(maskColor, mode)


    :param maskColor: :class:`PySide.QtGui.QColor`
    :param mode: :attr:`PySide.QtCore.Qt.MaskMode`
    :rtype: :class:`PySide.QtGui.QBitmap`







.. method:: PySide.QtGui.QPixmap.createMaskFromColor(maskColor)


    :param maskColor: :class:`PySide.QtGui.QColor`
    :rtype: :class:`PySide.QtGui.QBitmap`




    This is an overloaded function.

    Creates and returns a mask for this pixmap based on the given ``maskColor`` . Same as calling createMaskFromColor(maskColor, :attr:`Qt.MaskInColor<Qt.MaskMode>` )

    .. seealso::  :meth:`PySide.QtGui.QPixmap.createHeuristicMask`  :meth:`QImage.createMaskFromColor()<PySide.QtGui.QImage.createMaskFromColor>` 


.. staticmethod:: PySide.QtGui.QPixmap.defaultDepth()


    :rtype: :class:`PySide.QtCore.int`




    Returns the default pixmap depth used by the application.

    On Windows and Mac, the default depth is always 32. On X11 and embedded, the depth of the screen will be returned by this function.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.depth`  :meth:`QColormap.depth`  :class:`Pixmap Information<~PySide.QtGui.QPixmap#Pixmap Information>` 


.. method:: PySide.QtGui.QPixmap.deref()








.. method:: PySide.QtGui.QPixmap.doImageIO(io, quality)


    :param io: :class:`PySide.QtGui.QImageWriter`
    :param quality: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QPixmap.fill(widget, xofs, yofs)


    :param widget: :class:`PySide.QtGui.QWidget`
    :param xofs: :class:`PySide.QtCore.int`
    :param yofs: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Fills the pixmap with the ``widget`` 's background color or pixmap. The given point, (``x`` , ``y`` ), defines an offset in widget coordinates to which the pixmap's top-left pixel will be mapped to.



.. method:: PySide.QtGui.QPixmap.fill(widget, ofs)


    :param widget: :class:`PySide.QtGui.QWidget`
    :param ofs: :class:`PySide.QtCore.QPoint`




    Fills the pixmap with the ``widget`` 's background color or pixmap according to the given offset.

    The :class:`PySide.QtCore.QPoint` ``offset`` defines a point in widget coordinates to which the pixmap's top-left pixel will be mapped to. This is only significant if the widget has a background pixmap; otherwise the pixmap will simply be filled with the background color of the widget.



.. method:: PySide.QtGui.QPixmap.fill([fillColor=Qt.white])


    :param fillColor: :class:`PySide.QtGui.QColor`




    Fills the pixmap with the given ``color`` .

    The effect of this function is undefined when the pixmap is being painted on.

    .. seealso::  :class:`Pixmap Transformations<~PySide.QtGui.QPixmap#Pixmap Transformations>` 


.. staticmethod:: PySide.QtGui.QPixmap.fromImage(image[, flags=Qt.AutoColor])


    :param image: :class:`PySide.QtGui.QImage`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. staticmethod:: PySide.QtGui.QPixmap.fromImageReader(imageReader[, flags=Qt.AutoColor])


    :param imageReader: :class:`PySide.QtGui.QImageReader`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. staticmethod:: PySide.QtGui.QPixmap.fromX11Pixmap(pixmap[, mode=ImplicitlyShared])


    :param pixmap: :class:`PySide.QtCore.Qt::HANDLE`
    :param mode: :attr:`PySide.QtGui.QPixmap.ShareMode`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. staticmethod:: PySide.QtGui.QPixmap.grabWidget(widget, rect)


    :param widget: :class:`PySide.QtGui.QWidget`
    :param rect: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtGui.QPixmap`




    Creates a pixmap and paints the given ``widget`` , restricted by the given ``rectangle`` , in it. If the ``widget`` has any children, then they are also painted in the appropriate positions.

    If no rectangle is specified (the default) the entire widget is painted.

    If ``widget`` is 0, the specified rectangle doesn't overlap the widget's rectangle, or an error occurs, the function will return a null :class:`PySide.QtGui.QPixmap` . If the rectangle is a superset of the given ``widget`` , the areas outside the ``widget`` are covered with the widget's background.

    This function actually asks ``widget`` to paint itself (and its children to paint themselves) by calling paintEvent() with painter redirection turned on. But :class:`PySide.QtGui.QPixmap` also provides the :meth:`PySide.QtGui.QPixmap.grabWindow` function which is a bit faster by grabbing pixels directly off the screen. In addition, if there are overlaying windows, :meth:`PySide.QtGui.QPixmap.grabWindow` , unlike :meth:`PySide.QtGui.QPixmap.grabWidget` , will see them.

    .. warning::  Do not grab a widget from its :meth:`QWidget.paintEvent()<PySide.QtGui.QWidget.paintEvent>` . However, it is safe to grab a widget from another widget's :meth:`PySide.QtGui.QWidget.paintEvent` .

    .. seealso::  :meth:`PySide.QtGui.QPixmap.grabWindow` 


.. staticmethod:: PySide.QtGui.QPixmap.grabWidget(widget[, x=0[, y=0[, w=-1[, h=-1]]]])


    :param widget: :class:`PySide.QtGui.QWidget`
    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QPixmap`




    This is an overloaded function.

    Creates a pixmap and paints the given ``widget`` , restricted by :class:`PySide.QtCore.QRect` (``x`` , ``y`` , ``width`` , ``height`` ), in it.

    .. warning::  Do not grab a widget from its :meth:`QWidget.paintEvent()<PySide.QtGui.QWidget.paintEvent>` . However, it is safe to grab a widget from another widget's :meth:`PySide.QtGui.QWidget.paintEvent` .



.. staticmethod:: PySide.QtGui.QPixmap.grabWindow(arg__1[, x=0[, y=0[, w=-1[, h=-1]]]])


    :param arg__1: long
    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. method:: PySide.QtGui.QPixmap.handle()


    :rtype: :class:`PySide.QtCore.Qt::HANDLE`




    Returns the pixmap's handle to the device context.

    Note that, since :class:`PySide.QtGui.QPixmap` make use of :ref:`implicit data sharing<implicit-sharing.html>` , the :meth:`~PySide.QtGui.QPixmap.detach` function must be called explicitly to ensure that only *this* pixmap's data is modified if the pixmap data is shared.

    .. warning::  This function is X11 specific; using it is non-portable.

    .. seealso::  :meth:`~PySide.QtGui.QPixmap.detach` 


.. method:: PySide.QtGui.QPixmap.hasAlpha()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this pixmap has an alpha channel, *or* has a mask, otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.hasAlphaChannel`  :meth:`PySide.QtGui.QPixmap.mask` 


.. method:: PySide.QtGui.QPixmap.hasAlphaChannel()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the pixmap has a format that respects the alpha channel, otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.hasAlpha` 


.. method:: PySide.QtGui.QPixmap.init(arg__1, arg__2[, arg__3=PixmapType])


    :param arg__1: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.int`
    :param arg__3: :attr:`QPixmap.Type`






.. method:: PySide.QtGui.QPixmap.init(arg__1, arg__2, arg__3)


    :param arg__1: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.int`
    :param arg__3: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPixmap.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this is a null pixmap; otherwise returns false.

    A null pixmap has zero width, zero height and no contents. You cannot draw in a null pixmap.



.. method:: PySide.QtGui.QPixmap.isQBitmap()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this is a :class:`PySide.QtGui.QBitmap` ; otherwise returns false.



.. method:: PySide.QtGui.QPixmap.load(fileName[, format=0[, flags=Qt.AutoColor]])


    :param fileName: unicode
    :param format: str
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPixmap.loadFromData(data[, format=0[, flags=Qt.AutoColor]])


    :param data: :class:`PySide.QtCore.QByteArray`
    :param format: str
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPixmap.loadFromData(buf[, format=0[, flags=Qt.AutoColor]])


    :param buf: :class:`PySide.QtCore.uchar`
    :param format: str
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPixmap.mask()


    :rtype: :class:`PySide.QtGui.QBitmap`




    Extracts a bitmap mask from the pixmap's alpha channel.

    .. warning::  This is potentially an expensive operation. The mask of the pixmap is extracted dynamically from the pixeldata.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.setMask`  :class:`Pixmap Information<~PySide.QtGui.QPixmap#Pixmap Information>` 


.. method:: PySide.QtGui.QPixmap.rect()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns the pixmap's enclosing rectangle.

    .. seealso::  :class:`Pixmap Information<~PySide.QtGui.QPixmap#Pixmap Information>` 


.. method:: PySide.QtGui.QPixmap.save(device[, format=0[, quality=-1]])


    :param device: :class:`PySide.QtCore.QIODevice`
    :param format: str
    :param quality: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    This function writes a :class:`PySide.QtGui.QPixmap` to the given ``device`` using the specified image file ``format`` and ``quality`` factor. This can be used, for example, to save a pixmap directly into a :class:`PySide.QtCore.QByteArray` :

    ::

                pixmap = QPixmap()
                bytes = QByteArray()
                buffer(bytes)
                buffer.open(QIODevice.WriteOnly)
                pixmap.save(buffer, "PNG") # writes pixmap into bytes in PNG format




.. method:: PySide.QtGui.QPixmap.save(fileName[, format=0[, quality=-1]])


    :param fileName: unicode
    :param format: str
    :param quality: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Saves the pixmap to the file with the given ``fileName`` using the specified image file ``format`` and ``quality`` factor. Returns true if successful; otherwise returns false.

    The ``quality`` factor must be in the range [0,100] or -1. Specify 0 to obtain small compressed files, 100 for large uncompressed files, and -1 to use the default settings.

    If ``format`` is 0, an image format will be chosen from ``fileName`` 's suffix.

    .. seealso::  :class:`Reading and Writing Image Files<~PySide.QtGui.QPixmap#Reading and Writing Image Files>` 


.. method:: PySide.QtGui.QPixmap.scaled(s[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])


    :param s: :class:`PySide.QtCore.QSize`
    :param aspectMode: :attr:`PySide.QtCore.Qt.AspectRatioMode`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. method:: PySide.QtGui.QPixmap.scaled(w, h[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])


    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param aspectMode: :attr:`PySide.QtCore.Qt.AspectRatioMode`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. method:: PySide.QtGui.QPixmap.scaledToHeight(h[, mode=Qt.FastTransformation])


    :param h: :class:`PySide.QtCore.int`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. method:: PySide.QtGui.QPixmap.scaledToWidth(w[, mode=Qt.FastTransformation])


    :param w: :class:`PySide.QtCore.int`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. method:: PySide.QtGui.QPixmap.scroll(dx, dy, x, y, width, height[, exposed=0])


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`
    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param width: :class:`PySide.QtCore.int`
    :param height: :class:`PySide.QtCore.int`
    :param exposed: :class:`PySide.QtGui.QRegion`




    This convenience function is equivalent to calling QPixmap::scroll(``dx`` , ``dy`` , :class:`PySide.QtCore.QRect` (``x`` , ``y`` , ``width`` , ``height`` ), ``exposed`` ).

    .. seealso::  :meth:`QWidget.scroll()<PySide.QtGui.QWidget.scroll>`  :meth:`QGraphicsItem.scroll()<PySide.QtGui.QGraphicsItem.scroll>` 


.. method:: PySide.QtGui.QPixmap.scroll(dx, dy, rect[, exposed=0])


    :param dx: :class:`PySide.QtCore.int`
    :param dy: :class:`PySide.QtCore.int`
    :param rect: :class:`PySide.QtCore.QRect`
    :param exposed: :class:`PySide.QtGui.QRegion`




    Scrolls the area ``rect`` of this pixmap by (``dx`` , ``dy`` ). The exposed region is left unchanged. You can optionally pass a pointer to an empty :class:`PySide.QtGui.QRegion` to get the region that is ``exposed`` by the scroll operation.

    ::

        pixmap = QPixmap("background.png")
        exposed = QRegion()
        pixmap.scroll(10, 10, pixmap.rect(), exposed)


    You cannot scroll while there is an active painter on the pixmap.

    .. seealso::  :meth:`QWidget.scroll()<PySide.QtGui.QWidget.scroll>`  :meth:`QGraphicsItem.scroll()<PySide.QtGui.QGraphicsItem.scroll>` 


.. method:: PySide.QtGui.QPixmap.setAlphaChannel(arg__1)


    :param arg__1: :class:`PySide.QtGui.QPixmap`




    Sets the alpha channel of this pixmap to the given ``alphaChannel`` by converting the ``alphaChannel`` into 32 bit and using the intensity of the RGB pixel values.

    The effect of this function is undefined when the pixmap is being painted on.

    .. warning::  This is potentially an expensive operation. Most usecases for this function are covered by :class:`PySide.QtGui.QPainter` and compositionModes which will normally execute faster.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.alphaChannel`  :class:`Pixmap Transformations<~PySide.QtGui.QPixmap#Pixmap Transformations>` 


.. method:: PySide.QtGui.QPixmap.setMask(arg__1)


    :param arg__1: :class:`PySide.QtGui.QBitmap`




    Sets a mask bitmap.

    This function merges the ``mask`` with the pixmap's alpha channel. A pixel value of 1 on the mask means the pixmap's pixel is unchanged; a value of 0 means the pixel is transparent. The mask must have the same size as this pixmap.

    Setting a null mask resets the mask, leaving the previously transparent pixels black. The effect of this function is undefined when the pixmap is being painted on.

    .. warning::  This is potentially an expensive operation.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.mask`  :class:`Pixmap Transformations<~PySide.QtGui.QPixmap#Pixmap Transformations>`  :class:`PySide.QtGui.QBitmap` 


.. method:: PySide.QtGui.QPixmap.size()


    :rtype: :class:`PySide.QtCore.QSize`




    Returns the size of the pixmap.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.width`  :meth:`PySide.QtGui.QPixmap.height`  :class:`Pixmap Information<~PySide.QtGui.QPixmap#Pixmap Information>` 


.. method:: PySide.QtGui.QPixmap.toImage()


    :rtype: :class:`PySide.QtGui.QImage`




    Converts the pixmap to a :class:`PySide.QtGui.QImage` . Returns a null image if the conversion fails.

    If the pixmap has 1-bit depth, the returned image will also be 1 bit deep. Images with more bits will be returned in a format closely represents the underlying system. Usually this will be :attr:`QImage.Format_ARGB32_Premultiplied<QImage.Format>` for pixmaps with an alpha and :attr:`QImage.Format_RGB32<QImage.Format>` or :attr:`QImage.Format_RGB16<QImage.Format>` for pixmaps without alpha.

    Note that for the moment, alpha masks on monochrome images are ignored.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.fromImage`  :class:`Image Formats<~PySide.QtGui.QImage#Image Formats>` 


.. method:: PySide.QtGui.QPixmap.transformed(arg__1[, mode=Qt.FastTransformation])


    :param arg__1: :class:`PySide.QtGui.QTransform`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. method:: PySide.QtGui.QPixmap.transformed(arg__1[, mode=Qt.FastTransformation])


    :param arg__1: :class:`PySide.QtGui.QMatrix`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QPixmap`







.. staticmethod:: PySide.QtGui.QPixmap.trueMatrix(m, w, h)


    :param m: :class:`PySide.QtGui.QTransform`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the actual matrix used for transforming a pixmap with the given ``width`` , ``height`` and ``matrix`` .

    When transforming a pixmap using the :meth:`PySide.QtGui.QPixmap.transformed` function, the transformation matrix is internally adjusted to compensate for unwanted translation, i.e. :meth:`PySide.QtGui.QPixmap.transformed` returns the smallest pixmap containing all transformed points of the original pixmap. This function returns the modified matrix, which maps points correctly from the original pixmap into the new pixmap.

    .. seealso::  :meth:`PySide.QtGui.QPixmap.transformed`  :class:`Pixmap Transformations<~PySide.QtGui.QPixmap#Pixmap Transformations>` 


.. staticmethod:: PySide.QtGui.QPixmap.trueMatrix(m, w, h)


    :param m: :class:`PySide.QtGui.QMatrix`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QMatrix`




    This is an overloaded function.

    This convenience function loads the matrix ``m`` into a :class:`PySide.QtGui.QTransform` and calls the overloaded function with the :class:`PySide.QtGui.QTransform` and the width ``w`` and the height ``h`` .



.. method:: PySide.QtGui.QPixmap.x11Info()


    :rtype: :class:`PySide.QtGui.QX11Info`




    **X11 only:** Returns information about the configuration of the X display used by the screen to which the pixmap currently belongs.

    .. warning::  This function is only available on X11.

    .. seealso::  :class:`Pixmap Information<~PySide.QtGui.QPixmap#Pixmap Information>` 


.. method:: PySide.QtGui.QPixmap.x11PictureHandle()


    :rtype: :class:`PySide.QtCore.Qt::HANDLE`




    **X11 only:** Returns the X11 Picture handle of the pixmap for XRender support.

    This function will return 0 if XRender support is not compiled into Qt, if the XRender extension is not supported on the X11 display, or if the handle could not be created. Use of this function is not portable.

    .. warning::  This function is only available on X11.

    .. seealso::  :class:`Pixmap Information<~PySide.QtGui.QPixmap#Pixmap Information>` 


.. staticmethod:: PySide.QtGui.QPixmap.x11SetDefaultScreen(screen)


    :param screen: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QPixmap.x11SetScreen(screen)


    :param screen: :class:`PySide.QtCore.int`







