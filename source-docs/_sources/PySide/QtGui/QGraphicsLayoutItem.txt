.. module:: PySide.QtGui
.. _QGraphicsLayoutItem:

QGraphicsLayoutItem
*******************

.. inheritance-diagram:: QGraphicsLayoutItem
    :parts: 2

**Inherited by:** :ref:`QGraphicsLayout`, :ref:`QGraphicsGridLayout`, :ref:`QGraphicsAnchorLayout`, :ref:`QGraphicsLinearLayout`, :ref:`QGraphicsWidget`, :ref:`QGraphicsProxyWidget`, :ref:`QGraphicsWebView`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`contentsRect<PySide.QtGui.QGraphicsLayoutItem.contentsRect>` ()
*    def :meth:`effectiveSizeHint<PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHint>` (which[, constraint=QSizeF()])
*    def :meth:`effectiveSizeHints<PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHints>` (constraint)
*    def :meth:`geometry<PySide.QtGui.QGraphicsLayoutItem.geometry>` ()
*    def :meth:`graphicsItem<PySide.QtGui.QGraphicsLayoutItem.graphicsItem>` ()
*    def :meth:`isLayout<PySide.QtGui.QGraphicsLayoutItem.isLayout>` ()
*    def :meth:`maximumHeight<PySide.QtGui.QGraphicsLayoutItem.maximumHeight>` ()
*    def :meth:`maximumSize<PySide.QtGui.QGraphicsLayoutItem.maximumSize>` ()
*    def :meth:`maximumWidth<PySide.QtGui.QGraphicsLayoutItem.maximumWidth>` ()
*    def :meth:`minimumHeight<PySide.QtGui.QGraphicsLayoutItem.minimumHeight>` ()
*    def :meth:`minimumSize<PySide.QtGui.QGraphicsLayoutItem.minimumSize>` ()
*    def :meth:`minimumWidth<PySide.QtGui.QGraphicsLayoutItem.minimumWidth>` ()
*    def :meth:`ownedByLayout<PySide.QtGui.QGraphicsLayoutItem.ownedByLayout>` ()
*    def :meth:`parentLayoutItem<PySide.QtGui.QGraphicsLayoutItem.parentLayoutItem>` ()
*    def :meth:`preferredHeight<PySide.QtGui.QGraphicsLayoutItem.preferredHeight>` ()
*    def :meth:`preferredSize<PySide.QtGui.QGraphicsLayoutItem.preferredSize>` ()
*    def :meth:`preferredWidth<PySide.QtGui.QGraphicsLayoutItem.preferredWidth>` ()
*    def :meth:`setGraphicsItem<PySide.QtGui.QGraphicsLayoutItem.setGraphicsItem>` (item)
*    def :meth:`setMaximumHeight<PySide.QtGui.QGraphicsLayoutItem.setMaximumHeight>` (height)
*    def :meth:`setMaximumSize<PySide.QtGui.QGraphicsLayoutItem.setMaximumSize>` (size)
*    def :meth:`setMaximumSize<PySide.QtGui.QGraphicsLayoutItem.setMaximumSize>` (w, h)
*    def :meth:`setMaximumWidth<PySide.QtGui.QGraphicsLayoutItem.setMaximumWidth>` (width)
*    def :meth:`setMinimumHeight<PySide.QtGui.QGraphicsLayoutItem.setMinimumHeight>` (height)
*    def :meth:`setMinimumSize<PySide.QtGui.QGraphicsLayoutItem.setMinimumSize>` (size)
*    def :meth:`setMinimumSize<PySide.QtGui.QGraphicsLayoutItem.setMinimumSize>` (w, h)
*    def :meth:`setMinimumWidth<PySide.QtGui.QGraphicsLayoutItem.setMinimumWidth>` (width)
*    def :meth:`setOwnedByLayout<PySide.QtGui.QGraphicsLayoutItem.setOwnedByLayout>` (ownedByLayout)
*    def :meth:`setParentLayoutItem<PySide.QtGui.QGraphicsLayoutItem.setParentLayoutItem>` (parent)
*    def :meth:`setPreferredHeight<PySide.QtGui.QGraphicsLayoutItem.setPreferredHeight>` (height)
*    def :meth:`setPreferredSize<PySide.QtGui.QGraphicsLayoutItem.setPreferredSize>` (size)
*    def :meth:`setPreferredSize<PySide.QtGui.QGraphicsLayoutItem.setPreferredSize>` (w, h)
*    def :meth:`setPreferredWidth<PySide.QtGui.QGraphicsLayoutItem.setPreferredWidth>` (width)
*    def :meth:`setSizePolicy<PySide.QtGui.QGraphicsLayoutItem.setSizePolicy>` (hPolicy, vPolicy[, controlType=QSizePolicy.DefaultType])
*    def :meth:`setSizePolicy<PySide.QtGui.QGraphicsLayoutItem.setSizePolicy>` (policy)
*    def :meth:`sizePolicy<PySide.QtGui.QGraphicsLayoutItem.sizePolicy>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`getContentsMargins<PySide.QtGui.QGraphicsLayoutItem.getContentsMargins>` ()
*    def :meth:`setGeometry<PySide.QtGui.QGraphicsLayoutItem.setGeometry>` (rect)
*    def :meth:`sizeHint<PySide.QtGui.QGraphicsLayoutItem.sizeHint>` (which[, constraint=QSizeF()])
*    def :meth:`updateGeometry<PySide.QtGui.QGraphicsLayoutItem.updateGeometry>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QGraphicsLayoutItem` class can be inherited to allow your custom items to be managed by layouts.

    :class:`PySide.QtGui.QGraphicsLayoutItem` is an abstract class that defines a set of virtual functions describing sizes, size policies, and size hints for any object arranged by :class:`PySide.QtGui.QGraphicsLayout` . The API contains functions relevant for both the item itself and for the user of the item as most of :class:`PySide.QtGui.QGraphicsLayoutItem` 's functions are also part of the subclass' public API.

    In most cases, existing layout-aware classes such as :class:`PySide.QtGui.QGraphicsWidget` and :class:`PySide.QtGui.QGraphicsLayout` already provide the functionality you require. However, subclassing these classes will enable you to create both graphical elements that work well with layouts ( :class:`PySide.QtGui.QGraphicsWidget` ) or custom layouts ( :class:`PySide.QtGui.QGraphicsLayout` ).

    .. _PySide.QtGui.QGraphicsLayoutItem_subclassing-qgraphicslayoutitem:



Subclassing QGraphicsLayoutItem
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    If you create a subclass of :class:`PySide.QtGui.QGraphicsLayoutItem` and reimplement its virtual functions, you will enable the layout to resize and position your item along with other QGraphicsLayoutItems including :class:`PySide.QtGui.QGraphicsWidget` and :class:`PySide.QtGui.QGraphicsLayout` .

    You can start by reimplementing important functions: the protected :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` function, as well as the public :meth:`PySide.QtGui.QGraphicsLayoutItem.setGeometry` function. If you want your items to be aware of immediate geometry changes, you can also reimplement :meth:`PySide.QtGui.QGraphicsLayoutItem.updateGeometry` .

    The geometry, size hint, and size policy affect the item's size and position. Calling :meth:`PySide.QtGui.QGraphicsLayoutItem.setGeometry` will always resize and reposition the item immediately. Normally, this function is called by :class:`PySide.QtGui.QGraphicsLayout` after the layout has been activated, but it can also be called by the item's user at any time.

    The :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` function returns the item' minimum, preferred and maximum size hints. You can override these properties by calling :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize` , :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize` or :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize` . You can also use functions such as :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumWidth` or :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumHeight` to set only the width or height component if desired.

    The :meth:`PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHint` function, on the other hand, returns a size hint for any given :attr:`Qt.SizeHint` , and guarantees that the returned size is bound to the minimum and maximum sizes and size hints. You can set the item's vertical and horizontal size policy by calling :meth:`PySide.QtGui.QGraphicsLayoutItem.setSizePolicy` . The sizePolicy property is used by the layout system to describe how this item prefers to grow or shrink.

    .. _PySide.QtGui.QGraphicsLayoutItem_nesting-qgraphicslayoutitems:



Nesting QGraphicsLayoutItems
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    QGraphicsLayoutItems can be nested within other QGraphicsLayoutItems, similar to layouts that can contain sublayouts. This is done either by passing a :class:`PySide.QtGui.QGraphicsLayoutItem` pointer to :class:`PySide.QtGui.QGraphicsLayoutItem` 's protected constructor, or by calling :meth:`PySide.QtGui.QGraphicsLayoutItem.setParentLayoutItem` . The :meth:`PySide.QtGui.QGraphicsLayoutItem.parentLayoutItem` function returns a pointer to the item's layoutItem parent. If the item's parent is 0 or if the parent does not inherit from :class:`PySide.QtGui.QGraphicsItem` , the :meth:`PySide.QtGui.QGraphicsLayoutItem.parentLayoutItem` function then returns 0. :meth:`PySide.QtGui.QGraphicsLayoutItem.isLayout` returns true if the :class:`PySide.QtGui.QGraphicsLayoutItem` subclass is itself a layout, or false otherwise.

    Qt uses :class:`PySide.QtGui.QGraphicsLayoutItem` to provide layout functionality in the :ref:`Graphics View Framework<graphicsview.html>` , but in the future its use may spread throughout Qt itself.

    .. seealso::  :class:`PySide.QtGui.QGraphicsWidget`  :class:`PySide.QtGui.QGraphicsLayout`  :class:`PySide.QtGui.QGraphicsLinearLayout`  :class:`PySide.QtGui.QGraphicsGridLayout` 

.. class:: QGraphicsLayoutItem([parent=None[, isLayout=false]])

    :param parent: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param isLayout: :class:`PySide.QtCore.bool`

    Constructs the :class:`PySide.QtGui.QGraphicsLayoutItem` object. ``parent`` becomes the object's parent. If ``isLayout`` is true the item is a layout, otherwise ``isLayout`` is false.


.. method:: PySide.QtGui.QGraphicsLayoutItem.contentsRect()


    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the contents rect in local coordinates.

    The contents rect defines the subrectangle used by an associated layout when arranging subitems. This function is a convenience function that adjusts the item's :meth:`PySide.QtGui.QGraphicsLayoutItem.geometry` by its contents margins. Note that :meth:`PySide.QtGui.QGraphicsLayoutItem.getContentsMargins` is a virtual function that you can reimplement to return the item's contents margins.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.getContentsMargins`  :meth:`PySide.QtGui.QGraphicsLayoutItem.geometry` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHint(which[, constraint=QSizeF()])


    :param which: :attr:`PySide.QtCore.Qt.SizeHint`
    :param constraint: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`







.. method:: PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHints(constraint)


    :param constraint: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`






.. method:: PySide.QtGui.QGraphicsLayoutItem.geometry()


    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the item's geometry (e.g., position and size) as a :class:`PySide.QtCore.QRectF` . This function is equivalent to :class:`PySide.QtCore.QRectF` (pos(), :meth:`~PySide.QtGui.QGraphicsLayoutItem.size` ).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setGeometry` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.getContentsMargins()






    This virtual function provides the ``left`` , ``top`` , ``right`` and ``bottom`` contents margins for this :class:`PySide.QtGui.QGraphicsLayoutItem` . The default implementation assumes all contents margins are 0. The parameters point to values stored in qreals. If any of the pointers is 0, that value will not be updated.

    .. seealso::  :meth:`QGraphicsWidget.setContentsMargins()<PySide.QtGui.QGraphicsWidget.setContentsMargins>` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.graphicsItem()


    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    Returns the :class:`PySide.QtGui.QGraphicsItem` that this layout item represents. For :class:`PySide.QtGui.QGraphicsWidget` it will return itself. For custom items it can return an aggregated value.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setGraphicsItem` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.isLayout()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this :class:`PySide.QtGui.QGraphicsLayoutItem` is a layout (e.g., is inherited by an object that arranges other :class:`PySide.QtGui.QGraphicsLayoutItem` objects); otherwise returns false.

    .. seealso::  :class:`PySide.QtGui.QGraphicsLayout` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.maximumHeight()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the maximum height.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumHeight`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.maximumSize()


    :rtype: :class:`PySide.QtCore.QSizeF`




    Returns the maximum size.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize`  :attr:`Qt.MaximumSize<Qt.SizeHint>`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.maximumWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the maximum width.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.minimumHeight()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the minimum height.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumHeight`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.minimumSize()


    :rtype: :class:`PySide.QtCore.QSizeF`




    Returns the minimum size.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize`  :attr:`Qt.MinimumSize<Qt.SizeHint>`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.minimumWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the minimum width.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.ownedByLayout()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether a layout should delete this item in its destructor. If its true, then the layout will delete it. If its false, then it is assumed that another object has the ownership of it, and the layout won't delete this item.

    If the item inherits both :class:`PySide.QtGui.QGraphicsItem` and :class:`PySide.QtGui.QGraphicsLayoutItem` (such as :class:`PySide.QtGui.QGraphicsWidget` does) the item is really part of two ownership hierarchies. This property informs what the layout should do with its child items when it is destructed. In the case of :class:`PySide.QtGui.QGraphicsWidget` , it is preferred that when the layout is deleted it won't delete its children (since they are also part of the graphics item hierarchy).

    By default this value is initialized to false in :class:`PySide.QtGui.QGraphicsLayoutItem` , but it is overridden by :class:`PySide.QtGui.QGraphicsLayout` to return true. This is because :class:`PySide.QtGui.QGraphicsLayout` is not normally part of the :class:`PySide.QtGui.QGraphicsItem` hierarchy, so the parent layout should delete it. Subclasses might override this default behaviour by calling setOwnedByLayout(true).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setOwnedByLayout` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.parentLayoutItem()


    :rtype: :class:`PySide.QtGui.QGraphicsLayoutItem`




    Returns the parent of this :class:`PySide.QtGui.QGraphicsLayoutItem` , or 0 if there is no parent, or if the parent does not inherit from :class:`PySide.QtGui.QGraphicsLayoutItem` ( :class:`PySide.QtGui.QGraphicsLayoutItem` is often used through multiple inheritance with :class:`PySide.QtCore.QObject` -derived classes).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setParentLayoutItem` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.preferredHeight()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the preferred height.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredHeight`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.preferredSize()


    :rtype: :class:`PySide.QtCore.QSizeF`




    Returns the preferred size.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize`  :attr:`Qt.PreferredSize<Qt.SizeHint>`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.preferredWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the preferred width.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setGeometry(rect)


    :param rect: :class:`PySide.QtCore.QRectF`




    This virtual function sets the geometry of the :class:`PySide.QtGui.QGraphicsLayoutItem` to ``rect`` , which is in parent coordinates (e.g., the top-left corner of ``rect`` is equivalent to the item's position in parent coordinates).

    You must reimplement this function in a subclass of :class:`PySide.QtGui.QGraphicsLayoutItem` to receive geometry updates. The layout will call this function when it does a rearrangement.

    If ``rect`` is outside of the bounds of minimumSize and maximumSize, it will be adjusted to its closest size so that it is within the legal bounds.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.geometry` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setGraphicsItem(item)


    :param item: :class:`PySide.QtGui.QGraphicsItem`




    If the :class:`PySide.QtGui.QGraphicsLayoutItem` represents a :class:`PySide.QtGui.QGraphicsItem` , and it wants to take advantage of the automatic reparenting capabilities of :class:`PySide.QtGui.QGraphicsLayout` it should set this value. Note that if you delete ``item`` and not delete the layout item, you are responsible of calling setGraphicsItem(0) in order to avoid having a dangling pointer.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.graphicsItem` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMaximumHeight(height)


    :param height: :class:`PySide.QtCore.qreal`




    Sets the maximum height to ``height`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumHeight`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMaximumSize(w, h)


    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`




    This convenience function is equivalent to calling setMaximumSize( :class:`PySide.QtCore.QSizeF` (``w`` , ``h`` )).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMaximumSize(size)


    :param size: :class:`PySide.QtCore.QSizeF`




    Sets the maximum size to ``size`` . This property overrides :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` for :attr:`Qt.MaximumSize<Qt.SizeHint>` and ensures that :meth:`PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHint` will never return a size larger than ``size`` . In order to unset the maximum size, use an invalid size.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize`  :attr:`Qt.MaximumSize<Qt.SizeHint>`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMaximumWidth(width)


    :param width: :class:`PySide.QtCore.qreal`




    Sets the maximum width to ``width`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMinimumHeight(height)


    :param height: :class:`PySide.QtCore.qreal`




    Sets the minimum height to ``height`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumHeight`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMinimumSize(size)


    :param size: :class:`PySide.QtCore.QSizeF`




    Sets the minimum size to ``size`` . This property overrides :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` for :attr:`Qt.MinimumSize<Qt.SizeHint>` and ensures that :meth:`PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHint` will never return a size smaller than ``size`` . In order to unset the minimum size, use an invalid size.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize`  :attr:`Qt.MinimumSize<Qt.SizeHint>`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumHeight` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMinimumSize(w, h)


    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`




    This convenience function is equivalent to calling setMinimumSize( :class:`PySide.QtCore.QSizeF` (``w`` , ``h`` )).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setMinimumWidth(width)


    :param width: :class:`PySide.QtCore.qreal`




    Sets the minimum width to ``width`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setOwnedByLayout(ownedByLayout)


    :param ownedByLayout: :class:`PySide.QtCore.bool`




    Sets whether a layout should delete this item in its destructor or not. ``ownership`` must be true to in order for the layout to delete it.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.ownedByLayout` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setParentLayoutItem(parent)


    :param parent: :class:`PySide.QtGui.QGraphicsLayoutItem`




    Sets the parent of this :class:`PySide.QtGui.QGraphicsLayoutItem` to ``parent`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.parentLayoutItem` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setPreferredHeight(height)


    :param height: :class:`PySide.QtCore.qreal`




    Sets the preferred height to ``height`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredHeight`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setPreferredSize(w, h)


    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`




    This convenience function is equivalent to calling setPreferredSize( :class:`PySide.QtCore.QSizeF` (``w`` , ``h`` )).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMaximumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setMinimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setPreferredSize(size)


    :param size: :class:`PySide.QtCore.QSizeF`




    Sets the preferred size to ``size`` . This property overrides :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` for :attr:`Qt.PreferredSize<Qt.SizeHint>` and provides the default value for :meth:`PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHint` . In order to unset the preferred size, use an invalid size.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.minimumSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.maximumSize`  :attr:`Qt.PreferredSize<Qt.SizeHint>`  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setPreferredWidth(width)


    :param width: :class:`PySide.QtCore.qreal`




    Sets the preferred width to ``width`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredWidth`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredHeight`  :meth:`PySide.QtGui.QGraphicsLayoutItem.setPreferredSize`  :meth:`PySide.QtGui.QGraphicsLayoutItem.preferredSize` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setSizePolicy(policy)


    :param policy: :class:`PySide.QtGui.QSizePolicy`




    Sets the size policy to ``policy`` . The size policy describes how the item should grow horizontally and vertically when arranged in a layout.

    :class:`PySide.QtGui.QGraphicsLayoutItem` 's default size policy is ( :attr:`QSizePolicy.Fixed<QSizePolicy.Policy>` , :attr:`QSizePolicy.Fixed<QSizePolicy.Policy>` , :attr:`QSizePolicy.DefaultType<QSizePolicy.ControlType>` ), but it is common for subclasses to change the default. For example, :class:`PySide.QtGui.QGraphicsWidget` defaults to ( :attr:`QSizePolicy.Preferred<QSizePolicy.Policy>` , :attr:`QSizePolicy.Preferred<QSizePolicy.Policy>` , :attr:`QSizePolicy.DefaultType<QSizePolicy.ControlType>` ).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.sizePolicy`  :meth:`QWidget.sizePolicy()<PySide.QtGui.QWidget.sizePolicy>` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.setSizePolicy(hPolicy, vPolicy[, controlType=QSizePolicy.DefaultType])


    :param hPolicy: :attr:`PySide.QtGui.QSizePolicy.Policy`
    :param vPolicy: :attr:`PySide.QtGui.QSizePolicy.Policy`
    :param controlType: :attr:`PySide.QtGui.QSizePolicy.ControlType`







.. method:: PySide.QtGui.QGraphicsLayoutItem.sizeHint(which[, constraint=QSizeF()])


    :param which: :attr:`PySide.QtCore.Qt.SizeHint`
    :param constraint: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`







.. method:: PySide.QtGui.QGraphicsLayoutItem.sizePolicy()


    :rtype: :class:`PySide.QtGui.QSizePolicy`




    Returns the current size policy.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.setSizePolicy`  :meth:`QWidget.sizePolicy()<PySide.QtGui.QWidget.sizePolicy>` 


.. method:: PySide.QtGui.QGraphicsLayoutItem.updateGeometry()






    This virtual function discards any cached size hint information. You should always call this function if you change the return value of the :meth:`PySide.QtGui.QGraphicsLayoutItem.sizeHint` function. Subclasses must always call the base implementation when reimplementing this function.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsLayoutItem.effectiveSizeHint` 



