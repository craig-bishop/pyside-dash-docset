.. module:: PySide.QtGui
.. _QListWidget:

QListWidget
***********

.. inheritance-diagram:: QListWidget
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addItem<PySide.QtGui.QListWidget.addItem>` (item)
*    def :meth:`addItem<PySide.QtGui.QListWidget.addItem>` (label)
*    def :meth:`addItems<PySide.QtGui.QListWidget.addItems>` (labels)
*    def :meth:`closePersistentEditor<PySide.QtGui.QListWidget.closePersistentEditor>` (item)
*    def :meth:`count<PySide.QtGui.QListWidget.count>` ()
*    def :meth:`currentItem<PySide.QtGui.QListWidget.currentItem>` ()
*    def :meth:`currentRow<PySide.QtGui.QListWidget.currentRow>` ()
*    def :meth:`editItem<PySide.QtGui.QListWidget.editItem>` (item)
*    def :meth:`findItems<PySide.QtGui.QListWidget.findItems>` (text, flags)
*    def :meth:`indexFromItem<PySide.QtGui.QListWidget.indexFromItem>` (item)
*    def :meth:`insertItem<PySide.QtGui.QListWidget.insertItem>` (row, item)
*    def :meth:`insertItem<PySide.QtGui.QListWidget.insertItem>` (row, label)
*    def :meth:`insertItems<PySide.QtGui.QListWidget.insertItems>` (row, labels)
*    def :meth:`isSortingEnabled<PySide.QtGui.QListWidget.isSortingEnabled>` ()
*    def :meth:`item<PySide.QtGui.QListWidget.item>` (row)
*    def :meth:`itemAt<PySide.QtGui.QListWidget.itemAt>` (p)
*    def :meth:`itemAt<PySide.QtGui.QListWidget.itemAt>` (x, y)
*    def :meth:`itemFromIndex<PySide.QtGui.QListWidget.itemFromIndex>` (index)
*    def :meth:`itemWidget<PySide.QtGui.QListWidget.itemWidget>` (item)
*    def :meth:`items<PySide.QtGui.QListWidget.items>` (data)
*    def :meth:`openPersistentEditor<PySide.QtGui.QListWidget.openPersistentEditor>` (item)
*    def :meth:`removeItemWidget<PySide.QtGui.QListWidget.removeItemWidget>` (item)
*    def :meth:`row<PySide.QtGui.QListWidget.row>` (item)
*    def :meth:`selectedItems<PySide.QtGui.QListWidget.selectedItems>` ()
*    def :meth:`setCurrentItem<PySide.QtGui.QListWidget.setCurrentItem>` (item)
*    def :meth:`setCurrentItem<PySide.QtGui.QListWidget.setCurrentItem>` (item, command)
*    def :meth:`setCurrentRow<PySide.QtGui.QListWidget.setCurrentRow>` (row)
*    def :meth:`setCurrentRow<PySide.QtGui.QListWidget.setCurrentRow>` (row, command)
*    def :meth:`setItemWidget<PySide.QtGui.QListWidget.setItemWidget>` (item, widget)
*    def :meth:`setSortingEnabled<PySide.QtGui.QListWidget.setSortingEnabled>` (enable)
*    def :meth:`sortItems<PySide.QtGui.QListWidget.sortItems>` ([order=Qt.AscendingOrder])
*    def :meth:`sortOrder<PySide.QtGui.QListWidget.sortOrder>` ()
*    def :meth:`takeItem<PySide.QtGui.QListWidget.takeItem>` (row)
*    def :meth:`visualItemRect<PySide.QtGui.QListWidget.visualItemRect>` (item)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`dropMimeData<PySide.QtGui.QListWidget.dropMimeData>` (index, data, action)
*    def :meth:`mimeData<PySide.QtGui.QListWidget.mimeData>` (items)
*    def :meth:`mimeTypes<PySide.QtGui.QListWidget.mimeTypes>` ()
*    def :meth:`supportedDropActions<PySide.QtGui.QListWidget.supportedDropActions>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`clear<PySide.QtGui.QListWidget.clear>` ()
*    def :meth:`scrollToItem<PySide.QtGui.QListWidget.scrollToItem>` (item[, hint=EnsureVisible])


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`currentItemChanged<PySide.QtGui.QListWidget.currentItemChanged>` (current, previous)
*    def :meth:`currentRowChanged<PySide.QtGui.QListWidget.currentRowChanged>` (currentRow)
*    def :meth:`currentTextChanged<PySide.QtGui.QListWidget.currentTextChanged>` (currentText)
*    def :meth:`itemActivated<PySide.QtGui.QListWidget.itemActivated>` (item)
*    def :meth:`itemChanged<PySide.QtGui.QListWidget.itemChanged>` (item)
*    def :meth:`itemClicked<PySide.QtGui.QListWidget.itemClicked>` (item)
*    def :meth:`itemDoubleClicked<PySide.QtGui.QListWidget.itemDoubleClicked>` (item)
*    def :meth:`itemEntered<PySide.QtGui.QListWidget.itemEntered>` (item)
*    def :meth:`itemPressed<PySide.QtGui.QListWidget.itemPressed>` (item)
*    def :meth:`itemSelectionChanged<PySide.QtGui.QListWidget.itemSelectionChanged>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QListWidget` class provides an item-based list widget.

    :class:`PySide.QtGui.QListWidget` is a convenience class that provides a list view similar to the one supplied by :class:`PySide.QtGui.QListView` , but with a classic item-based interface for adding and removing items. :class:`PySide.QtGui.QListWidget` uses an internal model to manage each :class:`PySide.QtGui.QListWidgetItem` in the list.

    For a more flexible list view widget, use the :class:`PySide.QtGui.QListView` class with a standard model.

    List widgets are constructed in the same way as other widgets:

    ::

            listWidget = QListWidget(self)


    The :meth:`PySide.QtGui.QAbstractItemView.selectionMode` of a list widget determines how many of the items in the list can be selected at the same time, and whether complex selections of items can be created. This can be set with the :meth:`PySide.QtGui.QAbstractItemView.setSelectionMode` function.

    There are two ways to add items to the list: they can be constructed with the list widget as their parent widget, or they can be constructed with no parent widget and added to the list later. If a list widget already exists when the items are constructed, the first method is easier to use:

    ::

            QListWidgetItem(tr("Oak"), listWidget)
            QListWidgetItem(tr("Fir"), listWidget)
            QListWidgetItem(tr("Pine"), listWidget)


    If you need to insert a new item into the list at a particular position, it is more required to construct the item without a parent widget and use the :meth:`PySide.QtGui.QListWidget.insertItem` function to place it within the list. The list widget will take ownership of the item.

    ::

            newItem = QListWidgetItem()
            newItem.setText(itemText)
            listWidget.insertItem(row, newItem)


    For multiple items, :meth:`PySide.QtGui.QListWidget.insertItems` can be used instead. The number of items in the list is found with the :meth:`PySide.QtGui.QListWidget.count` function. To remove items from the list, use :meth:`PySide.QtGui.QListWidget.takeItem` .

    The current item in the list can be found with :meth:`PySide.QtGui.QListWidget.currentItem` , and changed with :meth:`PySide.QtGui.QListWidget.setCurrentItem` . The user can also change the current item by navigating with the keyboard or clicking on a different item. When the current item changes, the :meth:`PySide.QtGui.QListWidget.currentItemChanged` signal is emitted with the new current item and the item that was previously current.

    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/windowsxp-listview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/macintosh-listview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-listview.png|
    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
    |A :ref:`Windows XP style<gallery-windowsxp.html>` list widget.                                              |A :ref:`Macintosh style<gallery-macintosh.html>` list widget.                                               |A :ref:`Plastique style<gallery-plastique.html>` list widget.                                               |
    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QListWidgetItem`  :class:`PySide.QtGui.QListView`  :class:`PySide.QtGui.QTreeView`  :ref:`Model/View Programming<model-view-programming.html>`  :ref:`Config Dialog Example<dialogs/configdialog>` 

.. class:: QListWidget([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Constructs an empty :class:`PySide.QtGui.QListWidget` with the given ``parent`` .


.. method:: PySide.QtGui.QListWidget.addItem(label)


    :param label: unicode




    Inserts an item with the text ``label`` at the end of the list widget.



.. method:: PySide.QtGui.QListWidget.addItem(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`




    Inserts the ``item`` at the end of the list widget.

    .. warning::  A :class:`PySide.QtGui.QListWidgetItem` can only be added to a :class:`PySide.QtGui.QListWidget` once. Adding the same :class:`PySide.QtGui.QListWidgetItem` multiple times to a :class:`PySide.QtGui.QListWidget` will result in undefined behavior.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.insertItem` 


.. method:: PySide.QtGui.QListWidget.addItems(labels)


    :param labels: list of strings




    Inserts items with the text ``labels`` at the end of the list widget.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.insertItems` 


.. method:: PySide.QtGui.QListWidget.clear()






    Removes all items and selections in the view.

    .. warning::  All items will be permanently deleted.



.. method:: PySide.QtGui.QListWidget.closePersistentEditor(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`




    Closes the persistent editor for the given ``item`` .

    .. seealso::  :meth:`PySide.QtGui.QListWidget.openPersistentEditor` 


.. method:: PySide.QtGui.QListWidget.count()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of items in the list including any hidden items..



.. method:: PySide.QtGui.QListWidget.currentItem()


    :rtype: :class:`PySide.QtGui.QListWidgetItem`




    Returns the current item.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.setCurrentItem` 


.. method:: PySide.QtGui.QListWidget.currentItemChanged(current, previous)


    :param current: :class:`PySide.QtGui.QListWidgetItem`
    :param previous: :class:`PySide.QtGui.QListWidgetItem`






.. method:: PySide.QtGui.QListWidget.currentRow()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the row of the current item..

    Depending on the current selection mode, the row may also be selected.



.. method:: PySide.QtGui.QListWidget.currentRowChanged(currentRow)


    :param currentRow: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QListWidget.currentTextChanged(currentText)


    :param currentText: unicode






.. method:: PySide.QtGui.QListWidget.dropMimeData(index, data, action)


    :param index: :class:`PySide.QtCore.int`
    :param data: :class:`PySide.QtCore.QMimeData`
    :param action: :attr:`PySide.QtCore.Qt.DropAction`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QListWidget.editItem(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`




    Starts editing the ``item`` if it is editable.



.. method:: PySide.QtGui.QListWidget.findItems(text, flags)


    :param text: unicode
    :param flags: :class:`PySide.QtCore.Qt.MatchFlags`
    :rtype: 







.. method:: PySide.QtGui.QListWidget.indexFromItem(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the :class:`PySide.QtCore.QModelIndex` assocated with the given ``item`` .



.. method:: PySide.QtGui.QListWidget.insertItem(row, label)


    :param row: :class:`PySide.QtCore.int`
    :param label: unicode




    Inserts an item with the text ``label`` in the list widget at the position given by ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QListWidget.addItem` 


.. method:: PySide.QtGui.QListWidget.insertItem(row, item)


    :param row: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QListWidgetItem`




    Inserts the ``item`` at the position in the list given by ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QListWidget.addItem` 


.. method:: PySide.QtGui.QListWidget.insertItems(row, labels)


    :param row: :class:`PySide.QtCore.int`
    :param labels: list of strings




    Inserts items from the list of ``labels`` into the list, starting at the given ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QListWidget.insertItem`  :meth:`PySide.QtGui.QListWidget.addItem` 


.. method:: PySide.QtGui.QListWidget.isSortingEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether sorting is enabled.

    If this property is true, sorting is enabled for the list; if the property is false, sorting is not enabled.

    The default value is false.



.. method:: PySide.QtGui.QListWidget.item(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QListWidgetItem`




    Returns the item that occupies the given ``row`` in the list if one has been set; otherwise returns 0.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.row` 


.. method:: PySide.QtGui.QListWidget.itemActivated(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`






.. method:: PySide.QtGui.QListWidget.itemAt(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QListWidgetItem`




    This is an overloaded function.

    Returns a pointer to the item at the coordinates (``x`` , ``y`` ).



.. method:: PySide.QtGui.QListWidget.itemAt(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QListWidgetItem`




    Returns a pointer to the item at the coordinates ``p`` .



.. method:: PySide.QtGui.QListWidget.itemChanged(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`






.. method:: PySide.QtGui.QListWidget.itemClicked(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`






.. method:: PySide.QtGui.QListWidget.itemDoubleClicked(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`






.. method:: PySide.QtGui.QListWidget.itemEntered(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`






.. method:: PySide.QtGui.QListWidget.itemFromIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtGui.QListWidgetItem`




    Returns a pointer to the :class:`PySide.QtGui.QListWidgetItem` assocated with the given ``index`` .



.. method:: PySide.QtGui.QListWidget.itemPressed(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`






.. method:: PySide.QtGui.QListWidget.itemSelectionChanged()








.. method:: PySide.QtGui.QListWidget.itemWidget(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget displayed in the given ``item`` .

    .. seealso::  :meth:`PySide.QtGui.QListWidget.setItemWidget` 


.. method:: PySide.QtGui.QListWidget.items(data)


    :param data: :class:`PySide.QtCore.QMimeData`
    :rtype: 




    Returns a list of pointers to the items contained in the ``data`` object. If the object was not created by a :class:`PySide.QtGui.QListWidget` in the same process, the list is empty.



.. method:: PySide.QtGui.QListWidget.mimeData(items)


    :param items: 
    :rtype: :class:`PySide.QtCore.QMimeData`







.. method:: PySide.QtGui.QListWidget.mimeTypes()


    :rtype: list of strings




    Returns a list of MIME types that can be used to describe a list of listwidget items.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.mimeData` 


.. method:: PySide.QtGui.QListWidget.openPersistentEditor(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`




    Opens an editor for the given ``item`` . The editor remains open after editing.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.closePersistentEditor` 


.. method:: PySide.QtGui.QListWidget.removeItemWidget(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`




    Removes the widget set on the given ``item`` .



.. method:: PySide.QtGui.QListWidget.row(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :rtype: :class:`PySide.QtCore.int`




    Returns the row containing the given ``item`` .

    .. seealso::  :meth:`PySide.QtGui.QListWidget.item` 


.. method:: PySide.QtGui.QListWidget.scrollToItem(item[, hint=EnsureVisible])


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :param hint: :attr:`PySide.QtGui.QAbstractItemView.ScrollHint`







.. method:: PySide.QtGui.QListWidget.selectedItems()


    :rtype: 




    Returns a list of all selected items in the list widget.



.. method:: PySide.QtGui.QListWidget.setCurrentItem(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`




    Sets the current item to ``item`` .

    Unless the selection mode is :attr:`NoSelection<QAbstractItemView.SelectionMode>` , the item is also be selected.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.currentItem` 


.. method:: PySide.QtGui.QListWidget.setCurrentItem(item, command)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :param command: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`







.. method:: PySide.QtGui.QListWidget.setCurrentRow(row, command)


    :param row: :class:`PySide.QtCore.int`
    :param command: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`







.. method:: PySide.QtGui.QListWidget.setCurrentRow(row)


    :param row: :class:`PySide.QtCore.int`




    This property holds the row of the current item..

    Depending on the current selection mode, the row may also be selected.



.. method:: PySide.QtGui.QListWidget.setItemWidget(item, widget)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :param widget: :class:`PySide.QtGui.QWidget`




    Sets the ``widget`` to be displayed in the give ``item`` .

    This function should only be used to display static content in the place of a list widget item. If you want to display custom dynamic content or implement a custom editor widget, use :class:`PySide.QtGui.QListView` and subclass :class:`PySide.QtGui.QItemDelegate` instead.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.itemWidget`  :ref:`Delegate Classes<model-view-programming.html>` 


.. method:: PySide.QtGui.QListWidget.setSortingEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether sorting is enabled.

    If this property is true, sorting is enabled for the list; if the property is false, sorting is not enabled.

    The default value is false.



.. method:: PySide.QtGui.QListWidget.sortItems([order=Qt.AscendingOrder])


    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QListWidget.sortOrder()


    :rtype: :attr:`PySide.QtCore.Qt.SortOrder`






.. method:: PySide.QtGui.QListWidget.supportedDropActions()


    :rtype: :class:`PySide.QtCore.Qt.DropActions`




    Returns the drop actions supported by this view.

    .. seealso::  :class:`Qt.DropActions` 


.. method:: PySide.QtGui.QListWidget.takeItem(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QListWidgetItem`




    Removes and returns the item from the given ``row`` in the list widget; otherwise returns 0.

    Items removed from a list widget will not be managed by Qt, and will need to be deleted manually.

    .. seealso::  :meth:`PySide.QtGui.QListWidget.insertItem`  :meth:`PySide.QtGui.QListWidget.addItem` 


.. method:: PySide.QtGui.QListWidget.visualItemRect(item)


    :param item: :class:`PySide.QtGui.QListWidgetItem`
    :rtype: :class:`PySide.QtCore.QRect`




    Returns the rectangle on the viewport occupied by the item at ``item`` .




