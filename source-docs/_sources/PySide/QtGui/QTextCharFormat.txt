.. module:: PySide.QtGui
.. _QTextCharFormat:

QTextCharFormat
***************

.. inheritance-diagram:: QTextCharFormat
    :parts: 2

**Inherited by:** :ref:`QTextTableCellFormat`, :ref:`QTextImageFormat`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`anchorHref<PySide.QtGui.QTextCharFormat.anchorHref>` ()
*    def :meth:`anchorNames<PySide.QtGui.QTextCharFormat.anchorNames>` ()
*    def :meth:`font<PySide.QtGui.QTextCharFormat.font>` ()
*    def :meth:`fontCapitalization<PySide.QtGui.QTextCharFormat.fontCapitalization>` ()
*    def :meth:`fontFamily<PySide.QtGui.QTextCharFormat.fontFamily>` ()
*    def :meth:`fontFixedPitch<PySide.QtGui.QTextCharFormat.fontFixedPitch>` ()
*    def :meth:`fontItalic<PySide.QtGui.QTextCharFormat.fontItalic>` ()
*    def :meth:`fontKerning<PySide.QtGui.QTextCharFormat.fontKerning>` ()
*    def :meth:`fontLetterSpacing<PySide.QtGui.QTextCharFormat.fontLetterSpacing>` ()
*    def :meth:`fontOverline<PySide.QtGui.QTextCharFormat.fontOverline>` ()
*    def :meth:`fontPointSize<PySide.QtGui.QTextCharFormat.fontPointSize>` ()
*    def :meth:`fontStrikeOut<PySide.QtGui.QTextCharFormat.fontStrikeOut>` ()
*    def :meth:`fontStyleHint<PySide.QtGui.QTextCharFormat.fontStyleHint>` ()
*    def :meth:`fontStyleStrategy<PySide.QtGui.QTextCharFormat.fontStyleStrategy>` ()
*    def :meth:`fontUnderline<PySide.QtGui.QTextCharFormat.fontUnderline>` ()
*    def :meth:`fontWeight<PySide.QtGui.QTextCharFormat.fontWeight>` ()
*    def :meth:`fontWordSpacing<PySide.QtGui.QTextCharFormat.fontWordSpacing>` ()
*    def :meth:`isAnchor<PySide.QtGui.QTextCharFormat.isAnchor>` ()
*    def :meth:`setAnchor<PySide.QtGui.QTextCharFormat.setAnchor>` (anchor)
*    def :meth:`setAnchorHref<PySide.QtGui.QTextCharFormat.setAnchorHref>` (value)
*    def :meth:`setAnchorNames<PySide.QtGui.QTextCharFormat.setAnchorNames>` (names)
*    def :meth:`setFont<PySide.QtGui.QTextCharFormat.setFont>` (font)
*    def :meth:`setFontCapitalization<PySide.QtGui.QTextCharFormat.setFontCapitalization>` (capitalization)
*    def :meth:`setFontFamily<PySide.QtGui.QTextCharFormat.setFontFamily>` (family)
*    def :meth:`setFontFixedPitch<PySide.QtGui.QTextCharFormat.setFontFixedPitch>` (fixedPitch)
*    def :meth:`setFontItalic<PySide.QtGui.QTextCharFormat.setFontItalic>` (italic)
*    def :meth:`setFontKerning<PySide.QtGui.QTextCharFormat.setFontKerning>` (enable)
*    def :meth:`setFontLetterSpacing<PySide.QtGui.QTextCharFormat.setFontLetterSpacing>` (spacing)
*    def :meth:`setFontOverline<PySide.QtGui.QTextCharFormat.setFontOverline>` (overline)
*    def :meth:`setFontPointSize<PySide.QtGui.QTextCharFormat.setFontPointSize>` (size)
*    def :meth:`setFontStrikeOut<PySide.QtGui.QTextCharFormat.setFontStrikeOut>` (strikeOut)
*    def :meth:`setFontStyleHint<PySide.QtGui.QTextCharFormat.setFontStyleHint>` (hint[, strategy=QFont.PreferDefault])
*    def :meth:`setFontStyleStrategy<PySide.QtGui.QTextCharFormat.setFontStyleStrategy>` (strategy)
*    def :meth:`setFontUnderline<PySide.QtGui.QTextCharFormat.setFontUnderline>` (underline)
*    def :meth:`setFontWeight<PySide.QtGui.QTextCharFormat.setFontWeight>` (weight)
*    def :meth:`setFontWordSpacing<PySide.QtGui.QTextCharFormat.setFontWordSpacing>` (spacing)
*    def :meth:`setTableCellColumnSpan<PySide.QtGui.QTextCharFormat.setTableCellColumnSpan>` (tableCellColumnSpan)
*    def :meth:`setTableCellRowSpan<PySide.QtGui.QTextCharFormat.setTableCellRowSpan>` (tableCellRowSpan)
*    def :meth:`setTextOutline<PySide.QtGui.QTextCharFormat.setTextOutline>` (pen)
*    def :meth:`setToolTip<PySide.QtGui.QTextCharFormat.setToolTip>` (tip)
*    def :meth:`setUnderlineColor<PySide.QtGui.QTextCharFormat.setUnderlineColor>` (color)
*    def :meth:`setUnderlineStyle<PySide.QtGui.QTextCharFormat.setUnderlineStyle>` (style)
*    def :meth:`setVerticalAlignment<PySide.QtGui.QTextCharFormat.setVerticalAlignment>` (alignment)
*    def :meth:`tableCellColumnSpan<PySide.QtGui.QTextCharFormat.tableCellColumnSpan>` ()
*    def :meth:`tableCellRowSpan<PySide.QtGui.QTextCharFormat.tableCellRowSpan>` ()
*    def :meth:`textOutline<PySide.QtGui.QTextCharFormat.textOutline>` ()
*    def :meth:`toolTip<PySide.QtGui.QTextCharFormat.toolTip>` ()
*    def :meth:`underlineColor<PySide.QtGui.QTextCharFormat.underlineColor>` ()
*    def :meth:`underlineStyle<PySide.QtGui.QTextCharFormat.underlineStyle>` ()
*    def :meth:`verticalAlignment<PySide.QtGui.QTextCharFormat.verticalAlignment>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTextCharFormat` class provides formatting information for characters in a :class:`PySide.QtGui.QTextDocument` .

    The character format of text in a document specifies the visual properties of the text, as well as information about its role in a hypertext document.

    The font used can be set by supplying a font to the :meth:`PySide.QtGui.QTextCharFormat.setFont` function, and each aspect of its appearance can be adjusted to give the desired effect. :meth:`PySide.QtGui.QTextCharFormat.setFontFamily` and :meth:`PySide.QtGui.QTextCharFormat.setFontPointSize` define the font's family (e.g. Times) and printed size; :meth:`PySide.QtGui.QTextCharFormat.setFontWeight` and :meth:`PySide.QtGui.QTextCharFormat.setFontItalic` provide control over the style of the font. :meth:`PySide.QtGui.QTextCharFormat.setFontUnderline` , :meth:`PySide.QtGui.QTextCharFormat.setFontOverline` , :meth:`PySide.QtGui.QTextCharFormat.setFontStrikeOut` , and :meth:`PySide.QtGui.QTextCharFormat.setFontFixedPitch` provide additional effects for text.

    The color is set with :meth:`PySide.QtGui.QTextFormat.setForeground` . If the text is intended to be used as an anchor (for hyperlinks), this can be enabled with :meth:`PySide.QtGui.QTextCharFormat.setAnchor` . The :meth:`PySide.QtGui.QTextCharFormat.setAnchorHref` and :meth:`PySide.QtGui.QTextCharFormat.setAnchorNames` functions are used to specify the information about the hyperlink's destination and the anchor's name.

    .. seealso::  :class:`PySide.QtGui.QTextFormat`  :class:`PySide.QtGui.QTextBlockFormat`  :class:`PySide.QtGui.QTextTableFormat`  :class:`PySide.QtGui.QTextListFormat` 

.. class:: QTextCharFormat()
           QTextCharFormat(QTextCharFormat)
           QTextCharFormat(fmt)

    :param fmt: :class:`PySide.QtGui.QTextFormat`
    :param QTextCharFormat: :class:`PySide.QtGui.QTextCharFormat`

    Constructs a new character format object.




    Creates a new character format with the same attributes as the ``given`` text format.


.. attribute:: PySide.QtGui.QTextCharFormat.VerticalAlignment

    This enum describes the ways that adjacent characters can be vertically aligned.

    +--------------------------------+--------------------------------------------------------------------------------------------------------------------------+
    |Constant                        |Description                                                                                                               |
    +================================+==========================================================================================================================+
    |QTextCharFormat.AlignNormal     |Adjacent characters are positioned in the standard way for text in the writing system in use.                             |
    +--------------------------------+--------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.AlignSuperScript|Characters are placed above the baseline for normal text.                                                                 |
    +--------------------------------+--------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.AlignSubScript  |Characters are placed below the baseline for normal text.                                                                 |
    +--------------------------------+--------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.AlignMiddle     |The center of the object is vertically aligned with the base line. Currently, this is only implemented for inline objects.|
    +--------------------------------+--------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.AlignBottom     |The bottom edge of the object is vertically aligned with the base line.                                                   |
    +--------------------------------+--------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.AlignTop        |The top edge of the object is vertically aligned with the base line.                                                      |
    +--------------------------------+--------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QTextCharFormat.UnderlineStyle

    This enum describes the different ways drawing underlined text.

    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                           |Description                                                                                                                                                                                                                                                                                                   |
    +===================================+==============================================================================================================================================================================================================================================================================================================+
    |QTextCharFormat.NoUnderline        |Text is draw without any underlining decoration.                                                                                                                                                                                                                                                              |
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.SingleUnderline    |A line is drawn using :attr:`Qt.SolidLine<Qt.PenStyle>` .                                                                                                                                                                                                                                                     |
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.DashUnderline      |Dashes are drawn using :attr:`Qt.DashLine<Qt.PenStyle>` .                                                                                                                                                                                                                                                     |
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.DotLine            |Dots are drawn using :attr:`Qt.DotLine<Qt.PenStyle>` ;                                                                                                                                                                                                                                                        |
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.DashDotLine        |Dashs and dots are drawn using :attr:`Qt.DashDotLine<Qt.PenStyle>` .                                                                                                                                                                                                                                          |
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.DashDotDotLine     |Underlines draw drawn using :attr:`Qt.DashDotDotLine<Qt.PenStyle>` .                                                                                                                                                                                                                                          |
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.WaveUnderline      |The text is underlined using a wave shaped line.                                                                                                                                                                                                                                                              |
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextCharFormat.SpellCheckUnderline|The underline is drawn depending on the QStyle::SH\_SpellCeckUnderlineStyle style hint of the :class:`PySide.QtGui.QApplication` style. By default this is mapped to :attr:`WaveUnderline<QTextCharFormat.UnderlineStyle>` , on Mac OS X it is mapped to :attr:`DashDotLine<QTextCharFormat.UnderlineStyle>` .|
    +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :attr:`Qt.PenStyle` 

.. method:: PySide.QtGui.QTextCharFormat.anchorHref()


    :rtype: unicode




    Returns the text format's hypertext link, or an empty string if none has been set.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setAnchorHref` 


.. method:: PySide.QtGui.QTextCharFormat.anchorNames()


    :rtype: list of strings




    Returns the anchor names associated with this text format, or an empty string list if none has been set. If the anchor names are set, text with this format can be the destination of a hypertext link.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setAnchorNames` 


.. method:: PySide.QtGui.QTextCharFormat.font()


    :rtype: :class:`PySide.QtGui.QFont`




    Returns the font for this character format.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.fontCapitalization()


    :rtype: :attr:`PySide.QtGui.QFont.Capitalization`




    Returns the current capitalization type of the font.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontCapitalization` 


.. method:: PySide.QtGui.QTextCharFormat.fontFamily()


    :rtype: unicode




    Returns the text format's font family.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontFamily`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontFixedPitch()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the text format's font is fixed pitch; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontFixedPitch`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontItalic()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the text format's font is italic; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontItalic`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontKerning()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the font kerning is enabled.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontKerning`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontLetterSpacing()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the current letter spacing percentage.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontLetterSpacing` 


.. method:: PySide.QtGui.QTextCharFormat.fontOverline()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the text format's font is overlined; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontOverline`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontPointSize()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the font size used to display text in this format.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontPointSize`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontStrikeOut()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the text format's font is struck out (has a horizontal line drawn through it); otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontStrikeOut`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontStyleHint()


    :rtype: :attr:`PySide.QtGui.QFont.StyleHint`




    Returns the font style hint.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontStyleHint`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontStyleStrategy()


    :rtype: :attr:`PySide.QtGui.QFont.StyleStrategy`




    Returns the current font style strategy.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontStyleStrategy`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontUnderline()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the text format's font is underlined; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontUnderline`  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.fontWeight()


    :rtype: :class:`PySide.QtCore.int`




    Returns the text format's font weight.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontWeight`  :meth:`PySide.QtGui.QTextCharFormat.font`  :attr:`QFont.Weight` 


.. method:: PySide.QtGui.QTextCharFormat.fontWordSpacing()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the current word spacing value.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setFontWordSpacing` 


.. method:: PySide.QtGui.QTextCharFormat.isAnchor()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the text is formatted as an anchor; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setAnchor`  :meth:`PySide.QtGui.QTextCharFormat.setAnchorHref`  :meth:`PySide.QtGui.QTextCharFormat.setAnchorNames` 


.. method:: PySide.QtGui.QTextCharFormat.setAnchor(anchor)


    :param anchor: :class:`PySide.QtCore.bool`




    If ``anchor`` is true, text with this format represents an anchor, and is formatted in the appropriate way; otherwise the text is formatted normally. (Anchors are hyperlinks which are often shown underlined and in a different color from plain text.)

    The way the text is rendered is independent of whether or not the format has a valid anchor defined. Use :meth:`PySide.QtGui.QTextCharFormat.setAnchorHref` , and optionally :meth:`PySide.QtGui.QTextCharFormat.setAnchorNames` to create a hypertext link.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.isAnchor` 


.. method:: PySide.QtGui.QTextCharFormat.setAnchorHref(value)


    :param value: unicode




    Sets the hypertext link for the text format to the given ``value`` . This is typically a URL like "http://example.com/index.html".

    The anchor will be displayed with the ``value`` as its display text; if you want to display different text call :meth:`PySide.QtGui.QTextCharFormat.setAnchorNames` .

    To format the text as a hypertext link use :meth:`PySide.QtGui.QTextCharFormat.setAnchor` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.anchorHref` 


.. method:: PySide.QtGui.QTextCharFormat.setAnchorNames(names)


    :param names: list of strings




    Sets the text format's anchor ``names`` . For the anchor to work as a hyperlink, the destination must be set with :meth:`PySide.QtGui.QTextCharFormat.setAnchorHref` and the anchor must be enabled with :meth:`PySide.QtGui.QTextCharFormat.setAnchor` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.anchorNames` 


.. method:: PySide.QtGui.QTextCharFormat.setFont(font)


    :param font: :class:`PySide.QtGui.QFont`




    Sets the text format's ``font`` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.font` 


.. method:: PySide.QtGui.QTextCharFormat.setFontCapitalization(capitalization)


    :param capitalization: :attr:`PySide.QtGui.QFont.Capitalization`







.. method:: PySide.QtGui.QTextCharFormat.setFontFamily(family)


    :param family: unicode




    Sets the text format's font ``family`` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontFamily`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontFixedPitch(fixedPitch)


    :param fixedPitch: :class:`PySide.QtCore.bool`




    If ``fixedPitch`` is true, sets the text format's font to be fixed pitch; otherwise a non-fixed pitch font is used.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontFixedPitch`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontItalic(italic)


    :param italic: :class:`PySide.QtCore.bool`




    If ``italic`` is true, sets the text format's font to be italic; otherwise the font will be non-italic.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontItalic`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontKerning(enable)


    :param enable: :class:`PySide.QtCore.bool`




    Enables kerning for this font if ``enable`` is true; otherwise disables it.

    When kerning is enabled, glyph metrics do not add up anymore, even for Latin text. In other words, the assumption that width('a') + width('b') is equal to width("ab") is not neccesairly true.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontKerning`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontLetterSpacing(spacing)


    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the letter spacing of this format to the given ``spacing`` , in percent. A value of 100 indicates default spacing; a value of 200 doubles the amount of space a letter takes.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontLetterSpacing` 


.. method:: PySide.QtGui.QTextCharFormat.setFontOverline(overline)


    :param overline: :class:`PySide.QtCore.bool`




    If ``overline`` is true, sets the text format's font to be overlined; otherwise the font is displayed non-overlined.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontOverline`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontPointSize(size)


    :param size: :class:`PySide.QtCore.qreal`




    Sets the text format's font ``size`` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontPointSize`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontStrikeOut(strikeOut)


    :param strikeOut: :class:`PySide.QtCore.bool`




    If ``strikeOut`` is true, sets the text format's font with strike-out enabled (with a horizontal line through it); otherwise it is displayed without strikeout.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontStrikeOut`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontStyleHint(hint[, strategy=QFont.PreferDefault])


    :param hint: :attr:`PySide.QtGui.QFont.StyleHint`
    :param strategy: :attr:`PySide.QtGui.QFont.StyleStrategy`







.. method:: PySide.QtGui.QTextCharFormat.setFontStyleStrategy(strategy)


    :param strategy: :attr:`PySide.QtGui.QFont.StyleStrategy`







.. method:: PySide.QtGui.QTextCharFormat.setFontUnderline(underline)


    :param underline: :class:`PySide.QtCore.bool`




    If ``underline`` is true, sets the text format's font to be underlined; otherwise it is displayed non-underlined.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontUnderline`  :meth:`PySide.QtGui.QTextCharFormat.setFont` 


.. method:: PySide.QtGui.QTextCharFormat.setFontWeight(weight)


    :param weight: :class:`PySide.QtCore.int`




    Sets the text format's font weight to ``weight`` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontWeight`  :meth:`PySide.QtGui.QTextCharFormat.setFont`  :attr:`QFont.Weight` 


.. method:: PySide.QtGui.QTextCharFormat.setFontWordSpacing(spacing)


    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the word spacing of this format to the given ``spacing`` , in pixels.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.fontWordSpacing` 


.. method:: PySide.QtGui.QTextCharFormat.setTableCellColumnSpan(tableCellColumnSpan)


    :param tableCellColumnSpan: :class:`PySide.QtCore.int`




    If this character format is applied to characters in a table cell, the cell will span ``tableCellColumnSpan`` columns.



.. method:: PySide.QtGui.QTextCharFormat.setTableCellRowSpan(tableCellRowSpan)


    :param tableCellRowSpan: :class:`PySide.QtCore.int`




    If this character format is applied to characters in a table cell, the cell will span ``tableCellRowSpan`` rows.



.. method:: PySide.QtGui.QTextCharFormat.setTextOutline(pen)


    :param pen: :class:`PySide.QtGui.QPen`




    Sets the pen used to draw the outlines of characters to the given ``pen`` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.textOutline` 


.. method:: PySide.QtGui.QTextCharFormat.setToolTip(tip)


    :param tip: unicode




    Sets the tool tip for a fragment of text to the given ``text`` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.toolTip` 


.. method:: PySide.QtGui.QTextCharFormat.setUnderlineColor(color)


    :param color: :class:`PySide.QtGui.QColor`




    Sets the underline color used for the characters with this format to the ``color`` specified.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.underlineColor` 


.. method:: PySide.QtGui.QTextCharFormat.setUnderlineStyle(style)


    :param style: :attr:`PySide.QtGui.QTextCharFormat.UnderlineStyle`




    Sets the style of underlining the text to ``style`` .

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.underlineStyle` 


.. method:: PySide.QtGui.QTextCharFormat.setVerticalAlignment(alignment)


    :param alignment: :attr:`PySide.QtGui.QTextCharFormat.VerticalAlignment`




    Sets the vertical alignment used for the characters with this format to the ``alignment`` specified.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.verticalAlignment` 


.. method:: PySide.QtGui.QTextCharFormat.tableCellColumnSpan()


    :rtype: :class:`PySide.QtCore.int`




    If this character format is applied to characters in a table cell, this function returns the number of columns spanned by the text (this may be 1); otherwise it returns 1.



.. method:: PySide.QtGui.QTextCharFormat.tableCellRowSpan()


    :rtype: :class:`PySide.QtCore.int`




    If this character format is applied to characters in a table cell, this function returns the number of rows spanned by the text (this may be 1); otherwise it returns 1.



.. method:: PySide.QtGui.QTextCharFormat.textOutline()


    :rtype: :class:`PySide.QtGui.QPen`




    Returns the pen used to draw the outlines of characters in this format.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setTextOutline` 


.. method:: PySide.QtGui.QTextCharFormat.toolTip()


    :rtype: unicode




    Returns the tool tip that is displayed for a fragment of text.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setToolTip` 


.. method:: PySide.QtGui.QTextCharFormat.underlineColor()


    :rtype: :class:`PySide.QtGui.QColor`




    Returns the color used to underline the characters with this format.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setUnderlineColor` 


.. method:: PySide.QtGui.QTextCharFormat.underlineStyle()


    :rtype: :attr:`PySide.QtGui.QTextCharFormat.UnderlineStyle`




    Returns the style of underlining the text.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setUnderlineStyle` 


.. method:: PySide.QtGui.QTextCharFormat.verticalAlignment()


    :rtype: :attr:`PySide.QtGui.QTextCharFormat.VerticalAlignment`




    Returns the vertical alignment used for characters with this format.

    .. seealso::  :meth:`PySide.QtGui.QTextCharFormat.setVerticalAlignment` 



