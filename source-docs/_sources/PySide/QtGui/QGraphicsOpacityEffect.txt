.. module:: PySide.QtGui
.. _QGraphicsOpacityEffect:

QGraphicsOpacityEffect
**********************

.. inheritance-diagram:: QGraphicsOpacityEffect
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`opacity<PySide.QtGui.QGraphicsOpacityEffect.opacity>` ()
*    def :meth:`opacityMask<PySide.QtGui.QGraphicsOpacityEffect.opacityMask>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`setOpacity<PySide.QtGui.QGraphicsOpacityEffect.setOpacity>` (opacity)
*    def :meth:`setOpacityMask<PySide.QtGui.QGraphicsOpacityEffect.setOpacityMask>` (mask)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`opacityChanged<PySide.QtGui.QGraphicsOpacityEffect.opacityChanged>` (opacity)
*    def :meth:`opacityMaskChanged<PySide.QtGui.QGraphicsOpacityEffect.opacityMaskChanged>` (mask)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QGraphicsOpacityEffect` class provides an opacity effect.

    An opacity effect renders the source with an opacity. This effect is useful for making the source semi-transparent, similar to a fade-in/fade-out sequence. The opacity can be modified using the :meth:`PySide.QtGui.QGraphicsOpacityEffect.setOpacity` function.

    By default, the opacity is 0.7.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/graphicseffect-opacity.png

    .. seealso::  :class:`PySide.QtGui.QGraphicsDropShadowEffect`  :class:`PySide.QtGui.QGraphicsBlurEffect`  :class:`PySide.QtGui.QGraphicsColorizeEffect` 

.. class:: QGraphicsOpacityEffect([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a new :class:`PySide.QtGui.QGraphicsOpacityEffect` instance. The ``parent`` parameter is passed to :class:`PySide.QtGui.QGraphicsEffect` 's constructor.


.. method:: PySide.QtGui.QGraphicsOpacityEffect.opacity()


    :rtype: :class:`PySide.QtCore.qreal`




    This property holds the opacity of the effect..

    The value should be in the range of 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque.

    By default, the opacity is 0.7.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsOpacityEffect.setOpacityMask` 


.. method:: PySide.QtGui.QGraphicsOpacityEffect.opacityChanged(opacity)


    :param opacity: :class:`PySide.QtCore.qreal`






.. method:: PySide.QtGui.QGraphicsOpacityEffect.opacityMask()


    :rtype: :class:`PySide.QtGui.QBrush`




    This property holds the opacity mask of the effect..

    An opacity mask allows you apply opacity to portions of an element.

    For example:

    ::

        # ...
        alphaGradient = QLinearGradient(rect.topLeft(), rect.bottomLeft())
        alphaGradient.setColorAt(0.0, Qt.transparent)
        alphaGradient.setColorAt(0.5, Qt.black)
        alphaGradient.setColorAt(1.0, Qt.transparent)
        effect = QGraphicsOpacityEffect()
        effect.setOpacityMask(alphaGradient)
        # ...


    There is no opacity mask by default.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsOpacityEffect.setOpacity` 


.. method:: PySide.QtGui.QGraphicsOpacityEffect.opacityMaskChanged(mask)


    :param mask: :class:`PySide.QtGui.QBrush`






.. method:: PySide.QtGui.QGraphicsOpacityEffect.setOpacity(opacity)


    :param opacity: :class:`PySide.QtCore.qreal`




    This property holds the opacity of the effect..

    The value should be in the range of 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque.

    By default, the opacity is 0.7.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsOpacityEffect.setOpacityMask` 


.. method:: PySide.QtGui.QGraphicsOpacityEffect.setOpacityMask(mask)


    :param mask: :class:`PySide.QtGui.QBrush`




    This property holds the opacity mask of the effect..

    An opacity mask allows you apply opacity to portions of an element.

    For example:

    ::

        # ...
        alphaGradient = QLinearGradient(rect.topLeft(), rect.bottomLeft())
        alphaGradient.setColorAt(0.0, Qt.transparent)
        alphaGradient.setColorAt(0.5, Qt.black)
        alphaGradient.setColorAt(1.0, Qt.transparent)
        effect = QGraphicsOpacityEffect()
        effect.setOpacityMask(alphaGradient)
        # ...


    There is no opacity mask by default.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsOpacityEffect.setOpacity` 



