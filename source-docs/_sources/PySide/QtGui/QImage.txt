.. module:: PySide.QtGui
.. _QImage:

QImage
******

.. inheritance-diagram:: QImage
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtGui.QImage.__eq__>` (arg__1)
*    def :meth:`__ne__<PySide.QtGui.QImage.__ne__>` (arg__1)
*    def :meth:`allGray<PySide.QtGui.QImage.allGray>` ()
*    def :meth:`alphaChannel<PySide.QtGui.QImage.alphaChannel>` ()
*    def :meth:`bitPlaneCount<PySide.QtGui.QImage.bitPlaneCount>` ()
*    def :meth:`byteCount<PySide.QtGui.QImage.byteCount>` ()
*    def :meth:`bytesPerLine<PySide.QtGui.QImage.bytesPerLine>` ()
*    def :meth:`cacheKey<PySide.QtGui.QImage.cacheKey>` ()
*    def :meth:`color<PySide.QtGui.QImage.color>` (i)
*    def :meth:`colorTable<PySide.QtGui.QImage.colorTable>` ()
*    def :meth:`constBits<PySide.QtGui.QImage.constBits>` ()
*    def :meth:`constScanLine<PySide.QtGui.QImage.constScanLine>` (arg__1)
*    def :meth:`convertToFormat<PySide.QtGui.QImage.convertToFormat>` (f, colorTable[, flags=Qt.AutoColor])
*    def :meth:`convertToFormat<PySide.QtGui.QImage.convertToFormat>` (f[, flags=Qt.AutoColor])
*    def :meth:`copy<PySide.QtGui.QImage.copy>` ([rect=QRect()])
*    def :meth:`copy<PySide.QtGui.QImage.copy>` (x, y, w, h)
*    def :meth:`createAlphaMask<PySide.QtGui.QImage.createAlphaMask>` ([flags=Qt.AutoColor])
*    def :meth:`createHeuristicMask<PySide.QtGui.QImage.createHeuristicMask>` ([clipTight=true])
*    def :meth:`createMaskFromColor<PySide.QtGui.QImage.createMaskFromColor>` (color[, mode=Qt.MaskInColor])
*    def :meth:`dotsPerMeterX<PySide.QtGui.QImage.dotsPerMeterX>` ()
*    def :meth:`dotsPerMeterY<PySide.QtGui.QImage.dotsPerMeterY>` ()
*    def :meth:`fill<PySide.QtGui.QImage.fill>` (pixel)
*    def :meth:`format<PySide.QtGui.QImage.format>` ()
*    def :meth:`hasAlphaChannel<PySide.QtGui.QImage.hasAlphaChannel>` ()
*    def :meth:`invertPixels<PySide.QtGui.QImage.invertPixels>` ([mode=InvertRgb])
*    def :meth:`isGrayscale<PySide.QtGui.QImage.isGrayscale>` ()
*    def :meth:`isNull<PySide.QtGui.QImage.isNull>` ()
*    def :meth:`load<PySide.QtGui.QImage.load>` (device, format)
*    def :meth:`load<PySide.QtGui.QImage.load>` (fileName[, format=0])
*    def :meth:`loadFromData<PySide.QtGui.QImage.loadFromData>` (data[, aformat=0])
*    def :meth:`mirrored<PySide.QtGui.QImage.mirrored>` ([horizontally=false[, vertically=true]])
*    def :meth:`numBytes<PySide.QtGui.QImage.numBytes>` ()
*    def :meth:`offset<PySide.QtGui.QImage.offset>` ()
*    def :meth:`pixel<PySide.QtGui.QImage.pixel>` (pt)
*    def :meth:`pixel<PySide.QtGui.QImage.pixel>` (x, y)
*    def :meth:`pixelIndex<PySide.QtGui.QImage.pixelIndex>` (pt)
*    def :meth:`pixelIndex<PySide.QtGui.QImage.pixelIndex>` (x, y)
*    def :meth:`rect<PySide.QtGui.QImage.rect>` ()
*    def :meth:`rgbSwapped<PySide.QtGui.QImage.rgbSwapped>` ()
*    def :meth:`save<PySide.QtGui.QImage.save>` (device[, format=0[, quality=-1]])
*    def :meth:`save<PySide.QtGui.QImage.save>` (fileName[, format=0[, quality=-1]])
*    def :meth:`scaled<PySide.QtGui.QImage.scaled>` (s[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])
*    def :meth:`scaled<PySide.QtGui.QImage.scaled>` (w, h[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])
*    def :meth:`scaledToHeight<PySide.QtGui.QImage.scaledToHeight>` (h[, mode=Qt.FastTransformation])
*    def :meth:`scaledToWidth<PySide.QtGui.QImage.scaledToWidth>` (w[, mode=Qt.FastTransformation])
*    def :meth:`setAlphaChannel<PySide.QtGui.QImage.setAlphaChannel>` (alphaChannel)
*    def :meth:`setColor<PySide.QtGui.QImage.setColor>` (i, c)
*    def :meth:`setColorCount<PySide.QtGui.QImage.setColorCount>` (arg__1)
*    def :meth:`setColorTable<PySide.QtGui.QImage.setColorTable>` (colors)
*    def :meth:`setDotsPerMeterX<PySide.QtGui.QImage.setDotsPerMeterX>` (arg__1)
*    def :meth:`setDotsPerMeterY<PySide.QtGui.QImage.setDotsPerMeterY>` (arg__1)
*    def :meth:`setNumColors<PySide.QtGui.QImage.setNumColors>` (arg__1)
*    def :meth:`setOffset<PySide.QtGui.QImage.setOffset>` (arg__1)
*    def :meth:`setPixel<PySide.QtGui.QImage.setPixel>` (pt, index_or_rgb)
*    def :meth:`setPixel<PySide.QtGui.QImage.setPixel>` (x, y, index_or_rgb)
*    def :meth:`setText<PySide.QtGui.QImage.setText>` (key, value)
*    def :meth:`size<PySide.QtGui.QImage.size>` ()
*    def :meth:`text<PySide.QtGui.QImage.text>` ([key=""])
*    def :meth:`textKeys<PySide.QtGui.QImage.textKeys>` ()
*    def :meth:`transformed<PySide.QtGui.QImage.transformed>` (matrix[, mode=Qt.FastTransformation])
*    def :meth:`transformed<PySide.QtGui.QImage.transformed>` (matrix[, mode=Qt.FastTransformation])
*    def :meth:`valid<PySide.QtGui.QImage.valid>` (pt)
*    def :meth:`valid<PySide.QtGui.QImage.valid>` (x, y)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`fromData<PySide.QtGui.QImage.fromData>` (data[, format=0])
*    def :meth:`trueMatrix<PySide.QtGui.QImage.trueMatrix>` (arg__1, w, h)
*    def :meth:`trueMatrix<PySide.QtGui.QImage.trueMatrix>` (arg__1, w, h)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QImage` class provides a hardware-independent image representation that allows direct access to the pixel data, and can be used as a paint device.

    Qt provides four classes for handling image data: :class:`PySide.QtGui.QImage` , :class:`PySide.QtGui.QPixmap` , :class:`PySide.QtGui.QBitmap` and :class:`PySide.QtGui.QPicture` . :class:`PySide.QtGui.QImage` is designed and optimized for I/O, and for direct pixel access and manipulation, while :class:`PySide.QtGui.QPixmap` is designed and optimized for showing images on screen. :class:`PySide.QtGui.QBitmap` is only a convenience class that inherits :class:`PySide.QtGui.QPixmap` , ensuring a depth of 1. Finally, the :class:`PySide.QtGui.QPicture` class is a paint device that records and replays :class:`PySide.QtGui.QPainter` commands.

    Because :class:`PySide.QtGui.QImage` is a :class:`PySide.QtGui.QPaintDevice` subclass, :class:`PySide.QtGui.QPainter` can be used to draw directly onto images. When using :class:`PySide.QtGui.QPainter` on a :class:`PySide.QtGui.QImage` , the painting can be performed in another thread than the current GUI thread.

    The :class:`PySide.QtGui.QImage` class supports several image formats described by the :attr:`QImage.Format` enum. These include monochrome, 8-bit, 32-bit and alpha-blended images which are available in all versions of Qt 4.x.

    :class:`PySide.QtGui.QImage` provides a collection of functions that can be used to obtain a variety of information about the image. There are also several functions that enables transformation of the image.

    :class:`PySide.QtGui.QImage` objects can be passed around by value since the :class:`PySide.QtGui.QImage` class uses :ref:`implicit data sharing<implicit-sharing.html>` . :class:`PySide.QtGui.QImage` objects can also be streamed and compared.

    .. note::  If you would like to load :class:`PySide.QtGui.QImage` objects in a static build of Qt, refer to the :ref:`Plugin HowTo<plugins-howto.html>` .

    .. warning::  Painting on a :class:`PySide.QtGui.QImage` with the format :attr:`QImage.Format_Indexed8<QImage.Format>` is not supported.

    .. _PySide.QtGui.QImage_reading-and-writing-image-files:



Reading and Writing Image Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QImage` provides several ways of loading an image file: The file can be loaded when constructing the :class:`PySide.QtGui.QImage` object, or by using the :meth:`PySide.QtGui.QImage.load` or :meth:`PySide.QtGui.QImage.loadFromData` functions later on. :class:`PySide.QtGui.QImage` also provides the static :meth:`PySide.QtGui.QImage.fromData` function, constructing a :class:`PySide.QtGui.QImage` from the given data. When loading an image, the file name can either refer to an actual file on disk or to one of the application's embedded resources. See :ref:`The Qt Resource System<resources.html>` overview for details on how to embed images and other resource files in the application's executable.

    Simply call the :meth:`PySide.QtGui.QImage.save` function to save a :class:`PySide.QtGui.QImage` object.

    The complete list of supported file formats are available through the :meth:`QImageReader.supportedImageFormats()<PySide.QtGui.QImageReader.supportedImageFormats>` and :meth:`QImageWriter.supportedImageFormats()<PySide.QtGui.QImageWriter.supportedImageFormats>` functions. New file formats can be added as plugins. By default, Qt supports the following formats:

    +------+-------------------------------------+------------+
    |Format|Description                          |Qt's support|
    +------+-------------------------------------+------------+
    |BMP   |Windows Bitmap                       |Read/write  |
    +------+-------------------------------------+------------+
    |GIF   |Graphic Interchange Format (optional)|Read        |
    +------+-------------------------------------+------------+
    |JPG   |Joint Photographic Experts Group     |Read/write  |
    +------+-------------------------------------+------------+
    |JPEG  |Joint Photographic Experts Group     |Read/write  |
    +------+-------------------------------------+------------+
    |PNG   |Portable Network Graphics            |Read/write  |
    +------+-------------------------------------+------------+
    |PBM   |Portable Bitmap                      |Read        |
    +------+-------------------------------------+------------+
    |PGM   |Portable Graymap                     |Read        |
    +------+-------------------------------------+------------+
    |PPM   |Portable Pixmap                      |Read/write  |
    +------+-------------------------------------+------------+
    |TIFF  |Tagged Image File Format             |Read/write  |
    +------+-------------------------------------+------------+
    |XBM   |X11 Bitmap                           |Read/write  |
    +------+-------------------------------------+------------+
    |XPM   |X11 Pixmap                           |Read/write  |
    +------+-------------------------------------+------------+

    .. _PySide.QtGui.QImage_image-information:



Image Information
^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QImage` provides a collection of functions that can be used to obtain a variety of information about the image:


    |                     |Available Functions|

    |Geometry             |The :meth:`PySide.QtGui.QImage.size` , :meth:`PySide.QtGui.QImage.width` , :meth:`PySide.QtGui.QImage.height` , :meth:`PySide.QtGui.QImage.dotsPerMeterX` , and :meth:`PySide.QtGui.QImage.dotsPerMeterY` functions provide information about the image size and aspect ratio.                                                                                                                                                                                                                                                                                                                                                                               |
    |                     ||
    |                     |    The :meth:`PySide.QtGui.QImage.rect` function returns the image's enclosing rectangle. The :meth:`PySide.QtGui.QImage.valid` function tells if a given pair of coordinates is within this rectangle. The :meth:`PySide.QtGui.QImage.offset` function returns the number of pixels by which the image is intended to be offset by when positioned relative to other images, which also can be manipulated using the :meth:`PySide.QtGui.QImage.setOffset` function.                                                                                                                                                                                       |

    |Colors               |The color of a pixel can be retrieved by passing its coordinates to the :meth:`PySide.QtGui.QImage.pixel` function. The :meth:`PySide.QtGui.QImage.pixel` function returns the color as a :class:`~PySide.QtGui.QRgb` value indepedent of the image's format.                                                                                                                                                                                                                                                                                                                                                                                                |
    |                     ||
    |                     |    In case of monochrome and 8-bit images, the :meth:`PySide.QtGui.QImage.colorCount` and :meth:`PySide.QtGui.QImage.colorTable` functions provide information about the color components used to store the image data: The :meth:`PySide.QtGui.QImage.colorTable` function returns the image's entire color table. To obtain a single entry, use the :meth:`PySide.QtGui.QImage.pixelIndex` function to retrieve the pixel index for a given pair of coordinates, then use the :meth:`PySide.QtGui.QImage.color` function to retrieve the color. Note that if you create an 8-bit image manually, you have to set a valid color table on the image as well.|
    |                     ||
    |                     |    The :meth:`PySide.QtGui.QImage.hasAlphaChannel` function tells if the image's format respects the alpha channel, or not. The :meth:`PySide.QtGui.QImage.allGray` and :meth:`PySide.QtGui.QImage.isGrayscale` functions tell whether an image's colors are all shades of gray.                                                                                                                                                                                                                                                                                                                                                                            |
    |                     ||
    |                     |    See also the :class:`Pixel Manipulation<~PySide.QtGui.QImage#Pixel Manipulation>` and :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` sections.                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
    +---------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Text                 |The :meth:`PySide.QtGui.QImage.text` function returns the image text associated with the given text key. An image's text keys can be retrieved using the :meth:`PySide.QtGui.QImage.textKeys` function. Use the :meth:`PySide.QtGui.QImage.setText` function to alter an image's text.                                                                                                                                                                                                                                                                                                                                                                       |

    |Low-level information|The :meth:`PySide.QtGui.QImage.depth` function returns the depth of the image. The supported depths are 1 (monochrome), 8, 16, 24 and 32 bits. The :meth:`PySide.QtGui.QImage.bitPlaneCount` function tells how many of those bits that are used. For more information see the :class:`Image Formats<~PySide.QtGui.QImage#Image Formats>` section.                                                                                                                                                                                                                                                                                                           |
    |                     ||
    |                     |    The :meth:`PySide.QtGui.QImage.format` , :meth:`PySide.QtGui.QImage.bytesPerLine` , and :meth:`PySide.QtGui.QImage.byteCount` functions provide low-level information about the data stored in the image.                                                                                                                                                                                                                                                                                                                                                                                                                                                |
    |                     ||
    |                     |    The :meth:`PySide.QtGui.QImage.cacheKey` function returns a number that uniquely identifies the contents of this :class:`PySide.QtGui.QImage` object.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |


    .. _PySide.QtGui.QImage_pixel-manipulation:



Pixel Manipulation
^^^^^^^^^^^^^^^^^^

    The functions used to manipulate an image's pixels depend on the image format. The reason is that monochrome and 8-bit images are index-based and use a color lookup table, while 32-bit images store ARGB values directly. For more information on image formats, see the :class:`~PySide.QtGui.Image Formats` section.

    In case of a 32-bit image, the :meth:`PySide.QtGui.QImage.setPixel` function can be used to alter the color of the pixel at the given coordinates to any other color specified as an ARGB quadruplet. To make a suitable :class:`~PySide.QtGui.QRgb` value, use the :meth:`~PySide.QtGui.QImage.qRgb` (adding a default alpha component to the given RGB values, i.e. creating an opaque color) or :meth:`~PySide.QtGui.QImage.qRgba` function. For example:

    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qimage-32bit_scaled.png|::                                               |
    |                                                                                                             |                                                 |
    |                                                                                                             |        image = QImage(3, 3, QImage.Format_RGB32)|
    |                                                                                                             |                                                 |
    |                                                                                                             |        value = qRgb(189, 149, 39)  # 0xffbd9527 |
    |                                                                                                             |        image.setPixel(1, 1, value)              |
    |                                                                                                             |                                                 |
    |                                                                                                             |        value = qRgb(122, 163, 39)  # 0xff7aa327 |
    |                                                                                                             |        image.setPixel(0, 1, value)              |
    |                                                                                                             |        image.setPixel(1, 0, value)              |
    |                                                                                                             |                                                 |
    |                                                                                                             |        value = qRgb(237, 187, 51)  # 0xffedba31 |
    |                                                                                                             |        image.setPixel(2, 1, value)              |
    +=============================================================================================================+=================================================+
    |32-bit                                                                                                                                                         |
    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------+

    In case of a 8-bit and monchrome images, the pixel value is only an index from the image's color table. So the :meth:`PySide.QtGui.QImage.setPixel` function can only be used to alter the color of the pixel at the given coordinates to a predefined color from the image's color table, i.e. it can only change the pixel's index value. To alter or add a color to an image's color table, use the :meth:`PySide.QtGui.QImage.setColor` function.

    An entry in the color table is an ARGB quadruplet encoded as an :class:`~PySide.QtGui.QRgb` value. Use the :meth:`~PySide.QtGui.QImage.qRgb` and :meth:`~PySide.QtGui.QImage.qRgba` functions to make a suitable :class:`~PySide.QtGui.QRgb` value for use with the :meth:`PySide.QtGui.QImage.setColor` function. For example:

    +------------------------------------------------------------------------------------------------------------+----------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qimage-8bit_scaled.png|::                                                  |
    |                                                                                                            |                                                    |
    |                                                                                                            |        image = QImage(3, 3, QImage.Format_Indexed8)|
    |                                                                                                            |        value = qRgb(122, 163, 39) # 0xff7aa327     |
    |                                                                                                            |        image.setColor(0, value)                    |
    |                                                                                                            |                                                    |
    |                                                                                                            |        value = qRgb(237, 187, 51) # 0xffedba31     |
    |                                                                                                            |        image.setColor(1, value)                    |
    |                                                                                                            |                                                    |
    |                                                                                                            |        value = qRgb(189, 149, 39) # 0xffbd9527     |
    |                                                                                                            |        image.setColor(2, value)                    |
    |                                                                                                            |                                                    |
    |                                                                                                            |        image.setPixel(0, 1, 0)                     |
    |                                                                                                            |        image.setPixel(1, 0, 0)                     |
    |                                                                                                            |        image.setPixel(1, 1, 2)                     |
    |                                                                                                            |        image.setPixel(2, 1, 1)                     |
    +============================================================================================================+====================================================+
    |8-bit                                                                                                                                                            |
    +------------------------------------------------------------------------------------------------------------+----------------------------------------------------+

    :class:`PySide.QtGui.QImage` also provide the :meth:`PySide.QtGui.QImage.scanLine` function which returns a pointer to the pixel data at the scanline with the given index, and the :meth:`PySide.QtGui.QImage.bits` function which returns a pointer to the first pixel data (this is equivalent to ``scanLine(0)`` ).

    .. _PySide.QtGui.QImage_image-formats:



Image Formats
^^^^^^^^^^^^^

    Each pixel stored in a :class:`PySide.QtGui.QImage` is represented by an integer. The size of the integer varies depending on the format. :class:`PySide.QtGui.QImage` supports several image formats described by the :attr:`QImage.Format` enum.

    Monochrome images are stored using 1-bit indexes into a color table with at most two colors. There are two different types of monochrome images: big endian (MSB first) or little endian (LSB first) bit order.

    8-bit images are stored using 8-bit indexes into a color table, i.e. they have a single byte per pixel. The color table is a :class:`QVector` < :class:`~PySide.QtGui.QRgb` >, and the :class:`~PySide.QtGui.QRgb` typedef is equivalent to an unsigned int containing an ARGB quadruplet on the format 0xAARRGGBB.

    32-bit images have no color table; instead, each pixel contains an :class:`~PySide.QtGui.QRgb` value. There are three different types of 32-bit images storing RGB (i.e. 0xffRRGGBB), ARGB and premultiplied ARGB values respectively. In the premultiplied format the red, green, and blue channels are multiplied by the alpha component divided by 255.

    An image's format can be retrieved using the :meth:`PySide.QtGui.QImage.format` function. Use the :meth:`PySide.QtGui.QImage.convertToFormat` functions to convert an image into another format. The :meth:`PySide.QtGui.QImage.allGray` and :meth:`PySide.QtGui.QImage.isGrayscale` functions tell whether a color image can safely be converted to a grayscale image.

    .. _PySide.QtGui.QImage_image-transformations:



Image Transformations
^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QImage` supports a number of functions for creating a new image that is a transformed version of the original: The :meth:`PySide.QtGui.QImage.createAlphaMask` function builds and returns a 1-bpp mask from the alpha buffer in this image, and the :meth:`PySide.QtGui.QImage.createHeuristicMask` function creates and returns a 1-bpp heuristic mask for this image. The latter function works by selecting a color from one of the corners, then chipping away pixels of that color starting at all the edges.

    The :meth:`PySide.QtGui.QImage.mirrored` function returns a mirror of the image in the desired direction, the :meth:`PySide.QtGui.QImage.scaled` returns a copy of the image scaled to a rectangle of the desired measures, and the :meth:`PySide.QtGui.QImage.rgbSwapped` function constructs a BGR image from a RGB image.

    The :meth:`PySide.QtGui.QImage.scaledToWidth` and :meth:`PySide.QtGui.QImage.scaledToHeight` functions return scaled copies of the image.

    The :meth:`PySide.QtGui.QImage.transformed` function returns a copy of the image that is transformed with the given transformation matrix and transformation mode: Internally, the transformation matrix is adjusted to compensate for unwanted translation, i.e. :meth:`PySide.QtGui.QImage.transformed` returns the smallest image containing all transformed points of the original image. The static :meth:`PySide.QtGui.QImage.trueMatrix` function returns the actual matrix used for transforming the image.

    There are also functions for changing attributes of an image in-place:

    +--------------------------------------------+---------------------------------------------------------------------------------------------------+
    |Function                                    |Description                                                                                        |
    +--------------------------------------------+---------------------------------------------------------------------------------------------------+
    |:meth:`PySide.QtGui.QImage.setDotsPerMeterX`|Defines the aspect ratio by setting the number of pixels that fit horizontally in a physical meter.|
    +--------------------------------------------+---------------------------------------------------------------------------------------------------+
    |:meth:`PySide.QtGui.QImage.setDotsPerMeterY`|Defines the aspect ratio by setting the number of pixels that fit vertically in a physical meter.  |
    +--------------------------------------------+---------------------------------------------------------------------------------------------------+
    |:meth:`PySide.QtGui.QImage.fill`            |Fills the entire image with the given pixel value.                                                 |
    +--------------------------------------------+---------------------------------------------------------------------------------------------------+
    |:meth:`PySide.QtGui.QImage.invertPixels`    |Inverts all pixel values in the image using the given :attr:`QImage.InvertMode` value.             |
    +--------------------------------------------+---------------------------------------------------------------------------------------------------+
    |:meth:`PySide.QtGui.QImage.setColorTable`   |Sets the color table used to translate color indexes. Only monochrome and 8-bit formats.           |
    +--------------------------------------------+---------------------------------------------------------------------------------------------------+
    |:meth:`PySide.QtGui.QImage.setColorCount`   |Resizes the color table. Only monochrome and 8-bit formats.                                        |
    +--------------------------------------------+---------------------------------------------------------------------------------------------------+

    .. _PySide.QtGui.QImage_legal-information:



Legal Information
^^^^^^^^^^^^^^^^^

    For smooth scaling, the :meth:`PySide.QtGui.QImage.transformed` functions use code based on smooth scaling algorithm by Daniel M. Duley.

    ::

                
                            
        Copyright (C) 2004, 2005 Daniel M. Duley

                
                            
        Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

                
                            
        1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

                
                            
        THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

                
                        


    .. seealso::  :class:`PySide.QtGui.QImageReader`  :class:`PySide.QtGui.QImageWriter`  :class:`PySide.QtGui.QPixmap`  :class:`PySide.QtSvg.QSvgRenderer`  :ref:`Image Composition Example<painting/imagecomposition>`  :ref:`Image Viewer Example<widgets/imageviewer>`  :ref:`Scribble Example<widgets/scribble>`  :ref:`Pixelator Example<itemviews/pixelator>` 

.. class:: QImage()
           QImage(arg__1, arg__2, arg__3, arg__4)
           QImage(arg__1, arg__2, arg__3, arg__4, arg__5)
           QImage(arg__1)
           QImage(size, format)
           QImage(fileName[, format=0])
           QImage(xpm)
           QImage(width, height, format)
           QImage(data, width, height, format)
           QImage(data, width, height, bytesPerLine, format)

    :param arg__4: :attr:`PySide.QtGui.QImage.Format`
    :param width: :class:`PySide.QtCore.int`
    :param arg__5: :attr:`PySide.QtGui.QImage.Format`
    :param size: :class:`PySide.QtCore.QSize`
    :param format: :attr:`PySide.QtGui.QImage.Format`
    :param height: :class:`PySide.QtCore.int`
    :param data: :class:`PySide.QtCore.uchar`
    :param bytesPerLine: :class:`PySide.QtCore.int`
    :param fileName: unicode
    :param arg__1: unicode
    :param arg__2: :class:`PySide.QtCore.int`
    :param xpm: :class:`PySide.QtCore.char`
    :param arg__3: :class:`PySide.QtCore.int`

    Constructs a null image.

    .. seealso::  :meth:`PySide.QtGui.QImage.isNull` 





    Constructs a shallow copy of the given ``image`` .

    For more information about shallow copies, see the :ref:`Implicit Data Sharing<implicit-sharing.html>` documentation.

    .. seealso::  :meth:`PySide.QtGui.QImage.copy` 

    Constructs an image with the given ``size`` and ``format`` .

    .. warning::  This will create a :class:`PySide.QtGui.QImage` with uninitialized data. Call :meth:`PySide.QtGui.QImage.fill` to fill the image with an appropriate pixel value before drawing onto it with :class:`PySide.QtGui.QPainter` .


    Constructs an image and tries to load the image from the file with the given ``fileName`` .

    The loader attempts to read the image using the specified ``format`` . If the ``format`` is not specified (which is the default), the loader probes the file for a header to guess the file format.

    If the loading of the image failed, this object is a null image.

    The file name can either refer to an actual file on disk or to one of the application's embedded resources. See the :ref:`Resource System<resources.html>` overview for details on how to embed images and other resource files in the application's executable.

    .. seealso::  :meth:`PySide.QtGui.QImage.isNull`  :class:`Reading and Writing Image Files<~PySide.QtGui.QImage#Reading and Writing Image Files>` 






    Constructs an image with the given ``width`` , ``height`` and ``format`` .

    .. warning::  This will create a :class:`PySide.QtGui.QImage` with uninitialized data. Call :meth:`PySide.QtGui.QImage.fill` to fill the image with an appropriate pixel value before drawing onto it with :class:`PySide.QtGui.QPainter` .


    Constructs an image with the given ``width`` , ``height`` and ``format`` , that uses an existing memory buffer, ``data`` . The ``width`` and ``height`` must be specified in pixels, ``data`` must be 32-bit aligned, and each scanline of data in the image must also be 32-bit aligned.

    The buffer must remain valid throughout the life of the :class:`PySide.QtGui.QImage` . The image does not delete the buffer at destruction.

    If ``format`` is an indexed color format, the image color table is initially empty and must be sufficiently expanded with :meth:`PySide.QtGui.QImage.setColorCount` or :meth:`PySide.QtGui.QImage.setColorTable` before the image is used.


    Constructs an image with the given ``width`` , ``height`` and ``format`` , that uses an existing memory buffer, ``data`` . The ``width`` and ``height`` must be specified in pixels. ``bytesPerLine`` specifies the number of bytes per line (stride).

    The buffer must remain valid throughout the life of the :class:`PySide.QtGui.QImage` . The image does not delete the buffer at destruction.

    If ``format`` is an indexed color format, the image color table is initially empty and must be sufficiently expanded with :meth:`PySide.QtGui.QImage.setColorCount` or :meth:`PySide.QtGui.QImage.setColorTable` before the image is used.


.. attribute:: PySide.QtGui.QImage.InvertMode

    This enum type is used to describe how pixel values should be inverted in the :meth:`PySide.QtGui.QImage.invertPixels` function.

    +-----------------+-----------------------------------------------------------------+
    |Constant         |Description                                                      |
    +=================+=================================================================+
    |QImage.InvertRgb |Invert only the RGB values and leave the alpha channel unchanged.|
    +-----------------+-----------------------------------------------------------------+
    |QImage.InvertRgba|Invert all channels, including the alpha channel.                |
    +-----------------+-----------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QImage.invertPixels` 

.. attribute:: PySide.QtGui.QImage.Format

    The following image formats are available in Qt. Values greater than :attr:`QImage.Format_RGB16<QImage.Format>` were added in Qt 4.4. See the notes after the table.

    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                            |Description                                                                                                                                                                                                                                                                                                                                                                                       |
    +====================================+==================================================================================================================================================================================================================================================================================================================================================================================================+
    |QImage.Format_Invalid               |The image is invalid.                                                                                                                                                                                                                                                                                                                                                                             |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_Mono                  |The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.                                                                                                                                                                                                                                                                                            |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_MonoLSB               |The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.                                                                                                                                                                                                                                                                                            |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_Indexed8              |The image is stored using 8-bit indexes into a colormap.                                                                                                                                                                                                                                                                                                                                          |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_RGB32                 |The image is stored using a 32-bit RGB format (0xffRRGGBB).                                                                                                                                                                                                                                                                                                                                       |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_ARGB32                |The image is stored using a 32-bit ARGB format (0xAARRGGBB).                                                                                                                                                                                                                                                                                                                                      |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_ARGB32_Premultiplied  |The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.|
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_RGB16                 |The image is stored using a 16-bit RGB format (5-6-5).                                                                                                                                                                                                                                                                                                                                            |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_ARGB8565_Premultiplied|The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).                                                                                                                                                                                                                                                                                                                           |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_RGB666                |The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.                                                                                                                                                                                                                                                                                           |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_ARGB6666_Premultiplied|The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).                                                                                                                                                                                                                                                                                                                           |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_RGB555                |The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.                                                                                                                                                                                                                                                                                            |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_ARGB8555_Premultiplied|The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).                                                                                                                                                                                                                                                                                                                           |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_RGB888                |The image is stored using a 24-bit RGB format (8-8-8).                                                                                                                                                                                                                                                                                                                                            |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_RGB444                |The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.                                                                                                                                                                                                                                                                                                           |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QImage.Format_ARGB4444_Premultiplied|The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).                                                                                                                                                                                                                                                                                                                           |
    +------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. note::  Drawing into a :class:`PySide.QtGui.QImage` with :attr:`QImage.Format_Indexed8<QImage.Format>` is not supported.

    .. note::  Do not render into ARGB32 images using :class:`PySide.QtGui.QPainter` . Using :attr:`QImage.Format_ARGB32_Premultiplied<QImage.Format>` is significantly faster.

    .. seealso::  :meth:`PySide.QtGui.QImage.format`  :meth:`PySide.QtGui.QImage.convertToFormat` 

.. method:: PySide.QtGui.QImage.allGray()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if all the colors in the image are shades of gray (i.e. their red, green and blue components are equal); otherwise false.

    Note that this function is slow for images without color table.

    .. seealso::  :meth:`PySide.QtGui.QImage.isGrayscale` 


.. method:: PySide.QtGui.QImage.alphaChannel()


    :rtype: :class:`PySide.QtGui.QImage`




    Returns the alpha channel of the image as a new grayscale :class:`PySide.QtGui.QImage` in which each pixel's red, green, and blue values are given the alpha value of the original image. The color depth of the returned image is 8-bit.

    You can see an example of use of this function in :class:`PySide.QtGui.QPixmap` 's :meth:`PySide.QtGui.QPixmap.alphaChannel` , which works in the same way as this function on QPixmaps.

    Most usecases for this function can be replaced with :class:`PySide.QtGui.QPainter` and using composition modes.

    .. warning::  This is an expensive function.

    .. seealso::  :meth:`PySide.QtGui.QImage.setAlphaChannel`  :meth:`PySide.QtGui.QImage.hasAlphaChannel`  :class:`Pixmap<~PySide.QtGui.QPixmap#Pixmap Information>`  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.bitPlaneCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of bit planes in the image.

    The number of bit planes is the number of bits of color and transparency information for each pixel. This is different from (i.e. smaller than) the depth when the image format contains unused bits.

    .. seealso::  :meth:`PySide.QtGui.QImage.depth`  :meth:`PySide.QtGui.QImage.format`  :class:`Image Formats<~PySide.QtGui.QImage#Image Formats>` 


.. method:: PySide.QtGui.QImage.byteCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of bytes occupied by the image data.

    .. seealso::  :meth:`PySide.QtGui.QImage.bytesPerLine`  :meth:`PySide.QtGui.QImage.bits`  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.bytesPerLine()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of bytes per image scanline.

    This is equivalent to :meth:`PySide.QtGui.QImage.byteCount` / :meth:`PySide.QtGui.QImage.height` .

    .. seealso::  :meth:`PySide.QtGui.QImage.scanLine` 


.. method:: PySide.QtGui.QImage.cacheKey()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns a number that identifies the contents of this :class:`PySide.QtGui.QImage` object. Distinct :class:`PySide.QtGui.QImage` objects can only have the same key if they refer to the same contents.

    The key will change when the image is altered.



.. method:: PySide.QtGui.QImage.color(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: long




    Returns the color in the color table at index ``i`` . The first color is at index 0.

    The colors in an image's color table are specified as ARGB quadruplets ( :class:`~PySide.QtGui.QRgb` ). Use the :meth:`~PySide.QtGui.QImage.qAlpha` , :meth:`~PySide.QtGui.QImage.qRed` , :meth:`~PySide.QtGui.QImage.qGreen` , and :meth:`~PySide.QtGui.QImage.qBlue` functions to get the color value components.

    .. seealso::  :meth:`PySide.QtGui.QImage.setColor`  :meth:`PySide.QtGui.QImage.pixelIndex`  :class:`Pixel Manipulation<~PySide.QtGui.QImage#Pixel Manipulation>` 


.. method:: PySide.QtGui.QImage.colorTable()


    :rtype: 




    Returns a list of the colors contained in the image's color table, or an empty list if the image does not have a color table

    .. seealso::  :meth:`PySide.QtGui.QImage.setColorTable`  :meth:`PySide.QtGui.QImage.colorCount`  :meth:`PySide.QtGui.QImage.color` 


.. method:: PySide.QtGui.QImage.constBits()


    :rtype: :class:`PySide.QtCore.uchar`




    Returns a pointer to the first pixel data.

    Note that :class:`PySide.QtGui.QImage` uses :ref:`implicit data sharing<implicit-sharing.html>` , but this function does *not* perform a deep copy of the shared pixel data, because the returned data is const.

    .. seealso::  :meth:`PySide.QtGui.QImage.bits`  :meth:`PySide.QtGui.QImage.constScanLine` 


.. method:: PySide.QtGui.QImage.constScanLine(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`
    :rtype: PyObject




    Returns a pointer to the pixel data at the scanline with index ``i`` . The first scanline is at index 0.

    The scanline data is aligned on a 32-bit boundary.

    Note that :class:`PySide.QtGui.QImage` uses :ref:`implicit data sharing<implicit-sharing.html>` , but this function does *not* perform a deep copy of the shared pixel data, because the returned data is const.

    .. seealso::  :meth:`PySide.QtGui.QImage.scanLine`  :meth:`PySide.QtGui.QImage.constBits` 


.. method:: PySide.QtGui.QImage.convertToFormat(f, colorTable[, flags=Qt.AutoColor])


    :param f: :attr:`PySide.QtGui.QImage.Format`
    :param colorTable: 
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.convertToFormat(f[, flags=Qt.AutoColor])


    :param f: :attr:`PySide.QtGui.QImage.Format`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.copy([rect=QRect()])


    :param rect: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtGui.QImage`




    Returns a sub-area of the image as a new image.

    The returned image is copied from the position (``rectangle`` . :meth:`~PySide.QtGui.QImage.x` , ``rectangle`` . :meth:`~PySide.QtGui.QImage.y` ) in this image, and will always have the size of the given ``rectangle`` .

    In areas beyond this image, pixels are set to 0. For 32-bit RGB images, this means black; for 32-bit ARGB images, this means transparent black; for 8-bit images, this means the color with index 0 in the color table which can be anything; for 1-bit images, this means :attr:`Qt.color0<Qt.GlobalColor>` .

    If the given ``rectangle`` is a null rectangle the entire image is copied.

    .. seealso::  :meth:`PySide.QtGui.QImage.QImage` 


.. method:: PySide.QtGui.QImage.copy(x, y, w, h)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QImage`




    This is an overloaded function.

    The returned image is copied from the position (``x`` , ``y`` ) in this image, and will always have the given ``width`` and ``height`` . In areas beyond this image, pixels are set to 0.



.. method:: PySide.QtGui.QImage.createAlphaMask([flags=Qt.AutoColor])


    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.createHeuristicMask([clipTight=true])


    :param clipTight: :class:`PySide.QtCore.bool`
    :rtype: :class:`PySide.QtGui.QImage`




    Creates and returns a 1-bpp heuristic mask for this image.

    The function works by selecting a color from one of the corners, then chipping away pixels of that color starting at all the edges. The four corners vote for which color is to be masked away. In case of a draw (this generally means that this function is not applicable to the image), the result is arbitrary.

    The returned image has little-endian bit order (i.e. the image's format is :attr:`QImage.Format_MonoLSB<QImage.Format>` ), which you can convert to big-endian ( :attr:`QImage.Format_Mono<QImage.Format>` ) using the :meth:`PySide.QtGui.QImage.convertToFormat` function.

    If ``clipTight`` is true (the default) the mask is just large enough to cover the pixels; otherwise, the mask is larger than the data pixels.

    Note that this function disregards the alpha buffer.

    .. seealso::  :meth:`PySide.QtGui.QImage.createAlphaMask`  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.createMaskFromColor(color[, mode=Qt.MaskInColor])


    :param color: long
    :param mode: :attr:`PySide.QtCore.Qt.MaskMode`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.dotsPerMeterX()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of pixels that fit horizontally in a physical meter. Together with :meth:`PySide.QtGui.QImage.dotsPerMeterY` , this number defines the intended scale and aspect ratio of the image.

    .. seealso::  :meth:`PySide.QtGui.QImage.setDotsPerMeterX`  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.dotsPerMeterY()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of pixels that fit vertically in a physical meter. Together with :meth:`PySide.QtGui.QImage.dotsPerMeterX` , this number defines the intended scale and aspect ratio of the image.

    .. seealso::  :meth:`PySide.QtGui.QImage.setDotsPerMeterY`  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.fill(pixel)


    :param pixel: :class:`PySide.QtCore.uint`




    Fills the entire image with the given ``pixelValue`` .

    If the depth of this image is 1, only the lowest bit is used. If you say fill(0), fill(2), etc., the image is filled with 0s. If you say fill(1), fill(3), etc., the image is filled with 1s. If the depth is 8, the lowest 8 bits are used and if the depth is 16 the lowest 16 bits are used.

    Note: :meth:`QImage.pixel()<PySide.QtGui.QImage.pixel>` returns the color of the pixel at the given coordinates while :meth:`QColor.pixel()<PySide.QtGui.QColor.pixel>` returns the pixel value of the underlying window system (essentially an index value), so normally you will want to use :meth:`QImage.pixel()<PySide.QtGui.QImage.pixel>` to use a color from an existing image or :meth:`QColor.rgb()<PySide.QtGui.QColor.rgb>` to use a specific color.

    .. seealso::  :meth:`PySide.QtGui.QImage.depth`  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.format()


    :rtype: :attr:`PySide.QtGui.QImage.Format`




    Returns the format of the image.

    .. seealso::  :class:`Image Formats<~PySide.QtGui.QImage#Image Formats>` 


.. staticmethod:: PySide.QtGui.QImage.fromData(data[, format=0])


    :param data: :class:`PySide.QtCore.QByteArray`
    :param format: str
    :rtype: :class:`PySide.QtGui.QImage`




    This is an overloaded function.

    Loads an image from the given :class:`PySide.QtCore.QByteArray` ``data`` .



.. method:: PySide.QtGui.QImage.hasAlphaChannel()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the image has a format that respects the alpha channel, otherwise returns false.

    .. seealso::  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.invertPixels([mode=InvertRgb])


    :param mode: :attr:`PySide.QtGui.QImage.InvertMode`




    Inverts all pixel values in the image.

    The given invert ``mode`` only have a meaning when the image's depth is 32. The default ``mode`` is :attr:`InvertRgb<QImage.InvertMode>` , which leaves the alpha channel unchanged. If the ``mode`` is :attr:`InvertRgba<QImage.InvertMode>` , the alpha bits are also inverted.

    Inverting an 8-bit image means to replace all pixels using color index *i* with a pixel using color index 255 minus *i* . The same is the case for a 1-bit image. Note that the color table is *not* changed.

    .. seealso::  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.isGrayscale()


    :rtype: :class:`PySide.QtCore.bool`




    For 32-bit images, this function is equivalent to :meth:`PySide.QtGui.QImage.allGray` .

    For 8-bpp images, this function returns true if color(i) is :class:`~PySide.QtGui.QRgb` (i, i, i) for all indexes of the color table; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QImage.allGray`  :class:`Image Formats<~PySide.QtGui.QImage#Image Formats>` 


.. method:: PySide.QtGui.QImage.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if it is a null image, otherwise returns false.

    A null image has all parameters set to zero and no allocated data.



.. method:: PySide.QtGui.QImage.load(device, format)


    :param device: :class:`PySide.QtCore.QIODevice`
    :param format: str
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    This function reads a :class:`PySide.QtGui.QImage` from the given ``device`` . This can, for example, be used to load an image directly into a :class:`PySide.QtCore.QByteArray` .



.. method:: PySide.QtGui.QImage.load(fileName[, format=0])


    :param fileName: unicode
    :param format: str
    :rtype: :class:`PySide.QtCore.bool`




    Loads an image from the file with the given ``fileName`` . Returns true if the image was successfully loaded; otherwise returns false.

    The loader attempts to read the image using the specified ``format`` , e.g., PNG or JPG. If ``format`` is not specified (which is the default), the loader probes the file for a header to guess the file format.

    The file name can either refer to an actual file on disk or to one of the application's embedded resources. See the :ref:`Resource System<resources.html>` overview for details on how to embed images and other resource files in the application's executable.

    .. seealso::  :class:`Reading and Writing Image Files<~PySide.QtGui.QImage#Reading and Writing Image Files>` 


.. method:: PySide.QtGui.QImage.loadFromData(data[, aformat=0])


    :param data: :class:`PySide.QtCore.QByteArray`
    :param aformat: str
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Loads an image from the given :class:`PySide.QtCore.QByteArray` ``data`` .



.. method:: PySide.QtGui.QImage.mirrored([horizontally=false[, vertically=true]])


    :param horizontally: :class:`PySide.QtCore.bool`
    :param vertically: :class:`PySide.QtCore.bool`
    :rtype: :class:`PySide.QtGui.QImage`




    Returns a mirror of the image, mirrored in the horizontal and/or the vertical direction depending on whether ``horizontal`` and ``vertical`` are set to true or false.

    Note that the original image is not changed.

    .. seealso::  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.numBytes()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of bytes occupied by the image data.

    .. seealso::  :meth:`PySide.QtGui.QImage.byteCount` 


.. method:: PySide.QtGui.QImage.offset()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the number of pixels by which the image is intended to be offset by when positioning relative to other images.

    .. seealso::  :meth:`PySide.QtGui.QImage.setOffset`  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.__ne__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QImage`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this image and the given ``image`` have different contents; otherwise returns false.

    The comparison can be slow, unless there is some obvious difference, such as different widths, in which case the function will return quickly.

    .. seealso::  :meth:`PySide.QtGui.QImage.operator=` 


.. method:: PySide.QtGui.QImage.__eq__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QImage`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this image and the given ``image`` have the same contents; otherwise returns false.

    The comparison can be slow, unless there is some obvious difference (e.g. different size or format), in which case the function will return quickly.

    .. seealso::  :meth:`PySide.QtGui.QImage.operator=` 


.. method:: PySide.QtGui.QImage.pixel(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: long




    This is an overloaded function.

    Returns the color of the pixel at coordinates (``x`` , ``y`` ).



.. method:: PySide.QtGui.QImage.pixel(pt)


    :param pt: :class:`PySide.QtCore.QPoint`
    :rtype: long




    Returns the color of the pixel at the given ``position`` .

    If the ``position`` is not valid, the results are undefined.

    .. warning::  This function is expensive when used for massive pixel manipulations.

    .. seealso::  :meth:`PySide.QtGui.QImage.setPixel`  :meth:`PySide.QtGui.QImage.valid`  :class:`Pixel Manipulation<~PySide.QtGui.QImage#Pixel Manipulation>` 


.. method:: PySide.QtGui.QImage.pixelIndex(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Returns the pixel index at (``x`` , ``y`` ).



.. method:: PySide.QtGui.QImage.pixelIndex(pt)


    :param pt: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.int`




    Returns the pixel index at the given ``position`` .

    If ``position`` is not valid, or if the image is not a paletted image ( :meth:`PySide.QtGui.QImage.depth` > 8), the results are undefined.

    .. seealso::  :meth:`PySide.QtGui.QImage.valid`  :meth:`PySide.QtGui.QImage.depth`  :class:`Pixel Manipulation<~PySide.QtGui.QImage#Pixel Manipulation>` 


.. method:: PySide.QtGui.QImage.rect()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns the enclosing rectangle (0, 0, :meth:`PySide.QtGui.QImage.width` , :meth:`PySide.QtGui.QImage.height` ) of the image.

    .. seealso::  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.rgbSwapped()


    :rtype: :class:`PySide.QtGui.QImage`




    Returns a :class:`PySide.QtGui.QImage` in which the values of the red and blue components of all pixels have been swapped, effectively converting an RGB image to an BGR image.

    The original :class:`PySide.QtGui.QImage` is not changed.

    .. seealso::  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.save(fileName[, format=0[, quality=-1]])


    :param fileName: unicode
    :param format: str
    :param quality: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Saves the image to the file with the given ``fileName`` , using the given image file ``format`` and ``quality`` factor. If ``format`` is 0, :class:`PySide.QtGui.QImage` will attempt to guess the format by looking at ``fileName`` 's suffix.

    The ``quality`` factor must be in the range 0 to 100 or -1. Specify 0 to obtain small compressed files, 100 for large uncompressed files, and -1 (the default) to use the default settings.

    Returns true if the image was successfully saved; otherwise returns false.

    .. seealso::  :class:`Reading and Writing Image Files<~PySide.QtGui.QImage#Reading and Writing Image Files>` 


.. method:: PySide.QtGui.QImage.save(device[, format=0[, quality=-1]])


    :param device: :class:`PySide.QtCore.QIODevice`
    :param format: str
    :param quality: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    This function writes a :class:`PySide.QtGui.QImage` to the given ``device`` .

    This can, for example, be used to save an image directly into a :class:`PySide.QtCore.QByteArray` :

    ::

                image = QImage()
                ba = QByteArray()
                buffer(ba)
                buffer.open(QIODevice.WriteOnly)
                image.save(buffer, "PNG") # writes image into ba in PNG format




.. method:: PySide.QtGui.QImage.scaled(s[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])


    :param s: :class:`PySide.QtCore.QSize`
    :param aspectMode: :attr:`PySide.QtCore.Qt.AspectRatioMode`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.scaled(w, h[, aspectMode=Qt.IgnoreAspectRatio[, mode=Qt.FastTransformation]])


    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param aspectMode: :attr:`PySide.QtCore.Qt.AspectRatioMode`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.scaledToHeight(h[, mode=Qt.FastTransformation])


    :param h: :class:`PySide.QtCore.int`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.scaledToWidth(w[, mode=Qt.FastTransformation])


    :param w: :class:`PySide.QtCore.int`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.setAlphaChannel(alphaChannel)


    :param alphaChannel: :class:`PySide.QtGui.QImage`




    Sets the alpha channel of this image to the given ``alphaChannel`` .

    If ``alphaChannel`` is an 8 bit grayscale image, the intensity values are written into this buffer directly. Otherwise, ``alphaChannel`` is converted to 32 bit and the intensity of the RGB pixel values is used.

    Note that the image will be converted to the :attr:`Format_ARGB32_Premultiplied<QImage.Format>` format if the function succeeds.

    Use one of the composition modes in :attr:`QPainter.CompositionMode` instead.

    .. warning::  This function is expensive.

    .. seealso::  :meth:`PySide.QtGui.QImage.alphaChannel`  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>`  :class:`Image Formats<~PySide.QtGui.QImage#Image Formats>` 


.. method:: PySide.QtGui.QImage.setColor(i, c)


    :param i: :class:`PySide.QtCore.int`
    :param c: long







.. method:: PySide.QtGui.QImage.setColorCount(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Resizes the color table to contain ``colorCount`` entries.

    If the color table is expanded, all the extra colors will be set to transparent (i.e qRgba(0, 0, 0, 0)).

    When the image is used, the color table must be large enough to have entries for all the pixel/index values present in the image, otherwise the results are undefined.

    .. seealso::  :meth:`PySide.QtGui.QImage.colorCount`  :meth:`PySide.QtGui.QImage.colorTable`  :meth:`PySide.QtGui.QImage.setColor`  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.setColorTable(colors)


    :param colors: 







.. method:: PySide.QtGui.QImage.setDotsPerMeterX(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the number of pixels that fit horizontally in a physical meter, to ``x`` .

    Together with :meth:`PySide.QtGui.QImage.dotsPerMeterY` , this number defines the intended scale and aspect ratio of the image, and determines the scale at which :class:`PySide.QtGui.QPainter` will draw graphics on the image. It does not change the scale or aspect ratio of the image when it is rendered on other paint devices.

    .. seealso::  :meth:`PySide.QtGui.QImage.dotsPerMeterX`  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.setDotsPerMeterY(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the number of pixels that fit vertically in a physical meter, to ``y`` .

    Together with :meth:`PySide.QtGui.QImage.dotsPerMeterX` , this number defines the intended scale and aspect ratio of the image, and determines the scale at which :class:`PySide.QtGui.QPainter` will draw graphics on the image. It does not change the scale or aspect ratio of the image when it is rendered on other paint devices.

    .. seealso::  :meth:`PySide.QtGui.QImage.dotsPerMeterY`  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.setNumColors(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Resizes the color table to contain ``numColors`` entries.

    .. seealso::  :meth:`PySide.QtGui.QImage.numColors`  :meth:`PySide.QtGui.QImage.setColorCount` 


.. method:: PySide.QtGui.QImage.setOffset(arg__1)


    :param arg__1: :class:`PySide.QtCore.QPoint`




    Sets the number of pixels by which the image is intended to be offset by when positioning relative to other images, to ``offset`` .

    .. seealso::  :meth:`PySide.QtGui.QImage.offset`  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.setPixel(x, y, index_or_rgb)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param index_or_rgb: :class:`PySide.QtCore.uint`




    This is an overloaded function.

    Sets the pixel index or color at (``x`` , ``y`` ) to ``index_or_rgb`` .



.. method:: PySide.QtGui.QImage.setPixel(pt, index_or_rgb)


    :param pt: :class:`PySide.QtCore.QPoint`
    :param index_or_rgb: :class:`PySide.QtCore.uint`




    Sets the pixel index or color at the given ``position`` to ``index_or_rgb`` .

    If the image's format is either monochrome or 8-bit, the given ``index_or_rgb`` value must be an index in the image's color table, otherwise the parameter must be a :class:`~PySide.QtGui.QRgb` value.

    If ``position`` is not a valid coordinate pair in the image, or if ``index_or_rgb`` >= :meth:`PySide.QtGui.QImage.colorCount` in the case of monochrome and 8-bit images, the result is undefined.

    .. warning::  This function is expensive due to the call of the internal ``detach()`` function called within; if performance is a concern, we recommend the use of :meth:`PySide.QtGui.QImage.scanLine` to access pixel data directly.

    .. seealso::  :meth:`PySide.QtGui.QImage.pixel`  :class:`Pixel Manipulation<~PySide.QtGui.QImage#Pixel Manipulation>` 


.. method:: PySide.QtGui.QImage.setText(key, value)


    :param key: unicode
    :param value: unicode




    Sets the image text to the given ``text`` and associate it with the given ``key`` .

    If you just want to store a single text block (i.e., a "comment" or just a description), you can either pass an empty key, or use a generic key like "Description".

    The image text is embedded into the image data when you call :meth:`PySide.QtGui.QImage.save` or :meth:`QImageWriter.write()<PySide.QtGui.QImageWriter.write>` .

    Not all image formats support embedded text. You can find out if a specific image or format supports embedding text by using :meth:`QImageWriter.supportsOption()<PySide.QtGui.QImageWriter.supportsOption>` . We give an example:

    ::

        	writer = QImageWriter()
        	writer.setFormat("png")
        	if writer.supportsOption(QImageIOHandler.Description):
        	    print "Png supports embedded text"


    You can use :meth:`QImageWriter.supportedImageFormats()<PySide.QtGui.QImageWriter.supportedImageFormats>` to find out which image formats are available to you.

    .. seealso::  :meth:`PySide.QtGui.QImage.text`  :meth:`PySide.QtGui.QImage.textKeys` 


.. method:: PySide.QtGui.QImage.size()


    :rtype: :class:`PySide.QtCore.QSize`




    Returns the size of the image, i.e. its :meth:`PySide.QtGui.QImage.width` and :meth:`PySide.QtGui.QImage.height` .

    .. seealso::  :class:`Image Information<~PySide.QtGui.QImage#Image Information>` 


.. method:: PySide.QtGui.QImage.text([key=""])


    :param key: unicode
    :rtype: unicode




    Returns the image text associated with the given ``key`` . If the specified ``key`` is an empty string, the whole image text is returned, with each key-text pair separated by a newline.

    .. seealso::  :meth:`PySide.QtGui.QImage.setText`  :meth:`PySide.QtGui.QImage.textKeys` 


.. method:: PySide.QtGui.QImage.textKeys()


    :rtype: list of strings




    Returns the text keys for this image.

    You can use these keys with :meth:`PySide.QtGui.QImage.text` to list the image text for a certain key.

    .. seealso::  :meth:`PySide.QtGui.QImage.text` 


.. method:: PySide.QtGui.QImage.transformed(matrix[, mode=Qt.FastTransformation])


    :param matrix: :class:`PySide.QtGui.QMatrix`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QImage`







.. method:: PySide.QtGui.QImage.transformed(matrix[, mode=Qt.FastTransformation])


    :param matrix: :class:`PySide.QtGui.QTransform`
    :param mode: :attr:`PySide.QtCore.Qt.TransformationMode`
    :rtype: :class:`PySide.QtGui.QImage`







.. staticmethod:: PySide.QtGui.QImage.trueMatrix(arg__1, w, h)


    :param arg__1: :class:`PySide.QtGui.QTransform`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the actual matrix used for transforming an image with the given ``width`` , ``height`` and ``matrix`` .

    When transforming an image using the :meth:`PySide.QtGui.QImage.transformed` function, the transformation matrix is internally adjusted to compensate for unwanted translation, i.e. :meth:`PySide.QtGui.QImage.transformed` returns the smallest image containing all transformed points of the original image. This function returns the modified matrix, which maps points correctly from the original image into the new image.

    Unlike the other overload, this function creates transformation matrices that can be used to perform perspective transformations on images.

    .. seealso::  :meth:`PySide.QtGui.QImage.transformed`  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. staticmethod:: PySide.QtGui.QImage.trueMatrix(arg__1, w, h)


    :param arg__1: :class:`PySide.QtGui.QMatrix`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QMatrix`




    Returns the actual matrix used for transforming an image with the given ``width`` , ``height`` and ``matrix`` .

    When transforming an image using the :meth:`PySide.QtGui.QImage.transformed` function, the transformation matrix is internally adjusted to compensate for unwanted translation, i.e. :meth:`PySide.QtGui.QImage.transformed` returns the smallest image containing all transformed points of the original image. This function returns the modified matrix, which maps points correctly from the original image into the new image.

    .. seealso::  :meth:`PySide.QtGui.QImage.transformed`  :class:`Image Transformations<~PySide.QtGui.QImage#Image Transformations>` 


.. method:: PySide.QtGui.QImage.valid(pt)


    :param pt: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``pos`` is a valid coordinate pair within the image; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QImage.rect`  :meth:`QRect.contains()<PySide.QtCore.QRect.contains>` 


.. method:: PySide.QtGui.QImage.valid(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Returns true if :class:`PySide.QtCore.QPoint` (``x`` , ``y`` ) is a valid coordinate pair within the image; otherwise returns false.




