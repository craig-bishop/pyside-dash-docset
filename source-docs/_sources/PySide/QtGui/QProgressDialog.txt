.. module:: PySide.QtGui
.. _QProgressDialog:

QProgressDialog
***************

.. inheritance-diagram:: QProgressDialog
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`autoClose<PySide.QtGui.QProgressDialog.autoClose>` ()
*    def :meth:`autoReset<PySide.QtGui.QProgressDialog.autoReset>` ()
*    def :meth:`labelText<PySide.QtGui.QProgressDialog.labelText>` ()
*    def :meth:`maximum<PySide.QtGui.QProgressDialog.maximum>` ()
*    def :meth:`minimum<PySide.QtGui.QProgressDialog.minimum>` ()
*    def :meth:`minimumDuration<PySide.QtGui.QProgressDialog.minimumDuration>` ()
*    def :meth:`open<PySide.QtGui.QProgressDialog.open>` (receiver, member)
*    def :meth:`setAutoClose<PySide.QtGui.QProgressDialog.setAutoClose>` (close)
*    def :meth:`setAutoReset<PySide.QtGui.QProgressDialog.setAutoReset>` (reset)
*    def :meth:`setBar<PySide.QtGui.QProgressDialog.setBar>` (bar)
*    def :meth:`setCancelButton<PySide.QtGui.QProgressDialog.setCancelButton>` (button)
*    def :meth:`setLabel<PySide.QtGui.QProgressDialog.setLabel>` (label)
*    def :meth:`value<PySide.QtGui.QProgressDialog.value>` ()
*    def :meth:`wasCanceled<PySide.QtGui.QProgressDialog.wasCanceled>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`cancel<PySide.QtGui.QProgressDialog.cancel>` ()
*    def :meth:`forceShow<PySide.QtGui.QProgressDialog.forceShow>` ()
*    def :meth:`reset<PySide.QtGui.QProgressDialog.reset>` ()
*    def :meth:`setCancelButtonText<PySide.QtGui.QProgressDialog.setCancelButtonText>` (text)
*    def :meth:`setLabelText<PySide.QtGui.QProgressDialog.setLabelText>` (text)
*    def :meth:`setMaximum<PySide.QtGui.QProgressDialog.setMaximum>` (maximum)
*    def :meth:`setMinimum<PySide.QtGui.QProgressDialog.setMinimum>` (minimum)
*    def :meth:`setMinimumDuration<PySide.QtGui.QProgressDialog.setMinimumDuration>` (ms)
*    def :meth:`setRange<PySide.QtGui.QProgressDialog.setRange>` (minimum, maximum)
*    def :meth:`setValue<PySide.QtGui.QProgressDialog.setValue>` (progress)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`canceled<PySide.QtGui.QProgressDialog.canceled>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QProgressDialog` class provides feedback on the progress of a slow operation.

    A progress dialog is used to give the user an indication of how long an operation is going to take, and to demonstrate that the application has not frozen. It can also give the user an opportunity to abort the operation.

    A common problem with progress dialogs is that it is difficult to know when to use them; operations take different amounts of time on different hardware. :class:`PySide.QtGui.QProgressDialog` offers a solution to this problem: it estimates the time the operation will take (based on time for steps), and only shows itself if that estimate is beyond :meth:`PySide.QtGui.QProgressDialog.minimumDuration` (4 seconds by default).

    Use :meth:`PySide.QtGui.QProgressDialog.setMinimum` and :meth:`PySide.QtGui.QProgressDialog.setMaximum` or the constructor to set the number of "steps" in the operation and call :meth:`PySide.QtGui.QProgressDialog.setValue` as the operation progresses. The number of steps can be chosen arbitrarily. It can be the number of files copied, the number of bytes received, the number of iterations through the main loop of your algorithm, or some other suitable unit. Progress starts at the value set by :meth:`PySide.QtGui.QProgressDialog.setMinimum` , and the progress dialog shows that the operation has finished when you call :meth:`PySide.QtGui.QProgressDialog.setValue` with the value set by :meth:`PySide.QtGui.QProgressDialog.setMaximum` as its argument.

    The dialog automatically resets and hides itself at the end of the operation. Use :meth:`PySide.QtGui.QProgressDialog.setAutoReset` and :meth:`PySide.QtGui.QProgressDialog.setAutoClose` to change this behavior. Note that if you set a new maximum (using :meth:`PySide.QtGui.QProgressDialog.setMaximum` or :meth:`PySide.QtGui.QProgressDialog.setRange` ) that equals your current :meth:`PySide.QtGui.QProgressDialog.value` , the dialog will not close regardless.

    There are two ways of using :class:`PySide.QtGui.QProgressDialog` : modal and modeless.

    Compared to a modeless :class:`PySide.QtGui.QProgressDialog` , a modal :class:`PySide.QtGui.QProgressDialog` is simpler to use for the programmer. Do the operation in a loop, call :meth:`PySide.QtGui.QProgressDialog.setValue` at intervals, and check for cancellation with :meth:`PySide.QtGui.QProgressDialog.wasCanceled` . For example:

    ::

            progress = QProgressDialog("Copying files...", "Abort Copy", 0, numFiles, self)
            progress.setWindowModality(Qt.WindowModal)

            for i in rang(numFiles):
                progress.setValue(i)

                if progress.wasCanceled():
                    break
                #... copy one file

            progress.setValue(numFiles)


    A modeless progress dialog is suitable for operations that take place in the background, where the user is able to interact with the application. Such operations are typically based on :class:`PySide.QtCore.QTimer` (or :meth:`QObject.timerEvent()<PySide.QtCore.QObject.timerEvent>` ), :class:`PySide.QtCore.QSocketNotifier` , or :ref:`QUrlOperator<porting4.html>` ; or performed in a separate thread. A :class:`PySide.QtGui.QProgressBar` in the status bar of your main window is often an alternative to a modeless progress dialog.

    You need to have an event loop to be running, connect the :meth:`PySide.QtGui.QProgressDialog.canceled` signal to a slot that stops the operation, and call :meth:`PySide.QtGui.QProgressDialog.setValue` at intervals. For example:

    ::

        # Operation constructor
        def __init__(self, parent):
            QObject.__init__(self, parent)

            pd =  QProgressDialog("Operation in progress.", "Cancel", 0, 100)
            connect(pd, SIGNAL("canceled()"), self, SLOT("cancel()"))
            t =  QTimer(self)
            connect(t, SIGNAL("timeout()"), self, SLOT("perform()"))
            t.start(0)

        

        def perform(self):

            pd.setValue(steps)
            #... perform one percent of the operation
            steps++
            if steps > pd.maximum():
                t.stop()

        

        def cancel(self):

            t.stop()
            #... cleanup



    In both modes the progress dialog may be customized by replacing the child widgets with custom widgets by using :meth:`PySide.QtGui.QProgressDialog.setLabel` , :meth:`PySide.QtGui.QProgressDialog.setBar` , and :meth:`PySide.QtGui.QProgressDialog.setCancelButton` . The functions :meth:`PySide.QtGui.QProgressDialog.setLabelText` and :meth:`PySide.QtGui.QProgressDialog.setCancelButtonText` set the texts shown.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-progressdialog.png

    .. seealso::  :class:`PySide.QtGui.QDialog`  :class:`PySide.QtGui.QProgressBar`  :ref:`GUI Design Handbook: Progress Indicator<guibooks.html>`  :ref:`Find Files Example<dialogs/findfiles>`  :ref:`Pixelator Example<itemviews/pixelator>` 

.. class:: QProgressDialog([parent=None[, flags=0]])
           QProgressDialog(labelText, cancelButtonText, minimum, maximum[, parent=None[, flags=0]])

    :param cancelButtonText: unicode
    :param flags: :class:`PySide.QtCore.Qt.WindowFlags`
    :param labelText: unicode
    :param minimum: :class:`PySide.QtCore.int`
    :param maximum: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtGui.QWidget`





.. method:: PySide.QtGui.QProgressDialog.autoClose()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the dialog gets hidden by :meth:`PySide.QtGui.QProgressDialog.reset` .

    The default is true.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setAutoReset` 


.. method:: PySide.QtGui.QProgressDialog.autoReset()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the progress dialog calls :meth:`PySide.QtGui.QProgressDialog.reset` as soon as :meth:`PySide.QtGui.QProgressDialog.value` equals :meth:`PySide.QtGui.QProgressDialog.maximum` .

    The default is true.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setAutoClose` 


.. method:: PySide.QtGui.QProgressDialog.cancel()






    Resets the progress dialog. :meth:`PySide.QtGui.QProgressDialog.wasCanceled` becomes true until the progress dialog is reset. The progress dialog becomes hidden.



.. method:: PySide.QtGui.QProgressDialog.canceled()








.. method:: PySide.QtGui.QProgressDialog.forceShow()






    Shows the dialog if it is still hidden after the algorithm has been started and :meth:`PySide.QtGui.QProgressDialog.minimumDuration` milliseconds have passed.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setMinimumDuration` 


.. method:: PySide.QtGui.QProgressDialog.labelText()


    :rtype: unicode




    This property holds the label's text.

    The default text is an empty string.



.. method:: PySide.QtGui.QProgressDialog.maximum()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the highest value represented by the progress bar.

    The default is 0.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.minimum`  :meth:`PySide.QtGui.QProgressDialog.setRange` 


.. method:: PySide.QtGui.QProgressDialog.minimum()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the lowest value represented by the progress bar.

    The default is 0.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.maximum`  :meth:`PySide.QtGui.QProgressDialog.setRange` 


.. method:: PySide.QtGui.QProgressDialog.minimumDuration()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the time that must pass before the dialog appears.

    If the expected duration of the task is less than the :meth:`PySide.QtGui.QProgressDialog.minimumDuration` , the dialog will not appear at all. This prevents the dialog popping up for tasks that are quickly over. For tasks that are expected to exceed the :meth:`PySide.QtGui.QProgressDialog.minimumDuration` , the dialog will pop up after the :meth:`PySide.QtGui.QProgressDialog.minimumDuration` time or as soon as any progress is set.

    If set to 0, the dialog is always shown as soon as any progress is set. The default is 4000 milliseconds.



.. method:: PySide.QtGui.QProgressDialog.open(receiver, member)


    :param receiver: :class:`PySide.QtCore.QObject`
    :param member: str




    This is an overloaded function.

    Opens the dialog and connects its :meth:`PySide.QtGui.QDialog.accepted` signal to the slot specified by ``receiver`` and ``member`` .

    The signal will be disconnected from the slot when the dialog is closed.



.. method:: PySide.QtGui.QProgressDialog.reset()






    Resets the progress dialog. The progress dialog becomes hidden if :meth:`PySide.QtGui.QProgressDialog.autoClose` is true.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setAutoClose`  :meth:`PySide.QtGui.QProgressDialog.setAutoReset` 


.. method:: PySide.QtGui.QProgressDialog.setAutoClose(close)


    :param close: :class:`PySide.QtCore.bool`




    This property holds whether the dialog gets hidden by :meth:`PySide.QtGui.QProgressDialog.reset` .

    The default is true.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setAutoReset` 


.. method:: PySide.QtGui.QProgressDialog.setAutoReset(reset)


    :param reset: :class:`PySide.QtCore.bool`




    This property holds whether the progress dialog calls :meth:`PySide.QtGui.QProgressDialog.reset` as soon as :meth:`PySide.QtGui.QProgressDialog.value` equals :meth:`PySide.QtGui.QProgressDialog.maximum` .

    The default is true.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setAutoClose` 


.. method:: PySide.QtGui.QProgressDialog.setBar(bar)


    :param bar: :class:`PySide.QtGui.QProgressBar`




    Sets the progress bar widget to ``bar`` . The progress dialog resizes to fit. The progress dialog takes ownership of the progress ``bar`` which will be deleted when necessary, so do not use a progress bar allocated on the stack.



.. method:: PySide.QtGui.QProgressDialog.setCancelButton(button)


    :param button: :class:`PySide.QtGui.QPushButton`




    Sets the cancel button to the push button, ``cancelButton`` . The progress dialog takes ownership of this button which will be deleted when necessary, so do not pass the address of an object that is on the stack, i.e. use new() to create the button. If 0 is passed then no cancel button will be shown.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setCancelButtonText` 


.. method:: PySide.QtGui.QProgressDialog.setCancelButtonText(text)


    :param text: unicode




    Sets the cancel button's text to ``cancelButtonText`` . If the text is set to :meth:`~PySide.QtGui.QProgressDialog.QString` then it will cause the cancel button to be hidden and deleted.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setCancelButton` 


.. method:: PySide.QtGui.QProgressDialog.setLabel(label)


    :param label: :class:`PySide.QtGui.QLabel`




    Sets the label to ``label`` . The progress dialog resizes to fit. The label becomes owned by the progress dialog and will be deleted when necessary, so do not pass the address of an object on the stack.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.setLabelText` 


.. method:: PySide.QtGui.QProgressDialog.setLabelText(text)


    :param text: unicode




    This property holds the label's text.

    The default text is an empty string.



.. method:: PySide.QtGui.QProgressDialog.setMaximum(maximum)


    :param maximum: :class:`PySide.QtCore.int`




    This property holds the highest value represented by the progress bar.

    The default is 0.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.minimum`  :meth:`PySide.QtGui.QProgressDialog.setRange` 


.. method:: PySide.QtGui.QProgressDialog.setMinimum(minimum)


    :param minimum: :class:`PySide.QtCore.int`




    This property holds the lowest value represented by the progress bar.

    The default is 0.

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.maximum`  :meth:`PySide.QtGui.QProgressDialog.setRange` 


.. method:: PySide.QtGui.QProgressDialog.setMinimumDuration(ms)


    :param ms: :class:`PySide.QtCore.int`




    This property holds the time that must pass before the dialog appears.

    If the expected duration of the task is less than the :meth:`PySide.QtGui.QProgressDialog.minimumDuration` , the dialog will not appear at all. This prevents the dialog popping up for tasks that are quickly over. For tasks that are expected to exceed the :meth:`PySide.QtGui.QProgressDialog.minimumDuration` , the dialog will pop up after the :meth:`PySide.QtGui.QProgressDialog.minimumDuration` time or as soon as any progress is set.

    If set to 0, the dialog is always shown as soon as any progress is set. The default is 4000 milliseconds.



.. method:: PySide.QtGui.QProgressDialog.setRange(minimum, maximum)


    :param minimum: :class:`PySide.QtCore.int`
    :param maximum: :class:`PySide.QtCore.int`




    Sets the progress dialog's minimum and maximum values to ``minimum`` and ``maximum`` , respectively.

    If ``maximum`` is smaller than ``minimum`` , ``minimum`` becomes the only legal value.

    If the current value falls outside the new range, the progress dialog is reset with :meth:`PySide.QtGui.QProgressDialog.reset` .

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.minimum`  :meth:`PySide.QtGui.QProgressDialog.maximum` 


.. method:: PySide.QtGui.QProgressDialog.setValue(progress)


    :param progress: :class:`PySide.QtCore.int`




    This property holds the current amount of progress made..

    For the progress dialog to work as expected, you should initially set this property to 0 and finally set it to :meth:`QProgressDialog.maximum()<PySide.QtGui.QProgressDialog.maximum>` ; you can call :meth:`PySide.QtGui.QProgressDialog.setValue` any number of times in-between.

    .. warning::  If the progress dialog is modal (see :meth:`QProgressDialog.QProgressDialog()<PySide.QtGui.QProgressDialog.QProgressDialog>` ), :meth:`PySide.QtGui.QProgressDialog.setValue` calls :meth:`QApplication.processEvents()<PySide.QtGui.QApplication.processEvents>` , so take care that this does not cause undesirable re-entrancy in your code. For example, don't use a :class:`PySide.QtGui.QProgressDialog` inside a :meth:`PySide.QtGui.QWidget.paintEvent` !

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.minimum`  :meth:`PySide.QtGui.QProgressDialog.maximum` 


.. method:: PySide.QtGui.QProgressDialog.value()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the current amount of progress made..

    For the progress dialog to work as expected, you should initially set this property to 0 and finally set it to :meth:`QProgressDialog.maximum()<PySide.QtGui.QProgressDialog.maximum>` ; you can call :meth:`PySide.QtGui.QProgressDialog.setValue` any number of times in-between.

    .. warning::  If the progress dialog is modal (see :meth:`QProgressDialog.QProgressDialog()<PySide.QtGui.QProgressDialog.QProgressDialog>` ), :meth:`PySide.QtGui.QProgressDialog.setValue` calls :meth:`QApplication.processEvents()<PySide.QtGui.QApplication.processEvents>` , so take care that this does not cause undesirable re-entrancy in your code. For example, don't use a :class:`PySide.QtGui.QProgressDialog` inside a :meth:`PySide.QtGui.QWidget.paintEvent` !

    .. seealso::  :meth:`PySide.QtGui.QProgressDialog.minimum`  :meth:`PySide.QtGui.QProgressDialog.maximum` 


.. method:: PySide.QtGui.QProgressDialog.wasCanceled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the dialog was canceled.




