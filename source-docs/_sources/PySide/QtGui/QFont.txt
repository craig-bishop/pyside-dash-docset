.. module:: PySide.QtGui
.. _QFont:

QFont
*****

.. inheritance-diagram:: QFont
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtGui.QFont.__eq__>` (arg__1)
*    def :meth:`__lt__<PySide.QtGui.QFont.__lt__>` (arg__1)
*    def :meth:`__ne__<PySide.QtGui.QFont.__ne__>` (arg__1)
*    def :meth:`bold<PySide.QtGui.QFont.bold>` ()
*    def :meth:`capitalization<PySide.QtGui.QFont.capitalization>` ()
*    def :meth:`defaultFamily<PySide.QtGui.QFont.defaultFamily>` ()
*    def :meth:`exactMatch<PySide.QtGui.QFont.exactMatch>` ()
*    def :meth:`family<PySide.QtGui.QFont.family>` ()
*    def :meth:`fixedPitch<PySide.QtGui.QFont.fixedPitch>` ()
*    def :meth:`fromString<PySide.QtGui.QFont.fromString>` (arg__1)
*    def :meth:`handle<PySide.QtGui.QFont.handle>` ()
*    def :meth:`isCopyOf<PySide.QtGui.QFont.isCopyOf>` (arg__1)
*    def :meth:`italic<PySide.QtGui.QFont.italic>` ()
*    def :meth:`kerning<PySide.QtGui.QFont.kerning>` ()
*    def :meth:`key<PySide.QtGui.QFont.key>` ()
*    def :meth:`lastResortFamily<PySide.QtGui.QFont.lastResortFamily>` ()
*    def :meth:`lastResortFont<PySide.QtGui.QFont.lastResortFont>` ()
*    def :meth:`letterSpacing<PySide.QtGui.QFont.letterSpacing>` ()
*    def :meth:`letterSpacingType<PySide.QtGui.QFont.letterSpacingType>` ()
*    def :meth:`overline<PySide.QtGui.QFont.overline>` ()
*    def :meth:`pixelSize<PySide.QtGui.QFont.pixelSize>` ()
*    def :meth:`pointSize<PySide.QtGui.QFont.pointSize>` ()
*    def :meth:`pointSizeF<PySide.QtGui.QFont.pointSizeF>` ()
*    def :meth:`rawMode<PySide.QtGui.QFont.rawMode>` ()
*    def :meth:`rawName<PySide.QtGui.QFont.rawName>` ()
*    def :meth:`resolve<PySide.QtGui.QFont.resolve>` ()
*    def :meth:`resolve<PySide.QtGui.QFont.resolve>` (arg__1)
*    def :meth:`resolve<PySide.QtGui.QFont.resolve>` (mask)
*    def :meth:`setBold<PySide.QtGui.QFont.setBold>` (arg__1)
*    def :meth:`setCapitalization<PySide.QtGui.QFont.setCapitalization>` (arg__1)
*    def :meth:`setFamily<PySide.QtGui.QFont.setFamily>` (arg__1)
*    def :meth:`setFixedPitch<PySide.QtGui.QFont.setFixedPitch>` (arg__1)
*    def :meth:`setItalic<PySide.QtGui.QFont.setItalic>` (b)
*    def :meth:`setKerning<PySide.QtGui.QFont.setKerning>` (arg__1)
*    def :meth:`setLetterSpacing<PySide.QtGui.QFont.setLetterSpacing>` (type, spacing)
*    def :meth:`setOverline<PySide.QtGui.QFont.setOverline>` (arg__1)
*    def :meth:`setPixelSize<PySide.QtGui.QFont.setPixelSize>` (arg__1)
*    def :meth:`setPointSize<PySide.QtGui.QFont.setPointSize>` (arg__1)
*    def :meth:`setPointSizeF<PySide.QtGui.QFont.setPointSizeF>` (arg__1)
*    def :meth:`setRawMode<PySide.QtGui.QFont.setRawMode>` (arg__1)
*    def :meth:`setRawName<PySide.QtGui.QFont.setRawName>` (arg__1)
*    def :meth:`setStretch<PySide.QtGui.QFont.setStretch>` (arg__1)
*    def :meth:`setStrikeOut<PySide.QtGui.QFont.setStrikeOut>` (arg__1)
*    def :meth:`setStyle<PySide.QtGui.QFont.setStyle>` (style)
*    def :meth:`setStyleHint<PySide.QtGui.QFont.setStyleHint>` (arg__1[, strategy=PreferDefault])
*    def :meth:`setStyleStrategy<PySide.QtGui.QFont.setStyleStrategy>` (s)
*    def :meth:`setUnderline<PySide.QtGui.QFont.setUnderline>` (arg__1)
*    def :meth:`setWeight<PySide.QtGui.QFont.setWeight>` (arg__1)
*    def :meth:`setWordSpacing<PySide.QtGui.QFont.setWordSpacing>` (spacing)
*    def :meth:`stretch<PySide.QtGui.QFont.stretch>` ()
*    def :meth:`strikeOut<PySide.QtGui.QFont.strikeOut>` ()
*    def :meth:`style<PySide.QtGui.QFont.style>` ()
*    def :meth:`styleHint<PySide.QtGui.QFont.styleHint>` ()
*    def :meth:`styleStrategy<PySide.QtGui.QFont.styleStrategy>` ()
*    def :meth:`toString<PySide.QtGui.QFont.toString>` ()
*    def :meth:`underline<PySide.QtGui.QFont.underline>` ()
*    def :meth:`weight<PySide.QtGui.QFont.weight>` ()
*    def :meth:`wordSpacing<PySide.QtGui.QFont.wordSpacing>` ()
*    def :meth:`x11Screen<PySide.QtGui.QFont.x11Screen>` ()
*    def :meth:`x11SetScreen<PySide.QtGui.QFont.x11SetScreen>` ([screen=-1])


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`cacheStatistics<PySide.QtGui.QFont.cacheStatistics>` ()
*    def :meth:`cleanup<PySide.QtGui.QFont.cleanup>` ()
*    def :meth:`initialize<PySide.QtGui.QFont.initialize>` ()
*    def :meth:`insertSubstitution<PySide.QtGui.QFont.insertSubstitution>` (arg__1, arg__2)
*    def :meth:`insertSubstitutions<PySide.QtGui.QFont.insertSubstitutions>` (arg__1, arg__2)
*    def :meth:`removeSubstitution<PySide.QtGui.QFont.removeSubstitution>` (arg__1)
*    def :meth:`substitute<PySide.QtGui.QFont.substitute>` (arg__1)
*    def :meth:`substitutes<PySide.QtGui.QFont.substitutes>` (arg__1)
*    def :meth:`substitutions<PySide.QtGui.QFont.substitutions>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QFont` class specifies a font used for drawing text.

    When you create a :class:`PySide.QtGui.QFont` object you specify various attributes that you want the font to have. Qt will use the font with the specified attributes, or if no matching font exists, Qt will use the closest matching installed font. The attributes of the font that is actually used are retrievable from a :class:`PySide.QtGui.QFontInfo` object. If the window system provides an exact match :meth:`PySide.QtGui.QFont.exactMatch` returns true. Use :class:`PySide.QtGui.QFontMetrics` to get measurements, e.g. the pixel length of a string using :meth:`QFontMetrics.width()<PySide.QtGui.QFontMetrics.width>` .

    Note that a :class:`PySide.QtGui.QApplication` instance must exist before a :class:`PySide.QtGui.QFont` can be used. You can set the application's default font with :meth:`QApplication.setFont()<PySide.QtGui.QApplication.setFont>` .

    If a chosen font does not include all the characters that need to be displayed, :class:`PySide.QtGui.QFont` will try to find the characters in the nearest equivalent fonts. When a :class:`PySide.QtGui.QPainter` draws a character from a font the :class:`PySide.QtGui.QFont` will report whether or not it has the character; if it does not, :class:`PySide.QtGui.QPainter` will draw an unfilled square.

    Create QFonts like this:

    ::

        serifFont = QFont("Times", 10, QFont.Bold)
        sansFont = QFont("Helvetica [Cronyx]", 12)


    The attributes set in the constructor can also be set later, e.g. :meth:`PySide.QtGui.QFont.setFamily` , :meth:`PySide.QtGui.QFont.setPointSize` , :meth:`~PySide.QtGui.QFont.setPointSizeFloat` , :meth:`PySide.QtGui.QFont.setWeight` and :meth:`PySide.QtGui.QFont.setItalic` . The remaining attributes must be set after contstruction, e.g. :meth:`PySide.QtGui.QFont.setBold` , :meth:`PySide.QtGui.QFont.setUnderline` , :meth:`PySide.QtGui.QFont.setOverline` , :meth:`PySide.QtGui.QFont.setStrikeOut` and :meth:`PySide.QtGui.QFont.setFixedPitch` . :class:`PySide.QtGui.QFontInfo` objects should be created *after* the font's attributes have been set. A :class:`PySide.QtGui.QFontInfo` object will not change, even if you change the font's attributes. The corresponding "get" functions, e.g. :meth:`PySide.QtGui.QFont.family` , :meth:`PySide.QtGui.QFont.pointSize` , etc., return the values that were set, even though the values used may differ. The actual values are available from a :class:`PySide.QtGui.QFontInfo` object.

    If the requested font family is unavailable you can influence the :class:`font matching algorithm<~PySide.QtGui.#fontmatching>` by choosing a particular :attr:`QFont.StyleHint` and :attr:`QFont.StyleStrategy` with :meth:`PySide.QtGui.QFont.setStyleHint` . The default family (corresponding to the current style hint) is returned by :meth:`PySide.QtGui.QFont.defaultFamily` .

    The font-matching algorithm has a :meth:`PySide.QtGui.QFont.lastResortFamily` and :meth:`PySide.QtGui.QFont.lastResortFont` in cases where a suitable match cannot be found. You can provide substitutions for font family names using :meth:`PySide.QtGui.QFont.insertSubstitution` and :meth:`PySide.QtGui.QFont.insertSubstitutions` . Substitutions can be removed with :meth:`PySide.QtGui.QFont.removeSubstitution` . Use :meth:`PySide.QtGui.QFont.substitute` to retrieve a family's first substitute, or the family name itself if it has no substitutes. Use :meth:`PySide.QtGui.QFont.substitutes` to retrieve a list of a family's substitutes (which may be empty).

    Every :class:`PySide.QtGui.QFont` has a :meth:`PySide.QtGui.QFont.key` which you can use, for example, as the key in a cache or dictionary. If you want to store a user's font preferences you could use :class:`PySide.QtCore.QSettings` , writing the font information with :meth:`PySide.QtGui.QFont.toString` and reading it back with :meth:`PySide.QtGui.QFont.fromString` . The operator<<() and operator>>() functions are also available, but they work on a data stream.

    It is possible to set the height of characters shown on the screen to a specified number of pixels with :meth:`PySide.QtGui.QFont.setPixelSize` ; however using :meth:`PySide.QtGui.QFont.setPointSize` has a similar effect and provides device independence.

    In X11 you can set a font using its system specific name with :meth:`PySide.QtGui.QFont.setRawName` .

    Loading fonts can be expensive, especially on X11. :class:`PySide.QtGui.QFont` contains extensive optimizations to make the copying of :class:`PySide.QtGui.QFont` objects fast, and to cache the results of the slow window system functions it depends upon.

    The font matching algorithm works as follows:

    Note that the actual font matching algorithm varies from platform to platform.

    In Windows a request for the "Courier" font is automatically changed to "Courier New", an improved version of Courier that allows for smooth scaling. The older "Courier" bitmap font can be selected by setting the :attr:`PreferBitmap<QFont.StyleStrategy>` style strategy (see :meth:`PySide.QtGui.QFont.setStyleStrategy` ).

    Once a font is found, the remaining attributes are matched in order of priority:

    If you have a font which matches on family, even if none of the other attributes match, this font will be chosen in preference to a font which doesn't match on family but which does match on the other attributes. This is because font family is the dominant search criteria.

    The point size is defined to match if it is within 20% of the requested point size. When several fonts match and are only distinguished by point size, the font with the closest point size to the one requested will be chosen.

    The actual family, font size, weight and other font attributes used for drawing text will depend on what's available for the chosen family under the window system. A :class:`PySide.QtGui.QFontInfo` object can be used to determine the actual values used for drawing the text.

    Examples:

    ::

        f = QFont("Helvetica")


    If you had both an Adobe and a Cronyx Helvetica, you might get either.

    ::

        f = QFont("Helvetica [Cronyx]")


    You can specify the foundry you want in the family name. The font f in the above example will be set to "Helvetica [Cronyx]".

    To determine the attributes of the font actually used in the window system, use a :class:`PySide.QtGui.QFontInfo` object, e.g.

    ::

        info = QFontInfo(f1)
        family = info.family()


    To find out font metrics use a :class:`PySide.QtGui.QFontMetrics` object, e.g.

    ::

        fm = QFontMetrics(f1)
        textWidthInPixels = fm.width("How many pixels wide is this text?")
        textHeightInPixels = fm.height()


    For more general information on fonts, see the comp.fonts FAQ. Information on encodings can be found from Roman Czyborra's page.

    .. seealso::  :class:`PySide.QtGui.QFontComboBox`  :class:`PySide.QtGui.QFontMetrics`  :class:`PySide.QtGui.QFontInfo`  :class:`PySide.QtGui.QFontDatabase`  :ref:`Character Map Example<widgets/charactermap>` 

.. class:: QFont()
           QFont(arg__1)
           QFont(arg__1, pd)
           QFont(family[, pointSize=-1[, weight=-1[, italic=false]]])

    :param family: unicode
    :param pointSize: :class:`PySide.QtCore.int`
    :param pd: :class:`PySide.QtGui.QPaintDevice`
    :param weight: :class:`PySide.QtCore.int`
    :param arg__1: :class:`PySide.QtGui.QFont`
    :param italic: :class:`PySide.QtCore.bool`

    Constructs a font object that uses the application's default font.

    .. seealso::  :meth:`QApplication.setFont()<PySide.QtGui.QApplication.setFont>`  :meth:`QApplication.font()<PySide.QtGui.QApplication.font>` 

    Constructs a font that is a copy of ``font`` .


    Constructs a font from ``font`` for use on the paint device ``pd`` .


    Constructs a font object with the specified ``family`` , ``pointSize`` , ``weight`` and ``italic`` settings.

    If ``pointSize`` is zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points, except on Symbian where it is 7 points.

    The ``family`` name may optionally also include a foundry name, e.g. "Helvetica [Cronyx]". If the ``family`` is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the :class:`font matching<PySide.QtGui.QFont>` algorithm.

    .. seealso::  :attr:`QFont.Weight`  :meth:`PySide.QtGui.QFont.setFamily`  :meth:`PySide.QtGui.QFont.setPointSize`  :meth:`PySide.QtGui.QFont.setWeight`  :meth:`PySide.QtGui.QFont.setItalic`  :meth:`PySide.QtGui.QFont.setStyleHint`  :meth:`QApplication.font()<PySide.QtGui.QApplication.font>` 

.. attribute:: PySide.QtGui.QFont.StyleStrategy

    The style strategy tells the :class:`font matching<PySide.QtGui.QFont>` algorithm what type of fonts should be used to find an appropriate default family.

    The following strategies are available:

    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant              |Description                                                                                                                                                                                                                                                                                                                                                                                                                              |
    +======================+=========================================================================================================================================================================================================================================================================================================================================================================================================================================+
    |QFont.PreferDefault   |the default style strategy. It does not prefer any type of font.                                                                                                                                                                                                                                                                                                                                                                         |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.PreferBitmap    |prefers bitmap fonts (as opposed to outline fonts).                                                                                                                                                                                                                                                                                                                                                                                      |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.PreferDevice    |prefers device fonts.                                                                                                                                                                                                                                                                                                                                                                                                                    |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.PreferOutline   |prefers outline fonts (as opposed to bitmap fonts).                                                                                                                                                                                                                                                                                                                                                                                      |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.ForceOutline    |forces the use of outline fonts.                                                                                                                                                                                                                                                                                                                                                                                                         |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.NoAntialias     |don't antialias the fonts.                                                                                                                                                                                                                                                                                                                                                                                                               |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.PreferAntialias |antialias if possible.                                                                                                                                                                                                                                                                                                                                                                                                                   |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.OpenGLCompatible|forces the use of OpenGL compatible fonts.                                                                                                                                                                                                                                                                                                                                                                                               |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.NoFontMerging   |If the font selected for a certain writing system does not contain a character requested to draw, then Qt automatically chooses a similar looking font that contains the character. The :attr:`NoFontMerging<QFont.StyleStrategy>` flag disables this feature. Please note that enabling this flag will not prevent Qt from automatically picking a suitable font when the selected font does not support the writing system of the text.|
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    Any of these may be OR-ed with one of these flags:

    +-------------------------+---------------------------------------------------------------------------------------------------------------+
    |Constant                 |Description                                                                                                    |
    +=========================+===============================================================================================================+
    |QFont.PreferMatch        |prefer an exact match. The font matcher will try to use the exact font size that has been specified.           |
    +-------------------------+---------------------------------------------------------------------------------------------------------------+
    |QFont.PreferQuality      |prefer the best quality font. The font matcher will use the nearest standard point size that the font supports.|
    +-------------------------+---------------------------------------------------------------------------------------------------------------+
    |QFont.ForceIntegerMetrics|forces the use of integer values in font engines that support fractional font metrics.                         |
    +-------------------------+---------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QFont.SpacingType

    +-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant               |Description                                                                                                                                    |
    +=======================+===============================================================================================================================================+
    |QFont.PercentageSpacing|A value of 100 will keep the spacing unchanged; a value of 200 will enlarge the spacing after a character by the width of the character itself.|
    +-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.AbsoluteSpacing  |A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.                             |
    +-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QFont.StyleHint

    Style hints are used by the :class:`font matching<PySide.QtGui.QFont>` algorithm to find an appropriate default family if a selected font family is not available.

    +----------------+-----------------------------------------------------------------------------------+
    |Constant        |Description                                                                        |
    +================+===================================================================================+
    |QFont.AnyStyle  |leaves the font matching algorithm to choose the family. This is the default.      |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.SansSerif |the font matcher prefer sans serif fonts.                                          |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Helvetica |is a synonym for ``SansSerif``.                                                    |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Serif     |the font matcher prefers serif fonts.                                              |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Times     |is a synonym for ``Serif``.                                                        |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.TypeWriter|the font matcher prefers fixed pitch fonts.                                        |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Courier   |a synonym for ``TypeWriter``.                                                      |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.OldEnglish|the font matcher prefers decorative fonts.                                         |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Decorative|is a synonym for ``OldEnglish``.                                                   |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Monospace |the font matcher prefers fonts that map to the CSS generic font-family 'monospace'.|
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Fantasy   |the font matcher prefers fonts that map to the CSS generic font-family 'fantasy'.  |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.Cursive   |the font matcher prefers fonts that map to the CSS generic font-family 'cursive'.  |
    +----------------+-----------------------------------------------------------------------------------+
    |QFont.System    |the font matcher prefers system fonts.                                             |
    +----------------+-----------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QFont.Weight

    Qt uses a weighting scale from 0 to 99 similar to, but not the same as, the scales used in Windows or CSS. A weight of 0 is ultralight, whilst 99 will be an extremely black.

    This enum contains the predefined font weights:

    +--------------+-----------+
    |Constant      |Description|
    +==============+===========+
    |QFont.Light   |25         |
    +--------------+-----------+
    |QFont.Normal  |50         |
    +--------------+-----------+
    |QFont.DemiBold|63         |
    +--------------+-----------+
    |QFont.Bold    |75         |
    +--------------+-----------+
    |QFont.Black   |87         |
    +--------------+-----------+


.. attribute:: PySide.QtGui.QFont.Capitalization

    Rendering option for text this font applies to.

    +------------------+----------------------------------------------------------------------------------------------------+
    |Constant          |Description                                                                                         |
    +==================+====================================================================================================+
    |QFont.MixedCase   |This is the normal text rendering option where no capitalization change is applied.                 |
    +------------------+----------------------------------------------------------------------------------------------------+
    |QFont.AllUppercase|This alters the text to be rendered in all uppercase type.                                          |
    +------------------+----------------------------------------------------------------------------------------------------+
    |QFont.AllLowercase|This alters the text to be rendered in all lowercase type.                                          |
    +------------------+----------------------------------------------------------------------------------------------------+
    |QFont.SmallCaps   |This alters the text to be rendered in small-caps type.                                             |
    +------------------+----------------------------------------------------------------------------------------------------+
    |QFont.Capitalize  |This alters the text to be rendered with the first character of each word as an uppercase character.|
    +------------------+----------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QFont.Stretch

    Predefined stretch values that follow the CSS naming convention. The higher the value, the more stretched the text is.

    +--------------------+-----------+
    |Constant            |Description|
    +====================+===========+
    |QFont.UltraCondensed|50         |
    +--------------------+-----------+
    |QFont.ExtraCondensed|62         |
    +--------------------+-----------+
    |QFont.Condensed     |75         |
    +--------------------+-----------+
    |QFont.SemiCondensed |87         |
    +--------------------+-----------+
    |QFont.Unstretched   |100        |
    +--------------------+-----------+
    |QFont.SemiExpanded  |112        |
    +--------------------+-----------+
    |QFont.Expanded      |125        |
    +--------------------+-----------+
    |QFont.ExtraExpanded |150        |
    +--------------------+-----------+
    |QFont.UltraExpanded |200        |
    +--------------------+-----------+

    .. seealso::  :meth:`PySide.QtGui.QFont.setStretch`  :meth:`PySide.QtGui.QFont.stretch` 

.. attribute:: PySide.QtGui.QFont.Style

    This enum describes the different styles of glyphs that are used to display text.

    +------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant          |Description                                                                                                                                              |
    +==================+=========================================================================================================================================================+
    |QFont.StyleNormal |Normal glyphs used in unstyled text.                                                                                                                     |
    +------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.StyleItalic |Italic glyphs that are specifically designed for the purpose of representing italicized text.                                                            |
    +------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QFont.StyleOblique|Glyphs with an italic appearance that are typically based on the unstyled glyphs, but are not fine-tuned for the purpose of representing italicized text.|
    +------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :attr:`QFont.Weight` 

.. method:: PySide.QtGui.QFont.bold()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if :meth:`PySide.QtGui.QFont.weight` is a value greater than :attr:`QFont.Normal<QFont.Weight>` ; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QFont.weight`  :meth:`PySide.QtGui.QFont.setBold`  :meth:`QFontInfo.bold()<PySide.QtGui.QFontInfo.bold>` 


.. staticmethod:: PySide.QtGui.QFont.cacheStatistics()









.. method:: PySide.QtGui.QFont.capitalization()


    :rtype: :attr:`PySide.QtGui.QFont.Capitalization`




    Returns the current capitalization type of the font.

    .. seealso::  :meth:`PySide.QtGui.QFont.setCapitalization` 


.. staticmethod:: PySide.QtGui.QFont.cleanup()






    Internal function that cleans up the font system.



.. method:: PySide.QtGui.QFont.defaultFamily()


    :rtype: unicode




    Returns the family name that corresponds to the current style hint.

    .. seealso::  :attr:`QFont.StyleHint`  :meth:`PySide.QtGui.QFont.styleHint`  :meth:`PySide.QtGui.QFont.setStyleHint` 


.. method:: PySide.QtGui.QFont.exactMatch()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if a window system font exactly matching the settings of this font is available.

    .. seealso::  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.family()


    :rtype: unicode




    Returns the requested font family name, i.e. the name set in the constructor or the last :meth:`~PySide.QtGui.QFont.setFont` call.

    .. seealso::  :meth:`PySide.QtGui.QFont.setFamily`  :meth:`PySide.QtGui.QFont.substitutes`  :meth:`PySide.QtGui.QFont.substitute` 


.. method:: PySide.QtGui.QFont.fixedPitch()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if fixed pitch has been set; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QFont.setFixedPitch`  :meth:`QFontInfo.fixedPitch()<PySide.QtGui.QFontInfo.fixedPitch>` 


.. method:: PySide.QtGui.QFont.fromString(arg__1)


    :param arg__1: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Sets this font to match the description ``descrip`` . The description is a comma-separated list of the font attributes, as returned by :meth:`PySide.QtGui.QFont.toString` .

    .. seealso::  :meth:`PySide.QtGui.QFont.toString` 


.. method:: PySide.QtGui.QFont.handle()


    :rtype: :class:`PySide.QtCore.Qt::HANDLE`




    Returns the window system handle to the font, for low-level access. Using this function is *not* portable.



.. staticmethod:: PySide.QtGui.QFont.initialize()






    Internal function that initializes the font system. The font cache and font dict do not alloc the keys. The key is a :class:`PySide.QtCore.QString` which is shared between :class:`~PySide.QtGui.QFontPrivate` and QXFontName.



.. staticmethod:: PySide.QtGui.QFont.insertSubstitution(arg__1, arg__2)


    :param arg__1: unicode
    :param arg__2: unicode




    Inserts ``substituteName`` into the substitution table for the family ``familyName`` .

    .. seealso::  :meth:`PySide.QtGui.QFont.insertSubstitutions`  :meth:`PySide.QtGui.QFont.removeSubstitution`  :meth:`PySide.QtGui.QFont.substitutions`  :meth:`PySide.QtGui.QFont.substitute`  :meth:`PySide.QtGui.QFont.substitutes` 


.. staticmethod:: PySide.QtGui.QFont.insertSubstitutions(arg__1, arg__2)


    :param arg__1: unicode
    :param arg__2: list of strings




    Inserts the list of families ``substituteNames`` into the substitution list for ``familyName`` .

    .. seealso::  :meth:`PySide.QtGui.QFont.insertSubstitution`  :meth:`PySide.QtGui.QFont.removeSubstitution`  :meth:`PySide.QtGui.QFont.substitutions`  :meth:`PySide.QtGui.QFont.substitute` 


.. method:: PySide.QtGui.QFont.isCopyOf(arg__1)


    :param arg__1: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this font and ``f`` are copies of each other, i.e. one of them was created as a copy of the other and neither has been modified since. This is much stricter than equality.

    .. seealso::  :meth:`PySide.QtGui.QFont.operator=`  :meth:`PySide.QtGui.QFont.operator==` 


.. method:: PySide.QtGui.QFont.italic()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the :meth:`PySide.QtGui.QFont.style` of the font is not :attr:`QFont.StyleNormal<QFont.Style>`

    .. seealso::  :meth:`PySide.QtGui.QFont.setItalic`  :meth:`PySide.QtGui.QFont.style` 


.. method:: PySide.QtGui.QFont.kerning()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if kerning should be used when drawing text with this font.

    .. seealso::  :meth:`PySide.QtGui.QFont.setKerning` 


.. method:: PySide.QtGui.QFont.key()


    :rtype: unicode




    Returns the font's key, a textual representation of a font. It is typically used as the key for a cache or dictionary of fonts.

    .. seealso::  :class:`QMap` 


.. method:: PySide.QtGui.QFont.lastResortFamily()


    :rtype: unicode




    Returns the "last resort" font family name.

    The current implementation tries a wide variety of common fonts, returning the first one it finds. Is is possible that no family is found in which case an empty string is returned.

    .. seealso::  :meth:`PySide.QtGui.QFont.lastResortFont` 


.. method:: PySide.QtGui.QFont.lastResortFont()


    :rtype: unicode




    Returns a "last resort" font name for the font matching algorithm. This is used if the last resort family is not available. It will always return a name, if necessary returning something like "fixed" or "system".

    The current implementation tries a wide variety of common fonts, returning the first one it finds. The implementation may change at any time, but this function will always return a string containing something.

    It is theoretically possible that there really isn't a :meth:`PySide.QtGui.QFont.lastResortFont` in which case Qt will abort with an error message. We have not been able to identify a case where this happens. Please :ref:`report it as a bug<bughowto.html>` if it does, preferably with a list of the fonts you have installed.

    .. seealso::  :meth:`PySide.QtGui.QFont.lastResortFamily`  :meth:`PySide.QtGui.QFont.rawName` 


.. method:: PySide.QtGui.QFont.letterSpacing()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the letter spacing for the font.

    .. seealso::  :meth:`PySide.QtGui.QFont.setLetterSpacing`  :meth:`PySide.QtGui.QFont.letterSpacingType`  :meth:`PySide.QtGui.QFont.setWordSpacing` 


.. method:: PySide.QtGui.QFont.letterSpacingType()


    :rtype: :attr:`PySide.QtGui.QFont.SpacingType`




    Returns the spacing type used for letter spacing.

    .. seealso::  :meth:`PySide.QtGui.QFont.letterSpacing`  :meth:`PySide.QtGui.QFont.setLetterSpacing`  :meth:`PySide.QtGui.QFont.setWordSpacing` 


.. method:: PySide.QtGui.QFont.__ne__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this font is different from ``f`` ; otherwise returns false.

    Two QFonts are considered to be different if their font attributes are different. If :meth:`PySide.QtGui.QFont.rawMode` is enabled for both fonts, only the family fields are compared.

    .. seealso::  :meth:`PySide.QtGui.QFont.operator==` 


.. method:: PySide.QtGui.QFont.__lt__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtCore.bool`




    Provides an arbitrary comparison of this font and font ``f`` . All that is guaranteed is that the operator returns false if both fonts are equal and that (f1 < f2) == !(f2 < f1) if the fonts are not equal.

    This function is useful in some circumstances, for example if you want to use :class:`PySide.QtGui.QFont` objects as keys in a :class:`QMap` .

    .. seealso::  :meth:`PySide.QtGui.QFont.operator==`  :meth:`PySide.QtGui.QFont.operator!=`  :meth:`PySide.QtGui.QFont.isCopyOf` 


.. method:: PySide.QtGui.QFont.__eq__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this font is equal to ``f`` ; otherwise returns false.

    Two QFonts are considered equal if their font attributes are equal. If :meth:`PySide.QtGui.QFont.rawMode` is enabled for both fonts, only the family fields are compared.

    .. seealso::  :meth:`PySide.QtGui.QFont.operator!=`  :meth:`PySide.QtGui.QFont.isCopyOf` 


.. method:: PySide.QtGui.QFont.overline()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if overline has been set; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QFont.setOverline` 


.. method:: PySide.QtGui.QFont.pixelSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the pixel size of the font if it was set with :meth:`PySide.QtGui.QFont.setPixelSize` . Returns -1 if the size was set with :meth:`PySide.QtGui.QFont.setPointSize` or :meth:`PySide.QtGui.QFont.setPointSizeF` .

    .. seealso::  :meth:`PySide.QtGui.QFont.setPixelSize`  :meth:`PySide.QtGui.QFont.pointSize`  :meth:`QFontInfo.pointSize()<PySide.QtGui.QFontInfo.pointSize>`  :meth:`QFontInfo.pixelSize()<PySide.QtGui.QFontInfo.pixelSize>` 


.. method:: PySide.QtGui.QFont.pointSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the point size of the font. Returns -1 if the font size was specified in pixels.

    .. seealso::  :meth:`PySide.QtGui.QFont.setPointSize`  :meth:`PySide.QtGui.QFont.pointSizeF` 


.. method:: PySide.QtGui.QFont.pointSizeF()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the point size of the font. Returns -1 if the font size was specified in pixels.

    .. seealso::  :meth:`PySide.QtGui.QFont.pointSize`  :meth:`PySide.QtGui.QFont.setPointSizeF`  :meth:`PySide.QtGui.QFont.pixelSize`  :meth:`QFontInfo.pointSize()<PySide.QtGui.QFontInfo.pointSize>`  :meth:`QFontInfo.pixelSize()<PySide.QtGui.QFontInfo.pixelSize>` 


.. method:: PySide.QtGui.QFont.rawMode()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if raw mode is used for font name matching; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QFont.setRawMode`  :meth:`PySide.QtGui.QFont.rawName` 


.. method:: PySide.QtGui.QFont.rawName()


    :rtype: unicode




    Returns the name of the font within the underlying window system.

    On X11, this function will return an empty string if Qt is built with FontConfig support; otherwise the XLFD (X Logical Font Description) is returned.

    Using the return value of this function is usually *not*\ *portable* .

    .. seealso::  :meth:`PySide.QtGui.QFont.setRawName` 


.. staticmethod:: PySide.QtGui.QFont.removeSubstitution(arg__1)


    :param arg__1: unicode




    Removes all the substitutions for ``familyName`` .

    .. seealso::  :meth:`PySide.QtGui.QFont.insertSubstitutions`  :meth:`PySide.QtGui.QFont.insertSubstitution`  :meth:`PySide.QtGui.QFont.substitutions`  :meth:`PySide.QtGui.QFont.substitute` 


.. method:: PySide.QtGui.QFont.resolve(mask)


    :param mask: :class:`PySide.QtCore.uint`






.. method:: PySide.QtGui.QFont.resolve()


    :rtype: :class:`PySide.QtCore.uint`






.. method:: PySide.QtGui.QFont.resolve(arg__1)


    :param arg__1: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtGui.QFont`




    Returns a new :class:`PySide.QtGui.QFont` that has attributes copied from ``other`` that have not been previously set on this font.



.. method:: PySide.QtGui.QFont.setBold(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    If ``enable`` is true sets the font's weight to :attr:`QFont.Bold<QFont.Weight>` ; otherwise sets the weight to :attr:`QFont.Normal<QFont.Weight>` .

    For finer boldness control use :meth:`PySide.QtGui.QFont.setWeight` .

    .. seealso::  :meth:`PySide.QtGui.QFont.bold`  :meth:`PySide.QtGui.QFont.setWeight` 


.. method:: PySide.QtGui.QFont.setCapitalization(arg__1)


    :param arg__1: :attr:`PySide.QtGui.QFont.Capitalization`




    Sets the capitalization of the text in this font to ``caps`` .

    A font's capitalization makes the text appear in the selected capitalization mode.

    .. seealso::  :meth:`PySide.QtGui.QFont.capitalization` 


.. method:: PySide.QtGui.QFont.setFamily(arg__1)


    :param arg__1: unicode




    Sets the family name of the font. The name is case insensitive and may include a foundry name.

    The ``family`` name may optionally also include a foundry name, e.g. "Helvetica [Cronyx]". If the ``family`` is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the :class:`font matching<PySide.QtGui.QFont>` algorithm.

    .. seealso::  :meth:`PySide.QtGui.QFont.family`  :meth:`PySide.QtGui.QFont.setStyleHint`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setFixedPitch(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    If ``enable`` is true, sets fixed pitch on; otherwise sets fixed pitch off.

    .. seealso::  :meth:`PySide.QtGui.QFont.fixedPitch`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setItalic(b)


    :param b: :class:`PySide.QtCore.bool`




    Sets the :meth:`PySide.QtGui.QFont.style` of the font to :attr:`QFont.StyleItalic<QFont.Style>` if ``enable`` is true; otherwise the style is set to :attr:`QFont.StyleNormal<QFont.Style>` .

    .. seealso::  :meth:`PySide.QtGui.QFont.italic`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setKerning(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    Enables kerning for this font if ``enable`` is true; otherwise disables it. By default, kerning is enabled.

    When kerning is enabled, glyph metrics do not add up anymore, even for Latin text. In other words, the assumption that width('a') + width('b') is equal to width("ab") is not neccesairly true.

    .. seealso::  :meth:`PySide.QtGui.QFont.kerning`  :class:`PySide.QtGui.QFontMetrics` 


.. method:: PySide.QtGui.QFont.setLetterSpacing(type, spacing)


    :param type: :attr:`PySide.QtGui.QFont.SpacingType`
    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the letter spacing for the font to ``spacing`` and the type of spacing to ``type`` .

    Letter spacing changes the default spacing between individual letters in the font. The spacing between the letters can be made smaller as well as larger.

    .. seealso::  :meth:`PySide.QtGui.QFont.letterSpacing`  :meth:`PySide.QtGui.QFont.letterSpacingType`  :meth:`PySide.QtGui.QFont.setWordSpacing` 


.. method:: PySide.QtGui.QFont.setOverline(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    If ``enable`` is true, sets overline on; otherwise sets overline off.

    .. seealso::  :meth:`PySide.QtGui.QFont.overline`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setPixelSize(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the font size to ``pixelSize`` pixels.

    Using this function makes the font device dependent. Use :meth:`PySide.QtGui.QFont.setPointSize` or :meth:`PySide.QtGui.QFont.setPointSizeF` to set the size of the font in a device independent manner.

    .. seealso::  :meth:`PySide.QtGui.QFont.pixelSize` 


.. method:: PySide.QtGui.QFont.setPointSize(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the point size to ``pointSize`` . The point size must be greater than zero.

    .. seealso::  :meth:`PySide.QtGui.QFont.pointSize`  :meth:`PySide.QtGui.QFont.setPointSizeF` 


.. method:: PySide.QtGui.QFont.setPointSizeF(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`




    Sets the point size to ``pointSize`` . The point size must be greater than zero. The requested precision may not be achieved on all platforms.

    .. seealso::  :meth:`PySide.QtGui.QFont.pointSizeF`  :meth:`PySide.QtGui.QFont.setPointSize`  :meth:`PySide.QtGui.QFont.setPixelSize` 


.. method:: PySide.QtGui.QFont.setRawMode(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    If ``enable`` is true, turns raw mode on; otherwise turns raw mode off. This function only has an effect under X11.

    If raw mode is enabled, Qt will search for an X font with a complete font name matching the family name, ignoring all other values set for the :class:`PySide.QtGui.QFont` . If the font name matches several fonts, Qt will use the first font returned by X. :class:`PySide.QtGui.QFontInfo` *cannot* be used to fetch information about a :class:`PySide.QtGui.QFont` using raw mode (it will return the values set in the :class:`PySide.QtGui.QFont` for all parameters, including the family name).

    .. warning::  Do not use raw mode unless you really, really need it! In most (if not all) cases, :meth:`PySide.QtGui.QFont.setRawName` is a much better choice.

    .. seealso::  :meth:`PySide.QtGui.QFont.rawMode`  :meth:`PySide.QtGui.QFont.setRawName` 


.. method:: PySide.QtGui.QFont.setRawName(arg__1)


    :param arg__1: unicode




    Sets a font by its system specific name. The function is particularly useful under X, where system font settings (for example X resources) are usually available in XLFD (X Logical Font Description) form only. You can pass an XLFD as ``name`` to this function.

    A font set with :meth:`PySide.QtGui.QFont.setRawName` is still a full-featured :class:`PySide.QtGui.QFont` . It can be queried (for example with :meth:`PySide.QtGui.QFont.italic` ) or modified (for example with :meth:`PySide.QtGui.QFont.setItalic` ) and is therefore also suitable for rendering rich text.

    If Qt's internal font database cannot resolve the raw name, the font becomes a raw font with ``name`` as its family.

    Note that the present implementation does not handle wildcards in XLFDs well, and that font aliases (file ``fonts.alias`` in the font directory on X11) are not supported.

    .. seealso::  :meth:`PySide.QtGui.QFont.rawName`  :meth:`PySide.QtGui.QFont.setRawMode`  :meth:`PySide.QtGui.QFont.setFamily` 


.. method:: PySide.QtGui.QFont.setStretch(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the stretch factor for the font.

    The stretch factor changes the width of all characters in the font by ``factor`` percent. For example, setting ``factor`` to 150 results in all characters in the font being 1.5 times (ie. 150%) wider. The default stretch factor is 100. The minimum stretch factor is 1, and the maximum stretch factor is 4000.

    The stretch factor is only applied to outline fonts. The stretch factor is ignored for bitmap fonts.

    NOTE: :class:`PySide.QtGui.QFont` cannot stretch XLFD fonts. When loading XLFD fonts on X11, the stretch factor is matched against a predefined set of values for the SETWIDTH\_NAME field of the XLFD.

    .. seealso::  :meth:`PySide.QtGui.QFont.stretch`  :attr:`QFont.Stretch` 


.. method:: PySide.QtGui.QFont.setStrikeOut(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    If ``enable`` is true, sets strikeout on; otherwise sets strikeout off.

    .. seealso::  :meth:`PySide.QtGui.QFont.strikeOut`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setStyle(style)


    :param style: :attr:`PySide.QtGui.QFont.Style`




    Sets the style of the font to ``style`` .

    .. seealso::  :meth:`PySide.QtGui.QFont.style`  :meth:`PySide.QtGui.QFont.italic`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setStyleHint(arg__1[, strategy=PreferDefault])


    :param arg__1: :attr:`PySide.QtGui.QFont.StyleHint`
    :param strategy: :attr:`PySide.QtGui.QFont.StyleStrategy`




    Sets the style hint and strategy to ``hint`` and ``strategy`` , respectively.

    If these aren't set explicitly the style hint will default to ``AnyStyle`` and the style strategy to ``PreferDefault`` .

    Qt does not support style hints on X11 since this information is not provided by the window system.

    .. seealso::  :attr:`QFont.StyleHint`  :meth:`PySide.QtGui.QFont.styleHint`  :attr:`QFont.StyleStrategy`  :meth:`PySide.QtGui.QFont.styleStrategy`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setStyleStrategy(s)


    :param s: :attr:`PySide.QtGui.QFont.StyleStrategy`




    Sets the style strategy for the font to ``s`` .

    .. seealso::  :meth:`PySide.QtGui.QFont.styleStrategy`  :attr:`QFont.StyleStrategy` 


.. method:: PySide.QtGui.QFont.setUnderline(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    If ``enable`` is true, sets underline on; otherwise sets underline off.

    .. seealso::  :meth:`PySide.QtGui.QFont.underline`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setWeight(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the weight the font to ``weight`` , which should be a value from the :attr:`QFont.Weight` enumeration.

    .. seealso::  :meth:`PySide.QtGui.QFont.weight`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.setWordSpacing(spacing)


    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the word spacing for the font to ``spacing`` .

    Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.

    Word spacing will not apply to writing systems, where indiviaul words are not separated by white space.

    .. seealso::  :meth:`PySide.QtGui.QFont.wordSpacing`  :meth:`PySide.QtGui.QFont.setLetterSpacing` 


.. method:: PySide.QtGui.QFont.stretch()


    :rtype: :class:`PySide.QtCore.int`




    Returns the stretch factor for the font.

    .. seealso::  :meth:`PySide.QtGui.QFont.setStretch` 


.. method:: PySide.QtGui.QFont.strikeOut()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if strikeout has been set; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QFont.setStrikeOut` 


.. method:: PySide.QtGui.QFont.style()


    :rtype: :attr:`PySide.QtGui.QFont.Style`




    Returns the style of the font.

    .. seealso::  :meth:`PySide.QtGui.QFont.setStyle` 


.. method:: PySide.QtGui.QFont.styleHint()


    :rtype: :attr:`PySide.QtGui.QFont.StyleHint`




    Returns the :attr:`QFont.StyleHint` .

    The style hint affects the :class:`font matching<PySide.QtGui.QFont>` algorithm. See :attr:`QFont.StyleHint` for the list of available hints.

    .. seealso::  :meth:`PySide.QtGui.QFont.setStyleHint`  :attr:`QFont.StyleStrategy`  :meth:`QFontInfo.styleHint()<PySide.QtGui.QFontInfo.styleHint>` 


.. method:: PySide.QtGui.QFont.styleStrategy()


    :rtype: :attr:`PySide.QtGui.QFont.StyleStrategy`




    Returns the :attr:`QFont.StyleStrategy` .

    The style strategy affects the :class:`font matching<PySide.QtGui.QFont>` algorithm. See :attr:`QFont.StyleStrategy` for the list of available strategies.

    .. seealso::  :meth:`PySide.QtGui.QFont.setStyleStrategy`  :meth:`PySide.QtGui.QFont.setStyleHint`  :attr:`QFont.StyleHint` 


.. staticmethod:: PySide.QtGui.QFont.substitute(arg__1)


    :param arg__1: unicode
    :rtype: unicode




    Returns the first family name to be used whenever ``familyName`` is specified. The lookup is case insensitive.

    If there is no substitution for ``familyName`` , ``familyName`` is returned.

    To obtain a list of substitutions use :meth:`PySide.QtGui.QFont.substitutes` .

    .. seealso::  :meth:`PySide.QtGui.QFont.setFamily`  :meth:`PySide.QtGui.QFont.insertSubstitutions`  :meth:`PySide.QtGui.QFont.insertSubstitution`  :meth:`PySide.QtGui.QFont.removeSubstitution` 


.. staticmethod:: PySide.QtGui.QFont.substitutes(arg__1)


    :param arg__1: unicode
    :rtype: list of strings




    Returns a list of family names to be used whenever ``familyName`` is specified. The lookup is case insensitive.

    If there is no substitution for ``familyName`` , an empty list is returned.

    .. seealso::  :meth:`PySide.QtGui.QFont.substitute`  :meth:`PySide.QtGui.QFont.insertSubstitutions`  :meth:`PySide.QtGui.QFont.insertSubstitution`  :meth:`PySide.QtGui.QFont.removeSubstitution` 


.. staticmethod:: PySide.QtGui.QFont.substitutions()


    :rtype: list of strings




    Returns a sorted list of substituted family names.

    .. seealso::  :meth:`PySide.QtGui.QFont.insertSubstitution`  :meth:`PySide.QtGui.QFont.removeSubstitution`  :meth:`PySide.QtGui.QFont.substitute` 


.. method:: PySide.QtGui.QFont.toString()


    :rtype: unicode




    Returns a description of the font. The description is a comma-separated list of the attributes, perfectly suited for use in :class:`PySide.QtCore.QSettings` .

    .. seealso::  :meth:`PySide.QtGui.QFont.fromString` 


.. method:: PySide.QtGui.QFont.underline()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if underline has been set; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QFont.setUnderline` 


.. method:: PySide.QtGui.QFont.weight()


    :rtype: :class:`PySide.QtCore.int`




    Returns the weight of the font which is one of the enumerated values from :attr:`QFont.Weight` .

    .. seealso::  :meth:`PySide.QtGui.QFont.setWeight`  :attr:`QFont.Weight`  :class:`PySide.QtGui.QFontInfo` 


.. method:: PySide.QtGui.QFont.wordSpacing()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the word spacing for the font.

    .. seealso::  :meth:`PySide.QtGui.QFont.setWordSpacing`  :meth:`PySide.QtGui.QFont.setLetterSpacing` 


.. method:: PySide.QtGui.QFont.x11Screen()


    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QFont.x11SetScreen([screen=-1])


    :param screen: :class:`PySide.QtCore.int`







