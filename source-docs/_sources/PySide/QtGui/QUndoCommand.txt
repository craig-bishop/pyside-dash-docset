.. module:: PySide.QtGui
.. _QUndoCommand:

QUndoCommand
************

.. inheritance-diagram:: QUndoCommand
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`child<PySide.QtGui.QUndoCommand.child>` (index)
*    def :meth:`childCount<PySide.QtGui.QUndoCommand.childCount>` ()
*    def :meth:`setText<PySide.QtGui.QUndoCommand.setText>` (text)
*    def :meth:`text<PySide.QtGui.QUndoCommand.text>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`id<PySide.QtGui.QUndoCommand.id>` ()
*    def :meth:`mergeWith<PySide.QtGui.QUndoCommand.mergeWith>` (other)
*    def :meth:`redo<PySide.QtGui.QUndoCommand.redo>` ()
*    def :meth:`undo<PySide.QtGui.QUndoCommand.undo>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QUndoCommand` class is the base class of all commands stored on a :class:`PySide.QtGui.QUndoStack` .

    For an overview of Qt's Undo Framework, see the :ref:`overview document<qundo.html>` .

    A :class:`PySide.QtGui.QUndoCommand` represents a single editing action on a document; for example, inserting or deleting a block of text in a text editor. :class:`PySide.QtGui.QUndoCommand` can apply a change to the document with :meth:`PySide.QtGui.QUndoCommand.redo` and undo the change with :meth:`PySide.QtGui.QUndoCommand.undo` . The implementations for these functions must be provided in a derived class.

    ::

        class AppendText(QUndoCommand):
            self.m_document = ''
            self.m_text = ''

            def AppendText(self, doc, text):
                self.m_document = doc
                self.m_text = text
                self.setText("append text")

            def undo(self):
                self.m_document.chop(self.m_text.length())

            def redo(self):
                self.m_document->append(self.m_text)


    A :class:`PySide.QtGui.QUndoCommand` has an associated :meth:`PySide.QtGui.QUndoCommand.text` . This is a short string describing what the command does. It is used to update the text properties of the stack's undo and redo actions; see :meth:`QUndoStack.createUndoAction()<PySide.QtGui.QUndoStack.createUndoAction>` and :meth:`QUndoStack.createRedoAction()<PySide.QtGui.QUndoStack.createRedoAction>` .

    :class:`PySide.QtGui.QUndoCommand` objects are owned by the stack they were pushed on. :class:`PySide.QtGui.QUndoStack` deletes a command if it has been undone and a new command is pushed. For example:

    ::

        command1 = MyCommand()
        stack.push(command1)
        command2 = MyCommand()
        stack.push(command2)

        stack.undo()

        command3 = MyCommand()
        stack.push(command3) # command2 gets deleted


    In effect, when a command is pushed, it becomes the top-most command on the stack.

    To support command compression, :class:`PySide.QtGui.QUndoCommand` has an :meth:`PySide.QtGui.QUndoCommand.id` and the virtual function :meth:`PySide.QtGui.QUndoCommand.mergeWith` . These functions are used by :meth:`QUndoStack.push()<PySide.QtGui.QUndoStack.push>` .

    To support command macros, a :class:`PySide.QtGui.QUndoCommand` object can have any number of child commands. Undoing or redoing the parent command will cause the child commands to be undone or redone. A command can be assigned to a parent explicitly in the constructor. In this case, the command will be owned by the parent.

    The parent in this case is usually an empty command, in that it doesn't provide its own implementation of :meth:`PySide.QtGui.QUndoCommand.undo` and :meth:`PySide.QtGui.QUndoCommand.redo` . Instead, it uses the base implementations of these functions, which simply call :meth:`PySide.QtGui.QUndoCommand.undo` or :meth:`PySide.QtGui.QUndoCommand.redo` on all its children. The parent should, however, have a meaningful :meth:`PySide.QtGui.QUndoCommand.text` .

    ::

        insertRed = QUndoCommand() # an empty command
        insertRed.setText("insert red text")

        InsertText(document, idx, text, insertRed) # becomes child of insertRed
        SetColor(document, idx, text.length(), Qt.red, insertRed)

        stack.push(insertRed)


    Another way to create macros is to use the convenience functions :meth:`QUndoStack.beginMacro()<PySide.QtGui.QUndoStack.beginMacro>` and :meth:`QUndoStack.endMacro()<PySide.QtGui.QUndoStack.endMacro>` .

    .. seealso::  :class:`PySide.QtGui.QUndoStack` 

.. class:: QUndoCommand([parent=None])
           QUndoCommand(text[, parent=None])

    :param parent: :class:`PySide.QtGui.QUndoCommand`
    :param text: unicode

    Constructs a :class:`PySide.QtGui.QUndoCommand` object with parent ``parent`` .

    If ``parent`` is not 0, this command is appended to parent's child list. The parent command then owns this command and will delete it in its destructor.

    .. seealso::  :meth:`~PySide.QtGui.QUndoCommand.~QUndoCommand` 

    Constructs a :class:`PySide.QtGui.QUndoCommand` object with the given ``parent`` and ``text`` .

    If ``parent`` is not 0, this command is appended to parent's child list. The parent command then owns this command and will delete it in its destructor.

    .. seealso::  :meth:`~PySide.QtGui.QUndoCommand.~QUndoCommand` 

.. method:: PySide.QtGui.QUndoCommand.child(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QUndoCommand`




    Returns the child command at ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.childCount`  :meth:`QUndoStack.command()<PySide.QtGui.QUndoStack.command>` 


.. method:: PySide.QtGui.QUndoCommand.childCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of child commands in this command.

    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.child` 


.. method:: PySide.QtGui.QUndoCommand.id()


    :rtype: :class:`PySide.QtCore.int`




    Returns the ID of this command.

    A command ID is used in command compression. It must be an integer unique to this command's class, or -1 if the command doesn't support compression.

    If the command supports compression this function must be overridden in the derived class to return the correct ID. The base implementation returns -1.

    :meth:`QUndoStack.push()<PySide.QtGui.QUndoStack.push>` will only try to merge two commands if they have the same ID, and the ID is not -1.

    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.mergeWith`  :meth:`QUndoStack.push()<PySide.QtGui.QUndoStack.push>` 


.. method:: PySide.QtGui.QUndoCommand.mergeWith(other)


    :param other: :class:`PySide.QtGui.QUndoCommand`
    :rtype: :class:`PySide.QtCore.bool`




    Attempts to merge this command with ``command`` . Returns true on success; otherwise returns false.

    If this function returns true, calling this command's :meth:`PySide.QtGui.QUndoCommand.redo` must have the same effect as redoing both this command and ``command`` . Similarly, calling this command's :meth:`PySide.QtGui.QUndoCommand.undo` must have the same effect as undoing ``command`` and this command.

    :class:`PySide.QtGui.QUndoStack` will only try to merge two commands if they have the same id, and the id is not -1.

    The default implementation returns false.

    ::

        class AppendText(QUndoCommand):
            ...
            def mergeWith(self, other):
                if other.id() != self.id(): # make sure other is also an AppendText command
                    return False
                m_text += other.m_text
                return True


    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.id`  :meth:`QUndoStack.push()<PySide.QtGui.QUndoStack.push>` 


.. method:: PySide.QtGui.QUndoCommand.redo()






    Applies a change to the document. This function must be implemented in the derived class. Calling :meth:`QUndoStack.push()<PySide.QtGui.QUndoStack.push>` , :meth:`QUndoStack.undo()<PySide.QtGui.QUndoStack.undo>` or :meth:`QUndoStack.redo()<PySide.QtGui.QUndoStack.redo>` from this function leads to undefined beahavior.

    The default implementation calls :meth:`PySide.QtGui.QUndoCommand.redo` on all child commands.

    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.undo` 


.. method:: PySide.QtGui.QUndoCommand.setText(text)


    :param text: unicode




    Sets the command's text to be the ``text`` specified.

    The specified text should be a short user-readable string describing what this command does.

    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.text`  :meth:`QUndoStack.createUndoAction()<PySide.QtGui.QUndoStack.createUndoAction>`  :meth:`QUndoStack.createRedoAction()<PySide.QtGui.QUndoStack.createRedoAction>` 


.. method:: PySide.QtGui.QUndoCommand.text()


    :rtype: unicode




    Returns a short text string describing what this command does; for example, "insert text".

    The text is used when the text properties of the stack's undo and redo actions are updated.

    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.setText`  :meth:`QUndoStack.createUndoAction()<PySide.QtGui.QUndoStack.createUndoAction>`  :meth:`QUndoStack.createRedoAction()<PySide.QtGui.QUndoStack.createRedoAction>` 


.. method:: PySide.QtGui.QUndoCommand.undo()






    Reverts a change to the document. After :meth:`PySide.QtGui.QUndoCommand.undo` is called, the state of the document should be the same as before :meth:`PySide.QtGui.QUndoCommand.redo` was called. This function must be implemented in the derived class. Calling :meth:`QUndoStack.push()<PySide.QtGui.QUndoStack.push>` , :meth:`QUndoStack.undo()<PySide.QtGui.QUndoStack.undo>` or :meth:`QUndoStack.redo()<PySide.QtGui.QUndoStack.redo>` from this function leads to undefined beahavior.

    The default implementation calls :meth:`PySide.QtGui.QUndoCommand.undo` on all child commands in reverse order.

    .. seealso::  :meth:`PySide.QtGui.QUndoCommand.redo` 



