.. module:: PySide.QtGui
.. _QInputContext:

QInputContext
*************

.. inheritance-diagram:: QInputContext
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`focusWidget<PySide.QtGui.QInputContext.focusWidget>` ()
*    def :meth:`sendEvent<PySide.QtGui.QInputContext.sendEvent>` (event)
*    def :meth:`standardFormat<PySide.QtGui.QInputContext.standardFormat>` (s)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`actions<PySide.QtGui.QInputContext.actions>` ()
*    def :meth:`filterEvent<PySide.QtGui.QInputContext.filterEvent>` (event)
*    def :meth:`font<PySide.QtGui.QInputContext.font>` ()
*    def :meth:`identifierName<PySide.QtGui.QInputContext.identifierName>` ()
*    def :meth:`isComposing<PySide.QtGui.QInputContext.isComposing>` ()
*    def :meth:`language<PySide.QtGui.QInputContext.language>` ()
*    def :meth:`mouseHandler<PySide.QtGui.QInputContext.mouseHandler>` (x, event)
*    def :meth:`reset<PySide.QtGui.QInputContext.reset>` ()
*    def :meth:`setFocusWidget<PySide.QtGui.QInputContext.setFocusWidget>` (w)
*    def :meth:`update<PySide.QtGui.QInputContext.update>` ()
*    def :meth:`widgetDestroyed<PySide.QtGui.QInputContext.widgetDestroyed>` (w)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QInputContext` class abstracts the input method dependent data and composing state.

    An input method is responsible for inputting complex text that cannot be inputted via simple keymap. It converts a sequence of input events (typically key events) into a text string through the input method specific converting process. The class of the processes are widely ranging from simple finite state machine to complex text translator that pools a whole paragraph of a text with text editing capability to perform grammar and semantic analysis.

    To abstract such different input method specific intermediate information, Qt offers the :class:`PySide.QtGui.QInputContext` as base class. The concept is well known as 'input context' in the input method domain. An input context is created for a text widget in response to a demand. It is ensured that an input context is prepared for an input method before input to a text widget.

    Multiple input contexts that belong to a single input method may concurrently coexist. Suppose multi-window text editor. Each text widget of window A and B holds different :class:`PySide.QtGui.QInputContext` instance which contains different state information such as partially composed text.

    .. _PySide.QtGui.QInputContext_groups-of-functions:



Groups of Functions
^^^^^^^^^^^^^^^^^^^

    +--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Context                   |Functions                                                                                                                                                                                 |
    +--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Receiving information     |:meth:`~PySide.QtGui.QInputContext.x11FilterEvent` , :meth:`PySide.QtGui.QInputContext.filterEvent` , :meth:`PySide.QtGui.QInputContext.mouseHandler`                                     |
    +--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Sending back composed text|:meth:`PySide.QtGui.QInputContext.sendEvent`                                                                                                                                              |
    +--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |State change notification |:meth:`PySide.QtGui.QInputContext.setFocusWidget` , :meth:`PySide.QtGui.QInputContext.reset`                                                                                              |
    +--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Context information       |:meth:`PySide.QtGui.QInputContext.identifierName` , :meth:`PySide.QtGui.QInputContext.language` , :meth:`PySide.QtGui.QInputContext.font` , :meth:`PySide.QtGui.QInputContext.isComposing`|
    +--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. _PySide.QtGui.QInputContext_licensing-information:



Licensing Information
^^^^^^^^^^^^^^^^^^^^^

    ::

                
                            
        Copyright (C) 2003-2004 immodule for Qt Project. All rights reserved.

                
                            
        This file is written to contribute to Nokia Corporation and/or its subsidiary(-ies) under their own license. You may use this file under your Qt license. Following description is copied from their original file headers. Contact immodule-qt@freedesktop.org if any conditions of this licensing are not clear to you.

                
                        


    .. seealso::  :class:`~PySide.QtGui.QInputContextPlugin`  :class:`PySide.QtGui.QInputContextFactory`  :meth:`QApplication.setInputContext()<PySide.QtGui.QApplication.setInputContext>` 

.. class:: QInputContext([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs an input context with the given ``parent`` .


.. attribute:: PySide.QtGui.QInputContext.StandardFormat

    +-----------------------------+-------------------+
    |Constant                     |Description        |
    +=============================+===================+
    |QInputContext.PreeditFormat  |The preedit text.  |
    +-----------------------------+-------------------+
    |QInputContext.SelectionFormat|The selection text.|
    +-----------------------------+-------------------+

    .. seealso::  :meth:`PySide.QtGui.QInputContext.standardFormat` 

.. method:: PySide.QtGui.QInputContext.actions()


    :rtype: 




    This is a preliminary interface for Qt 4.



.. method:: PySide.QtGui.QInputContext.filterEvent(event)


    :param event: :class:`PySide.QtCore.QEvent`
    :rtype: :class:`PySide.QtCore.bool`




    This function can be reimplemented in a subclass to filter input events.

    Return true if the ``event`` has been consumed. Otherwise, the unfiltered ``event`` will be forwarded to widgets as ordinary way. Although the input events have accept() and ignore() methods, leave it untouched.

    ``event`` is currently restricted to events of these types:


    * CloseSoftwareInputPanel
    * KeyPress
    * KeyRelease
    * MouseButtonDblClick
    * MouseButtonPress
    * MouseButtonRelease
    * MouseMove
    * RequestSoftwareInputPanel

    But some input method related events such as :class:`PySide.QtGui.QWheelEvent` or :class:`PySide.QtGui.QTabletEvent` may be added in future.

    The filtering opportunity is always given to the input context as soon as possible. It has to be taken place before any other key event consumers such as eventfilters and accelerators because some input methods require quite various key combination and sequences. It often conflicts with accelerators and so on, so we must give the input context the filtering opportunity first to ensure all input methods work properly regardless of application design.

    Ordinary input methods require discrete key events to work properly, so Qt's key compression is always disabled for any input contexts.

    .. seealso::  :class:`PySide.QtGui.QKeyEvent`  :meth:`~PySide.QtGui.QInputContext.x11FilterEvent` 


.. method:: PySide.QtGui.QInputContext.focusWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget that has an input focus for this input context.

    The return value may differ from holderWidget() if the input context is shared between several text widgets.

    .. warning::  To ensure platform independence and support flexible configuration of widgets, ordinary input methods should not call this function directly.

    .. seealso::  :meth:`PySide.QtGui.QInputContext.setFocusWidget` 


.. method:: PySide.QtGui.QInputContext.font()


    :rtype: :class:`PySide.QtGui.QFont`




    Returns the font of the current input widget



.. method:: PySide.QtGui.QInputContext.identifierName()


    :rtype: unicode




    This function must be implemented in any subclasses to return the identifier name of the input method.

    Return value is the name to identify and specify input methods for the input method switching mechanism and so on. The name has to be consistent with :meth:`QInputContextPlugin.keys` . The name has to consist of ASCII characters only.

    There are two different names with different responsibility in the input method domain. This function returns one of them. Another name is called 'display name' that stands for the name for endusers appeared in a menu and so on.

    .. seealso::  :meth:`QInputContextPlugin.keys`  :meth:`QInputContextPlugin.displayName` 


.. method:: PySide.QtGui.QInputContext.isComposing()


    :rtype: :class:`PySide.QtCore.bool`




    This function indicates whether InputMethodStart event had been sent to the current focus widget. It is ensured that an input context can send InputMethodCompose or InputMethodEnd event safely if this function returned true.

    The state is automatically being tracked through :meth:`PySide.QtGui.QInputContext.sendEvent` .

    .. seealso::  :meth:`PySide.QtGui.QInputContext.sendEvent` 


.. method:: PySide.QtGui.QInputContext.language()


    :rtype: unicode




    This function must be implemented in any subclasses to return a language code (e.g. "zh\_CN", "zh\_TW", "zh\_HK", "ja", "ko", ...) of the input context. If the input context can handle multiple languages, return the currently used one. The name has to be consistent with QInputContextPlugin::language().

    This information will be used by language tagging feature in :class:`PySide.QtGui.QInputMethodEvent` . It is required to distinguish unified han characters correctly. It enables proper font and character code handling. Suppose CJK-awared multilingual web browser (that automatically modifies fonts in CJK-mixed text) and XML editor (that automatically inserts lang attr).



.. method:: PySide.QtGui.QInputContext.mouseHandler(x, event)


    :param x: :class:`PySide.QtCore.int`
    :param event: :class:`PySide.QtGui.QMouseEvent`




    This function can be reimplemented in a subclass to handle mouse press, release, double-click, and move events within the preedit text. You can use the function to implement mouse-oriented user interface such as text selection or popup menu for candidate selection.

    The ``x`` parameter is the offset within the string that was sent with the InputMethodCompose event. The alteration boundary of ``x`` is ensured as character boundary of preedit string accurately.

    The ``event`` parameter is the event that was sent to the editor widget. The event type is :attr:`QEvent.MouseButtonPress<QEvent.Type>` , :attr:`QEvent.MouseButtonRelease<QEvent.Type>` , :attr:`QEvent.MouseButtonDblClick<QEvent.Type>` or :attr:`QEvent.MouseMove<QEvent.Type>` . The event's button and state indicate the kind of operation that was performed.



.. method:: PySide.QtGui.QInputContext.reset()






    This function can be reimplemented in a subclass to reset the state of the input method.

    This function is called by several widgets to reset input state. For example, a text widget call this function before inserting a text to make widget ready to accept a text.

    Default implementation is sufficient for simple input method. You can override this function to reset external input method engines in complex input method. In the case, call :meth:`QInputContext.reset()<PySide.QtGui.QInputContext.reset>` to ensure proper termination of inputting.

    You must not send any :class:`PySide.QtGui.QInputMethodEvent` except empty InputMethodEnd event using :meth:`QInputContext.reset()<PySide.QtGui.QInputContext.reset>` at reimplemented :meth:`PySide.QtGui.QInputContext.reset` . It will break input state consistency.



.. method:: PySide.QtGui.QInputContext.sendEvent(event)


    :param event: :class:`PySide.QtGui.QInputMethodEvent`




    Sends an input method event specified by ``event`` to the current focus widget. Implementations of :class:`PySide.QtGui.QInputContext` should call this method to send the generated input method events and not :meth:`QApplication.sendEvent()<PySide.QtGui.QApplication.sendEvent>` , as the events might have to get dispatched to a different application on some platforms.

    Some complex input methods route the handling to several child contexts (e.g. to enable language switching). To account for this, :class:`PySide.QtGui.QInputContext` will check if the parent object is a :class:`PySide.QtGui.QInputContext` . If yes, it will call the parents :meth:`PySide.QtGui.QInputContext.sendEvent` implementation instead of sending the event directly.

    .. seealso::  :class:`PySide.QtGui.QInputMethodEvent` 


.. method:: PySide.QtGui.QInputContext.setFocusWidget(w)


    :param w: :class:`PySide.QtGui.QWidget`




    Sets the ``widget`` that has an input focus for this input context.

    .. warning::  Ordinary input methods must not call this function directly.

    .. seealso::  :meth:`PySide.QtGui.QInputContext.focusWidget` 


.. method:: PySide.QtGui.QInputContext.standardFormat(s)


    :param s: :attr:`PySide.QtGui.QInputContext.StandardFormat`
    :rtype: :class:`PySide.QtGui.QTextFormat`




    Returns a :class:`PySide.QtGui.QTextFormat` object that specifies the format for component ``s`` .



.. method:: PySide.QtGui.QInputContext.update()






    This virtual function is called when a state in the focus widget has changed. :class:`PySide.QtGui.QInputContext` can then use :meth:`QWidget.inputMethodQuery()<PySide.QtGui.QWidget.inputMethodQuery>` to query the new state of the widget.



.. method:: PySide.QtGui.QInputContext.widgetDestroyed(w)


    :param w: :class:`PySide.QtGui.QWidget`




    This virtual function is called when the specified ``widget`` is destroyed. The ``widget`` is a widget on which this input context is installed.




