.. module:: PySide.QtGui
.. _QStringListModel:

QStringListModel
****************

.. inheritance-diagram:: QStringListModel
    :parts: 2

**Inherited by:** :ref:`QHelpIndexModel`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`setStringList<PySide.QtGui.QStringListModel.setStringList>` (strings)
*    def :meth:`stringList<PySide.QtGui.QStringListModel.stringList>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QStringListModel` class provides a model that supplies strings to views.

    :class:`PySide.QtGui.QStringListModel` is an editable model that can be used for simple cases where you need to display a number of strings in a view widget, such as a :class:`PySide.QtGui.QListView` or a :class:`PySide.QtGui.QComboBox` .

    The model provides all the standard functions of an editable model, representing the data in the string list as a model with one column and a number of rows equal to the number of items in the list.

    Model indexes corresponding to items are obtained with the :meth:`PySide.QtCore.QAbstractListModel.index` function, and item flags are obtained with :meth:`PySide.QtGui.QStringListModel.flags` . Item data is read with the :meth:`PySide.QtGui.QStringListModel.data` function and written with :meth:`PySide.QtGui.QStringListModel.setData` . The number of rows (and number of items in the string list) can be found with the :meth:`PySide.QtGui.QStringListModel.rowCount` function.

    The model can be constructed with an existing string list, or strings can be set later with the :meth:`PySide.QtGui.QStringListModel.setStringList` convenience function. Strings can also be inserted in the usual way with the :meth:`PySide.QtGui.QStringListModel.insertRows` function, and removed with :meth:`PySide.QtGui.QStringListModel.removeRows` . The contents of the string list can be retrieved with the :meth:`PySide.QtGui.QStringListModel.stringList` convenience function.

    An example usage of :class:`PySide.QtGui.QStringListModel` :

    ::

            model = QStringListModel()
            list = QStringList()
            list.append("a")
            list.append("b")
            list.append("c")
            model.setStringList(list)


    .. seealso::  :class:`PySide.QtCore.QAbstractListModel`  :class:`PySide.QtCore.QAbstractItemModel`  :ref:`Model Classes<model-view-programming.html>` 

.. class:: QStringListModel([parent=None])
           QStringListModel(strings[, parent=None])

    :param parent: :class:`PySide.QtCore.QObject`
    :param strings: list of strings

    Constructs a string list model with the given ``parent`` .


    Constructs a string list model containing the specified ``strings`` with the given ``parent`` .


.. method:: PySide.QtGui.QStringListModel.setStringList(strings)


    :param strings: list of strings




    Sets the model's internal string list to ``strings`` . The model will notify any attached views that its underlying data has changed.

    .. seealso::  :meth:`PySide.QtGui.QStringListModel.stringList`  :meth:`PySide.QtCore.QAbstractItemModel.dataChanged` 


.. method:: PySide.QtGui.QStringListModel.stringList()


    :rtype: list of strings




    Returns the string list used by the model to store data.

    .. seealso::  :meth:`PySide.QtGui.QStringListModel.setStringList` 



