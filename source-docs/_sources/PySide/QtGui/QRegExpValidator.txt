.. module:: PySide.QtGui
.. _QRegExpValidator:

QRegExpValidator
****************

.. inheritance-diagram:: QRegExpValidator
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`regExp<PySide.QtGui.QRegExpValidator.regExp>` ()
*    def :meth:`setRegExp<PySide.QtGui.QRegExpValidator.setRegExp>` (rx)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QRegExpValidator` class is used to check a string against a regular expression.

    :class:`PySide.QtGui.QRegExpValidator` uses a regular expression (regexp) to determine whether an input string is :attr:`Acceptable<QValidator.State>` , :attr:`Intermediate<QValidator.State>` , or :attr:`Invalid<QValidator.State>` . The regexp can either be supplied when the :class:`PySide.QtGui.QRegExpValidator` is constructed, or at a later time.

    When :class:`PySide.QtGui.QRegExpValidator` determines whether a string is :attr:`Acceptable<QValidator.State>` or not, the regexp is treated as if it begins with the start of string assertion (**^** ) and ends with the end of string assertion (**$** ); the match is against the entire input string, or from the given position if a start position greater than zero is given.

    If a string is a prefix of an :attr:`Acceptable<QValidator.State>` string, it is considered :attr:`Intermediate<QValidator.State>` . For example, "" and "A" are :attr:`Intermediate<QValidator.State>` for the regexp **[A-Z][0-9]** (whereas " :ref:`_<index.html>` " would be :attr:`Invalid<QValidator.State>` ).

    For a brief introduction to Qt's regexp engine, see :class:`PySide.QtCore.QRegExp` .

    Example of use:

    ::

        # regexp: optional '-' followed by between 1 and 3 digits
        rx = QRegExp("-?\\d{1,3}")
        validator = QRegExpValidator(rx, self)

        edit = QLineEdit(self)
        edit.setValidator(validator)


    Below we present some examples of validators. In practice they would normally be associated with a widget as in the example above.

    ::

        # integers 1 to 9999
        rx = QRegExp("[1-9]\\d{0,3}")
        # the validator treats the regexp as "^[1-9]\\d{0,3}$"
        v = QRegExpValidator(rx, 0)
        pos = 0

        s = "0"
        v.validate(s, pos)    # returns Invalid
        s = "12345"
        v.validate(s, pos)    # returns Invalid
        s = "1"
        v.validate(s, pos)    # returns Acceptable

        rx.setPattern("\\S+")            # one or more non-whitespace characters
        v.setRegExp(rx)
        s = "myfile.txt"
        v.validate(s, pos) # Returns Acceptable
        s = "my file.txt"
        v.validate(s, pos) # Returns Invalid

        # A, B or C followed by exactly five digits followed by W, X, Y or Z
        rx.setPattern("[A-C]\\d{5}[W-Z]")
        v.setRegExp(rx)
        s = "a12345Z"
        v.validate(s, pos)        # Returns Invalid
        s = "A12345Z"
        v.validate(s, pos)        # Returns Acceptable
        s = "B12"
        v.validate(s, pos)        # Returns Intermediate

        # match most 'readme' files
        rx.setPattern("read\\S?me(\.(txt|asc|1st))?")
        rx.setCaseSensitive(false)
        v.setRegExp(rx)
        s = "readme"
        v.validate(s, pos) # Returns Acceptable
        s = "README.1ST"
        v.validate(s, pos) # Returns Acceptable
        s = "read me.txt"
        v.validate(s, pos) # Returns Invalid
        s = "readm"
        v.validate(s, pos) # Returns Intermediate


    .. seealso::  :class:`PySide.QtCore.QRegExp`  :class:`PySide.QtGui.QIntValidator`  :class:`PySide.QtGui.QDoubleValidator`  :ref:`Settings Editor Example<tools/settingseditor>` 

.. class:: QRegExpValidator([parent=None])
           QRegExpValidator(rx, parent)

    :param rx: :class:`PySide.QtCore.QRegExp`
    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a validator with a ``parent`` object that accepts any string (including an empty one) as valid.


    Constructs a validator with a ``parent`` object that accepts all strings that match the regular expression ``rx`` .

    The match is made against the entire string; e.g. if the regexp is **[A-Fa-f0-9]+** it will be treated as **^[A-Fa-f0-9]+$** .


.. method:: PySide.QtGui.QRegExpValidator.regExp()


    :rtype: :class:`PySide.QtCore.QRegExp`




    This property holds the regular expression used for validation.

    By default, this property contains a regular expression with the pattern ``.*`` that matches any string.



.. method:: PySide.QtGui.QRegExpValidator.setRegExp(rx)


    :param rx: :class:`PySide.QtCore.QRegExp`




    This property holds the regular expression used for validation.

    By default, this property contains a regular expression with the pattern ``.*`` that matches any string.




