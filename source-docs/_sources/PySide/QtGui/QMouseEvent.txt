.. module:: PySide.QtGui
.. _QMouseEvent:

QMouseEvent
***********

.. inheritance-diagram:: QMouseEvent
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`button<PySide.QtGui.QMouseEvent.button>` ()
*    def :meth:`buttons<PySide.QtGui.QMouseEvent.buttons>` ()
*    def :meth:`globalPos<PySide.QtGui.QMouseEvent.globalPos>` ()
*    def :meth:`globalX<PySide.QtGui.QMouseEvent.globalX>` ()
*    def :meth:`globalY<PySide.QtGui.QMouseEvent.globalY>` ()
*    def :meth:`hasExtendedInfo<PySide.QtGui.QMouseEvent.hasExtendedInfo>` ()
*    def :meth:`pos<PySide.QtGui.QMouseEvent.pos>` ()
*    def :meth:`posF<PySide.QtGui.QMouseEvent.posF>` ()
*    def :meth:`x<PySide.QtGui.QMouseEvent.x>` ()
*    def :meth:`y<PySide.QtGui.QMouseEvent.y>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`createExtendedMouseEvent<PySide.QtGui.QMouseEvent.createExtendedMouseEvent>` (type, pos, globalPos, button, buttons, modifiers)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QMouseEvent` class contains parameters that describe a mouse event.

    Mouse events occur when a mouse button is pressed or released inside a widget, or when the mouse cursor is moved.

    Mouse move events will occur only when a mouse button is pressed down, unless mouse tracking has been enabled with :meth:`QWidget.setMouseTracking()<PySide.QtGui.QWidget.setMouseTracking>` .

    Qt automatically grabs the mouse when a mouse button is pressed inside a widget; the widget will continue to receive mouse events until the last mouse button is released.

    A mouse event contains a special accept flag that indicates whether the receiver wants the event. You should call :meth:`PySide.QtCore.QEvent.ignore` if the mouse event is not handled by your widget. A mouse event is propagated up the parent widget chain until a widget accepts it with :meth:`PySide.QtCore.QEvent.accept` , or an event filter consumes it.

    .. note::  If a mouse event is propagated to a :class:`widget<PySide.QtGui.QWidget>` for which :attr:`Qt.WA_NoMousePropagation<Qt.WidgetAttribute>` has been set, that mouse event will not be propagated further up the parent widget chain.

    The state of the keyboard modifier keys can be found by calling the :meth:`PySide.QtGui.QInputEvent.modifiers` function, inherited from :class:`PySide.QtGui.QInputEvent` .

    The functions :meth:`PySide.QtGui.QMouseEvent.pos` , :meth:`PySide.QtGui.QMouseEvent.x` , and :meth:`PySide.QtGui.QMouseEvent.y` give the cursor position relative to the widget that receives the mouse event. If you move the widget as a result of the mouse event, use the global position returned by :meth:`PySide.QtGui.QMouseEvent.globalPos` to avoid a shaking motion.

    The :meth:`QWidget.setEnabled()<PySide.QtGui.QWidget.setEnabled>` function can be used to enable or disable mouse and keyboard events for a widget.

    Reimplement the :class:`PySide.QtGui.QWidget` event handlers, :meth:`QWidget.mousePressEvent()<PySide.QtGui.QWidget.mousePressEvent>` , :meth:`QWidget.mouseReleaseEvent()<PySide.QtGui.QWidget.mouseReleaseEvent>` , :meth:`QWidget.mouseDoubleClickEvent()<PySide.QtGui.QWidget.mouseDoubleClickEvent>` , and :meth:`QWidget.mouseMoveEvent()<PySide.QtGui.QWidget.mouseMoveEvent>` to receive mouse events in your own widgets.

    :meth:`QCursor.pos()<PySide.QtGui.QCursor.pos>`

    .. seealso::  :meth:`QWidget.setMouseTracking()<PySide.QtGui.QWidget.setMouseTracking>`  :meth:`QWidget.grabMouse()<PySide.QtGui.QWidget.grabMouse>` 

.. class:: QMouseEvent(type, pos, button, buttons, modifiers)
           QMouseEvent(type, pos, globalPos, button, buttons, modifiers)

    :param button: :attr:`PySide.QtCore.Qt.MouseButton`
    :param globalPos: :class:`PySide.QtCore.QPoint`
    :param modifiers: :class:`PySide.QtCore.Qt.KeyboardModifiers`
    :param type: :attr:`PySide.QtCore.QEvent.Type`
    :param pos: :class:`PySide.QtCore.QPoint`
    :param buttons: :class:`PySide.QtCore.Qt.MouseButtons`





.. method:: PySide.QtGui.QMouseEvent.button()


    :rtype: :attr:`PySide.QtCore.Qt.MouseButton`




    Returns the button that caused the event.

    Note that the returned value is always :attr:`Qt.NoButton<Qt.MouseButton>` for mouse move events.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.buttons`  :attr:`Qt.MouseButton` 


.. method:: PySide.QtGui.QMouseEvent.buttons()


    :rtype: :class:`PySide.QtCore.Qt.MouseButtons`




    Returns the button state when the event was generated. The button state is a combination of :attr:`Qt.LeftButton<Qt.MouseButton>` , :attr:`Qt.RightButton<Qt.MouseButton>` , :attr:`Qt.MidButton<Qt.MouseButton>` using the OR operator. For mouse move events, this is all buttons that are pressed down. For mouse press and double click events this includes the button that caused the event. For mouse release events this excludes the button that caused the event.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.button`  :attr:`Qt.MouseButton` 


.. staticmethod:: PySide.QtGui.QMouseEvent.createExtendedMouseEvent(type, pos, globalPos, button, buttons, modifiers)


    :param type: :attr:`PySide.QtCore.QEvent.Type`
    :param pos: :class:`PySide.QtCore.QPointF`
    :param globalPos: :class:`PySide.QtCore.QPoint`
    :param button: :attr:`PySide.QtCore.Qt.MouseButton`
    :param buttons: :class:`PySide.QtCore.Qt.MouseButtons`
    :param modifiers: :class:`PySide.QtCore.Qt.KeyboardModifiers`
    :rtype: :class:`PySide.QtGui.QMouseEvent`







.. method:: PySide.QtGui.QMouseEvent.globalPos()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the global position of the mouse cursor *at the time of the event* . This is important on asynchronous window systems like X11. Whenever you move your widgets around in response to mouse events, :meth:`PySide.QtGui.QMouseEvent.globalPos` may differ a lot from the current pointer position :meth:`QCursor.pos()<PySide.QtGui.QCursor.pos>` , and from QWidget::mapToGlobal( :meth:`PySide.QtGui.QMouseEvent.pos` ).

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.globalX`  :meth:`PySide.QtGui.QMouseEvent.globalY` 


.. method:: PySide.QtGui.QMouseEvent.globalX()


    :rtype: :class:`PySide.QtCore.int`




    Returns the global x position of the mouse cursor at the time of the event.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.globalY`  :meth:`PySide.QtGui.QMouseEvent.globalPos` 


.. method:: PySide.QtGui.QMouseEvent.globalY()


    :rtype: :class:`PySide.QtCore.int`




    Returns the global y position of the mouse cursor at the time of the event.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.globalX`  :meth:`PySide.QtGui.QMouseEvent.globalPos` 


.. method:: PySide.QtGui.QMouseEvent.hasExtendedInfo()


    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QMouseEvent.pos()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the position of the mouse cursor, relative to the widget that received the event.

    If you move the widget as a result of the mouse event, use the global position returned by :meth:`PySide.QtGui.QMouseEvent.globalPos` to avoid a shaking motion.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.x`  :meth:`PySide.QtGui.QMouseEvent.y`  :meth:`PySide.QtGui.QMouseEvent.globalPos` 


.. method:: PySide.QtGui.QMouseEvent.posF()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the position of the mouse cursor as a :class:`PySide.QtCore.QPointF` , relative to the widget that received the event.

    If you move the widget as a result of the mouse event, use the global position returned by :meth:`PySide.QtGui.QMouseEvent.globalPos` to avoid a shaking motion.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.x`  :meth:`PySide.QtGui.QMouseEvent.y`  :meth:`PySide.QtGui.QMouseEvent.pos`  :meth:`PySide.QtGui.QMouseEvent.globalPos` 


.. method:: PySide.QtGui.QMouseEvent.x()


    :rtype: :class:`PySide.QtCore.int`




    Returns the x position of the mouse cursor, relative to the widget that received the event.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.y`  :meth:`PySide.QtGui.QMouseEvent.pos` 


.. method:: PySide.QtGui.QMouseEvent.y()


    :rtype: :class:`PySide.QtCore.int`




    Returns the y position of the mouse cursor, relative to the widget that received the event.

    .. seealso::  :meth:`PySide.QtGui.QMouseEvent.x`  :meth:`PySide.QtGui.QMouseEvent.pos` 



