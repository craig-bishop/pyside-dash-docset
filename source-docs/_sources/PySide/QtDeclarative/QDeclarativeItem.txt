.. module:: PySide.QtDeclarative
.. _QDeclarativeItem:

QDeclarativeItem
****************

.. inheritance-diagram:: QDeclarativeItem
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`baselineOffset<PySide.QtDeclarative.QDeclarativeItem.baselineOffset>` ()
*    def :meth:`childAt<PySide.QtDeclarative.QDeclarativeItem.childAt>` (x, y)
*    def :meth:`childrenRect<PySide.QtDeclarative.QDeclarativeItem.childrenRect>` ()
*    def :meth:`clip<PySide.QtDeclarative.QDeclarativeItem.clip>` ()
*    def :meth:`forceActiveFocus<PySide.QtDeclarative.QDeclarativeItem.forceActiveFocus>` ()
*    def :meth:`hasActiveFocus<PySide.QtDeclarative.QDeclarativeItem.hasActiveFocus>` ()
*    def :meth:`height<PySide.QtDeclarative.QDeclarativeItem.height>` ()
*    def :meth:`heightValid<PySide.QtDeclarative.QDeclarativeItem.heightValid>` ()
*    def :meth:`implicitHeight<PySide.QtDeclarative.QDeclarativeItem.implicitHeight>` ()
*    def :meth:`implicitWidth<PySide.QtDeclarative.QDeclarativeItem.implicitWidth>` ()
*    def :meth:`inputMethodPreHandler<PySide.QtDeclarative.QDeclarativeItem.inputMethodPreHandler>` (arg__1)
*    def :meth:`isComponentComplete<PySide.QtDeclarative.QDeclarativeItem.isComponentComplete>` ()
*    def :meth:`keepMouseGrab<PySide.QtDeclarative.QDeclarativeItem.keepMouseGrab>` ()
*    def :meth:`keyPressPreHandler<PySide.QtDeclarative.QDeclarativeItem.keyPressPreHandler>` (arg__1)
*    def :meth:`keyReleasePreHandler<PySide.QtDeclarative.QDeclarativeItem.keyReleasePreHandler>` (arg__1)
*    def :meth:`mapFromItem<PySide.QtDeclarative.QDeclarativeItem.mapFromItem>` (item, x, y)
*    def :meth:`mapToItem<PySide.QtDeclarative.QDeclarativeItem.mapToItem>` (item, x, y)
*    def :meth:`resetHeight<PySide.QtDeclarative.QDeclarativeItem.resetHeight>` ()
*    def :meth:`resetWidth<PySide.QtDeclarative.QDeclarativeItem.resetWidth>` ()
*    def :meth:`setBaselineOffset<PySide.QtDeclarative.QDeclarativeItem.setBaselineOffset>` (arg__1)
*    def :meth:`setClip<PySide.QtDeclarative.QDeclarativeItem.setClip>` (arg__1)
*    def :meth:`setFocus<PySide.QtDeclarative.QDeclarativeItem.setFocus>` (arg__1)
*    def :meth:`setHeight<PySide.QtDeclarative.QDeclarativeItem.setHeight>` (arg__1)
*    def :meth:`setImplicitHeight<PySide.QtDeclarative.QDeclarativeItem.setImplicitHeight>` (arg__1)
*    def :meth:`setImplicitWidth<PySide.QtDeclarative.QDeclarativeItem.setImplicitWidth>` (arg__1)
*    def :meth:`setKeepMouseGrab<PySide.QtDeclarative.QDeclarativeItem.setKeepMouseGrab>` (arg__1)
*    def :meth:`setParentItem<PySide.QtDeclarative.QDeclarativeItem.setParentItem>` (parent)
*    def :meth:`setSize<PySide.QtDeclarative.QDeclarativeItem.setSize>` (size)
*    def :meth:`setSmooth<PySide.QtDeclarative.QDeclarativeItem.setSmooth>` (arg__1)
*    def :meth:`setTransformOrigin<PySide.QtDeclarative.QDeclarativeItem.setTransformOrigin>` (arg__1)
*    def :meth:`setWidth<PySide.QtDeclarative.QDeclarativeItem.setWidth>` (arg__1)
*    def :meth:`smooth<PySide.QtDeclarative.QDeclarativeItem.smooth>` ()
*    def :meth:`transformOrigin<PySide.QtDeclarative.QDeclarativeItem.transformOrigin>` ()
*    def :meth:`width<PySide.QtDeclarative.QDeclarativeItem.width>` ()
*    def :meth:`widthValid<PySide.QtDeclarative.QDeclarativeItem.widthValid>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`geometryChanged<PySide.QtDeclarative.QDeclarativeItem.geometryChanged>` (newGeometry, oldGeometry)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`activeFocusChanged<PySide.QtDeclarative.QDeclarativeItem.activeFocusChanged>` (arg__1)
*    def :meth:`baselineOffsetChanged<PySide.QtDeclarative.QDeclarativeItem.baselineOffsetChanged>` (arg__1)
*    def :meth:`childrenRectChanged<PySide.QtDeclarative.QDeclarativeItem.childrenRectChanged>` (arg__1)
*    def :meth:`clipChanged<PySide.QtDeclarative.QDeclarativeItem.clipChanged>` (arg__1)
*    def :meth:`focusChanged<PySide.QtDeclarative.QDeclarativeItem.focusChanged>` (arg__1)
*    def :meth:`implicitHeightChanged<PySide.QtDeclarative.QDeclarativeItem.implicitHeightChanged>` ()
*    def :meth:`implicitWidthChanged<PySide.QtDeclarative.QDeclarativeItem.implicitWidthChanged>` ()
*    def :meth:`parentChanged<PySide.QtDeclarative.QDeclarativeItem.parentChanged>` (arg__1)
*    def :meth:`smoothChanged<PySide.QtDeclarative.QDeclarativeItem.smoothChanged>` (arg__1)
*    def :meth:`stateChanged<PySide.QtDeclarative.QDeclarativeItem.stateChanged>` (arg__1)
*    def :meth:`transformOriginChanged<PySide.QtDeclarative.QDeclarativeItem.transformOriginChanged>` (arg__1)


Detailed Description
--------------------



    The :class:`PySide.QtDeclarative.QDeclarativeItem` class provides the most basic of all visual items in QML.

    All visual items in Qt Declarative inherit from :class:`PySide.QtDeclarative.QDeclarativeItem` . Although :class:`PySide.QtDeclarative.QDeclarativeItem` has no visual appearance, it defines all the properties that are common across visual items - such as the x and y position, the width and height, :ref:`anchoring<qml-anchor-layout.html>` and key handling.

    You can subclass :class:`PySide.QtDeclarative.QDeclarativeItem` to provide your own custom visual item that inherits these features. Note that, because it does not draw anything, :class:`PySide.QtDeclarative.QDeclarativeItem` sets the :attr:`QGraphicsItem.ItemHasNoContents<QGraphicsItem.GraphicsItemFlag>` flag. If you subclass :class:`PySide.QtDeclarative.QDeclarativeItem` to create a visual item, you will need to unset this flag.


.. class:: QDeclarativeItem([parent=None])

    :param parent: :class:`PySide.QtDeclarative.QDeclarativeItem`

    Constructs a :class:`PySide.QtDeclarative.QDeclarativeItem` with the given ``parent`` .


.. attribute:: PySide.QtDeclarative.QDeclarativeItem.TransformOrigin

    Controls the point about which simple transforms like scale apply.

    +----------------------------+--------------------------------------------+
    |Constant                    |Description                                 |
    +============================+============================================+
    |QDeclarativeItem.TopLeft    |The top-left corner of the item.            |
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.Top        |The center point of the top of the item.    |
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.TopRight   |The top-right corner of the item.           |
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.Left       |The left most point of the vertical middle. |
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.Center     |The center of the item.                     |
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.Right      |The right most point of the vertical middle.|
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.BottomLeft |The bottom-left corner of the item.         |
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.Bottom     |The center point of the bottom of the item. |
    +----------------------------+--------------------------------------------+
    |QDeclarativeItem.BottomRight|The bottom-right corner of the item.        |
    +----------------------------+--------------------------------------------+


.. method:: PySide.QtDeclarative.QDeclarativeItem.activeFocusChanged(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtDeclarative.QDeclarativeItem.baselineOffset()


    :rtype: :class:`PySide.QtCore.qreal`




    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.setBaselineOffset` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.baselineOffsetChanged(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`






.. method:: PySide.QtDeclarative.QDeclarativeItem.childAt(x, y)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtDeclarative.QDeclarativeItem`







.. method:: PySide.QtDeclarative.QDeclarativeItem.childrenRect()


    :rtype: :class:`PySide.QtCore.QRectF`






.. method:: PySide.QtDeclarative.QDeclarativeItem.childrenRectChanged(arg__1)


    :param arg__1: :class:`PySide.QtCore.QRectF`






.. method:: PySide.QtDeclarative.QDeclarativeItem.clip()


    :rtype: :class:`PySide.QtCore.bool`




    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.setClip` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.clipChanged(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtDeclarative.QDeclarativeItem.focusChanged(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtDeclarative.QDeclarativeItem.forceActiveFocus()









.. method:: PySide.QtDeclarative.QDeclarativeItem.geometryChanged(newGeometry, oldGeometry)


    :param newGeometry: :class:`PySide.QtCore.QRectF`
    :param oldGeometry: :class:`PySide.QtCore.QRectF`




    This function is called to handle this item's changes in geometry from ``oldGeometry`` to ``newGeometry`` . If the two geometries are the same, it doesn't do anything.



.. method:: PySide.QtDeclarative.QDeclarativeItem.hasActiveFocus()


    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtDeclarative.QDeclarativeItem.height()


    :rtype: :class:`PySide.QtCore.qreal`




    Return the height of the item



.. method:: PySide.QtDeclarative.QDeclarativeItem.heightValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the height property has been set explicitly.



.. method:: PySide.QtDeclarative.QDeclarativeItem.implicitHeight()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the height of the item that is implied by other properties that determine the content.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.setImplicitHeight` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.implicitHeightChanged()








.. method:: PySide.QtDeclarative.QDeclarativeItem.implicitWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the width of the item that is implied by other properties that determine the content.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.setImplicitWidth` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.implicitWidthChanged()








.. method:: PySide.QtDeclarative.QDeclarativeItem.inputMethodPreHandler(arg__1)


    :param arg__1: :class:`PySide.QtGui.QInputMethodEvent`






.. method:: PySide.QtDeclarative.QDeclarativeItem.isComponentComplete()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if construction of the QML component is complete; otherwise returns false.

    It is often desirable to delay some processing until the component is completed.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.componentComplete` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.keepMouseGrab()


    :rtype: :class:`PySide.QtCore.bool`




    Returns a value indicating whether mouse input should remain with this item exclusively.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.setKeepMouseGrab` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.keyPressPreHandler(arg__1)


    :param arg__1: :class:`PySide.QtGui.QKeyEvent`






.. method:: PySide.QtDeclarative.QDeclarativeItem.keyReleasePreHandler(arg__1)


    :param arg__1: :class:`PySide.QtGui.QKeyEvent`






.. method:: PySide.QtDeclarative.QDeclarativeItem.mapFromItem(item, x, y)


    :param item: :class:`PySide.QtScript.QScriptValue`
    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtScript.QScriptValue`







.. method:: PySide.QtDeclarative.QDeclarativeItem.mapToItem(item, x, y)


    :param item: :class:`PySide.QtScript.QScriptValue`
    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtScript.QScriptValue`







.. method:: PySide.QtDeclarative.QDeclarativeItem.parentChanged(arg__1)


    :param arg__1: :class:`PySide.QtDeclarative.QDeclarativeItem`






.. method:: PySide.QtDeclarative.QDeclarativeItem.resetHeight()






    Reset the height of the item



.. method:: PySide.QtDeclarative.QDeclarativeItem.resetWidth()






    Reset the width of the item



.. method:: PySide.QtDeclarative.QDeclarativeItem.setBaselineOffset(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`




    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.baselineOffset` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setClip(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.clip` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setFocus(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtDeclarative.QDeclarativeItem.setHeight(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`




    Set the height of the item



.. method:: PySide.QtDeclarative.QDeclarativeItem.setImplicitHeight(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`




    Sets the implied height of the item to ``h`` . This is the height implied by other properties that determine the content.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.implicitHeight` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setImplicitWidth(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`




    Sets the implied width of the item to ``w`` . This is the width implied by other properties that determine the content.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.implicitWidth` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setKeepMouseGrab(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    The flag indicating whether the mouse should remain with this item is set to ``keep`` .

    This is useful for items that wish to grab and keep mouse interaction following a predefined gesture. For example, an item that is interested in horizontal mouse movement may set keepMouseGrab to true once a threshold has been exceeded. Once keepMouseGrab has been set to true, filtering items will not react to mouse events.

    If the item does not indicate that it wishes to retain mouse grab, a filtering item may steal the grab. For example, Flickable may attempt to steal a mouse grab if it detects that the user has begun to move the viewport.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.keepMouseGrab` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setParentItem(parent)


    :param parent: :class:`PySide.QtDeclarative.QDeclarativeItem`




    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.parentItem` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setSize(size)


    :param size: :class:`PySide.QtCore.QSizeF`






.. method:: PySide.QtDeclarative.QDeclarativeItem.setSmooth(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    Sets whether the item should be drawn with antialiasing and smooth pixmap filtering to ``smooth`` .

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.smooth` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setTransformOrigin(arg__1)


    :param arg__1: :attr:`PySide.QtDeclarative.QDeclarativeItem.TransformOrigin`




    Set the transform ``origin`` .

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.transformOrigin` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.setWidth(arg__1)


    :param arg__1: :class:`PySide.QtCore.qreal`




    Set the width of the item



.. method:: PySide.QtDeclarative.QDeclarativeItem.smooth()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item should be drawn with antialiasing and smooth pixmap filtering, false otherwise.

    The default is false.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.setSmooth` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.smoothChanged(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtDeclarative.QDeclarativeItem.stateChanged(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtDeclarative.QDeclarativeItem.transformOrigin()


    :rtype: :attr:`PySide.QtDeclarative.QDeclarativeItem.TransformOrigin`




    Returns the current transform origin.

    .. seealso::  :meth:`PySide.QtDeclarative.QDeclarativeItem.setTransformOrigin` 


.. method:: PySide.QtDeclarative.QDeclarativeItem.transformOriginChanged(arg__1)


    :param arg__1: :attr:`PySide.QtDeclarative.QDeclarativeItem.TransformOrigin`






.. method:: PySide.QtDeclarative.QDeclarativeItem.width()


    :rtype: :class:`PySide.QtCore.qreal`




    Return the width of the item



.. method:: PySide.QtDeclarative.QDeclarativeItem.widthValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the width property has been set explicitly.




