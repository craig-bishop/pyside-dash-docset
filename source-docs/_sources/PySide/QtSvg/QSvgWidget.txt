.. module:: PySide.QtSvg
.. _QSvgWidget:

QSvgWidget
**********

.. inheritance-diagram:: QSvgWidget
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`renderer<PySide.QtSvg.QSvgWidget.renderer>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`load<PySide.QtSvg.QSvgWidget.load>` (contents)
*    def :meth:`load<PySide.QtSvg.QSvgWidget.load>` (file)


Detailed Description
--------------------



    The :class:`PySide.QtSvg.QSvgWidget` class provides a widget that is used to display the contents of Scalable Vector Graphics (SVG) files.

    This class enables developers to display SVG drawings alongside standard widgets, and is used in much the same way as :class:`PySide.QtGui.QLabel` is used for displaying text and bitmap images.

    Since :class:`PySide.QtSvg.QSvgWidget` is a subclass of :class:`PySide.QtGui.QWidget` , SVG drawings are rendered using the properties of the display. More control can be exercised over the rendering process with the :class:`PySide.QtSvg.QSvgRenderer` class, as this can be used to paint onto other paint devices, such as :class:`PySide.QtGui.QImage` and :class:`PySide.QtOpenGL.QGLWidget` . The renderer used by the widget can be obtained with the :meth:`PySide.QtSvg.QSvgWidget.renderer` function.

    Each :class:`PySide.QtSvg.QSvgWidget` can be constructed with the file name of a SVG file, or they can be constructed without a specific file to render and one can be supplied later. The :meth:`PySide.QtSvg.QSvgWidget.load` functions provide two different ways to load an SVG file: they accept either the file name of an SVG file or a :class:`PySide.QtCore.QByteArray` containing the serialized XML representation of an SVG file.

    By default, the widget provides a size hint to reflect the size of the drawing that it displays. If no data has been loaded, the widget provides the default :class:`PySide.QtGui.QWidget` size hint. Subclass this class and reimplement :meth:`PySide.QtSvg.QSvgWidget.sizeHint` if you need to customize this behavior.

    .. seealso::  :class:`PySide.QtSvg.QSvgRenderer`  :ref:`QtSvg Module<QtSvg>`  :class:`PySide.QtGui.QPicture` 

.. class:: QSvgWidget([parent=None])
           QSvgWidget(file[, parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`
    :param file: unicode

    Constructs a new SVG display widget with the given ``parent`` .


    Constructs a new SVG display widget with the given ``parent`` and loads the contents of the specified ``file`` .


.. method:: PySide.QtSvg.QSvgWidget.load(file)


    :param file: unicode




    Loads the contents of the specified SVG ``file`` and updates the widget.



.. method:: PySide.QtSvg.QSvgWidget.load(contents)


    :param contents: :class:`PySide.QtCore.QByteArray`




    Loads the specified SVG format ``contents`` and updates the widget.



.. method:: PySide.QtSvg.QSvgWidget.renderer()


    :rtype: :class:`PySide.QtSvg.QSvgRenderer`




    Returns the renderer used to display the contents of the widget.




