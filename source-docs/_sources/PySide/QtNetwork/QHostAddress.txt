.. module:: PySide.QtNetwork
.. _QHostAddress:

QHostAddress
************

.. inheritance-diagram:: QHostAddress
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtNetwork.QHostAddress.__eq__>` (address)
*    def :meth:`__eq__<PySide.QtNetwork.QHostAddress.__eq__>` (address)
*    def :meth:`__ne__<PySide.QtNetwork.QHostAddress.__ne__>` (address)
*    def :meth:`__ne__<PySide.QtNetwork.QHostAddress.__ne__>` (address)
*    def :meth:`clear<PySide.QtNetwork.QHostAddress.clear>` ()
*    def :meth:`isInSubnet<PySide.QtNetwork.QHostAddress.isInSubnet>` (subnet)
*    def :meth:`isInSubnet<PySide.QtNetwork.QHostAddress.isInSubnet>` (subnet, netmask)
*    def :meth:`isNull<PySide.QtNetwork.QHostAddress.isNull>` ()
*    def :meth:`protocol<PySide.QtNetwork.QHostAddress.protocol>` ()
*    def :meth:`scopeId<PySide.QtNetwork.QHostAddress.scopeId>` ()
*    def :meth:`setAddress<PySide.QtNetwork.QHostAddress.setAddress>` (address)
*    def :meth:`setAddress<PySide.QtNetwork.QHostAddress.setAddress>` (ip4Addr)
*    def :meth:`setAddress<PySide.QtNetwork.QHostAddress.setAddress>` (ip6Addr)
*    def :meth:`setScopeId<PySide.QtNetwork.QHostAddress.setScopeId>` (id)
*    def :meth:`toIPv4Address<PySide.QtNetwork.QHostAddress.toIPv4Address>` ()
*    def :meth:`toIPv6Address<PySide.QtNetwork.QHostAddress.toIPv6Address>` ()
*    def :meth:`toString<PySide.QtNetwork.QHostAddress.toString>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`parseSubnet<PySide.QtNetwork.QHostAddress.parseSubnet>` (subnet)


Detailed Description
--------------------



    The :class:`PySide.QtNetwork.QHostAddress` class provides an IP address.

    This class holds an IPv4 or IPv6 address in a platform- and protocol-independent manner.

    :class:`PySide.QtNetwork.QHostAddress` is normally used with the :class:`PySide.QtNetwork.QTcpSocket` , :class:`PySide.QtNetwork.QTcpServer` , and :class:`PySide.QtNetwork.QUdpSocket` to connect to a host or to set up a server.

    A host address is set with :meth:`PySide.QtNetwork.QHostAddress.setAddress` , and retrieved with :meth:`PySide.QtNetwork.QHostAddress.toIPv4Address` , :meth:`PySide.QtNetwork.QHostAddress.toIPv6Address` , or :meth:`PySide.QtNetwork.QHostAddress.toString` . You can check the type with :meth:`PySide.QtNetwork.QHostAddress.protocol` .

    .. note::  Please note that :class:`PySide.QtNetwork.QHostAddress` does not do DNS lookups. :class:`PySide.QtNetwork.QHostInfo` is needed for that.

    The class also supports common predefined addresses: :attr:`Null<QHostAddress.SpecialAddress>` , :attr:`LocalHost<QHostAddress.SpecialAddress>` , :attr:`LocalHostIPv6<QHostAddress.SpecialAddress>` , :attr:`Broadcast<QHostAddress.SpecialAddress>` , and :attr:`Any<QHostAddress.SpecialAddress>` .

    .. seealso::  :class:`PySide.QtNetwork.QHostInfo`  :class:`PySide.QtNetwork.QTcpSocket`  :class:`PySide.QtNetwork.QTcpServer`  :class:`PySide.QtNetwork.QUdpSocket` 

.. class:: QHostAddress()
           QHostAddress(address)
           QHostAddress(copy)
           QHostAddress(ip6Addr)
           QHostAddress(address)
           QHostAddress(ip4Addr)

    :param copy: :class:`PySide.QtNetwork.QHostAddress`
    :param ip4Addr: :class:`PySide.QtCore.quint32`
    :param ip6Addr: :class:`PySide.QtNetwork.QIPv6Address`
    :param address: :attr:`PySide.QtNetwork.QHostAddress.SpecialAddress`

    Constructs a host address object with the IP address 0.0.0.0.

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.clear` 

    Constructs a :class:`PySide.QtNetwork.QHostAddress` object for ``address`` .


    Constructs a copy of the given ``address`` .




    Constructs an IPv4 or IPv6 address based on the string ``address`` (e.g., "127.0.0.1").

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.setAddress` 

    Constructs a host address object with the IPv4 address ``ip4Addr`` .



.. attribute:: PySide.QtNetwork.QHostAddress.SpecialAddress

    +--------------------------+------------------------------------------------------------------------------------------------------+
    |Constant                  |Description                                                                                           |
    +==========================+======================================================================================================+
    |QHostAddress.Null         |The null address object. Equivalent to :meth:`PySide.QtNetwork.QHostAddress.QHostAddress` .           |
    +--------------------------+------------------------------------------------------------------------------------------------------+
    |QHostAddress.LocalHost    |The IPv4 localhost address. Equivalent to :class:`PySide.QtNetwork.QHostAddress` ("127.0.0.1").       |
    +--------------------------+------------------------------------------------------------------------------------------------------+
    |QHostAddress.LocalHostIPv6|The IPv6 localhost address. Equivalent to :class:`PySide.QtNetwork.QHostAddress` ("::1").             |
    +--------------------------+------------------------------------------------------------------------------------------------------+
    |QHostAddress.Broadcast    |The IPv4 broadcast address. Equivalent to :class:`PySide.QtNetwork.QHostAddress` ("255.255.255.255"). |
    +--------------------------+------------------------------------------------------------------------------------------------------+
    |QHostAddress.Any          |The IPv4 any-address. Equivalent to :class:`PySide.QtNetwork.QHostAddress` ("0.0.0.0").               |
    +--------------------------+------------------------------------------------------------------------------------------------------+
    |QHostAddress.AnyIPv6      |The IPv6 any-address. Equivalent to :class:`PySide.QtNetwork.QHostAddress` (" :ref:`.<index.html>` ").|
    +--------------------------+------------------------------------------------------------------------------------------------------+


.. method:: PySide.QtNetwork.QHostAddress.clear()






    Sets the host address to 0.0.0.0.



.. method:: PySide.QtNetwork.QHostAddress.isInSubnet(subnet)


    :param subnet: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtNetwork.QHostAddress.isInSubnet(subnet, netmask)


    :param subnet: :class:`PySide.QtNetwork.QHostAddress`
    :param netmask: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this IP is in the subnet described by the network prefix ``subnet`` and netmask ``netmask`` .

    An IP is considered to belong to a subnet if it is contained between the lowest and the highest address in that subnet. In the case of IP version 4, the lowest address is the network address, while the highest address is the broadcast address.

    The ``subnet`` argument does not have to be the actual network address (the lowest address in the subnet). It can be any valid IP belonging to that subnet. In particular, if it is equal to the IP address held by this object, this function will always return true (provided the netmask is a valid value).

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.parseSubnet` 


.. method:: PySide.QtNetwork.QHostAddress.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this host address is null (INADDR\_ANY or in6addr\_any). The default constructor creates a null address, and that address is not valid for any host or interface.



.. method:: PySide.QtNetwork.QHostAddress.__ne__(address)


    :param address: :attr:`PySide.QtNetwork.QHostAddress.SpecialAddress`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this host address is not the same as the ``other`` address given; otherwise returns false.



.. method:: PySide.QtNetwork.QHostAddress.__ne__(address)


    :param address: :class:`PySide.QtNetwork.QHostAddress`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this host address is not the same as the ``other`` address given; otherwise returns false.



.. method:: PySide.QtNetwork.QHostAddress.__eq__(address)


    :param address: :class:`PySide.QtNetwork.QHostAddress`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this host address is the same as the ``other`` address given; otherwise returns false.



.. method:: PySide.QtNetwork.QHostAddress.__eq__(address)


    :param address: :attr:`PySide.QtNetwork.QHostAddress.SpecialAddress`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this host address is the same as the ``other`` address given; otherwise returns false.



.. staticmethod:: PySide.QtNetwork.QHostAddress.parseSubnet(subnet)


    :param subnet: unicode
    :rtype: 




    Parses the IP and subnet information contained in ``subnet`` and returns the network prefix for that network and its prefix length.

    The IP address and the netmask must be separated by a slash (/).

    This function supports arguments in the form:


    * 123.123.123.123/n where n is any value between 0 and 32
    * 123.123.123.123/255.255.255.255
    * <ipv6-address>/n where n is any value between 0 and 128

    For IP version 4, this function accepts as well missing trailing components (i.e., less than 4 octets, like "192.168.1"), followed or not by a dot. If the netmask is also missing in that case, it is set to the number of octets actually passed (in the example above, it would be 24, for 3 octets).

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.isInSubnet` 


.. method:: PySide.QtNetwork.QHostAddress.protocol()


    :rtype: :attr:`PySide.QtNetwork.QAbstractSocket.NetworkLayerProtocol`




    Returns the network layer protocol of the host address.



.. method:: PySide.QtNetwork.QHostAddress.scopeId()


    :rtype: unicode




    Returns the scope ID of an IPv6 address. For IPv4 addresses, or if the address does not contain a scope ID, an empty :class:`PySide.QtCore.QString` is returned.

    The IPv6 scope ID specifies the scope of *reachability* for non-global IPv6 addresses, limiting the area in which the address can be used. All IPv6 addresses are associated with such a reachability scope. The scope ID is used to disambiguate addresses that are not guaranteed to be globally unique.

    IPv6 specifies the following four levels of reachability:


    * Node-local: Addresses that are only used for communicating with services on the same interface (e.g., the loopback interface "::1").
    * Link-local: Addresses that are local to the network interface (*link*). There is always one link-local address for each IPv6 interface on your host. Link-local addresses ("fe80...") are generated from the MAC address of the local network adaptor, and are not guaranteed to be unique.
    * Site-local: Addresses that are local to the site / private network (e.g., the company intranet). Site-local addresses ("fec0...") are usually distributed by the site router, and are not guaranteed to be unique outside of the local site.
    * Global: For globally routable addresses, such as public servers on the Internet.

    When using a link-local or site-local address for IPv6 connections, you must specify the scope ID. The scope ID for a link-local address is usually the same as the interface name (e.g., "eth0", "en1") or number (e.g., "1", "2").

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.setScopeId` 


.. method:: PySide.QtNetwork.QHostAddress.setAddress(ip4Addr)


    :param ip4Addr: :class:`PySide.QtCore.quint32`




    Set the IPv4 address specified by ``ip4Addr`` .



.. method:: PySide.QtNetwork.QHostAddress.setAddress(ip6Addr)


    :param ip6Addr: :class:`PySide.QtNetwork.QIPv6Address`







.. method:: PySide.QtNetwork.QHostAddress.setAddress(address)


    :param address: unicode
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Sets the IPv4 or IPv6 address specified by the string representation specified by ``address`` (e.g. "127.0.0.1"). Returns true and sets the address if the address was successfully parsed; otherwise returns false.



.. method:: PySide.QtNetwork.QHostAddress.setScopeId(id)


    :param id: unicode




    Sets the IPv6 scope ID of the address to ``id`` . If the address protocol is not IPv6, this function does nothing.

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.scopeId` 


.. method:: PySide.QtNetwork.QHostAddress.toIPv4Address()


    :rtype: :class:`PySide.QtCore.quint32`




    Returns the IPv4 address as a number.

    For example, if the address is 127.0.0.1, the returned value is 2130706433 (i.e. 0x7f000001).

    This value is only valid if the Protocol() is :attr:`IPv4Protocol<QAbstractSocket.NetworkLayerProtocol>` .

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.toString` 


.. method:: PySide.QtNetwork.QHostAddress.toIPv6Address()


    :rtype: :class:`PySide.QtNetwork.QIPv6Address`




    Returns the IPv6 address as a :class:`~PySide.QtNetwork.Q\_IPV6ADDR` structure. The structure consists of 16 unsigned characters.

    ::

        addr = hostAddr.toIPv6Address()
        # addr contains 16 unsigned characters

        for i in range(0, 16):
            # process addr[i]


    This value is only valid if the :meth:`PySide.QtNetwork.QHostAddress.protocol` is :attr:`IPv6Protocol<QAbstractSocket.NetworkLayerProtocol>` .

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.toString` 


.. method:: PySide.QtNetwork.QHostAddress.toString()


    :rtype: unicode




    Returns the address as a string.

    For example, if the address is the IPv4 address 127.0.0.1, the returned string is "127.0.0.1".

    .. seealso::  :meth:`PySide.QtNetwork.QHostAddress.toIPv4Address` 



