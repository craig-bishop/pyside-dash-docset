.. module:: PySide.QtNetwork
.. _QUdpSocket:

QUdpSocket
**********

.. inheritance-diagram:: QUdpSocket
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`bind<PySide.QtNetwork.QUdpSocket.bind>` ([port=0])
*    def :meth:`bind<PySide.QtNetwork.QUdpSocket.bind>` (address, port)
*    def :meth:`bind<PySide.QtNetwork.QUdpSocket.bind>` (address, port, mode)
*    def :meth:`bind<PySide.QtNetwork.QUdpSocket.bind>` (port, mode)
*    def :meth:`hasPendingDatagrams<PySide.QtNetwork.QUdpSocket.hasPendingDatagrams>` ()
*    def :meth:`pendingDatagramSize<PySide.QtNetwork.QUdpSocket.pendingDatagramSize>` ()
*    def :meth:`readDatagram<PySide.QtNetwork.QUdpSocket.readDatagram>` (, maxlen)
*    def :meth:`writeDatagram<PySide.QtNetwork.QUdpSocket.writeDatagram>` (datagram, host, port)


Detailed Description
--------------------



    The :class:`PySide.QtNetwork.QUdpSocket` class provides a UDP socket.

    UDP (User Datagram Protocol) is a lightweight, unreliable, datagram-oriented, connectionless protocol. It can be used when reliability isn't important. :class:`PySide.QtNetwork.QUdpSocket` is a subclass of :class:`PySide.QtNetwork.QAbstractSocket` that allows you to send and receive UDP datagrams.

    The most common way to use this class is to bind to an address and port using :meth:`PySide.QtNetwork.QUdpSocket.bind` , then call :meth:`PySide.QtNetwork.QUdpSocket.writeDatagram` and :meth:`PySide.QtNetwork.QUdpSocket.readDatagram` to transfer data. If you want to use the standard :class:`PySide.QtCore.QIODevice` functions :meth:`PySide.QtCore.QIODevice.read` , :meth:`PySide.QtCore.QIODevice.readLine` , :meth:`PySide.QtCore.QIODevice.write` , etc., you must first connect the socket directly to a peer by calling :meth:`PySide.QtNetwork.QAbstractSocket.connectToHost` .

    The socket emits the :meth:`PySide.QtCore.QIODevice.bytesWritten` signal every time a datagram is written to the network. If you just want to send datagrams, you don't need to call :meth:`PySide.QtNetwork.QUdpSocket.bind` .

    The :meth:`PySide.QtCore.QIODevice.readyRead` signal is emitted whenever datagrams arrive. In that case, :meth:`PySide.QtNetwork.QUdpSocket.hasPendingDatagrams` returns true. Call :meth:`PySide.QtNetwork.QUdpSocket.pendingDatagramSize` to obtain the size of the first pending datagram, and :meth:`PySide.QtNetwork.QUdpSocket.readDatagram` to read it.

    .. note::  An incoming datagram should be read when you receive the :meth:`PySide.QtCore.QIODevice.readyRead` signal, otherwise this signal will not be emitted for the next datagram.

    Example:

    ::

        def initSocket(self):
            udpSocket = QUdpSocket(self)
            udpSocket.bind(QHostAddress.LocalHost, 7755)

            self.connect(udpSocket, SIGNAL('readyRead()'),
                         self, SLOT('readPendingDatagrams()'))

        def readPendingDatagrams(self):
            while udpSocket.hasPendingDatagrams():
                datagram = QByteArray()
                datagram.resize(udpSocket.pendingDatagramSize())

                (sender, senderPort) = udpSocket.readDatagram(datagram.data(), datagram.size())

                processTheDatagram(datagram)


    With :class:`PySide.QtNetwork.QUdpSocket` , you can also establish a virtual connection to a UDP server using :meth:`PySide.QtNetwork.QAbstractSocket.connectToHost` and then use :meth:`PySide.QtCore.QIODevice.read` and :meth:`PySide.QtCore.QIODevice.write` to exchange datagrams without specifying the receiver for each datagram.

    The :ref:`Broadcast Sender<network/broadcastsender>` and :ref:`Broadcast Receiver<network/broadcastreceiver>` examples illustrate how to use :class:`PySide.QtNetwork.QUdpSocket` in applications.

    .. _PySide.QtNetwork.QUdpSocket_symbian-platform-security-requirements:



Symbian Platform Security Requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    On Symbian, processes which use this class must have the ``NetworkServices`` platform security capability. If the client process lacks this capability, operations will result in a panic.

    Platform security capabilities are added via the :ref:`TARGET.CAPABILITY<qmake-variable-reference.html>` qmake variable.

    .. seealso::  :class:`PySide.QtNetwork.QTcpSocket` 

.. class:: QUdpSocket([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Creates a :class:`PySide.QtNetwork.QUdpSocket` object.

    ``parent`` is passed to the :class:`PySide.QtCore.QObject` constructor.

    .. seealso::  :meth:`PySide.QtNetwork.QAbstractSocket.socketType` 

.. attribute:: PySide.QtNetwork.QUdpSocket.BindFlag

    This enum describes the different flags you can pass to modify the behavior of :meth:`QUdpSocket.bind()<PySide.QtNetwork.QUdpSocket.bind>` .

    .. note::  On Symbian OS bind flags behaviour depends on process capabilties. If process has NetworkControl capability, the bind attempt with :attr:`ReuseAddressHint<QUdpSocket.BindFlag>` will always succeed even if the address and port is already bound by another socket with any flags. If process does not have NetworkControl capability, the bind attempt to address and port already bound by another socket will always fail.


    |Constant                     |Description|

    |QUdpSocket.ShareAddress      |Allow other services to bind to the same address and port. This is useful when multiple processes share the load of a single service by listening to the same address and port (e.g., a web server with several pre-forked listeners can greatly improve response time). However, because any service is allowed to rebind, this option is subject to certain security considerations. Note that by combining this option with :attr:`ReuseAddressHint<QUdpSocket.BindFlag>` , you will also allow your service to rebind an existing shared address. On Unix, this is equivalent to the SO\_REUSEADDR socket option. On Windows, this option is ignored.                                                                                                                     |
    +-----------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QUdpSocket.DontShareAddress  |Bind the address and port exclusively, so that no other services are allowed to rebind. By passing this option to :meth:`QUdpSocket.bind()<PySide.QtNetwork.QUdpSocket.bind>` , you are guaranteed that on successs, your service is the only one that listens to the address and port. No services are allowed to rebind, even if they pass :attr:`ReuseAddressHint<QUdpSocket.BindFlag>` . This option provides more security than :attr:`ShareAddress<QUdpSocket.BindFlag>` , but on certain operating systems, it requires you to run the server with administrator privileges. On Unix and Mac OS X, not sharing is the default behavior for binding an address and port, so this option is ignored. On Windows, this option uses the SO\_EXCLUSIVEADDRUSE socket option.|

    |QUdpSocket.ReuseAddressHint  |Provides a hint to :class:`PySide.QtNetwork.QUdpSocket` that it should try to rebind the service even if the address and port are already bound by another socket. On Windows, this is equivalent to the SO\_REUSEADDR socket option. On Unix, this option is ignored.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |

    |QUdpSocket.DefaultForPlatform|The default option for the current platform. On Unix and Mac OS X, this is equivalent to ( :attr:`DontShareAddress<QUdpSocket.BindFlag>` + :attr:`ReuseAddressHint<QUdpSocket.BindFlag>` ), and on Windows, its equivalent to :attr:`ShareAddress<QUdpSocket.BindFlag>` .                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |



.. method:: PySide.QtNetwork.QUdpSocket.bind(port, mode)


    :param port: :class:`PySide.QtCore.quint16`
    :param mode: :class:`PySide.QtNetwork.QUdpSocket.BindMode`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtNetwork.QUdpSocket.bind([port=0])


    :param port: :class:`PySide.QtCore.quint16`
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Binds to :class:`PySide.QtNetwork.QHostAddress` :Any on port ``port`` .



.. method:: PySide.QtNetwork.QUdpSocket.bind(address, port, mode)


    :param address: :class:`PySide.QtNetwork.QHostAddress`
    :param port: :class:`PySide.QtCore.quint16`
    :param mode: :class:`PySide.QtNetwork.QUdpSocket.BindMode`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtNetwork.QUdpSocket.bind(address, port)


    :param address: :class:`PySide.QtNetwork.QHostAddress`
    :param port: :class:`PySide.QtCore.quint16`
    :rtype: :class:`PySide.QtCore.bool`




    Binds this socket to the address ``address`` and the port ``port`` . When bound, the signal :meth:`PySide.QtCore.QIODevice.readyRead` is emitted whenever a UDP datagram arrives on the specified address and port. This function is useful to write UDP servers.

    On success, the functions returns true and the socket enters :attr:`BoundState<QAbstractSocket.SocketState>` ; otherwise it returns false.

    The socket is bound using the :attr:`DefaultForPlatform<QUdpSocket.BindFlag>` :class:`~PySide.QtNetwork.BindMode` .

    .. seealso::  :meth:`PySide.QtNetwork.QUdpSocket.readDatagram` 


.. method:: PySide.QtNetwork.QUdpSocket.hasPendingDatagrams()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if at least one datagram is waiting to be read; otherwise returns false.

    .. seealso::  :meth:`PySide.QtNetwork.QUdpSocket.pendingDatagramSize`  :meth:`PySide.QtNetwork.QUdpSocket.readDatagram` 


.. method:: PySide.QtNetwork.QUdpSocket.pendingDatagramSize()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the size of the first pending UDP datagram. If there is no datagram available, this function returns -1.

    .. seealso::  :meth:`PySide.QtNetwork.QUdpSocket.hasPendingDatagrams`  :meth:`PySide.QtNetwork.QUdpSocket.readDatagram` 


.. method:: PySide.QtNetwork.QUdpSocket.readDatagram(, maxlen)


    :param maxlen: :class:`PySide.QtCore.qint64`
    :rtype: (data, address, port)




    Receives a datagram no larger than ``maxSize`` bytes and stores it in ``data`` . The sender's host address and port is stored in \*``address`` and \*``port`` (unless the pointers are 0).

    Returns the size of the datagram on success; otherwise returns -1.

    If ``maxSize`` is too small, the rest of the datagram will be lost. To avoid loss of data, call :meth:`PySide.QtNetwork.QUdpSocket.pendingDatagramSize` to determine the size of the pending datagram before attempting to read it. If ``maxSize`` is 0, the datagram will be discarded.

    .. seealso::  :meth:`PySide.QtNetwork.QUdpSocket.writeDatagram`  :meth:`PySide.QtNetwork.QUdpSocket.hasPendingDatagrams`  :meth:`PySide.QtNetwork.QUdpSocket.pendingDatagramSize` 


.. method:: PySide.QtNetwork.QUdpSocket.writeDatagram(datagram, host, port)


    :param datagram: :class:`PySide.QtCore.QByteArray`
    :param host: :class:`PySide.QtNetwork.QHostAddress`
    :param port: :class:`PySide.QtCore.quint16`
    :rtype: :class:`PySide.QtCore.qint64`




    This is an overloaded function.

    Sends the datagram ``datagram`` to the host address ``host`` and at port ``port`` .




