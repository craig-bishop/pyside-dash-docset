.. module:: PySide.QtNetwork
.. _QLocalSocket:

QLocalSocket
************

.. inheritance-diagram:: QLocalSocket
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`abort<PySide.QtNetwork.QLocalSocket.abort>` ()
*    def :meth:`connectToServer<PySide.QtNetwork.QLocalSocket.connectToServer>` (name[, openMode=QIODevice.ReadWrite])
*    def :meth:`disconnectFromServer<PySide.QtNetwork.QLocalSocket.disconnectFromServer>` ()
*    def :meth:`error<PySide.QtNetwork.QLocalSocket.error>` ()
*    def :meth:`flush<PySide.QtNetwork.QLocalSocket.flush>` ()
*    def :meth:`fullServerName<PySide.QtNetwork.QLocalSocket.fullServerName>` ()
*    def :meth:`isValid<PySide.QtNetwork.QLocalSocket.isValid>` ()
*    def :meth:`readBufferSize<PySide.QtNetwork.QLocalSocket.readBufferSize>` ()
*    def :meth:`serverName<PySide.QtNetwork.QLocalSocket.serverName>` ()
*    def :meth:`setReadBufferSize<PySide.QtNetwork.QLocalSocket.setReadBufferSize>` (size)
*    def :meth:`state<PySide.QtNetwork.QLocalSocket.state>` ()
*    def :meth:`waitForConnected<PySide.QtNetwork.QLocalSocket.waitForConnected>` ([msecs=30000])
*    def :meth:`waitForDisconnected<PySide.QtNetwork.QLocalSocket.waitForDisconnected>` ([msecs=30000])


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`connected<PySide.QtNetwork.QLocalSocket.connected>` ()
*    def :meth:`disconnected<PySide.QtNetwork.QLocalSocket.disconnected>` ()
*    def :meth:`error<PySide.QtNetwork.QLocalSocket.error>` (socketError)
*    def :meth:`stateChanged<PySide.QtNetwork.QLocalSocket.stateChanged>` (socketState)


Detailed Description
--------------------



    The :class:`PySide.QtNetwork.QLocalSocket` class provides a local socket.

    On Windows this is a named pipe and on Unix this is a local domain socket.

    If an error occurs, socketError() returns the type of error, and :meth:`PySide.QtCore.QIODevice.errorString` can be called to get a human readable description of what happened.

    Although :class:`PySide.QtNetwork.QLocalSocket` is designed for use with an event loop, it's possible to use it without one. In that case, you must use :meth:`PySide.QtNetwork.QLocalSocket.waitForConnected` , :meth:`PySide.QtNetwork.QLocalSocket.waitForReadyRead` , :meth:`PySide.QtNetwork.QLocalSocket.waitForBytesWritten` , and :meth:`PySide.QtNetwork.QLocalSocket.waitForDisconnected` which blocks until the operation is complete or the timeout expires.

    Note that this feature is not supported on versions of Windows earlier than Windows XP.

    .. seealso::  :class:`PySide.QtNetwork.QLocalServer` 

.. class:: QLocalSocket([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Creates a new local socket. The ``parent`` argument is passed to :class:`PySide.QtCore.QObject` 's constructor.


.. attribute:: PySide.QtNetwork.QLocalSocket.LocalSocketState

    This enum describes the different states in which a socket can be.

    +-----------------------------+-----------------------------------------------------------------------+
    |Constant                     |Description                                                            |
    +=============================+=======================================================================+
    |QLocalSocket.UnconnectedState|The socket is not connected.                                           |
    +-----------------------------+-----------------------------------------------------------------------+
    |QLocalSocket.ConnectingState |The socket has started establishing a connection.                      |
    +-----------------------------+-----------------------------------------------------------------------+
    |QLocalSocket.ConnectedState  |A connection is established.                                           |
    +-----------------------------+-----------------------------------------------------------------------+
    |QLocalSocket.ClosingState    |The socket is about to close (data may still be waiting to be written).|
    +-----------------------------+-----------------------------------------------------------------------+

    .. seealso::  :meth:`QLocalSocket.state()<PySide.QtNetwork.QLocalSocket.state>` 

.. attribute:: PySide.QtNetwork.QLocalSocket.LocalSocketError

    The LocalServerError enumeration represents the errors that can occur. The most recent error can be retrieved through a call to :meth:`QLocalSocket.error()<PySide.QtNetwork.QLocalSocket.error>` .

    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                                    |Description                                                                                                                                               |
    +============================================+==========================================================================================================================================================+
    |QLocalSocket.ConnectionRefusedError         |The connection was refused by the peer (or timed out).                                                                                                    |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.PeerClosedError                |The remote socket closed the connection. Note that the client socket (i.e., this socket) will be closed after the remote close notification has been sent.|
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.ServerNotFoundError            |The local socket name was not found.                                                                                                                      |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.SocketAccessError              |The socket operation failed because the application lacked the required privileges.                                                                       |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.SocketResourceError            |The local system ran out of resources (e.g., too many sockets).                                                                                           |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.SocketTimeoutError             |The socket operation timed out.                                                                                                                           |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.DatagramTooLargeError          |The datagram was larger than the operating system's limit (which can be as low as 8192 bytes).                                                            |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.ConnectionError                |An error occurred with the connection.                                                                                                                    |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.UnsupportedSocketOperationError|The requested socket operation is not supported by the local operating system.                                                                            |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QLocalSocket.UnknownSocketError             |An unidentified error occurred.                                                                                                                           |
    +--------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+


.. method:: PySide.QtNetwork.QLocalSocket.abort()






    Aborts the current connection and resets the socket. Unlike :meth:`PySide.QtNetwork.QLocalSocket.disconnectFromServer` , this function immediately closes the socket, clearing any pending data in the write buffer.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.disconnectFromServer`  :meth:`PySide.QtNetwork.QLocalSocket.close` 


.. method:: PySide.QtNetwork.QLocalSocket.connectToServer(name[, openMode=QIODevice.ReadWrite])


    :param name: unicode
    :param openMode: :class:`PySide.QtCore.QIODevice.OpenMode`







.. method:: PySide.QtNetwork.QLocalSocket.connected()








.. method:: PySide.QtNetwork.QLocalSocket.disconnectFromServer()






    Attempts to close the socket. If there is pending data waiting to be written, :class:`PySide.QtNetwork.QLocalSocket` will enter :attr:`ClosingState<QLocalSocket.LocalSocketState>` and wait until all data has been written. Eventually, it will enter :attr:`UnconnectedState<QLocalSocket.LocalSocketState>` and emit the disconnectedFromServer() signal.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.connectToServer` 


.. method:: PySide.QtNetwork.QLocalSocket.disconnected()








.. method:: PySide.QtNetwork.QLocalSocket.error()


    :rtype: :attr:`PySide.QtNetwork.QLocalSocket.LocalSocketError`




    Returns the type of error that last occurred.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.state`  :meth:`PySide.QtCore.QIODevice.errorString` 


.. method:: PySide.QtNetwork.QLocalSocket.error(socketError)


    :param socketError: :attr:`PySide.QtNetwork.QLocalSocket.LocalSocketError`






.. method:: PySide.QtNetwork.QLocalSocket.flush()


    :rtype: :class:`PySide.QtCore.bool`




    This function writes as much as possible from the internal write buffer to the socket, without blocking. If any data was written, this function returns true; otherwise false is returned.

    Call this function if you need :class:`PySide.QtNetwork.QLocalSocket` to start sending buffered data immediately. The number of bytes successfully written depends on the operating system. In most cases, you do not need to call this function, because :class:`PySide.QtNetwork.QLocalSocket` will start sending data automatically once control goes back to the event loop. In the absence of an event loop, call :meth:`PySide.QtNetwork.QLocalSocket.waitForBytesWritten` instead.

    .. seealso::  :meth:`PySide.QtCore.QIODevice.write`  :meth:`PySide.QtNetwork.QLocalSocket.waitForBytesWritten` 


.. method:: PySide.QtNetwork.QLocalSocket.fullServerName()


    :rtype: unicode




    Returns the server path that the socket is connected to.

    .. note::  The return value of this function is platform specific.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.connectToServer`  :meth:`PySide.QtNetwork.QLocalSocket.serverName` 


.. method:: PySide.QtNetwork.QLocalSocket.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the socket is valid and ready for use; otherwise returns false.

    .. note::  The socket's state must be :attr:`ConnectedState<QLocalSocket.LocalSocketState>` before reading and writing can occur.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.state`  :meth:`PySide.QtNetwork.QLocalSocket.connectToServer` 


.. method:: PySide.QtNetwork.QLocalSocket.readBufferSize()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the size of the internal read buffer. This limits the amount of data that the client can receive before you call :meth:`PySide.QtCore.QIODevice.read` or :meth:`PySide.QtCore.QIODevice.readAll` . A read buffer size of 0 (the default) means that the buffer has no size limit, ensuring that no data is lost.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.setReadBufferSize`  :meth:`PySide.QtCore.QIODevice.read` 


.. method:: PySide.QtNetwork.QLocalSocket.serverName()


    :rtype: unicode




    Returns the name of the peer as specified by :meth:`PySide.QtNetwork.QLocalSocket.connectToServer` , or an empty :class:`PySide.QtCore.QString` if :meth:`PySide.QtNetwork.QLocalSocket.connectToServer` has not been called or it failed.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.connectToServer`  :meth:`PySide.QtNetwork.QLocalSocket.fullServerName` 


.. method:: PySide.QtNetwork.QLocalSocket.setReadBufferSize(size)


    :param size: :class:`PySide.QtCore.qint64`




    Sets the size of :class:`PySide.QtNetwork.QLocalSocket` 's internal read buffer to be ``size`` bytes.

    If the buffer size is limited to a certain size, :class:`PySide.QtNetwork.QLocalSocket` won't buffer more than this size of data. Exceptionally, a buffer size of 0 means that the read buffer is unlimited and all incoming data is buffered. This is the default.

    This option is useful if you only read the data at certain points in time (e.g., in a real-time streaming application) or if you want to protect your socket against receiving too much data, which may eventually cause your application to run out of memory.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.readBufferSize`  :meth:`PySide.QtCore.QIODevice.read` 


.. method:: PySide.QtNetwork.QLocalSocket.state()


    :rtype: :attr:`PySide.QtNetwork.QLocalSocket.LocalSocketState`




    Returns the state of the socket.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.error` 


.. method:: PySide.QtNetwork.QLocalSocket.stateChanged(socketState)


    :param socketState: :attr:`PySide.QtNetwork.QLocalSocket.LocalSocketState`






.. method:: PySide.QtNetwork.QLocalSocket.waitForConnected([msecs=30000])


    :param msecs: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Waits until the socket is connected, up to ``msecs`` milliseconds. If the connection has been established, this function returns true; otherwise it returns false. In the case where it returns false, you can call :meth:`PySide.QtNetwork.QLocalSocket.error` to determine the cause of the error.

    The following example waits up to one second for a connection to be established:

    ::

        socket.connectToServer("market")
        if (socket.waitForConnected(1000))
            print("Connected!")


    If ``msecs`` is -1, this function will not time out.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.connectToServer`  :meth:`PySide.QtNetwork.QLocalSocket.connected` 


.. method:: PySide.QtNetwork.QLocalSocket.waitForDisconnected([msecs=30000])


    :param msecs: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Waits until the socket has disconnected, up to ``msecs`` milliseconds. If the connection has been disconnected, this function returns true; otherwise it returns false. In the case where it returns false, you can call :meth:`PySide.QtNetwork.QLocalSocket.error` to determine the cause of the error.

    The following example waits up to one second for a connection to be closed:

    ::

        socket.disconnectFromServer()
        if (socket.waitForDisconnected(1000))
            print("Disconnected!")


    If ``msecs`` is -1, this function will not time out.

    .. seealso::  :meth:`PySide.QtNetwork.QLocalSocket.disconnectFromServer`  :meth:`PySide.QtNetwork.QLocalSocket.close` 



