.. module:: PySide.QtNetwork
.. _QSslSocket:

QSslSocket
**********

.. inheritance-diagram:: QSslSocket
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addCaCertificate<PySide.QtNetwork.QSslSocket.addCaCertificate>` (certificate)
*    def :meth:`addCaCertificates<PySide.QtNetwork.QSslSocket.addCaCertificates>` (certificates)
*    def :meth:`addCaCertificates<PySide.QtNetwork.QSslSocket.addCaCertificates>` (path[, format=QSsl.Pem[, syntax=QRegExp.FixedString]])
*    def :meth:`caCertificates<PySide.QtNetwork.QSslSocket.caCertificates>` ()
*    def :meth:`ciphers<PySide.QtNetwork.QSslSocket.ciphers>` ()
*    def :meth:`connectToHostEncrypted<PySide.QtNetwork.QSslSocket.connectToHostEncrypted>` (hostName, port, sslPeerName[, mode=QIODevice.ReadWrite])
*    def :meth:`connectToHostEncrypted<PySide.QtNetwork.QSslSocket.connectToHostEncrypted>` (hostName, port[, mode=QIODevice.ReadWrite])
*    def :meth:`encryptedBytesAvailable<PySide.QtNetwork.QSslSocket.encryptedBytesAvailable>` ()
*    def :meth:`encryptedBytesToWrite<PySide.QtNetwork.QSslSocket.encryptedBytesToWrite>` ()
*    def :meth:`ignoreSslErrors<PySide.QtNetwork.QSslSocket.ignoreSslErrors>` (errors)
*    def :meth:`isEncrypted<PySide.QtNetwork.QSslSocket.isEncrypted>` ()
*    def :meth:`localCertificate<PySide.QtNetwork.QSslSocket.localCertificate>` ()
*    def :meth:`mode<PySide.QtNetwork.QSslSocket.mode>` ()
*    def :meth:`peerCertificate<PySide.QtNetwork.QSslSocket.peerCertificate>` ()
*    def :meth:`peerCertificateChain<PySide.QtNetwork.QSslSocket.peerCertificateChain>` ()
*    def :meth:`peerVerifyDepth<PySide.QtNetwork.QSslSocket.peerVerifyDepth>` ()
*    def :meth:`peerVerifyMode<PySide.QtNetwork.QSslSocket.peerVerifyMode>` ()
*    def :meth:`privateKey<PySide.QtNetwork.QSslSocket.privateKey>` ()
*    def :meth:`protocol<PySide.QtNetwork.QSslSocket.protocol>` ()
*    def :meth:`sessionCipher<PySide.QtNetwork.QSslSocket.sessionCipher>` ()
*    def :meth:`setCaCertificates<PySide.QtNetwork.QSslSocket.setCaCertificates>` (certificates)
*    def :meth:`setCiphers<PySide.QtNetwork.QSslSocket.setCiphers>` (ciphers)
*    def :meth:`setCiphers<PySide.QtNetwork.QSslSocket.setCiphers>` (ciphers)
*    def :meth:`setLocalCertificate<PySide.QtNetwork.QSslSocket.setLocalCertificate>` (certificate)
*    def :meth:`setLocalCertificate<PySide.QtNetwork.QSslSocket.setLocalCertificate>` (fileName[, format=QSsl.Pem])
*    def :meth:`setPeerVerifyDepth<PySide.QtNetwork.QSslSocket.setPeerVerifyDepth>` (depth)
*    def :meth:`setPeerVerifyMode<PySide.QtNetwork.QSslSocket.setPeerVerifyMode>` (mode)
*    def :meth:`setPrivateKey<PySide.QtNetwork.QSslSocket.setPrivateKey>` (fileName[, algorithm=QSsl.Rsa[, format=QSsl.Pem[, passPhrase=QByteArray()]]])
*    def :meth:`setPrivateKey<PySide.QtNetwork.QSslSocket.setPrivateKey>` (key)
*    def :meth:`setProtocol<PySide.QtNetwork.QSslSocket.setProtocol>` (protocol)
*    def :meth:`setSslConfiguration<PySide.QtNetwork.QSslSocket.setSslConfiguration>` (config)
*    def :meth:`sslConfiguration<PySide.QtNetwork.QSslSocket.sslConfiguration>` ()
*    def :meth:`sslErrors<PySide.QtNetwork.QSslSocket.sslErrors>` ()
*    def :meth:`waitForEncrypted<PySide.QtNetwork.QSslSocket.waitForEncrypted>` ([msecs=30000])


Slots
^^^^^
.. container:: function_list

*    def :meth:`ignoreSslErrors<PySide.QtNetwork.QSslSocket.ignoreSslErrors>` ()
*    def :meth:`startClientEncryption<PySide.QtNetwork.QSslSocket.startClientEncryption>` ()
*    def :meth:`startServerEncryption<PySide.QtNetwork.QSslSocket.startServerEncryption>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`encrypted<PySide.QtNetwork.QSslSocket.encrypted>` ()
*    def :meth:`encryptedBytesWritten<PySide.QtNetwork.QSslSocket.encryptedBytesWritten>` (totalBytes)
*    def :meth:`modeChanged<PySide.QtNetwork.QSslSocket.modeChanged>` (newMode)
*    def :meth:`peerVerifyError<PySide.QtNetwork.QSslSocket.peerVerifyError>` (error)
*    def :meth:`sslErrors<PySide.QtNetwork.QSslSocket.sslErrors>` (errors)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`addDefaultCaCertificate<PySide.QtNetwork.QSslSocket.addDefaultCaCertificate>` (certificate)
*    def :meth:`addDefaultCaCertificates<PySide.QtNetwork.QSslSocket.addDefaultCaCertificates>` (certificates)
*    def :meth:`addDefaultCaCertificates<PySide.QtNetwork.QSslSocket.addDefaultCaCertificates>` (path[, format=QSsl.Pem[, syntax=QRegExp.FixedString]])
*    def :meth:`defaultCaCertificates<PySide.QtNetwork.QSslSocket.defaultCaCertificates>` ()
*    def :meth:`defaultCiphers<PySide.QtNetwork.QSslSocket.defaultCiphers>` ()
*    def :meth:`setDefaultCaCertificates<PySide.QtNetwork.QSslSocket.setDefaultCaCertificates>` (certificates)
*    def :meth:`setDefaultCiphers<PySide.QtNetwork.QSslSocket.setDefaultCiphers>` (ciphers)
*    def :meth:`supportedCiphers<PySide.QtNetwork.QSslSocket.supportedCiphers>` ()
*    def :meth:`supportsSsl<PySide.QtNetwork.QSslSocket.supportsSsl>` ()
*    def :meth:`systemCaCertificates<PySide.QtNetwork.QSslSocket.systemCaCertificates>` ()


Detailed Description
--------------------



    The :class:`PySide.QtNetwork.QSslSocket` class provides an SSL encrypted socket for both clients and servers.

    :class:`PySide.QtNetwork.QSslSocket` establishes a secure, encrypted TCP connection you can use for transmitting encrypted data. It can operate in both client and server mode, and it supports modern SSL protocols, including SSLv3 and TLSv1. By default, :class:`PySide.QtNetwork.QSslSocket` uses SSLv3, but you can change the SSL protocol by calling :meth:`PySide.QtNetwork.QSslSocket.setProtocol` as long as you do it before the handshake has started.

    SSL encryption operates on top of the existing TCP stream after the socket enters the :attr:`ConnectedState<QAbstractSocket.SocketState>` . There are two simple ways to establish a secure connection using :class:`PySide.QtNetwork.QSslSocket` : With an immediate SSL handshake, or with a delayed SSL handshake occurring after the connection has been established in unencrypted mode.

    The most common way to use :class:`PySide.QtNetwork.QSslSocket` is to construct an object and start a secure connection by calling :meth:`PySide.QtNetwork.QSslSocket.connectToHostEncrypted` . This method starts an immediate SSL handshake once the connection has been established.

    ::

        socket = QSslSocket(self)
        QObject.connect(socket, SIGNAL("encrypted()"), self, SLOT("ready()"))

        socket.connectToHostEncrypted("imap.example.com", 993)


    As with a plain :class:`PySide.QtNetwork.QTcpSocket` , :class:`PySide.QtNetwork.QSslSocket` enters the :attr:`HostLookupState<QAbstractSocket.SocketState>` , :attr:`ConnectingState<QAbstractSocket.SocketState>` , and finally the :attr:`ConnectedState<QAbstractSocket.SocketState>` , if the connection is successful. The handshake then starts automatically, and if it succeeds, the :meth:`PySide.QtNetwork.QSslSocket.encrypted` signal is emitted to indicate the socket has entered the encrypted state and is ready for use.

    Note that data can be written to the socket immediately after the return from :meth:`PySide.QtNetwork.QSslSocket.connectToHostEncrypted` (i.e., before the :meth:`PySide.QtNetwork.QSslSocket.encrypted` signal is emitted). The data is queued in :class:`PySide.QtNetwork.QSslSocket` until after the :meth:`PySide.QtNetwork.QSslSocket.encrypted` signal is emitted.

    An example of using the delayed SSL handshake to secure an existing connection is the case where an SSL server secures an incoming connection. Suppose you create an SSL server class as a subclass of :class:`PySide.QtNetwork.QTcpServer` . You would override :meth:`QTcpServer.incomingConnection()<PySide.QtNetwork.QTcpServer.incomingConnection>` with something like the example below, which first constructs an instance of :class:`PySide.QtNetwork.QSslSocket` and then calls :meth:`PySide.QtNetwork.QSslSocket.setSocketDescriptor` to set the new socket's descriptor to the existing one passed in. It then initiates the SSL handshake by calling :meth:`PySide.QtNetwork.QSslSocket.startServerEncryption` .

    ::

        def incomingConnection(socketDescriptor):
            serverSocket = QSslSocket()
            if serverSocket.setSocketDescriptor(socketDescriptor):
                QObject.connect(serverSocket, SIGNAL("encrypted()"), self, SLOT("ready()"))
                serverSocket.startServerEncryption()


    If an error occurs, :class:`PySide.QtNetwork.QSslSocket` emits the :meth:`PySide.QtNetwork.QSslSocket.sslErrors` signal. In this case, if no action is taken to ignore the error(s), the connection is dropped. To continue, despite the occurrence of an error, you can call :meth:`PySide.QtNetwork.QSslSocket.ignoreSslErrors` , either from within this slot after the error occurs, or any time after construction of the :class:`PySide.QtNetwork.QSslSocket` and before the connection is attempted. This will allow :class:`PySide.QtNetwork.QSslSocket` to ignore the errors it encounters when establishing the identity of the peer. Ignoring errors during an SSL handshake should be used with caution, since a fundamental characteristic of secure connections is that they should be established with a successful handshake.

    Once encrypted, you use :class:`PySide.QtNetwork.QSslSocket` as a regular :class:`PySide.QtNetwork.QTcpSocket` . When :meth:`PySide.QtCore.QIODevice.readyRead` is emitted, you can call :meth:`PySide.QtCore.QIODevice.read` , :meth:`PySide.QtNetwork.QSslSocket.canReadLine` and :meth:`PySide.QtCore.QIODevice.readLine` , or :meth:`PySide.QtCore.QIODevice.getChar` to read decrypted data from :class:`PySide.QtNetwork.QSslSocket` 's internal buffer, and you can call :meth:`PySide.QtCore.QIODevice.write` or :meth:`PySide.QtCore.QIODevice.putChar` to write data back to the peer. :class:`PySide.QtNetwork.QSslSocket` will automatically encrypt the written data for you, and emit :meth:`PySide.QtNetwork.QSslSocket.encryptedBytesWritten` once the data has been written to the peer.

    As a convenience, :class:`PySide.QtNetwork.QSslSocket` supports :class:`PySide.QtNetwork.QTcpSocket` 's blocking functions :meth:`PySide.QtNetwork.QSslSocket.waitForConnected` , :meth:`PySide.QtNetwork.QSslSocket.waitForReadyRead` , :meth:`PySide.QtNetwork.QSslSocket.waitForBytesWritten` , and :meth:`PySide.QtNetwork.QSslSocket.waitForDisconnected` . It also provides :meth:`PySide.QtNetwork.QSslSocket.waitForEncrypted` , which will block the calling thread until an encrypted connection has been established.

    ::

        socket = QSslSocket()
        socket.connectToHostEncrypted("http.example.com", 443)
        if not socket.waitForEncrypted():
            print socket.errorString()
            return false

        socket.write("GET / HTTP/1.0\r\n\r\n")
        while socket.waitForReadyRead():
            print socket.readAll().data()


    :class:`PySide.QtNetwork.QSslSocket` provides an extensive, easy-to-use API for handling cryptographic ciphers, private keys, and local, peer, and Certification Authority (CA) certificates. It also provides an API for handling errors that occur during the handshake phase.

    The following features can also be customized:


    * The socket's cryptographic cipher suite can be customized before the handshake phase with :meth:`PySide.QtNetwork.QSslSocket.setCiphers` and :meth:`PySide.QtNetwork.QSslSocket.setDefaultCiphers` .
    * The socket's local certificate and private key can be customized before the handshake phase with :meth:`PySide.QtNetwork.QSslSocket.setLocalCertificate` and :meth:`PySide.QtNetwork.QSslSocket.setPrivateKey` .
    * The CA certificate database can be extended and customized with :meth:`PySide.QtNetwork.QSslSocket.addCaCertificate` , :meth:`PySide.QtNetwork.QSslSocket.addCaCertificates` , :meth:`PySide.QtNetwork.QSslSocket.setCaCertificates` , :meth:`PySide.QtNetwork.QSslSocket.addDefaultCaCertificate` , :meth:`PySide.QtNetwork.QSslSocket.addDefaultCaCertificates` , and :meth:`PySide.QtNetwork.QSslSocket.setDefaultCaCertificates` .

    For more information about ciphers and certificates, refer to :class:`PySide.QtNetwork.QSslCipher` and :class:`PySide.QtNetwork.QSslCertificate` .

    This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (http://www.openssl.org/).

    .. note::  Be aware of the difference between the :meth:`PySide.QtCore.QIODevice.bytesWritten` signal and the :meth:`PySide.QtNetwork.QSslSocket.encryptedBytesWritten` signal. For a :class:`PySide.QtNetwork.QTcpSocket` , :meth:`PySide.QtCore.QIODevice.bytesWritten` will get emitted as soon as data has been written to the TCP socket. For a :class:`PySide.QtNetwork.QSslSocket` , :meth:`PySide.QtCore.QIODevice.bytesWritten` will get emitted when the data is being encrypted and :meth:`PySide.QtNetwork.QSslSocket.encryptedBytesWritten` will get emitted as soon as data has been written to the TCP socket.

    .. _PySide.QtNetwork.QSslSocket_symbian-platform-security-requirements:



Symbian Platform Security Requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    On Symbian, processes which use this class must have the ``NetworkServices`` platform security capability. If the client process lacks this capability, operations will fail.

    Platform security capabilities are added via the :ref:`TARGET.CAPABILITY<qmake-variable-reference.html>` qmake variable.

    .. seealso::  :class:`PySide.QtNetwork.QSslCertificate`  :class:`PySide.QtNetwork.QSslCipher`  :class:`PySide.QtNetwork.QSslError` 

.. class:: QSslSocket([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a :class:`PySide.QtNetwork.QSslSocket` object. ``parent`` is passed to :class:`PySide.QtCore.QObject` 's constructor. The new socket's :class:`cipher<PySide.QtNetwork.QSslCipher>` suite is set to the one returned by the static method :meth:`PySide.QtNetwork.QSslSocket.defaultCiphers` .


.. attribute:: PySide.QtNetwork.QSslSocket.SslMode

    Describes the connection modes available for :class:`PySide.QtNetwork.QSslSocket` .

    +--------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                  |Description                                                                                                                                                                                  |
    +==========================+=============================================================================================================================================================================================+
    |QSslSocket.UnencryptedMode|The socket is unencrypted. Its behavior is identical to :class:`PySide.QtNetwork.QTcpSocket` .                                                                                               |
    +--------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QSslSocket.SslClientMode  |The socket is a client-side SSL socket. It is either alreayd encrypted, or it is in the SSL handshake phase (see :meth:`QSslSocket.isEncrypted()<PySide.QtNetwork.QSslSocket.isEncrypted>` ).|
    +--------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QSslSocket.SslServerMode  |The socket is a server-side SSL socket. It is either already encrypted, or it is in the SSL handshake phase (see :meth:`QSslSocket.isEncrypted()<PySide.QtNetwork.QSslSocket.isEncrypted>` ).|
    +--------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtNetwork.QSslSocket.PeerVerifyMode

    Describes the peer verification modes for :class:`PySide.QtNetwork.QSslSocket` . The default mode is :attr:`AutoVerifyPeer<QSslSocket.PeerVerifyMode>` , which selects an appropriate mode depending on the socket's QSocket::SslMode.

    +-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                 |Description                                                                                                                                                                                                                                                                                                                                  |
    +=========================+=============================================================================================================================================================================================================================================================================================================================================+
    |QSslSocket.VerifyNone    |:class:`PySide.QtNetwork.QSslSocket` will not request a certificate from the peer. You can set this mode if you are not interested in the identity of the other side of the connection. The connection will still be encrypted, and your socket will still send its local certificate to the peer if it's requested.                         |
    +-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QSslSocket.QueryPeer     |:class:`PySide.QtNetwork.QSslSocket` will request a certificate from the peer, but does not require this certificate to be valid. This is useful when you want to display peer certificate details to the user without affecting the actual SSL handshake. This mode is the default for servers.                                             |
    +-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QSslSocket.VerifyPeer    |:class:`PySide.QtNetwork.QSslSocket` will request a certificate from the peer during the SSL handshake phase, and requires that this certificate is valid. On failure, :class:`PySide.QtNetwork.QSslSocket` will emit the :meth:`QSslSocket.sslErrors()<PySide.QtNetwork.QSslSocket.sslErrors>` signal. This mode is the default for clients.|
    +-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QSslSocket.AutoVerifyPeer|:class:`PySide.QtNetwork.QSslSocket` will automatically use :attr:`QueryPeer<QSslSocket.PeerVerifyMode>` for server sockets and :attr:`VerifyPeer<QSslSocket.PeerVerifyMode>` for client sockets.                                                                                                                                            |
    +-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`QSslSocket.peerVerifyMode()<PySide.QtNetwork.QSslSocket.peerVerifyMode>` 

.. method:: PySide.QtNetwork.QSslSocket.addCaCertificate(certificate)


    :param certificate: :class:`PySide.QtNetwork.QSslCertificate`




    Adds the ``certificate`` to this socket's CA certificate database. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.

    To add multiple certificates, use :meth:`PySide.QtNetwork.QSslSocket.addCaCertificates` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.caCertificates`  :meth:`PySide.QtNetwork.QSslSocket.setCaCertificates` 


.. method:: PySide.QtNetwork.QSslSocket.addCaCertificates(path[, format=QSsl.Pem[, syntax=QRegExp.FixedString]])


    :param path: unicode
    :param format: :attr:`PySide.QtNetwork.QSsl.EncodingFormat`
    :param syntax: :attr:`PySide.QtCore.QRegExp.PatternSyntax`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtNetwork.QSslSocket.addCaCertificates(certificates)


    :param certificates: 







.. staticmethod:: PySide.QtNetwork.QSslSocket.addDefaultCaCertificate(certificate)


    :param certificate: :class:`PySide.QtNetwork.QSslCertificate`




    Adds ``certificate`` to the default CA certificate database. Each SSL socket's CA certificate database is initialized to the default CA certificate database.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.defaultCaCertificates`  :meth:`PySide.QtNetwork.QSslSocket.addCaCertificates` 


.. staticmethod:: PySide.QtNetwork.QSslSocket.addDefaultCaCertificates(path[, format=QSsl.Pem[, syntax=QRegExp.FixedString]])


    :param path: unicode
    :param format: :attr:`PySide.QtNetwork.QSsl.EncodingFormat`
    :param syntax: :attr:`PySide.QtCore.QRegExp.PatternSyntax`
    :rtype: :class:`PySide.QtCore.bool`







.. staticmethod:: PySide.QtNetwork.QSslSocket.addDefaultCaCertificates(certificates)


    :param certificates: 







.. method:: PySide.QtNetwork.QSslSocket.caCertificates()


    :rtype: 




    Returns this socket's CA certificate database. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate. It can be moodified prior to the handshake with :meth:`PySide.QtNetwork.QSslSocket.addCaCertificate` , :meth:`PySide.QtNetwork.QSslSocket.addCaCertificates` , and :meth:`PySide.QtNetwork.QSslSocket.setCaCertificates` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.addCaCertificate`  :meth:`PySide.QtNetwork.QSslSocket.addCaCertificates`  :meth:`PySide.QtNetwork.QSslSocket.setCaCertificates` 


.. method:: PySide.QtNetwork.QSslSocket.ciphers()


    :rtype: 




    Returns this socket's current cryptographic cipher suite. This list is used during the socket's handshake phase for choosing a session cipher. The returned list of ciphers is ordered by descending preference. (i.e., the first cipher in the list is the most preferred cipher). The session cipher will be the first one in the list that is also supported by the peer.

    By default, the handshake phase can choose any of the ciphers supported by this system's SSL libraries, which may vary from system to system. The list of ciphers supported by this system's SSL libraries is returned by :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` . You can restrict the list of ciphers used for choosing the session cipher for this socket by calling :meth:`PySide.QtNetwork.QSslSocket.setCiphers` with a subset of the supported ciphers. You can revert to using the entire set by calling :meth:`PySide.QtNetwork.QSslSocket.setCiphers` with the list returned by :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` .

    You can restrict the list of ciphers used for choosing the session cipher for *all* sockets by calling :meth:`PySide.QtNetwork.QSslSocket.setDefaultCiphers` with a subset of the supported ciphers. You can revert to using the entire set by calling :meth:`PySide.QtNetwork.QSslSocket.setCiphers` with the list returned by :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setCiphers`  :meth:`PySide.QtNetwork.QSslSocket.defaultCiphers`  :meth:`PySide.QtNetwork.QSslSocket.setDefaultCiphers`  :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` 


.. method:: PySide.QtNetwork.QSslSocket.connectToHostEncrypted(hostName, port, sslPeerName[, mode=QIODevice.ReadWrite])


    :param hostName: unicode
    :param port: :class:`PySide.QtCore.quint16`
    :param sslPeerName: unicode
    :param mode: :class:`PySide.QtCore.QIODevice.OpenMode`







.. method:: PySide.QtNetwork.QSslSocket.connectToHostEncrypted(hostName, port[, mode=QIODevice.ReadWrite])


    :param hostName: unicode
    :param port: :class:`PySide.QtCore.quint16`
    :param mode: :class:`PySide.QtCore.QIODevice.OpenMode`







.. staticmethod:: PySide.QtNetwork.QSslSocket.defaultCaCertificates()


    :rtype: 




    Returns the current default CA certificate database. This database is originally set to your system's default CA certificate database. If no system default database is found, an empty database will be returned. You can override the default CA certificate database with your own CA certificate database using :meth:`PySide.QtNetwork.QSslSocket.setDefaultCaCertificates` .

    Each SSL socket's CA certificate database is initialized to the default CA certificate database.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setDefaultCaCertificates`  :meth:`PySide.QtNetwork.QSslSocket.caCertificates` 


.. staticmethod:: PySide.QtNetwork.QSslSocket.defaultCiphers()


    :rtype: 




    Returns the default cryptographic cipher suite for all sockets in this application. This list is used during the socket's handshake phase when negotiating with the peer to choose a session cipher. The list is ordered by preference (i.e., the first cipher in the list is the most preferred cipher).

    By default, the handshake phase can choose any of the ciphers supported by this system's SSL libraries, which may vary from system to system. The list of ciphers supported by this system's SSL libraries is returned by :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setDefaultCiphers`  :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` 


.. method:: PySide.QtNetwork.QSslSocket.encrypted()








.. method:: PySide.QtNetwork.QSslSocket.encryptedBytesAvailable()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the number of encrypted bytes that are awaiting decryption. Normally, this function will return 0 because :class:`PySide.QtNetwork.QSslSocket` decrypts its incoming data as soon as it can.



.. method:: PySide.QtNetwork.QSslSocket.encryptedBytesToWrite()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the number of encrypted bytes that are waiting to be written to the network.



.. method:: PySide.QtNetwork.QSslSocket.encryptedBytesWritten(totalBytes)


    :param totalBytes: :class:`PySide.QtCore.qint64`






.. method:: PySide.QtNetwork.QSslSocket.ignoreSslErrors(errors)


    :param errors: 







.. method:: PySide.QtNetwork.QSslSocket.ignoreSslErrors()






    This slot tells :class:`PySide.QtNetwork.QSslSocket` to ignore errors during :class:`PySide.QtNetwork.QSslSocket` 's handshake phase and continue connecting. If you want to continue with the connection even if errors occur during the handshake phase, then you must call this slot, either from a slot connected to :meth:`PySide.QtNetwork.QSslSocket.sslErrors` , or before the handshake phase. If you don't call this slot, either in response to errors or before the handshake, the connection will be dropped after the :meth:`PySide.QtNetwork.QSslSocket.sslErrors` signal has been emitted.

    If there are no errors during the SSL handshake phase (i.e., the identity of the peer is established with no problems), :class:`PySide.QtNetwork.QSslSocket` will not emit the :meth:`PySide.QtNetwork.QSslSocket.sslErrors` signal, and it is unnecessary to call this function.

    Ignoring errors that occur during an SSL handshake should be done with caution. A fundamental characteristic of secure connections is that they should be established with an error free handshake.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.sslErrors` 


.. method:: PySide.QtNetwork.QSslSocket.isEncrypted()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the socket is encrypted; otherwise, false is returned.

    An encrypted socket encrypts all data that is written by calling :meth:`PySide.QtCore.QIODevice.write` or :meth:`PySide.QtCore.QIODevice.putChar` before the data is written to the network, and decrypts all incoming data as the data is received from the network, before you call :meth:`PySide.QtCore.QIODevice.read` , :meth:`PySide.QtCore.QIODevice.readLine` or :meth:`PySide.QtCore.QIODevice.getChar` .

    :class:`PySide.QtNetwork.QSslSocket` emits :meth:`PySide.QtNetwork.QSslSocket.encrypted` when it enters encrypted mode.

    You can call :meth:`PySide.QtNetwork.QSslSocket.sessionCipher` to find which cryptographic cipher is used to encrypt and decrypt your data.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.mode` 


.. method:: PySide.QtNetwork.QSslSocket.localCertificate()


    :rtype: :class:`PySide.QtNetwork.QSslCertificate`




    Returns the socket's local :class:`certificate<PySide.QtNetwork.QSslCertificate>` , or an empty certificate if no local certificate has been assigned.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setLocalCertificate`  :meth:`PySide.QtNetwork.QSslSocket.privateKey` 


.. method:: PySide.QtNetwork.QSslSocket.mode()


    :rtype: :attr:`PySide.QtNetwork.QSslSocket.SslMode`




    Returns the current mode for the socket; either :attr:`UnencryptedMode<QSslSocket.SslMode>` , where :class:`PySide.QtNetwork.QSslSocket` behaves identially to :class:`PySide.QtNetwork.QTcpSocket` , or one of :attr:`SslClientMode<QSslSocket.SslMode>` or :attr:`SslServerMode<QSslSocket.SslMode>` , where the client is either negotiating or in encrypted mode.

    When the mode changes, :class:`PySide.QtNetwork.QSslSocket` emits :meth:`PySide.QtNetwork.QSslSocket.modeChanged`

    .. seealso::  :attr:`QSslSocket.SslMode` 


.. method:: PySide.QtNetwork.QSslSocket.modeChanged(newMode)


    :param newMode: :attr:`PySide.QtNetwork.QSslSocket.SslMode`






.. method:: PySide.QtNetwork.QSslSocket.peerCertificate()


    :rtype: :class:`PySide.QtNetwork.QSslCertificate`




    Returns the peer's digital certificate (i.e., the immediate certificate of the host you are connected to), or a null certificate, if the peer has not assigned a certificate.

    The peer certificate is checked automatically during the handshake phase, so this function is normally used to fetch the certificate for display or for connection diagnostic purposes. It contains information about the peer, including its host name, the certificate issuer, and the peer's public key.

    Because the peer certificate is set during the handshake phase, it is safe to access the peer certificate from a slot connected to the :meth:`PySide.QtNetwork.QSslSocket.sslErrors` signal or the :meth:`PySide.QtNetwork.QSslSocket.encrypted` signal.

    If a null certificate is returned, it can mean the SSL handshake failed, or it can mean the host you are connected to doesn't have a certificate, or it can mean there is no connection.

    If you want to check the peer's complete chain of certificates, use :meth:`PySide.QtNetwork.QSslSocket.peerCertificateChain` to get them all at once.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.peerCertificateChain` 


.. method:: PySide.QtNetwork.QSslSocket.peerCertificateChain()


    :rtype: 




    Returns the peer's chain of digital certificates, or an empty list of certificates.

    Peer certificates are checked automatically during the handshake phase. This function is normally used to fetch certificates for display, or for performing connection diagnostics. Certificates contain information about the peer and the certificate issuers, including host name, issuer names, and issuer public keys.

    The peer certificates are set in :class:`PySide.QtNetwork.QSslSocket` during the handshake phase, so it is safe to call this function from a slot connected to the :meth:`PySide.QtNetwork.QSslSocket.sslErrors` signal or the :meth:`PySide.QtNetwork.QSslSocket.encrypted` signal.

    If an empty list is returned, it can mean the SSL handshake failed, or it can mean the host you are connected to doesn't have a certificate, or it can mean there is no connection.

    If you want to get only the peer's immediate certificate, use :meth:`PySide.QtNetwork.QSslSocket.peerCertificate` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.peerCertificate` 


.. method:: PySide.QtNetwork.QSslSocket.peerVerifyDepth()


    :rtype: :class:`PySide.QtCore.int`




    Returns the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, or 0 (the default) if no maximum depth has been set, indicating that the whole certificate chain should be checked.

    The certificates are checked in issuing order, starting with the peer's own certificate, then its issuer's certificate, and so on.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setPeerVerifyDepth`  :meth:`PySide.QtNetwork.QSslSocket.peerVerifyMode` 


.. method:: PySide.QtNetwork.QSslSocket.peerVerifyError(error)


    :param error: :class:`PySide.QtNetwork.QSslError`






.. method:: PySide.QtNetwork.QSslSocket.peerVerifyMode()


    :rtype: :attr:`PySide.QtNetwork.QSslSocket.PeerVerifyMode`




    Returns the socket's verify mode. This mode mode decides whether :class:`PySide.QtNetwork.QSslSocket` should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.

    The default mode is :attr:`AutoVerifyPeer<QSslSocket.PeerVerifyMode>` , which tells :class:`PySide.QtNetwork.QSslSocket` to use :attr:`VerifyPeer<QSslSocket.PeerVerifyMode>` for clients and :attr:`QueryPeer<QSslSocket.PeerVerifyMode>` for servers.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setPeerVerifyMode`  :meth:`PySide.QtNetwork.QSslSocket.peerVerifyDepth`  :meth:`PySide.QtNetwork.QSslSocket.mode` 


.. method:: PySide.QtNetwork.QSslSocket.privateKey()


    :rtype: :class:`PySide.QtNetwork.QSslKey`




    Returns this socket's private key.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setPrivateKey`  :meth:`PySide.QtNetwork.QSslSocket.localCertificate` 


.. method:: PySide.QtNetwork.QSslSocket.protocol()


    :rtype: :attr:`PySide.QtNetwork.QSsl.SslProtocol`




    Returns the socket's SSL protocol. By default, :attr:`QSsl.SslV3<QSsl.SslProtocol>` is used.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setProtocol` 


.. method:: PySide.QtNetwork.QSslSocket.sessionCipher()


    :rtype: :class:`PySide.QtNetwork.QSslCipher`




    Returns the socket's cryptographic :class:`cipher<PySide.QtNetwork.QSslCipher>` , or a null cipher if the connection isn't encrypted. The socket's cipher for the session is set during the handshake phase. The cipher is used to encrypt and decrypt data transmitted through the socket.

    :class:`PySide.QtNetwork.QSslSocket` also provides functions for setting the ordered list of ciphers from which the handshake phase will eventually select the session cipher. This ordered list must be in place before the handshake phase begins.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.ciphers`  :meth:`PySide.QtNetwork.QSslSocket.setCiphers`  :meth:`PySide.QtNetwork.QSslSocket.setDefaultCiphers`  :meth:`PySide.QtNetwork.QSslSocket.defaultCiphers`  :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` 


.. method:: PySide.QtNetwork.QSslSocket.setCaCertificates(certificates)


    :param certificates: 







.. method:: PySide.QtNetwork.QSslSocket.setCiphers(ciphers)


    :param ciphers: unicode




    Sets the cryptographic cipher suite for this socket to ``ciphers`` , which is a colon-separated list of cipher suite names. The ciphers are listed in order of preference, starting with the most preferred cipher. For example:

    ::

        socket = QSslSocket()
        socket.setCiphers("DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:AES256-SHA")


    Each cipher name in ``ciphers`` must be the name of a cipher in the list returned by :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` . Restricting the cipher suite must be done before the handshake phase, where the session cipher is chosen.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.ciphers`  :meth:`PySide.QtNetwork.QSslSocket.setDefaultCiphers`  :meth:`PySide.QtNetwork.QSslSocket.supportedCiphers` 


.. method:: PySide.QtNetwork.QSslSocket.setCiphers(ciphers)


    :param ciphers: 







.. staticmethod:: PySide.QtNetwork.QSslSocket.setDefaultCaCertificates(certificates)


    :param certificates: 







.. staticmethod:: PySide.QtNetwork.QSslSocket.setDefaultCiphers(ciphers)


    :param ciphers: 







.. method:: PySide.QtNetwork.QSslSocket.setLocalCertificate(certificate)


    :param certificate: :class:`PySide.QtNetwork.QSslCertificate`




    Sets the socket's local certificate to ``certificate`` . The local certificate is necessary if you need to confirm your identity to the peer. It is used together with the private key; if you set the local certificate, you must also set the private key.

    The local certificate and private key are always necessary for server sockets, but are also rarely used by client sockets if the server requires the client to authenticate.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.localCertificate`  :meth:`PySide.QtNetwork.QSslSocket.setPrivateKey` 


.. method:: PySide.QtNetwork.QSslSocket.setLocalCertificate(fileName[, format=QSsl.Pem])


    :param fileName: unicode
    :param format: :attr:`PySide.QtNetwork.QSsl.EncodingFormat`







.. method:: PySide.QtNetwork.QSslSocket.setPeerVerifyDepth(depth)


    :param depth: :class:`PySide.QtCore.int`




    Sets the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, to ``depth`` . Setting a depth of 0 means that no maximum depth is set, indicating that the whole certificate chain should be checked.

    The certificates are checked in issuing order, starting with the peer's own certificate, then its issuer's certificate, and so on.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.peerVerifyDepth`  :meth:`PySide.QtNetwork.QSslSocket.setPeerVerifyMode` 


.. method:: PySide.QtNetwork.QSslSocket.setPeerVerifyMode(mode)


    :param mode: :attr:`PySide.QtNetwork.QSslSocket.PeerVerifyMode`







.. method:: PySide.QtNetwork.QSslSocket.setPrivateKey(key)


    :param key: :class:`PySide.QtNetwork.QSslKey`




    Sets the socket's private :class:`key<PySide.QtNetwork.QSslKey>` to ``key`` . The private key and the local :class:`certificate<PySide.QtNetwork.QSslCertificate>` are used by clients and servers that must prove their identity to SSL peers.

    Both the key and the local certificate are required if you are creating an SSL server socket. If you are creating an SSL client socket, the key and local certificate are required if your client must identify itself to an SSL server.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.privateKey`  :meth:`PySide.QtNetwork.QSslSocket.setLocalCertificate` 


.. method:: PySide.QtNetwork.QSslSocket.setPrivateKey(fileName[, algorithm=QSsl.Rsa[, format=QSsl.Pem[, passPhrase=QByteArray()]]])


    :param fileName: unicode
    :param algorithm: :attr:`PySide.QtNetwork.QSsl.KeyAlgorithm`
    :param format: :attr:`PySide.QtNetwork.QSsl.EncodingFormat`
    :param passPhrase: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtNetwork.QSslSocket.setProtocol(protocol)


    :param protocol: :attr:`PySide.QtNetwork.QSsl.SslProtocol`







.. method:: PySide.QtNetwork.QSslSocket.setSslConfiguration(config)


    :param config: :class:`PySide.QtNetwork.QSslConfiguration`




    Sets the socket's SSL configuration to be the contents of ``configuration`` . This function sets the local certificate, the ciphers, the private key and the CA certificates to those stored in ``configuration`` .

    It is not possible to set the SSL-state related fields.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.sslConfiguration`  :meth:`PySide.QtNetwork.QSslSocket.setLocalCertificate`  :meth:`PySide.QtNetwork.QSslSocket.setPrivateKey`  :meth:`PySide.QtNetwork.QSslSocket.setCaCertificates`  :meth:`PySide.QtNetwork.QSslSocket.setCiphers` 


.. method:: PySide.QtNetwork.QSslSocket.sslConfiguration()


    :rtype: :class:`PySide.QtNetwork.QSslConfiguration`




    Returns the socket's SSL configuration state. The default SSL configuration of a socket is to use the default ciphers, default CA certificates, no local private key or certificate.

    The SSL configuration also contains fields that can change with time without notice.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.setSslConfiguration`  :meth:`PySide.QtNetwork.QSslSocket.localCertificate`  :meth:`PySide.QtNetwork.QSslSocket.peerCertificate`  :meth:`PySide.QtNetwork.QSslSocket.peerCertificateChain`  :meth:`PySide.QtNetwork.QSslSocket.sessionCipher`  :meth:`PySide.QtNetwork.QSslSocket.privateKey`  :meth:`PySide.QtNetwork.QSslSocket.ciphers`  :meth:`PySide.QtNetwork.QSslSocket.caCertificates` 


.. method:: PySide.QtNetwork.QSslSocket.sslErrors()


    :rtype: 




    Returns a list of the last SSL errors that occurred. This is the same list as :class:`PySide.QtNetwork.QSslSocket` passes via the :meth:`PySide.QtNetwork.QSslSocket.sslErrors` signal. If the connection has been encrypted with no errors, this function will return an empty list.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.connectToHostEncrypted` 


.. method:: PySide.QtNetwork.QSslSocket.sslErrors(errors)


    :param errors: 






.. method:: PySide.QtNetwork.QSslSocket.startClientEncryption()






    Starts a delayed SSL handshake for a client connection. This function can be called when the socket is in the :attr:`ConnectedState<QAbstractSocket.SocketState>` but still in the :attr:`UnencryptedMode<QSslSocket.SslMode>` . If it is not yet connected, or if it is already encrypted, this function has no effect.

    Clients that implement STARTTLS functionality often make use of delayed SSL handshakes. Most other clients can avoid calling this function directly by using :meth:`PySide.QtNetwork.QSslSocket.connectToHostEncrypted` instead, which automatically performs the handshake.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.connectToHostEncrypted`  :meth:`PySide.QtNetwork.QSslSocket.startServerEncryption` 


.. method:: PySide.QtNetwork.QSslSocket.startServerEncryption()






    Starts a delayed SSL handshake for a server connection. This function can be called when the socket is in the :attr:`ConnectedState<QAbstractSocket.SocketState>` but still in :attr:`UnencryptedMode<QSslSocket.SslMode>` . If it is not connected or it is already encrypted, the function has no effect.

    For server sockets, calling this function is the only way to initiate the SSL handshake. Most servers will call this function immediately upon receiving a connection, or as a result of having received a protocol-specific command to enter SSL mode (e.g, the server may respond to receiving the string "STARTTLS\r\n" by calling this function).

    The most common way to implement an SSL server is to create a subclass of :class:`PySide.QtNetwork.QTcpServer` and reimplement :meth:`QTcpServer.incomingConnection()<PySide.QtNetwork.QTcpServer.incomingConnection>` . The returned socket descriptor is then passed to :meth:`QSslSocket.setSocketDescriptor()<PySide.QtNetwork.QSslSocket.setSocketDescriptor>` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.connectToHostEncrypted`  :meth:`PySide.QtNetwork.QSslSocket.startClientEncryption` 


.. staticmethod:: PySide.QtNetwork.QSslSocket.supportedCiphers()


    :rtype: 




    Returns the list of cryptographic ciphers supported by this system. This list is set by the system's SSL libraries and may vary from system to system.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.defaultCiphers`  :meth:`PySide.QtNetwork.QSslSocket.ciphers`  :meth:`PySide.QtNetwork.QSslSocket.setCiphers` 


.. staticmethod:: PySide.QtNetwork.QSslSocket.supportsSsl()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this platform supports SSL; otherwise, returns false. If the platform doesn't support SSL, the socket will fail in the connection phase.



.. staticmethod:: PySide.QtNetwork.QSslSocket.systemCaCertificates()


    :rtype: 




    This function provides the CA certificate database provided by the operating system. The CA certificate database returned by this function is used to initialize the database returned by :meth:`PySide.QtNetwork.QSslSocket.defaultCaCertificates` . You can replace that database with your own with :meth:`PySide.QtNetwork.QSslSocket.setDefaultCaCertificates` .

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.caCertificates`  :meth:`PySide.QtNetwork.QSslSocket.defaultCaCertificates`  :meth:`PySide.QtNetwork.QSslSocket.setDefaultCaCertificates` 


.. method:: PySide.QtNetwork.QSslSocket.waitForEncrypted([msecs=30000])


    :param msecs: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Waits until the socket has completed the SSL handshake and has emitted :meth:`PySide.QtNetwork.QSslSocket.encrypted` , or ``msecs`` milliseconds, whichever comes first. If :meth:`PySide.QtNetwork.QSslSocket.encrypted` has been emitted, this function returns true; otherwise (e.g., the socket is disconnected, or the SSL handshake fails), false is returned.

    The following example waits up to one second for the socket to be encrypted:

    ::

        socket.connectToHostEncrypted("imap", 993)
        if socket.waitForEncrypted(1000):
            print "Encrypted!"


    If msecs is -1, this function will not time out.

    .. seealso::  :meth:`PySide.QtNetwork.QSslSocket.startClientEncryption`  :meth:`PySide.QtNetwork.QSslSocket.startServerEncryption`  :meth:`PySide.QtNetwork.QSslSocket.encrypted`  :meth:`PySide.QtNetwork.QSslSocket.isEncrypted` 



