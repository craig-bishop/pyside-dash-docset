.. module:: PySide.QtNetwork
.. _QNetworkProxy:

QNetworkProxy
*************

.. inheritance-diagram:: QNetworkProxy
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtNetwork.QNetworkProxy.__eq__>` (other)
*    def :meth:`__ne__<PySide.QtNetwork.QNetworkProxy.__ne__>` (other)
*    def :meth:`capabilities<PySide.QtNetwork.QNetworkProxy.capabilities>` ()
*    def :meth:`hostName<PySide.QtNetwork.QNetworkProxy.hostName>` ()
*    def :meth:`isCachingProxy<PySide.QtNetwork.QNetworkProxy.isCachingProxy>` ()
*    def :meth:`isTransparentProxy<PySide.QtNetwork.QNetworkProxy.isTransparentProxy>` ()
*    def :meth:`password<PySide.QtNetwork.QNetworkProxy.password>` ()
*    def :meth:`port<PySide.QtNetwork.QNetworkProxy.port>` ()
*    def :meth:`setCapabilities<PySide.QtNetwork.QNetworkProxy.setCapabilities>` (capab)
*    def :meth:`setHostName<PySide.QtNetwork.QNetworkProxy.setHostName>` (hostName)
*    def :meth:`setPassword<PySide.QtNetwork.QNetworkProxy.setPassword>` (password)
*    def :meth:`setPort<PySide.QtNetwork.QNetworkProxy.setPort>` (port)
*    def :meth:`setType<PySide.QtNetwork.QNetworkProxy.setType>` (type)
*    def :meth:`setUser<PySide.QtNetwork.QNetworkProxy.setUser>` (userName)
*    def :meth:`type<PySide.QtNetwork.QNetworkProxy.type>` ()
*    def :meth:`user<PySide.QtNetwork.QNetworkProxy.user>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`applicationProxy<PySide.QtNetwork.QNetworkProxy.applicationProxy>` ()
*    def :meth:`setApplicationProxy<PySide.QtNetwork.QNetworkProxy.setApplicationProxy>` (proxy)


Detailed Description
--------------------



    The :class:`PySide.QtNetwork.QNetworkProxy` class provides a network layer proxy.

    :class:`PySide.QtNetwork.QNetworkProxy` provides the method for configuring network layer proxy support to the Qt network classes. The currently supported classes are :class:`PySide.QtNetwork.QAbstractSocket` , :class:`PySide.QtNetwork.QTcpSocket` , :class:`PySide.QtNetwork.QUdpSocket` , :class:`PySide.QtNetwork.QTcpServer` , :class:`PySide.QtNetwork.QNetworkAccessManager` and :class:`PySide.QtNetwork.QFtp` . The proxy support is designed to be as transparent as possible. This means that existing network-enabled applications that you have written should automatically support network proxy using the following code.

    ::

        proxy = QNetworkProxy()
        proxy.setType(QNetworkProxy.Socks5Proxy)
        proxy.setHostName("proxy.example.com")
        proxy.setPort(1080)
        proxy.setUser("username")
        proxy.setPassword("password")
        QNetworkProxy.setApplicationProxy(proxy)


    An alternative to setting an application wide proxy is to specify the proxy for individual sockets using :meth:`QAbstractSocket.setProxy()<PySide.QtNetwork.QAbstractSocket.setProxy>` and :meth:`QTcpServer.setProxy()<PySide.QtNetwork.QTcpServer.setProxy>` . In this way, it is possible to disable the use of a proxy for specific sockets using the following code:

    ::

        serverSocket.setProxy(QNetworkProxy.NoProxy)


    Network proxy is not used if the address used in :meth:`PySide.QtNetwork.QAbstractSocket.connectToHost` , :meth:`PySide.QtNetwork.QUdpSocket.bind` or :meth:`PySide.QtNetwork.QTcpServer.listen` is equivalent to :attr:`QHostAddress.LocalHost<QHostAddress.SpecialAddress>` or :attr:`QHostAddress.LocalHostIPv6<QHostAddress.SpecialAddress>` .

    Each type of proxy support has certain restrictions associated with it. You should read the :attr:`QNetworkProxy.ProxyType` documentation carefully before selecting a proxy type to use.

    .. note::  Changes made to currently connected sockets do not take effect. If you need to change a connected socket, you should reconnect it.

    .. _PySide.QtNetwork.QNetworkProxy_socks5:



SOCKS5
^^^^^^

    The SOCKS5 support in Qt 4 is based on :ref:`RFC 1928<http://www.rfc-editor.org/rfc/rfc1928.txt>` and :ref:`RFC 1929<http://www.rfc-editor.org/rfc/rfc1929.txt>` . The supported authentication methods are no authentication and username/password authentication. Both IPv4 and IPv6 are supported. Domain names are resolved through the SOCKS5 server if the :attr:`QNetworkProxy.HostNameLookupCapability<QNetworkProxy.Capability>` is enabled, otherwise they are resolved locally and the IP address is sent to the server. There are several things to remember when using SOCKS5 with :class:`PySide.QtNetwork.QUdpSocket` and :class:`PySide.QtNetwork.QTcpServer` :

    With :class:`PySide.QtNetwork.QUdpSocket` , a call to :meth:`PySide.QtNetwork.QUdpSocket.bind` may fail with a timeout error. If a port number other than 0 is passed to :meth:`PySide.QtNetwork.QUdpSocket.bind` , it is not guaranteed that it is the specified port that will be used. Use :meth:`PySide.QtNetwork.QUdpSocket.localPort` and :meth:`PySide.QtNetwork.QUdpSocket.localAddress` to get the actual address and port number in use. Because proxied UDP goes through two UDP connections, it is more likely that packets will be dropped.

    With :class:`PySide.QtNetwork.QTcpServer` a call to :meth:`PySide.QtNetwork.QTcpServer.listen` may fail with a timeout error. If a port number other than 0 is passed to :meth:`PySide.QtNetwork.QTcpServer.listen` , then it is not guaranteed that it is the specified port that will be used. Use :meth:`PySide.QtNetwork.QTcpServer.serverPort` and :meth:`PySide.QtNetwork.QTcpServer.serverAddress` to get the actual address and port used to listen for connections. SOCKS5 only supports one accepted connection per call to :meth:`PySide.QtNetwork.QTcpServer.listen` , and each call is likely to result in a different :meth:`PySide.QtNetwork.QTcpServer.serverPort` being used.

    .. seealso::  :class:`PySide.QtNetwork.QAbstractSocket`  :class:`PySide.QtNetwork.QTcpServer` 

.. class:: QNetworkProxy()
           QNetworkProxy(type[, hostName=""[, port=0[, user=""[, password=""]]]])
           QNetworkProxy(other)

    :param port: :class:`PySide.QtCore.quint16`
    :param password: unicode
    :param hostName: unicode
    :param other: :class:`PySide.QtNetwork.QNetworkProxy`
    :param type: :attr:`PySide.QtNetwork.QNetworkProxy.ProxyType`
    :param user: unicode

    Constructs a :class:`PySide.QtNetwork.QNetworkProxy` with :attr:`DefaultProxy<QNetworkProxy.ProxyType>` type; the proxy type is determined by :meth:`PySide.QtNetwork.QNetworkProxy.applicationProxy` , which defaults to :attr:`NoProxy<QNetworkProxy.ProxyType>` .

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.setType`  :meth:`PySide.QtNetwork.QNetworkProxy.setApplicationProxy` 

    Constructs a :class:`PySide.QtNetwork.QNetworkProxy` with ``type`` , ``hostName`` , ``port`` , ``user`` and ``password`` .

    The default capabilities for proxy type ``type`` are set automatically.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.capabilities` 

    Constructs a copy of ``other`` .


.. attribute:: PySide.QtNetwork.QNetworkProxy.ProxyType

    This enum describes the types of network proxying provided in Qt.

    There are two types of proxies that Qt understands: transparent proxies and caching proxies. The first group consists of proxies that can handle any arbitrary data transfer, while the second can only handle specific requests. The caching proxies only make sense for the specific classes where they can be used.

    +------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |Constant                      |Description                                                                                                            |
    +==============================+=======================================================================================================================+
    |QNetworkProxy.NoProxy         |No proxying is used                                                                                                    |
    +------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.DefaultProxy    |Proxy is determined based on the application proxy set using :meth:`PySide.QtNetwork.QNetworkProxy.setApplicationProxy`|
    +------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.Socks5Proxy     |:class:`~PySide.QtNetwork.Socks5` proxying is used                                                                     |
    +------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.HttpProxy       |HTTP transparent proxying is used                                                                                      |
    +------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.HttpCachingProxy|Proxying for HTTP requests only                                                                                        |
    +------------------------------+-----------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.FtpCachingProxy |Proxying for FTP requests only                                                                                         |
    +------------------------------+-----------------------------------------------------------------------------------------------------------------------+

    The table below lists different proxy types and their capabilities. Since each proxy type has different capabilities, it is important to understand them before choosing a proxy type.

    +-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Proxy type       |Description                                                                                                                                                             |Default capabilities                                                                                                                                                                                                                 |
    +-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |SOCKS 5          |Generic proxy for any kind of connection. Supports TCP, UDP, binding to a port (incoming connections) and authentication.                                               |:attr:`TunnelingCapability<QNetworkProxy.Capability>` , :attr:`ListeningCapability<QNetworkProxy.Capability>` , :attr:`UdpTunnelingCapability<QNetworkProxy.Capability>` , :attr:`HostNameLookupCapability<QNetworkProxy.Capability>`|
    +-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |HTTP             |Implemented using the "CONNECT" command, supports only outgoing TCP connections; supports authentication.                                                               |:attr:`TunnelingCapability<QNetworkProxy.Capability>` , :attr:`CachingCapability<QNetworkProxy.Capability>` , :attr:`HostNameLookupCapability<QNetworkProxy.Capability>`                                                             |
    +-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Caching-only HTTP|Implemented using normal HTTP commands, it is useful only in the context of HTTP requests (see :class:`PySide.QtNetwork.QNetworkAccessManager` )                        |:attr:`CachingCapability<QNetworkProxy.Capability>` , :attr:`HostNameLookupCapability<QNetworkProxy.Capability>`                                                                                                                     |
    +-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Caching FTP      |Implemented using an FTP proxy, it is useful only in the context of FTP requests (see :class:`PySide.QtNetwork.QFtp` , :class:`PySide.QtNetwork.QNetworkAccessManager` )|:attr:`CachingCapability<QNetworkProxy.Capability>` , :attr:`HostNameLookupCapability<QNetworkProxy.Capability>`                                                                                                                     |
    +-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    Also note that you shouldn't set the application default proxy ( :meth:`PySide.QtNetwork.QNetworkProxy.setApplicationProxy` ) to a proxy that doesn't have the :attr:`TunnelingCapability<QNetworkProxy.Capability>` capability. If you do, :class:`PySide.QtNetwork.QTcpSocket` will not know how to open connections.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.setType`  :meth:`PySide.QtNetwork.QNetworkProxy.type`  :meth:`PySide.QtNetwork.QNetworkProxy.capabilities`  :meth:`PySide.QtNetwork.QNetworkProxy.setCapabilities` 

.. attribute:: PySide.QtNetwork.QNetworkProxy.Capability

    These flags indicate the capabilities that a given proxy server supports.

    :class:`PySide.QtNetwork.QNetworkProxy` sets different capabilities by default when the object is created (see :attr:`QNetworkProxy.ProxyType` for a list of the defaults). However, it is possible to change the capabitilies after the object has been created with :meth:`PySide.QtNetwork.QNetworkProxy.setCapabilities` .

    The capabilities that :class:`PySide.QtNetwork.QNetworkProxy` supports are:

    +--------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                              |Description                                                                                                                                                                                              |
    +======================================+=========================================================================================================================================================================================================+
    |QNetworkProxy.TunnelingCapability     |Ability to open transparent, tunneled TCP connections to a remote host. The proxy server relays the transmission verbatim from one side to the other and does no caching.                                |
    +--------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.ListeningCapability     |Ability to create a listening socket and wait for an incoming TCP connection from a remote host.                                                                                                         |
    +--------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.UdpTunnelingCapability  |Ability to relay UDP datagrams via the proxy server to and from a remote host.                                                                                                                           |
    +--------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.CachingCapability       |Ability to cache the contents of the transfer. This capability is specific to each protocol and proxy type. For example, HTTP proxies can cache the contents of web data transferred with "GET" commands.|
    +--------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QNetworkProxy.HostNameLookupCapability|Ability to connect to perform the lookup on a remote host name and connect to it, as opposed to requiring the application to perform the name lookup and request connection to IP addresses only.        |
    +--------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. staticmethod:: PySide.QtNetwork.QNetworkProxy.applicationProxy()


    :rtype: :class:`PySide.QtNetwork.QNetworkProxy`




    Returns the application level network proxying.

    If a :class:`PySide.QtNetwork.QAbstractSocket` or :class:`PySide.QtNetwork.QTcpSocket` has the :attr:`QNetworkProxy.DefaultProxy<QNetworkProxy.ProxyType>` type, then the :class:`PySide.QtNetwork.QNetworkProxy` returned by this function is used.

    .. seealso::  :class:`PySide.QtNetwork.QNetworkProxyFactory`  :meth:`PySide.QtNetwork.QNetworkProxy.setApplicationProxy`  :meth:`QAbstractSocket.proxy()<PySide.QtNetwork.QAbstractSocket.proxy>`  :meth:`QTcpServer.proxy()<PySide.QtNetwork.QTcpServer.proxy>` 


.. method:: PySide.QtNetwork.QNetworkProxy.capabilities()


    :rtype: :class:`PySide.QtNetwork.QNetworkProxy.Capabilities`




    Returns the capabilities of this proxy server.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.setCapabilities`  :meth:`PySide.QtNetwork.QNetworkProxy.type` 


.. method:: PySide.QtNetwork.QNetworkProxy.hostName()


    :rtype: unicode




    Returns the host name of the proxy host.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.setHostName`  :meth:`PySide.QtNetwork.QNetworkProxy.setPort`  :meth:`PySide.QtNetwork.QNetworkProxy.port` 


.. method:: PySide.QtNetwork.QNetworkProxy.isCachingProxy()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this proxy supports the :attr:`QNetworkProxy.CachingCapability<QNetworkProxy.Capability>` capability.

    In Qt 4.4, the capability was tied to the proxy type, but since Qt 4.5 it is possible to remove the capability of caching from a proxy by calling :meth:`PySide.QtNetwork.QNetworkProxy.setCapabilities` .

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.capabilities`  :meth:`PySide.QtNetwork.QNetworkProxy.type`  :meth:`PySide.QtNetwork.QNetworkProxy.isTransparentProxy` 


.. method:: PySide.QtNetwork.QNetworkProxy.isTransparentProxy()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this proxy supports transparent tunneling of TCP connections. This matches the :attr:`QNetworkProxy.TunnelingCapability<QNetworkProxy.Capability>` capability.

    In Qt 4.4, the capability was tied to the proxy type, but since Qt 4.5 it is possible to remove the capability of caching from a proxy by calling :meth:`PySide.QtNetwork.QNetworkProxy.setCapabilities` .

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.capabilities`  :meth:`PySide.QtNetwork.QNetworkProxy.type`  :meth:`PySide.QtNetwork.QNetworkProxy.isCachingProxy` 


.. method:: PySide.QtNetwork.QNetworkProxy.__ne__(other)


    :param other: :class:`PySide.QtNetwork.QNetworkProxy`
    :rtype: :class:`PySide.QtCore.bool`




    Compares the value of this network proxy to ``other`` and returns true if they differ.



.. method:: PySide.QtNetwork.QNetworkProxy.__eq__(other)


    :param other: :class:`PySide.QtNetwork.QNetworkProxy`
    :rtype: :class:`PySide.QtCore.bool`




    Compares the value of this network proxy to ``other`` and returns true if they are equal (same proxy type, server as well as username and password)



.. method:: PySide.QtNetwork.QNetworkProxy.password()


    :rtype: unicode




    Returns the password used for authentication.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.user`  :meth:`PySide.QtNetwork.QNetworkProxy.setPassword`  :meth:`PySide.QtNetwork.QNetworkProxy.setUser` 


.. method:: PySide.QtNetwork.QNetworkProxy.port()


    :rtype: :class:`PySide.QtCore.quint16`




    Returns the port of the proxy host.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.setHostName`  :meth:`PySide.QtNetwork.QNetworkProxy.setPort`  :meth:`PySide.QtNetwork.QNetworkProxy.hostName` 


.. staticmethod:: PySide.QtNetwork.QNetworkProxy.setApplicationProxy(proxy)


    :param proxy: :class:`PySide.QtNetwork.QNetworkProxy`




    Sets the application level network proxying to be ``networkProxy`` .

    If a :class:`PySide.QtNetwork.QAbstractSocket` or :class:`PySide.QtNetwork.QTcpSocket` has the :attr:`QNetworkProxy.DefaultProxy<QNetworkProxy.ProxyType>` type, then the :class:`PySide.QtNetwork.QNetworkProxy` set with this function is used. If you want more flexibility in determining which the proxy, use the :class:`PySide.QtNetwork.QNetworkProxyFactory` class.

    Setting a default proxy value with this function will override the application proxy factory set with QNetworkProxyFactory::setApplicationProxyFactory.

    .. seealso::  :class:`PySide.QtNetwork.QNetworkProxyFactory`  :meth:`PySide.QtNetwork.QNetworkProxy.applicationProxy`  :meth:`QAbstractSocket.setProxy()<PySide.QtNetwork.QAbstractSocket.setProxy>`  :meth:`QTcpServer.setProxy()<PySide.QtNetwork.QTcpServer.setProxy>` 


.. method:: PySide.QtNetwork.QNetworkProxy.setCapabilities(capab)


    :param capab: :class:`PySide.QtNetwork.QNetworkProxy.Capabilities`







.. method:: PySide.QtNetwork.QNetworkProxy.setHostName(hostName)


    :param hostName: unicode




    Sets the host name of the proxy host to be ``hostName`` .

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.hostName`  :meth:`PySide.QtNetwork.QNetworkProxy.setPort`  :meth:`PySide.QtNetwork.QNetworkProxy.port` 


.. method:: PySide.QtNetwork.QNetworkProxy.setPassword(password)


    :param password: unicode




    Sets the password for proxy authentication to be ``password`` .

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.user`  :meth:`PySide.QtNetwork.QNetworkProxy.setUser`  :meth:`PySide.QtNetwork.QNetworkProxy.password` 


.. method:: PySide.QtNetwork.QNetworkProxy.setPort(port)


    :param port: :class:`PySide.QtCore.quint16`




    Sets the port of the proxy host to be ``port`` .

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.hostName`  :meth:`PySide.QtNetwork.QNetworkProxy.setHostName`  :meth:`PySide.QtNetwork.QNetworkProxy.port` 


.. method:: PySide.QtNetwork.QNetworkProxy.setType(type)


    :param type: :attr:`PySide.QtNetwork.QNetworkProxy.ProxyType`







.. method:: PySide.QtNetwork.QNetworkProxy.setUser(userName)


    :param userName: unicode




    Sets the user name for proxy authentication to be ``user`` .

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.user`  :meth:`PySide.QtNetwork.QNetworkProxy.setPassword`  :meth:`PySide.QtNetwork.QNetworkProxy.password` 


.. method:: PySide.QtNetwork.QNetworkProxy.type()


    :rtype: :attr:`PySide.QtNetwork.QNetworkProxy.ProxyType`




    Returns the proxy type for this instance.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.setType` 


.. method:: PySide.QtNetwork.QNetworkProxy.user()


    :rtype: unicode




    Returns the user name used for authentication.

    .. seealso::  :meth:`PySide.QtNetwork.QNetworkProxy.setUser`  :meth:`PySide.QtNetwork.QNetworkProxy.setPassword`  :meth:`PySide.QtNetwork.QNetworkProxy.password` 



