.. module:: PySide.QtDeclarative
.. _QDeclarativeContext:

QDeclarativeContext
*******************

.. inheritance-diagram:: QDeclarativeContext
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`baseUrl<PySide.QtDeclarative.QDeclarativeContext.baseUrl>` ()
*    def :meth:`contextObject<PySide.QtDeclarative.QDeclarativeContext.contextObject>` ()
*    def :meth:`contextProperty<PySide.QtDeclarative.QDeclarativeContext.contextProperty>` (arg__1)
*    def :meth:`engine<PySide.QtDeclarative.QDeclarativeContext.engine>` ()
*    def :meth:`isValid<PySide.QtDeclarative.QDeclarativeContext.isValid>` ()
*    def :meth:`parentContext<PySide.QtDeclarative.QDeclarativeContext.parentContext>` ()
*    def :meth:`resolvedUrl<PySide.QtDeclarative.QDeclarativeContext.resolvedUrl>` (arg__1)
*    def :meth:`setBaseUrl<PySide.QtDeclarative.QDeclarativeContext.setBaseUrl>` (arg__1)
*    def :meth:`setContextObject<PySide.QtDeclarative.QDeclarativeContext.setContextObject>` (arg__1)
*    def :meth:`setContextProperty<PySide.QtDeclarative.QDeclarativeContext.setContextProperty>` (arg__1, arg__2)
*    def :meth:`setContextProperty<PySide.QtDeclarative.QDeclarativeContext.setContextProperty>` (arg__1, arg__2)


Detailed Description
--------------------



    The :class:`PySide.QtDeclarative.QDeclarativeContext` class defines a context within a QML engine.

    Contexts allow data to be exposed to the QML components instantiated by the QML engine.

    Each :class:`PySide.QtDeclarative.QDeclarativeContext` contains a set of properties, distinct from its :class:`PySide.QtCore.QObject` properties, that allow data to be explicitly bound to a context by name. The context properties are defined and updated by calling :meth:`QDeclarativeContext.setContextProperty()<PySide.QtDeclarative.QDeclarativeContext.setContextProperty>` . The following example shows a Qt model being bound to a context and then accessed from a QML file.

    ::

                QDeclarativeEngine engine;
                QStringListModel modelData;
                QDeclarativeContext *context = new QDeclarativeContext(engine.rootContext());
                context->setContextProperty("myModel", &modelData);
                
                QDeclarativeComponent component(&engine);
                component.setData("import QtQuick 1.0\nListView { model: myModel }", QUrl());
                QObject *window = component.create(context);


    Note it is the responsibility of the creator to delete any :class:`PySide.QtDeclarative.QDeclarativeContext` it constructs. If the ``context`` object in the example is no longer needed when the ``window`` component instance is destroyed, the ``context`` must be destroyed explicitly. The simplest way to ensure this is to set ``window`` as the parent of ``context`` .

    To simplify binding and maintaining larger data sets, a context object can be set on a :class:`PySide.QtDeclarative.QDeclarativeContext` . All the properties of the context object are available by name in the context, as though they were all individually added through calls to :meth:`QDeclarativeContext.setContextProperty()<PySide.QtDeclarative.QDeclarativeContext.setContextProperty>` . Changes to the property's values are detected through the property's notify signal. Setting a context object is both faster and easier than manually adding and maintaing context property values.

    The following example has the same effect as the previous one, but it uses a context object.

    ::

                class MyDataSet : ... {
                    ...
                    Q_PROPERTY(QAbstractItemModel *myModel READ model NOTIFY modelChanged)
                    ...
                };
                
                MyDataSet myDataSet;
                QDeclarativeEngine engine;
                QDeclarativeContext *context = new QDeclarativeContext(engine.rootContext());
                context->setContextObject(&myDataSet);
                
                QDeclarativeComponent component(&engine);
                component.setData("import QtQuick 1.0\nListView { model: myModel }", QUrl());
                component.create(context);


    All properties added explicitly by :meth:`QDeclarativeContext.setContextProperty()<PySide.QtDeclarative.QDeclarativeContext.setContextProperty>` take precedence over the context object's properties.

    .. _PySide.QtDeclarative.QDeclarativeContext_the-context-hierarchy:



The Context Hierarchy
^^^^^^^^^^^^^^^^^^^^^

    Contexts form a hierarchy. The root of this hierarchy is the QML engine's :meth:`root context<PySide.QtDeclarative.QDeclarativeEngine.rootContext>` . Child contexts inherit the context properties of their parents; if a child context sets a context property that already exists in its parent, the new context property overrides that of the parent.

    The following example defines two contexts - ``context1`` and ``context2`` . The second context overrides the "b" context property inherited from the first with a new value.

    ::

                QDeclarativeEngine engine;
                QDeclarativeContext *context1 = new QDeclarativeContext(engine.rootContext());
                QDeclarativeContext *context2 = new QDeclarativeContext(context1);
                
                context1->setContextProperty("a", 12);
                context1->setContextProperty("b", 12);
                
                context2->setContextProperty("b", 15);


    While QML objects instantiated in a context are not strictly owned by that context, their bindings are. If a context is destroyed, the property bindings of outstanding QML objects will stop evaluating.

    .. warning::  Setting the context object or adding new context properties after an object has been created in that context is an expensive operation (essentially forcing all bindings to reevaluate). Thus whenever possible you should complete "setup" of the context before using it to create any objects.


.. class:: QDeclarativeContext(parent[, objParent=None])
           QDeclarativeContext(parent[, objParent=None])

    :param parent: :class:`PySide.QtDeclarative.QDeclarativeContext`
    :param objParent: :class:`PySide.QtCore.QObject`





.. method:: PySide.QtDeclarative.QDeclarativeContext.baseUrl()


    :rtype: :class:`PySide.QtCore.QUrl`







.. method:: PySide.QtDeclarative.QDeclarativeContext.contextObject()


    :rtype: :class:`PySide.QtCore.QObject`







.. method:: PySide.QtDeclarative.QDeclarativeContext.contextProperty(arg__1)


    :param arg__1: unicode
    :rtype: object







.. method:: PySide.QtDeclarative.QDeclarativeContext.engine()


    :rtype: :class:`PySide.QtDeclarative.QDeclarativeEngine`







.. method:: PySide.QtDeclarative.QDeclarativeContext.isValid()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtDeclarative.QDeclarativeContext.parentContext()


    :rtype: :class:`PySide.QtDeclarative.QDeclarativeContext`







.. method:: PySide.QtDeclarative.QDeclarativeContext.resolvedUrl(arg__1)


    :param arg__1: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.QUrl`







.. method:: PySide.QtDeclarative.QDeclarativeContext.setBaseUrl(arg__1)


    :param arg__1: :class:`PySide.QtCore.QUrl`







.. method:: PySide.QtDeclarative.QDeclarativeContext.setContextObject(arg__1)


    :param arg__1: :class:`PySide.QtCore.QObject`







.. method:: PySide.QtDeclarative.QDeclarativeContext.setContextProperty(arg__1, arg__2)


    :param arg__1: unicode
    :param arg__2: object







.. method:: PySide.QtDeclarative.QDeclarativeContext.setContextProperty(arg__1, arg__2)


    :param arg__1: unicode
    :param arg__2: :class:`PySide.QtCore.QObject`








