.. module:: PySide.QtXml
.. _QDomText:

QDomText
********

.. inheritance-diagram:: QDomText
    :parts: 2

**Inherited by:** :ref:`QDomCDATASection`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`splitText<PySide.QtXml.QDomText.splitText>` (offset)


Detailed Description
--------------------



    The :class:`PySide.QtXml.QDomText` class represents text data in the parsed XML document.

    You can split the text in a :class:`PySide.QtXml.QDomText` object over two :class:`PySide.QtXml.QDomText` objecs with :meth:`PySide.QtXml.QDomText.splitText` .

    For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the :class:`PySide.QtXml.QDomDocument` documentation.


.. class:: QDomText()
           QDomText(x)

    :param x: :class:`PySide.QtXml.QDomText`

    Constructs an empty :class:`PySide.QtXml.QDomText` object.

    To construct a :class:`PySide.QtXml.QDomText` with content, use :meth:`QDomDocument.createTextNode()<PySide.QtXml.QDomDocument.createTextNode>` .


    Constructs a copy of ``x`` .

    The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use :meth:`PySide.QtXml.QDomNode.cloneNode` .


.. method:: PySide.QtXml.QDomText.splitText(offset)


    :param offset: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtXml.QDomText`




    Splits this DOM text object into two :class:`PySide.QtXml.QDomText` objects. This object keeps its first ``offset`` characters and the second (newly created) object is inserted into the document tree after this object with the remaining characters.

    The function returns the newly created object.

    .. seealso::  :meth:`QDomNode.normalize()<PySide.QtXml.QDomNode.normalize>` 



