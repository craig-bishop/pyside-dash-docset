.. module:: PySide.QtCore
.. _QPointF:

QPointF
*******

.. inheritance-diagram:: QPointF
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtCore.QPointF.__add__>` (, p2)
*    def :meth:`__div__<PySide.QtCore.QPointF.__div__>` (, c)
*    def :meth:`__eq__<PySide.QtCore.QPointF.__eq__>` (, p2)
*    def :meth:`__iadd__<PySide.QtCore.QPointF.__iadd__>` (p)
*    def :meth:`__idiv__<PySide.QtCore.QPointF.__idiv__>` (c)
*    def :meth:`__imul__<PySide.QtCore.QPointF.__imul__>` (c)
*    def :meth:`__isub__<PySide.QtCore.QPointF.__isub__>` (p)
*    def :meth:`__mul__<PySide.QtCore.QPointF.__mul__>` (, c)
*    def :meth:`__mul__<PySide.QtCore.QPointF.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtCore.QPointF.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtCore.QPointF.__mul__>` (, matrix)
*    def :meth:`__mul__<PySide.QtCore.QPointF.__mul__>` (c)
*    def :meth:`__mul__<PySide.QtCore.QPointF.__mul__>` (matrix)
*    def :meth:`__ne__<PySide.QtCore.QPointF.__ne__>` (, p2)
*    def :meth:`__reduce__<PySide.QtCore.QPointF.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QPointF.__repr__>` ()
*    def :meth:`__sub__<PySide.QtCore.QPointF.__sub__>` ()
*    def :meth:`__sub__<PySide.QtCore.QPointF.__sub__>` (, p2)
*    def :meth:`isNull<PySide.QtCore.QPointF.isNull>` ()
*    def :meth:`manhattanLength<PySide.QtCore.QPointF.manhattanLength>` ()
*    def :meth:`setX<PySide.QtCore.QPointF.setX>` (x)
*    def :meth:`setY<PySide.QtCore.QPointF.setY>` (y)
*    def :meth:`toPoint<PySide.QtCore.QPointF.toPoint>` ()
*    def :meth:`toTuple<PySide.QtCore.QPointF.toTuple>` ()
*    def :meth:`x<PySide.QtCore.QPointF.x>` ()
*    def :meth:`y<PySide.QtCore.QPointF.y>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QPointF` class defines a point in the plane using floating point precision.

    A point is specified by a x coordinate and an y coordinate which can be accessed using the :meth:`PySide.QtCore.QPointF.x` and :meth:`PySide.QtCore.QPointF.y` functions. The coordinates of the point are specified using floating point numbers for accuracy. The :meth:`PySide.QtCore.QPointF.isNull` function returns true if both x and y are set to 0.0. The coordinates can be set (or altered) using the :meth:`PySide.QtCore.QPointF.setX` and :meth:`PySide.QtCore.QPointF.setY` functions, or alternatively the :meth:`PySide.QtCore.QPointF.rx` and :meth:`PySide.QtCore.QPointF.ry` functions which return references to the coordinates (allowing direct manipulation).

    Given a point *p* , the following statements are all equivalent:

    ::

        p = QPointF()

        p.setX(p.x() + 1.0)
        p += QPointF(1.0, 0.0)
        #p.rx()++;


    A :class:`PySide.QtCore.QPointF` object can also be used as a vector: Addition and subtraction are defined as for vectors (each component is added separately). A :class:`PySide.QtCore.QPointF` object can also be divided or multiplied by an ``int`` or a ``qreal`` .

    In addition, the :class:`PySide.QtCore.QPointF` class provides a constructor converting a :class:`PySide.QtCore.QPoint` object into a :class:`PySide.QtCore.QPointF` object, and a corresponding :meth:`PySide.QtCore.QPointF.toPoint` function which returns a :class:`PySide.QtCore.QPoint` copy of *this* point. Finally, :class:`PySide.QtCore.QPointF` objects can be streamed as well as compared.

    .. seealso::  :class:`PySide.QtCore.QPoint`  :class:`PySide.QtGui.QPolygonF` 

.. class:: QPointF()
           QPointF(p)
           QPointF(QPointF)
           QPointF(xpos, ypos)

    :param p: :class:`PySide.QtCore.QPoint`
    :param ypos: :class:`PySide.QtCore.qreal`
    :param xpos: :class:`PySide.QtCore.qreal`
    :param QPointF: :class:`PySide.QtCore.QPointF`

    Constructs a null point, i.e. with coordinates (0.0, 0.0)

    .. seealso::  :meth:`PySide.QtCore.QPointF.isNull` 

    Constructs a copy of the given ``point`` .

    .. seealso::  :meth:`PySide.QtCore.QPointF.toPoint` 



    Constructs a point with the given coordinates (``x`` , ``y`` ).

    .. seealso::  :meth:`PySide.QtCore.QPointF.setX`  :meth:`PySide.QtCore.QPointF.setY` 

.. method:: PySide.QtCore.QPointF.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QPointF.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QPointF.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if both the x and y coordinates are set to +0.0; otherwise returns false.

    .. note::  Since this function treats +0.0 and -0.0 differently, points with zero-valued coordinates where either or both values have a negative sign are not defined to be null points.



.. method:: PySide.QtCore.QPointF.manhattanLength()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the sum of the absolute values of :meth:`PySide.QtCore.QPointF.x` and :meth:`PySide.QtCore.QPointF.y` , traditionally known as the "Manhattan length" of the vector from the origin to the point.

    .. seealso::  :meth:`QPoint.manhattanLength()<PySide.QtCore.QPoint.manhattanLength>` 


.. method:: PySide.QtCore.QPointF.__ne__(, p2)


    :param p2: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QPointF.__mul__(, c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__mul__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__mul__(, m)


    :param m: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__mul__(, matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__mul__(, m)


    :param m: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__mul__(matrix)


    :param matrix: :class:`PySide.QtGui.QMatrix4x4`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__imul__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPointF`




    Multiplies this point's coordinates by the given ``factor`` , and returns a reference to this point. For example:

    ::

        p = QPointF(-1.1, 4.1)
        p *= 2.5  # p becomes (-2.75, 10.25)


    .. seealso::  :meth:`PySide.QtCore.QPointF.operator/=` 


.. method:: PySide.QtCore.QPointF.__add__(, p2)


    :param p2: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__iadd__(p)


    :param p: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`




    Adds the given ``point`` to this point and returns a reference to this point. For example:

    ::

        p = QPointF( 3.1, 7.1)
        q = QPointF(-1.0, 4.1)
        p += q    # p becomes (2.1, 11.2)


    .. seealso::  :meth:`PySide.QtCore.QPointF.operator-=` 


.. method:: PySide.QtCore.QPointF.__sub__()


    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__sub__(, p2)


    :param p2: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__isub__(p)


    :param p: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`




    Subtracts the given ``point`` from this point and returns a reference to this point. For example:

    ::

        p = QPointF( 3.1, 7.1)
        q = QPointF(-1.0, 4.1)
        p -= q    # p becomes (4.1, 3.0)


    .. seealso::  :meth:`PySide.QtCore.QPointF.operator+=` 


.. method:: PySide.QtCore.QPointF.__div__(, c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPointF`







.. method:: PySide.QtCore.QPointF.__idiv__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPointF`




    Divides both x and y by the given ``divisor`` , and returns a reference to this point. For example:

    ::

        p = QPointF(-2.75, 10.25)
        p /= 2.5  # p becomes (-1.1, 4.1)


    .. seealso::  :meth:`PySide.QtCore.QPointF.operator\*=` 


.. method:: PySide.QtCore.QPointF.__eq__(, p2)


    :param p2: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QPointF.setX(x)


    :param x: :class:`PySide.QtCore.qreal`




    Sets the x coordinate of this point to the given ``x`` coordinate.

    .. seealso::  :meth:`PySide.QtCore.QPointF.x`  :meth:`PySide.QtCore.QPointF.setY` 


.. method:: PySide.QtCore.QPointF.setY(y)


    :param y: :class:`PySide.QtCore.qreal`




    Sets the y coordinate of this point to the given ``y`` coordinate.

    .. seealso::  :meth:`PySide.QtCore.QPointF.y`  :meth:`PySide.QtCore.QPointF.setX` 


.. method:: PySide.QtCore.QPointF.toPoint()


    :rtype: :class:`PySide.QtCore.QPoint`




    Rounds the coordinates of this point to the nearest integer, and returns a :class:`PySide.QtCore.QPoint` object with the rounded coordinates.

    .. seealso::  :meth:`PySide.QtCore.QPointF.QPointF` 


.. method:: PySide.QtCore.QPointF.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QPointF.x()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x-coordinate of this point.

    .. seealso::  :meth:`PySide.QtCore.QPointF.setX`  :meth:`PySide.QtCore.QPointF.rx` 


.. method:: PySide.QtCore.QPointF.y()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y-coordinate of this point.

    .. seealso::  :meth:`PySide.QtCore.QPointF.setY`  :meth:`PySide.QtCore.QPointF.ry` 



