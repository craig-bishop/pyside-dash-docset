.. module:: PySide.QtCore
.. _QMetaMethod:

QMetaMethod
***********

.. inheritance-diagram:: QMetaMethod
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`access<PySide.QtCore.QMetaMethod.access>` ()
*    def :meth:`enclosingMetaObject<PySide.QtCore.QMetaMethod.enclosingMetaObject>` ()
*    def :meth:`invoke<PySide.QtCore.QMetaMethod.invoke>` (object, connectionType, returnValue[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])
*    def :meth:`invoke<PySide.QtCore.QMetaMethod.invoke>` (object, connectionType[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])
*    def :meth:`invoke<PySide.QtCore.QMetaMethod.invoke>` (object, returnValue[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])
*    def :meth:`invoke<PySide.QtCore.QMetaMethod.invoke>` (object[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])
*    def :meth:`methodIndex<PySide.QtCore.QMetaMethod.methodIndex>` ()
*    def :meth:`methodType<PySide.QtCore.QMetaMethod.methodType>` ()
*    def :meth:`parameterNames<PySide.QtCore.QMetaMethod.parameterNames>` ()
*    def :meth:`parameterTypes<PySide.QtCore.QMetaMethod.parameterTypes>` ()
*    def :meth:`revision<PySide.QtCore.QMetaMethod.revision>` ()
*    def :meth:`signature<PySide.QtCore.QMetaMethod.signature>` ()
*    def :meth:`tag<PySide.QtCore.QMetaMethod.tag>` ()
*    def :meth:`typeName<PySide.QtCore.QMetaMethod.typeName>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QMetaMethod` class provides meta-data about a member function.

    A :class:`PySide.QtCore.QMetaMethod` has a :meth:`PySide.QtCore.QMetaMethod.methodType` , a :meth:`PySide.QtCore.QMetaMethod.signature` , a list of :meth:`PySide.QtCore.QMetaMethod.parameterTypes` and :meth:`PySide.QtCore.QMetaMethod.parameterNames` , a return :meth:`PySide.QtCore.QMetaMethod.typeName` , a :meth:`PySide.QtCore.QMetaMethod.tag` , and an :meth:`PySide.QtCore.QMetaMethod.access` specifier. You can use :meth:`PySide.QtCore.QMetaMethod.invoke` to invoke the method on an arbitrary :class:`PySide.QtCore.QObject` .

    .. seealso::  :class:`PySide.QtCore.QMetaObject`  :class:`PySide.QtCore.QMetaEnum`  :class:`PySide.QtCore.QMetaProperty`  :ref:`Qt's Property System<properties.html>` 

.. class:: QMetaMethod()
           QMetaMethod(QMetaMethod)

    :param QMetaMethod: :class:`PySide.QtCore.QMetaMethod`




.. attribute:: PySide.QtCore.QMetaMethod.Access

    This enum describes the access level of a method, following the conventions used in C++.

    +---------------------+-----------+
    |Constant             |Description|
    +=====================+===========+
    |QMetaMethod.Private  |           |
    +---------------------+-----------+
    |QMetaMethod.Protected|           |
    +---------------------+-----------+
    |QMetaMethod.Public   |           |
    +---------------------+-----------+


.. attribute:: PySide.QtCore.QMetaMethod.MethodType

    +-----------------------+----------------------------------------+
    |Constant               |Description                             |
    +=======================+========================================+
    |QMetaMethod.Method     |The function is a plain member function.|
    +-----------------------+----------------------------------------+
    |QMetaMethod.Signal     |The function is a signal.               |
    +-----------------------+----------------------------------------+
    |QMetaMethod.Slot       |The function is a slot.                 |
    +-----------------------+----------------------------------------+
    |QMetaMethod.Constructor|The function is a constructor.          |
    +-----------------------+----------------------------------------+


.. method:: PySide.QtCore.QMetaMethod.access()


    :rtype: :attr:`PySide.QtCore.QMetaMethod.Access`




    Returns the access specification of this method (private, protected, or public).

    Signals are always protected, meaning that you can only emit them from the class or from a subclass.

    .. seealso::  :meth:`PySide.QtCore.QMetaMethod.methodType` 


.. method:: PySide.QtCore.QMetaMethod.enclosingMetaObject()


    :rtype: :class:`PySide.QtCore.QMetaObject`






.. method:: PySide.QtCore.QMetaMethod.invoke(object, connectionType[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])


    :param object: :class:`PySide.QtCore.QObject`
    :param connectionType: :attr:`PySide.QtCore.Qt.ConnectionType`
    :param val0: :class:`PySide.QtCore.QGenericArgument`
    :param val1: :class:`PySide.QtCore.QGenericArgument`
    :param val2: :class:`PySide.QtCore.QGenericArgument`
    :param val3: :class:`PySide.QtCore.QGenericArgument`
    :param val4: :class:`PySide.QtCore.QGenericArgument`
    :param val5: :class:`PySide.QtCore.QGenericArgument`
    :param val6: :class:`PySide.QtCore.QGenericArgument`
    :param val7: :class:`PySide.QtCore.QGenericArgument`
    :param val8: :class:`PySide.QtCore.QGenericArgument`
    :param val9: :class:`PySide.QtCore.QGenericArgument`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QMetaMethod.invoke(object, connectionType, returnValue[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])


    :param object: :class:`PySide.QtCore.QObject`
    :param connectionType: :attr:`PySide.QtCore.Qt.ConnectionType`
    :param returnValue: :class:`PySide.QtCore.QGenericReturnArgument`
    :param val0: :class:`PySide.QtCore.QGenericArgument`
    :param val1: :class:`PySide.QtCore.QGenericArgument`
    :param val2: :class:`PySide.QtCore.QGenericArgument`
    :param val3: :class:`PySide.QtCore.QGenericArgument`
    :param val4: :class:`PySide.QtCore.QGenericArgument`
    :param val5: :class:`PySide.QtCore.QGenericArgument`
    :param val6: :class:`PySide.QtCore.QGenericArgument`
    :param val7: :class:`PySide.QtCore.QGenericArgument`
    :param val8: :class:`PySide.QtCore.QGenericArgument`
    :param val9: :class:`PySide.QtCore.QGenericArgument`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QMetaMethod.invoke(object, returnValue[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])


    :param object: :class:`PySide.QtCore.QObject`
    :param returnValue: :class:`PySide.QtCore.QGenericReturnArgument`
    :param val0: :class:`PySide.QtCore.QGenericArgument`
    :param val1: :class:`PySide.QtCore.QGenericArgument`
    :param val2: :class:`PySide.QtCore.QGenericArgument`
    :param val3: :class:`PySide.QtCore.QGenericArgument`
    :param val4: :class:`PySide.QtCore.QGenericArgument`
    :param val5: :class:`PySide.QtCore.QGenericArgument`
    :param val6: :class:`PySide.QtCore.QGenericArgument`
    :param val7: :class:`PySide.QtCore.QGenericArgument`
    :param val8: :class:`PySide.QtCore.QGenericArgument`
    :param val9: :class:`PySide.QtCore.QGenericArgument`
    :rtype: :class:`PySide.QtCore.bool`




    This function overloads :meth:`PySide.QtCore.QMetaMethod.invoke` .

    This overload always invokes this method using the connection type :attr:`Qt.AutoConnection<Qt.ConnectionType>` .



.. method:: PySide.QtCore.QMetaMethod.invoke(object[, val0=QGenericArgument(0)[, val1=QGenericArgument()[, val2=QGenericArgument()[, val3=QGenericArgument()[, val4=QGenericArgument()[, val5=QGenericArgument()[, val6=QGenericArgument()[, val7=QGenericArgument()[, val8=QGenericArgument()[, val9=QGenericArgument()]]]]]]]]]])


    :param object: :class:`PySide.QtCore.QObject`
    :param val0: :class:`PySide.QtCore.QGenericArgument`
    :param val1: :class:`PySide.QtCore.QGenericArgument`
    :param val2: :class:`PySide.QtCore.QGenericArgument`
    :param val3: :class:`PySide.QtCore.QGenericArgument`
    :param val4: :class:`PySide.QtCore.QGenericArgument`
    :param val5: :class:`PySide.QtCore.QGenericArgument`
    :param val6: :class:`PySide.QtCore.QGenericArgument`
    :param val7: :class:`PySide.QtCore.QGenericArgument`
    :param val8: :class:`PySide.QtCore.QGenericArgument`
    :param val9: :class:`PySide.QtCore.QGenericArgument`
    :rtype: :class:`PySide.QtCore.bool`




    This function overloads :meth:`PySide.QtCore.QMetaMethod.invoke` .

    This overload invokes this method using the connection type :attr:`Qt.AutoConnection<Qt.ConnectionType>` and ignores return values.



.. method:: PySide.QtCore.QMetaMethod.methodIndex()


    :rtype: :class:`PySide.QtCore.int`




    Returns this method's index.



.. method:: PySide.QtCore.QMetaMethod.methodType()


    :rtype: :attr:`PySide.QtCore.QMetaMethod.MethodType`




    Returns the type of this method (signal, slot, or method).

    .. seealso::  :meth:`PySide.QtCore.QMetaMethod.access` 


.. method:: PySide.QtCore.QMetaMethod.parameterNames()


    :rtype: 




    Returns a list of parameter names.

    .. seealso::  :meth:`PySide.QtCore.QMetaMethod.parameterTypes`  :meth:`PySide.QtCore.QMetaMethod.signature` 


.. method:: PySide.QtCore.QMetaMethod.parameterTypes()


    :rtype: 




    Returns a list of parameter types.

    .. seealso::  :meth:`PySide.QtCore.QMetaMethod.parameterNames`  :meth:`PySide.QtCore.QMetaMethod.signature` 


.. method:: PySide.QtCore.QMetaMethod.revision()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QMetaMethod.signature()


    :rtype: str




    Returns the signature of this method (e.g., ``setValue(double)`` ).

    .. seealso::  :meth:`PySide.QtCore.QMetaMethod.parameterTypes`  :meth:`PySide.QtCore.QMetaMethod.parameterNames` 


.. method:: PySide.QtCore.QMetaMethod.tag()


    :rtype: str




    Returns the tag associated with this method.

    Tags are special macros recognized by ``moc`` that make it possible to add extra information about a method. For the moment, ``moc`` doesn't support any special tags.



.. method:: PySide.QtCore.QMetaMethod.typeName()


    :rtype: str




    Returns the return type of this method, or an empty string if the return type is *void* .




