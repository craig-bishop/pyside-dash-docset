.. module:: PySide.QtCore
.. _QLineF:

QLineF
******

.. inheritance-diagram:: QLineF
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtCore.QLineF.__eq__>` (d)
*    def :meth:`__mul__<PySide.QtCore.QLineF.__mul__>` (, m)
*    def :meth:`__mul__<PySide.QtCore.QLineF.__mul__>` (, m)
*    def :meth:`__ne__<PySide.QtCore.QLineF.__ne__>` (d)
*    def :meth:`__reduce__<PySide.QtCore.QLineF.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QLineF.__repr__>` ()
*    def :meth:`angle<PySide.QtCore.QLineF.angle>` ()
*    def :meth:`angle<PySide.QtCore.QLineF.angle>` (l)
*    def :meth:`angleTo<PySide.QtCore.QLineF.angleTo>` (l)
*    def :meth:`dx<PySide.QtCore.QLineF.dx>` ()
*    def :meth:`dy<PySide.QtCore.QLineF.dy>` ()
*    def :meth:`intersect<PySide.QtCore.QLineF.intersect>` (l)
*    def :meth:`isNull<PySide.QtCore.QLineF.isNull>` ()
*    def :meth:`length<PySide.QtCore.QLineF.length>` ()
*    def :meth:`normalVector<PySide.QtCore.QLineF.normalVector>` ()
*    def :meth:`p1<PySide.QtCore.QLineF.p1>` ()
*    def :meth:`p2<PySide.QtCore.QLineF.p2>` ()
*    def :meth:`pointAt<PySide.QtCore.QLineF.pointAt>` (t)
*    def :meth:`setAngle<PySide.QtCore.QLineF.setAngle>` (angle)
*    def :meth:`setLength<PySide.QtCore.QLineF.setLength>` (len)
*    def :meth:`setLine<PySide.QtCore.QLineF.setLine>` (x1, y1, x2, y2)
*    def :meth:`setP1<PySide.QtCore.QLineF.setP1>` (p1)
*    def :meth:`setP2<PySide.QtCore.QLineF.setP2>` (p2)
*    def :meth:`setPoints<PySide.QtCore.QLineF.setPoints>` (p1, p2)
*    def :meth:`toLine<PySide.QtCore.QLineF.toLine>` ()
*    def :meth:`toTuple<PySide.QtCore.QLineF.toTuple>` ()
*    def :meth:`translate<PySide.QtCore.QLineF.translate>` (dx, dy)
*    def :meth:`translate<PySide.QtCore.QLineF.translate>` (p)
*    def :meth:`translated<PySide.QtCore.QLineF.translated>` (dx, dy)
*    def :meth:`translated<PySide.QtCore.QLineF.translated>` (p)
*    def :meth:`unitVector<PySide.QtCore.QLineF.unitVector>` ()
*    def :meth:`x1<PySide.QtCore.QLineF.x1>` ()
*    def :meth:`x2<PySide.QtCore.QLineF.x2>` ()
*    def :meth:`y1<PySide.QtCore.QLineF.y1>` ()
*    def :meth:`y2<PySide.QtCore.QLineF.y2>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`fromPolar<PySide.QtCore.QLineF.fromPolar>` (length, angle)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QLineF` class provides a two-dimensional vector using floating point precision.

    A :class:`PySide.QtCore.QLineF` describes a finite length line (or line segment) on a two-dimensional surface. :class:`PySide.QtCore.QLineF` defines the start and end points of the line using floating point accuracy for coordinates. Use the :meth:`PySide.QtCore.QLineF.toLine` function to retrieve an integer based copy of this line.

    +-----------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qline-point.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qline-coordinates.png|
    +-----------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+

    The positions of the line's start and end points can be retrieved using the :meth:`PySide.QtCore.QLineF.p1` , :meth:`PySide.QtCore.QLineF.x1` , :meth:`PySide.QtCore.QLineF.y1` , :meth:`PySide.QtCore.QLineF.p2` , :meth:`PySide.QtCore.QLineF.x2` , and :meth:`PySide.QtCore.QLineF.y2` functions. The :meth:`PySide.QtCore.QLineF.dx` and :meth:`PySide.QtCore.QLineF.dy` functions return the horizontal and vertical components of the line, respectively.

    The line's length can be retrieved using the :meth:`PySide.QtCore.QLineF.length` function, and altered using the :meth:`PySide.QtCore.QLineF.setLength` function. Similarly, :meth:`PySide.QtCore.QLineF.angle` and :meth:`PySide.QtCore.QLineF.setAngle` are respectively used for retrieving and altering the angle of the line. Use the :meth:`PySide.QtCore.QLineF.isNull` function to determine whether the :class:`PySide.QtCore.QLineF` represents a valid line or a null line.

    The :meth:`PySide.QtCore.QLineF.intersect` function determines the :attr:`QLineF.IntersectType` for this line and a given line, while the :meth:`PySide.QtCore.QLineF.angle` function returns the angle between the lines. In addition, the :meth:`PySide.QtCore.QLineF.unitVector` function returns a line that has the same starting point as this line, but with a length of only 1, while the :meth:`PySide.QtCore.QLineF.normalVector` function returns a line that is perpendicular to this line with the same starting point and length.

    Finally, the line can be translated a given offset using the :meth:`PySide.QtCore.QLineF.translate` function, and can be traversed using the :meth:`PySide.QtCore.QLineF.pointAt` function.

    .. seealso::  :class:`PySide.QtCore.QLine`  :class:`PySide.QtGui.QPolygonF`  :class:`PySide.QtCore.QRectF` 

.. class:: QLineF()
           QLineF(line)
           QLineF(QLineF)
           QLineF(pt1, pt2)
           QLineF(x1, y1, x2, y2)

    :param QLineF: :class:`PySide.QtCore.QLineF`
    :param line: :class:`PySide.QtCore.QLine`
    :param pt1: :class:`PySide.QtCore.QPointF`
    :param pt2: :class:`PySide.QtCore.QPointF`
    :param y1: :class:`PySide.QtCore.qreal`
    :param x1: :class:`PySide.QtCore.qreal`
    :param y2: :class:`PySide.QtCore.qreal`
    :param x2: :class:`PySide.QtCore.qreal`

    Constructs a null line.


    Construct a :class:`PySide.QtCore.QLineF` object from the given integer-based ``line`` .

    .. seealso::  :meth:`PySide.QtCore.QLineF.toLine` 



    Constructs a line object that represents the line between ``p1`` and ``p2`` .


    Constructs a line object that represents the line between (``x1`` , ``y1`` ) and (``x2`` , ``y2`` ).


.. attribute:: PySide.QtCore.QLineF.IntersectType

    Describes the intersection between two lines.

    +----------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qlinef-unbounded.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qlinef-bounded.png|
    +----------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+
    |:attr:`QLineF.UnboundedIntersection<QLineF.IntersectType>`                                                |:attr:`QLineF.BoundedIntersection<QLineF.IntersectType>`                                                |
    +----------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+

    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |Constant                    |Description                                                                                                                     |
    +============================+================================================================================================================================+
    |QLineF.NoIntersection       |Indicates that the lines do not intersect; i.e. they are parallel.                                                              |
    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------+
    |QLineF.UnboundedIntersection|The two lines intersect, but not within the range defined by their lengths. This will be the case if the lines are not parallel.|
    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------+

    :meth:`PySide.QtCore.QLineF.intersect` will also return this value if the intersect point is within the start and end point of only one of the lines.

    +--------------------------+-------------------------------------------------------------------------------------+
    |Constant                  |Description                                                                          |
    +==========================+=====================================================================================+
    |QLineF.BoundedIntersection|The two lines intersect with each other within the start and end points of each line.|
    +--------------------------+-------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtCore.QLineF.intersect` 

.. method:: PySide.QtCore.QLineF.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QLineF.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QLineF.angle(l)


    :param l: :class:`PySide.QtCore.QLineF`
    :rtype: :class:`PySide.QtCore.qreal`




    Returns the angle (in degrees) between this line and the given ``line`` , taking the direction of the lines into account. If the lines do not intersect within their range, it is the intersection point of the extended lines that serves as origin (see :attr:`QLineF.UnboundedIntersection<QLineF.IntersectType>` ).

    +-------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qlinef-angle-identicaldirection.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qlinef-angle-oppositedirection.png|
    +-------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+

    When the lines are parallel, this function returns 0 if they have the same direction; otherwise it returns 180.

    .. seealso::  :meth:`PySide.QtCore.QLineF.intersect` 


.. method:: PySide.QtCore.QLineF.angle()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the angle of the line in degrees.

    Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

    .. seealso::  :meth:`PySide.QtCore.QLineF.setAngle` 


.. method:: PySide.QtCore.QLineF.angleTo(l)


    :param l: :class:`PySide.QtCore.QLineF`
    :rtype: :class:`PySide.QtCore.qreal`




    Returns the angle (in degrees) from this line to the given ``line`` , taking the direction of the lines into account. If the lines do not intersect within their range, it is the intersection point of the extended lines that serves as origin (see :attr:`QLineF.UnboundedIntersection<QLineF.IntersectType>` ).

    The returned value represents the number of degrees you need to add to this line to make it have the same angle as the given ``line`` , going counter-clockwise.

    .. seealso::  :meth:`PySide.QtCore.QLineF.intersect` 


.. method:: PySide.QtCore.QLineF.dx()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the horizontal component of the line's vector.

    .. seealso::  :meth:`PySide.QtCore.QLineF.dy`  :meth:`PySide.QtCore.QLineF.pointAt` 


.. method:: PySide.QtCore.QLineF.dy()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the vertical component of the line's vector.

    .. seealso::  :meth:`PySide.QtCore.QLineF.dx`  :meth:`PySide.QtCore.QLineF.pointAt` 


.. staticmethod:: PySide.QtCore.QLineF.fromPolar(length, angle)


    :param length: :class:`PySide.QtCore.qreal`
    :param angle: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QLineF`




    Returns a :class:`PySide.QtCore.QLineF` with the given ``length`` and ``angle`` .

    The first point of the line will be on the origin.

    Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.



.. method:: PySide.QtCore.QLineF.intersect(l)


    :param l: :class:`PySide.QtCore.QLineF`
    :rtype: (intersectType, intersectionPoint)




    Returns a value indicating whether or not *this* line intersects with the given ``line`` .

    The actual intersection point is extracted to ``intersectionPoint`` (if the pointer is valid). If the lines are parallel, the intersection point is undefined.



.. method:: PySide.QtCore.QLineF.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the line is not set up with valid start and end point; otherwise returns false.



.. method:: PySide.QtCore.QLineF.length()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the length of the line.

    .. seealso::  :meth:`PySide.QtCore.QLineF.setLength` 


.. method:: PySide.QtCore.QLineF.normalVector()


    :rtype: :class:`PySide.QtCore.QLineF`




    Returns a line that is perpendicular to this line with the same starting point and length.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qlinef-normalvector.png

    .. seealso::  :meth:`PySide.QtCore.QLineF.unitVector` 


.. method:: PySide.QtCore.QLineF.__ne__(d)


    :param d: :class:`PySide.QtCore.QLineF`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``line`` is not the same as *this* line.

    A line is different from another line if their start or end points differ, or the internal order of the points is different.



.. method:: PySide.QtCore.QLineF.__mul__(, m)


    :param m: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.QLineF`







.. method:: PySide.QtCore.QLineF.__mul__(, m)


    :param m: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtCore.QLineF`







.. method:: PySide.QtCore.QLineF.__eq__(d)


    :param d: :class:`PySide.QtCore.QLineF`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``line`` is the same as this line.

    A line is identical to another line if the start and end points are identical, and the internal order of the points is the same.



.. method:: PySide.QtCore.QLineF.p1()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the line's start point.

    .. seealso::  :meth:`PySide.QtCore.QLineF.setP1`  :meth:`PySide.QtCore.QLineF.x1`  :meth:`PySide.QtCore.QLineF.y1`  :meth:`PySide.QtCore.QLineF.p2` 


.. method:: PySide.QtCore.QLineF.p2()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the line's end point.

    .. seealso::  :meth:`PySide.QtCore.QLineF.setP2`  :meth:`PySide.QtCore.QLineF.x2`  :meth:`PySide.QtCore.QLineF.y2`  :meth:`PySide.QtCore.QLineF.p1` 


.. method:: PySide.QtCore.QLineF.pointAt(t)


    :param t: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the point at the parameterized position specified by ``t`` . The function returns the line's start point if t = 0, and its end point if t = 1.

    .. seealso::  :meth:`PySide.QtCore.QLineF.dx`  :meth:`PySide.QtCore.QLineF.dy` 


.. method:: PySide.QtCore.QLineF.setAngle(angle)


    :param angle: :class:`PySide.QtCore.qreal`




    Sets the angle of the line to the given ``angle`` (in degrees). This will change the position of the second point of the line such that the line has the given angle.

    Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

    .. seealso::  :meth:`PySide.QtCore.QLineF.angle` 


.. method:: PySide.QtCore.QLineF.setLength(len)


    :param len: :class:`PySide.QtCore.qreal`




    Sets the length of the line to the given ``length`` . :class:`PySide.QtCore.QLineF` will move the end point - :meth:`PySide.QtCore.QLineF.p2` - of the line to give the line its new length.

    If the line is a null line, the length will remain zero regardless of the length specified.

    .. seealso::  :meth:`PySide.QtCore.QLineF.length`  :meth:`PySide.QtCore.QLineF.isNull` 


.. method:: PySide.QtCore.QLineF.setLine(x1, y1, x2, y2)


    :param x1: :class:`PySide.QtCore.qreal`
    :param y1: :class:`PySide.QtCore.qreal`
    :param x2: :class:`PySide.QtCore.qreal`
    :param y2: :class:`PySide.QtCore.qreal`




    Sets this line to the start in ``x1`` , ``y1`` and end in ``x2`` , ``y2`` .

    .. seealso::  :meth:`PySide.QtCore.QLineF.setP1`  :meth:`PySide.QtCore.QLineF.setP2`  :meth:`PySide.QtCore.QLineF.p1`  :meth:`PySide.QtCore.QLineF.p2` 


.. method:: PySide.QtCore.QLineF.setP1(p1)


    :param p1: :class:`PySide.QtCore.QPointF`




    Sets the starting point of this line to ``p1`` .

    .. seealso::  :meth:`PySide.QtCore.QLineF.setP2`  :meth:`PySide.QtCore.QLineF.p1` 


.. method:: PySide.QtCore.QLineF.setP2(p2)


    :param p2: :class:`PySide.QtCore.QPointF`




    Sets the end point of this line to ``p2`` .

    .. seealso::  :meth:`PySide.QtCore.QLineF.setP1`  :meth:`PySide.QtCore.QLineF.p2` 


.. method:: PySide.QtCore.QLineF.setPoints(p1, p2)


    :param p1: :class:`PySide.QtCore.QPointF`
    :param p2: :class:`PySide.QtCore.QPointF`




    Sets the start point of this line to ``p1`` and the end point of this line to ``p2`` .

    .. seealso::  :meth:`PySide.QtCore.QLineF.setP1`  :meth:`PySide.QtCore.QLineF.setP2`  :meth:`PySide.QtCore.QLineF.p1`  :meth:`PySide.QtCore.QLineF.p2` 


.. method:: PySide.QtCore.QLineF.toLine()


    :rtype: :class:`PySide.QtCore.QLine`




    Returns an integer based copy of this line.

    Note that the returned line's start and end points are rounded to the nearest integer.

    .. seealso::  :meth:`PySide.QtCore.QLineF.QLineF` 


.. method:: PySide.QtCore.QLineF.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QLineF.translate(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Translates this line by the given ``offset`` .



.. method:: PySide.QtCore.QLineF.translate(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Translates this line the distance specified by ``dx`` and ``dy`` .



.. method:: PySide.QtCore.QLineF.translated(p)


    :param p: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QLineF`




    Returns this line translated by the given ``offset`` .



.. method:: PySide.QtCore.QLineF.translated(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QLineF`




    This is an overloaded function.

    Returns this line translated the distance specified by ``dx`` and ``dy`` .



.. method:: PySide.QtCore.QLineF.unitVector()


    :rtype: :class:`PySide.QtCore.QLineF`




    Returns the unit vector for this line, i.e a line starting at the same point as *this* line with a length of 1.0.

    .. seealso::  :meth:`PySide.QtCore.QLineF.normalVector` 


.. method:: PySide.QtCore.QLineF.x1()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x-coordinate of the line's start point.

    .. seealso::  :meth:`PySide.QtCore.QLineF.p1` 


.. method:: PySide.QtCore.QLineF.x2()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x-coordinate of the line's end point.

    .. seealso::  :meth:`PySide.QtCore.QLineF.p2` 


.. method:: PySide.QtCore.QLineF.y1()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y-coordinate of the line's start point.

    .. seealso::  :meth:`PySide.QtCore.QLineF.p1` 


.. method:: PySide.QtCore.QLineF.y2()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y-coordinate of the line's end point.

    .. seealso::  :meth:`PySide.QtCore.QLineF.p2` 



