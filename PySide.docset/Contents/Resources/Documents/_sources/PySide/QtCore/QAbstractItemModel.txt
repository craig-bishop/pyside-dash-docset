.. module:: PySide.QtCore
.. _QAbstractItemModel:

QAbstractItemModel
******************

.. inheritance-diagram:: QAbstractItemModel
    :parts: 2

**Inherited by:** :ref:`QDirModel`, :ref:`QAbstractListModel`, :ref:`QStringListModel`, :ref:`QHelpIndexModel`, :ref:`QAbstractTableModel`, :ref:`QSqlQueryModel`, :ref:`QSqlTableModel`, :ref:`QSqlRelationalTableModel`, :ref:`QAbstractProxyModel`, :ref:`QSortFilterProxyModel`, :ref:`QStandardItemModel`, :ref:`QProxyModel`, :ref:`QHelpContentModel`, :ref:`QFileSystemModel`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`beginInsertColumns<PySide.QtCore.QAbstractItemModel.beginInsertColumns>` (parent, first, last)
*    def :meth:`beginInsertRows<PySide.QtCore.QAbstractItemModel.beginInsertRows>` (parent, first, last)
*    def :meth:`beginMoveColumns<PySide.QtCore.QAbstractItemModel.beginMoveColumns>` (sourceParent, sourceFirst, sourceLast, destinationParent, destinationColumn)
*    def :meth:`beginMoveRows<PySide.QtCore.QAbstractItemModel.beginMoveRows>` (sourceParent, sourceFirst, sourceLast, destinationParent, destinationRow)
*    def :meth:`beginRemoveColumns<PySide.QtCore.QAbstractItemModel.beginRemoveColumns>` (parent, first, last)
*    def :meth:`beginRemoveRows<PySide.QtCore.QAbstractItemModel.beginRemoveRows>` (parent, first, last)
*    def :meth:`beginResetModel<PySide.QtCore.QAbstractItemModel.beginResetModel>` ()
*    def :meth:`changePersistentIndex<PySide.QtCore.QAbstractItemModel.changePersistentIndex>` (from, to)
*    def :meth:`changePersistentIndexList<PySide.QtCore.QAbstractItemModel.changePersistentIndexList>` (from, to)
*    def :meth:`createIndex<PySide.QtCore.QAbstractItemModel.createIndex>` (row, column, ptr)
*    def :meth:`createIndex<PySide.QtCore.QAbstractItemModel.createIndex>` (row, column[, id=0])
*    def :meth:`decodeData<PySide.QtCore.QAbstractItemModel.decodeData>` (row, column, parent, stream)
*    def :meth:`encodeData<PySide.QtCore.QAbstractItemModel.encodeData>` (indexes, stream)
*    def :meth:`endInsertColumns<PySide.QtCore.QAbstractItemModel.endInsertColumns>` ()
*    def :meth:`endInsertRows<PySide.QtCore.QAbstractItemModel.endInsertRows>` ()
*    def :meth:`endMoveColumns<PySide.QtCore.QAbstractItemModel.endMoveColumns>` ()
*    def :meth:`endMoveRows<PySide.QtCore.QAbstractItemModel.endMoveRows>` ()
*    def :meth:`endRemoveColumns<PySide.QtCore.QAbstractItemModel.endRemoveColumns>` ()
*    def :meth:`endRemoveRows<PySide.QtCore.QAbstractItemModel.endRemoveRows>` ()
*    def :meth:`endResetModel<PySide.QtCore.QAbstractItemModel.endResetModel>` ()
*    def :meth:`hasIndex<PySide.QtCore.QAbstractItemModel.hasIndex>` (row, column[, parent=QModelIndex()])
*    def :meth:`insertColumn<PySide.QtCore.QAbstractItemModel.insertColumn>` (column[, parent=QModelIndex()])
*    def :meth:`insertRow<PySide.QtCore.QAbstractItemModel.insertRow>` (row[, parent=QModelIndex()])
*    def :meth:`persistentIndexList<PySide.QtCore.QAbstractItemModel.persistentIndexList>` ()
*    def :meth:`removeColumn<PySide.QtCore.QAbstractItemModel.removeColumn>` (column[, parent=QModelIndex()])
*    def :meth:`removeRow<PySide.QtCore.QAbstractItemModel.removeRow>` (row[, parent=QModelIndex()])
*    def :meth:`reset<PySide.QtCore.QAbstractItemModel.reset>` ()
*    def :meth:`roleNames<PySide.QtCore.QAbstractItemModel.roleNames>` ()
*    def :meth:`setRoleNames<PySide.QtCore.QAbstractItemModel.setRoleNames>` (roleNames)
*    def :meth:`setSupportedDragActions<PySide.QtCore.QAbstractItemModel.setSupportedDragActions>` (arg__1)
*    def :meth:`sibling<PySide.QtCore.QAbstractItemModel.sibling>` (row, column, idx)
*    def :meth:`supportedDragActions<PySide.QtCore.QAbstractItemModel.supportedDragActions>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`buddy<PySide.QtCore.QAbstractItemModel.buddy>` (index)
*    def :meth:`canFetchMore<PySide.QtCore.QAbstractItemModel.canFetchMore>` (parent)
*    def :meth:`columnCount<PySide.QtCore.QAbstractItemModel.columnCount>` ([parent=QModelIndex()])
*    def :meth:`data<PySide.QtCore.QAbstractItemModel.data>` (index[, role=Qt.DisplayRole])
*    def :meth:`dropMimeData<PySide.QtCore.QAbstractItemModel.dropMimeData>` (data, action, row, column, parent)
*    def :meth:`fetchMore<PySide.QtCore.QAbstractItemModel.fetchMore>` (parent)
*    def :meth:`flags<PySide.QtCore.QAbstractItemModel.flags>` (index)
*    def :meth:`hasChildren<PySide.QtCore.QAbstractItemModel.hasChildren>` ([parent=QModelIndex()])
*    def :meth:`headerData<PySide.QtCore.QAbstractItemModel.headerData>` (section, orientation[, role=Qt.DisplayRole])
*    def :meth:`index<PySide.QtCore.QAbstractItemModel.index>` (row, column[, parent=QModelIndex()])
*    def :meth:`insertColumns<PySide.QtCore.QAbstractItemModel.insertColumns>` (column, count[, parent=QModelIndex()])
*    def :meth:`insertRows<PySide.QtCore.QAbstractItemModel.insertRows>` (row, count[, parent=QModelIndex()])
*    def :meth:`itemData<PySide.QtCore.QAbstractItemModel.itemData>` (index)
*    def :meth:`match<PySide.QtCore.QAbstractItemModel.match>` (start, role, value[, hits=1[, flags=Qt.MatchFlags(Qt.MatchStartsWith|Qt.MatchWrap)]])
*    def :meth:`mimeData<PySide.QtCore.QAbstractItemModel.mimeData>` (indexes)
*    def :meth:`mimeTypes<PySide.QtCore.QAbstractItemModel.mimeTypes>` ()
*    def :meth:`parent<PySide.QtCore.QAbstractItemModel.parent>` (child)
*    def :meth:`removeColumns<PySide.QtCore.QAbstractItemModel.removeColumns>` (column, count[, parent=QModelIndex()])
*    def :meth:`removeRows<PySide.QtCore.QAbstractItemModel.removeRows>` (row, count[, parent=QModelIndex()])
*    def :meth:`revert<PySide.QtCore.QAbstractItemModel.revert>` ()
*    def :meth:`rowCount<PySide.QtCore.QAbstractItemModel.rowCount>` ([parent=QModelIndex()])
*    def :meth:`setData<PySide.QtCore.QAbstractItemModel.setData>` (index, value[, role=Qt.EditRole])
*    def :meth:`setHeaderData<PySide.QtCore.QAbstractItemModel.setHeaderData>` (section, orientation, value[, role=Qt.EditRole])
*    def :meth:`setItemData<PySide.QtCore.QAbstractItemModel.setItemData>` (index, roles)
*    def :meth:`sort<PySide.QtCore.QAbstractItemModel.sort>` (column[, order=Qt.AscendingOrder])
*    def :meth:`span<PySide.QtCore.QAbstractItemModel.span>` (index)
*    def :meth:`submit<PySide.QtCore.QAbstractItemModel.submit>` ()
*    def :meth:`supportedDropActions<PySide.QtCore.QAbstractItemModel.supportedDropActions>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`columnsAboutToBeInserted<PySide.QtCore.QAbstractItemModel.columnsAboutToBeInserted>` (parent, first, last)
*    def :meth:`columnsAboutToBeMoved<PySide.QtCore.QAbstractItemModel.columnsAboutToBeMoved>` (sourceParent, sourceStart, sourceEnd, destinationParent, destinationColumn)
*    def :meth:`columnsAboutToBeRemoved<PySide.QtCore.QAbstractItemModel.columnsAboutToBeRemoved>` (parent, first, last)
*    def :meth:`columnsInserted<PySide.QtCore.QAbstractItemModel.columnsInserted>` (parent, first, last)
*    def :meth:`columnsMoved<PySide.QtCore.QAbstractItemModel.columnsMoved>` (parent, start, end, destination, column)
*    def :meth:`columnsRemoved<PySide.QtCore.QAbstractItemModel.columnsRemoved>` (parent, first, last)
*    def :meth:`dataChanged<PySide.QtCore.QAbstractItemModel.dataChanged>` (topLeft, bottomRight)
*    def :meth:`headerDataChanged<PySide.QtCore.QAbstractItemModel.headerDataChanged>` (orientation, first, last)
*    def :meth:`layoutAboutToBeChanged<PySide.QtCore.QAbstractItemModel.layoutAboutToBeChanged>` ()
*    def :meth:`layoutChanged<PySide.QtCore.QAbstractItemModel.layoutChanged>` ()
*    def :meth:`modelAboutToBeReset<PySide.QtCore.QAbstractItemModel.modelAboutToBeReset>` ()
*    def :meth:`modelReset<PySide.QtCore.QAbstractItemModel.modelReset>` ()
*    def :meth:`rowsAboutToBeInserted<PySide.QtCore.QAbstractItemModel.rowsAboutToBeInserted>` (parent, first, last)
*    def :meth:`rowsAboutToBeMoved<PySide.QtCore.QAbstractItemModel.rowsAboutToBeMoved>` (sourceParent, sourceStart, sourceEnd, destinationParent, destinationRow)
*    def :meth:`rowsAboutToBeRemoved<PySide.QtCore.QAbstractItemModel.rowsAboutToBeRemoved>` (parent, first, last)
*    def :meth:`rowsInserted<PySide.QtCore.QAbstractItemModel.rowsInserted>` (parent, first, last)
*    def :meth:`rowsMoved<PySide.QtCore.QAbstractItemModel.rowsMoved>` (parent, start, end, destination, row)
*    def :meth:`rowsRemoved<PySide.QtCore.QAbstractItemModel.rowsRemoved>` (parent, first, last)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QAbstractItemModel` class provides the abstract interface for item model classes.

    The :class:`PySide.QtCore.QAbstractItemModel` class defines the standard interface that item models must use to be able to interoperate with other components in the model/view architecture. It is not supposed to be instantiated directly. Instead, you should subclass it to create new models.

    The :class:`PySide.QtCore.QAbstractItemModel` class is one of the :ref:`Model/View Classes<model-view>` and is part of Qt's :ref:`model/view framework<model-view-programming.html>` .

    If you need a model to use with a :class:`PySide.QtGui.QListView` or a :class:`PySide.QtGui.QTableView` , you should consider subclassing :class:`PySide.QtCore.QAbstractListModel` or :class:`PySide.QtCore.QAbstractTableModel` instead of this class.

    The underlying data model is exposed to views and delegates as a hierarchy of tables. If you do not make use of the hierarchy, then the model is a simple table of rows and columns. Each item has a unique index specified by a :class:`PySide.QtCore.QModelIndex` .

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelindex-no-parent.png

    Every item of data that can be accessed via a model has an associated model index. You can obtain this model index using the :meth:`PySide.QtCore.QAbstractItemModel.index` function. Each index may have a :meth:`PySide.QtCore.QAbstractItemModel.sibling` index; child items have a :meth:`PySide.QtCore.QAbstractItemModel.parent` index.

    Each item has a number of data elements associated with it and they can be retrieved by specifying a role (see :attr:`Qt.ItemDataRole` ) to the model's :meth:`PySide.QtCore.QAbstractItemModel.data` function. Data for all available roles can be obtained at the same time using the :meth:`PySide.QtCore.QAbstractItemModel.itemData` function.

    Data for each role is set using a particular :attr:`Qt.ItemDataRole` . Data for individual roles are set individually with :meth:`PySide.QtCore.QAbstractItemModel.setData` , or they can be set for all roles with :meth:`PySide.QtCore.QAbstractItemModel.setItemData` .

    Items can be queried with :meth:`PySide.QtCore.QAbstractItemModel.flags` (see :attr:`Qt.ItemFlag` ) to see if they can be selected, dragged, or manipulated in other ways.

    If an item has child objects, :meth:`PySide.QtCore.QAbstractItemModel.hasChildren` returns true for the corresponding index.

    The model has a :meth:`PySide.QtCore.QAbstractItemModel.rowCount` and a :meth:`PySide.QtCore.QAbstractItemModel.columnCount` for each level of the hierarchy. Rows and columns can be inserted and removed with :meth:`PySide.QtCore.QAbstractItemModel.insertRows` , :meth:`PySide.QtCore.QAbstractItemModel.insertColumns` , :meth:`PySide.QtCore.QAbstractItemModel.removeRows` , and :meth:`PySide.QtCore.QAbstractItemModel.removeColumns` .

    The model emits signals to indicate changes. For example, :meth:`PySide.QtCore.QAbstractItemModel.dataChanged` is emitted whenever items of data made available by the model are changed. Changes to the headers supplied by the model cause :meth:`PySide.QtCore.QAbstractItemModel.headerDataChanged` to be emitted. If the structure of the underlying data changes, the model can emit :meth:`PySide.QtCore.QAbstractItemModel.layoutChanged` to indicate to any attached views that they should redisplay any items shown, taking the new structure into account.

    The items available through the model can be searched for particular data using the :meth:`PySide.QtCore.QAbstractItemModel.match` function.

    To sort the model, you can use :meth:`PySide.QtCore.QAbstractItemModel.sort` .

    .. _PySide.QtCore.QAbstractItemModel_subclassing:



Subclassing
^^^^^^^^^^^

    .. note::  Some general guidelines for subclassing models are available in the :ref:`Model Subclassing Reference<model-view-programming.html>` .

    When subclassing :class:`PySide.QtCore.QAbstractItemModel` , at the very least you must implement :meth:`PySide.QtCore.QAbstractItemModel.index` , :meth:`PySide.QtCore.QAbstractItemModel.parent` , :meth:`PySide.QtCore.QAbstractItemModel.rowCount` , :meth:`PySide.QtCore.QAbstractItemModel.columnCount` , and :meth:`PySide.QtCore.QAbstractItemModel.data` . These functions are used in all read-only models, and form the basis of editable models.

    You can also reimplement :meth:`PySide.QtCore.QAbstractItemModel.hasChildren` to provide special behavior for models where the implementation of :meth:`PySide.QtCore.QAbstractItemModel.rowCount` is expensive. This makes it possible for models to restrict the amount of data requested by views, and can be used as a way to implement lazy population of model data.

    To enable editing in your model, you must also implement :meth:`PySide.QtCore.QAbstractItemModel.setData` , and reimplement :meth:`PySide.QtCore.QAbstractItemModel.flags` to ensure that ``ItemIsEditable`` is returned. You can also reimplement :meth:`PySide.QtCore.QAbstractItemModel.headerData` and :meth:`PySide.QtCore.QAbstractItemModel.setHeaderData` to control the way the headers for your model are presented.

    The :meth:`PySide.QtCore.QAbstractItemModel.dataChanged` and :meth:`PySide.QtCore.QAbstractItemModel.headerDataChanged` signals must be emitted explicitly when reimplementing the :meth:`PySide.QtCore.QAbstractItemModel.setData` and :meth:`PySide.QtCore.QAbstractItemModel.setHeaderData` functions, respectively.

    Custom models need to create model indexes for other components to use. To do this, call :meth:`PySide.QtCore.QAbstractItemModel.createIndex` with suitable row and column numbers for the item, and an identifier for it, either as a pointer or as an integer value. The combination of these values must be unique for each item. Custom models typically use these unique identifiers in other reimplemented functions to retrieve item data and access information about the item's parents and children. See the :ref:`Simple Tree Model Example<itemviews/simpletreemodel>` for more information about unique identifiers.

    It is not necessary to support every role defined in :attr:`Qt.ItemDataRole` . Depending on the type of data contained within a model, it may only be useful to implement the :meth:`PySide.QtCore.QAbstractItemModel.data` function to return valid information for some of the more common roles. Most models provide at least a textual representation of item data for the :attr:`Qt.DisplayRole<Qt.ItemDataRole>` , and well-behaved models should also provide valid information for the :attr:`Qt.ToolTipRole<Qt.ItemDataRole>` and :attr:`Qt.WhatsThisRole<Qt.ItemDataRole>` . Supporting these roles enables models to be used with standard Qt views. However, for some models that handle highly-specialized data, it may be appropriate to provide data only for user-defined roles.

    Models that provide interfaces to resizable data structures can provide implementations of :meth:`PySide.QtCore.QAbstractItemModel.insertRows` , :meth:`PySide.QtCore.QAbstractItemModel.removeRows` , :meth:`PySide.QtCore.QAbstractItemModel.insertColumns` ,and :meth:`PySide.QtCore.QAbstractItemModel.removeColumns` . When implementing these functions, it is important to notify any connected views about changes to the model's dimensions both *before* and *after* they occur:


    * An :meth:`PySide.QtCore.QAbstractItemModel.insertRows` implementation must call :meth:`PySide.QtCore.QAbstractItemModel.beginInsertRows` *before* inserting new rows into the data structure, and :meth:`PySide.QtCore.QAbstractItemModel.endInsertRows` *immediately afterwards*.
    * An :meth:`PySide.QtCore.QAbstractItemModel.insertColumns` implementation must call :meth:`PySide.QtCore.QAbstractItemModel.beginInsertColumns` *before* inserting new columns into the data structure, and :meth:`PySide.QtCore.QAbstractItemModel.endInsertColumns` *immediately afterwards*.
    * A :meth:`PySide.QtCore.QAbstractItemModel.removeRows` implementation must call :meth:`PySide.QtCore.QAbstractItemModel.beginRemoveRows` *before* the rows are removed from the data structure, and :meth:`PySide.QtCore.QAbstractItemModel.endRemoveRows` *immediately afterwards*.
    * A :meth:`PySide.QtCore.QAbstractItemModel.removeColumns` implementation must call :meth:`PySide.QtCore.QAbstractItemModel.beginRemoveColumns` *before* the columns are removed from the data structure, and :meth:`PySide.QtCore.QAbstractItemModel.endRemoveColumns` *immediately afterwards*.

    The *private* signals that these functions emit give attached components the chance to take action before any data becomes unavailable. The encapsulation of the insert and remove operations with these begin and end functions also enables the model to manage :class:`persistent model indexes<PySide.QtCore.QPersistentModelIndex>` correctly. **If you want selections to be handled properly, you must ensure that you call these functions.** If you insert or remove an item with children, you do not need to call these functions for the child items. In other words, the parent item will take care of its child items.

    To create models that populate incrementally, you can reimplement :meth:`PySide.QtCore.QAbstractItemModel.fetchMore` and :meth:`PySide.QtCore.QAbstractItemModel.canFetchMore` . If the reimplementation of :meth:`PySide.QtCore.QAbstractItemModel.fetchMore` adds rows to the model, :meth:`PySide.QtCore.QAbstractItemModel.beginInsertRows` and :meth:`PySide.QtCore.QAbstractItemModel.endInsertRows` must be called.

    .. seealso::  :ref:`Model Classes<model-view-programming.html>`  :ref:`Model Subclassing Reference<model-view-programming.html>`  :class:`PySide.QtCore.QModelIndex`  :class:`PySide.QtGui.QAbstractItemView`  :ref:`Using drag and drop with item views<model-view-programming.html>`  :ref:`Simple DOM Model Example<itemviews/simpledommodel>`  :ref:`Simple Tree Model Example<itemviews/simpletreemodel>`  :ref:`Editable Tree Model Example<itemviews/editabletreemodel>`  :ref:`Fetch More Example<itemviews/fetchmore>` 

.. class:: QAbstractItemModel([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs an abstract item model with the given ``parent`` .


.. method:: PySide.QtCore.QAbstractItemModel.beginInsertColumns(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`




    Begins a column insertion operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.insertColumns` in a subclass, you must call this function *before* inserting data into the model's underlying data store.

    The ``parent`` index corresponds to the parent into which the new columns are inserted; ``first`` and ``last`` are the column numbers of the new columns will have after they have been inserted.

    +------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-begin-insert-columns.png|Specify the first and last column numbers for the span of columns you want to insert into an item in a model.                                                       |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |    For example, as shown in the diagram, we insert three columns before column 4, so ``first`` is 4 and ``last`` is 6:                                             |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |    ::                                                                                                                                                              |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |        beginInsertColumns(parent, 4, 6)                                                                                                                            |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |    This inserts the three new columns as columns 4, 5, and 6.                                                                                                      |
    +------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-begin-append-columns.png|To append columns, insert them after the last column.                                                                                                               |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |    For example, as shown in the diagram, we append three columns to a collection of six existing columns (ending in column 5), so ``first`` is 6 and ``last`` is 8:|
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |    ::                                                                                                                                                              |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |        beginInsertColumns(parent, 6, 8)                                                                                                                            |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |                                                                                                                                                                    |
    |                                                                                                                        |    This appends the two new columns as columns 6, 7, and 8.                                                                                                        |
    +------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. note::  This function emits the :meth:`PySide.QtCore.QAbstractItemModel.columnsAboutToBeInserted` signal which connected views (or proxies) must handle before the data is inserted. Otherwise, the views may end up in an invalid state.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.endInsertColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.beginInsertRows(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`




    Begins a row insertion operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.insertRows` in a subclass, you must call this function *before* inserting data into the model's underlying data store.

    The ``parent`` index corresponds to the parent into which the new rows are inserted; ``first`` and ``last`` are the row numbers that the new rows will have after they have been inserted.

    +---------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-begin-insert-rows.png|Specify the first and last row numbers for the span of rows you want to insert into an item in a model.                                                |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |    For example, as shown in the diagram, we insert three rows before row 2, so ``first`` is 2 and ``last`` is 4:                                      |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |    ::                                                                                                                                                 |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |        beginInsertRows(parent, 2, 4)                                                                                                                  |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |    This inserts the three new rows as rows 2, 3, and 4.                                                                                               |
    +---------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-begin-append-rows.png|To append rows, insert them after the last row.                                                                                                        |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |    For example, as shown in the diagram, we append two rows to a collection of 4 existing rows (ending in row 3), so ``first`` is 4 and ``last`` is 5:|
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |    ::                                                                                                                                                 |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |        beginInsertRows(parent, 4, 5)                                                                                                                  |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |                                                                                                                                                       |
    |                                                                                                                     |    This appends the two new rows as rows 4 and 5.                                                                                                     |
    +---------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. note::  This function emits the :meth:`PySide.QtCore.QAbstractItemModel.rowsAboutToBeInserted` signal which connected views (or proxies) must handle before the data is inserted. Otherwise, the views may end up in an invalid state.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.endInsertRows` 


.. method:: PySide.QtCore.QAbstractItemModel.beginMoveColumns(sourceParent, sourceFirst, sourceLast, destinationParent, destinationColumn)


    :param sourceParent: :class:`PySide.QtCore.QModelIndex`
    :param sourceFirst: :class:`PySide.QtCore.int`
    :param sourceLast: :class:`PySide.QtCore.int`
    :param destinationParent: :class:`PySide.QtCore.QModelIndex`
    :param destinationColumn: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Begins a column move operation.

    When reimplementing a subclass, this method simplifies moving entities in your model. This method is responsible for moving persistent indexes in the model, which you would otherwise be required to do yourself. Using beginMoveRows and endMoveRows is an alternative to emitting layoutAboutToBeChanged and layoutChanged directly along with changePersistentIndexes. layoutAboutToBeChanged is emitted by this method for compatibility reasons.

    The ``sourceParent`` index corresponds to the parent from which the columns are moved; ``sourceFirst`` and ``sourceLast`` are the first and last column numbers of the columns to be moved. The ``destinationParent`` index corresponds to the parent into which those columns are moved. The ``destinationChild`` is the column to which the columns will be moved. That is, the index at column ``sourceFirst`` in ``sourceParent`` will become column ``destinationChild`` in ``destinationParent`` , followed by all other columns up to ``sourceLast`` .

    However, when moving columns down in the same parent (``sourceParent`` and ``destinationParent`` are equal), the columnss will be placed before the ``destinationChild`` index. That is, if you wish to move columns 0 and 1 so they will become columns 1 and 2, ``destinationChild`` should be 3. In this case, the new index for the source column ``i`` (which is between ``sourceFirst`` and ``sourceLast`` ) is equal to ``(destinationChild-sourceLast-1+i)`` .

    Note that if ``sourceParent`` and ``destinationParent`` are the same, you must ensure that the ``destinationChild`` is not within the range of ``sourceFirst`` and ``sourceLast`` + 1. You must also ensure that you do not attempt to move a column to one of its own children or ancestors. This method returns false if either condition is true, in which case you should abort your move operation.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.endMoveColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.beginMoveRows(sourceParent, sourceFirst, sourceLast, destinationParent, destinationRow)


    :param sourceParent: :class:`PySide.QtCore.QModelIndex`
    :param sourceFirst: :class:`PySide.QtCore.int`
    :param sourceLast: :class:`PySide.QtCore.int`
    :param destinationParent: :class:`PySide.QtCore.QModelIndex`
    :param destinationRow: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Begins a row move operation.

    When reimplementing a subclass, this method simplifies moving entities in your model. This method is responsible for moving persistent indexes in the model, which you would otherwise be required to do yourself. Using beginMoveRows and endMoveRows is an alternative to emitting layoutAboutToBeChanged and layoutChanged directly along with changePersistentIndexes. layoutAboutToBeChanged is emitted by this method for compatibility reasons.

    The ``sourceParent`` index corresponds to the parent from which the rows are moved; ``sourceFirst`` and ``sourceLast`` are the first and last row numbers of the rows to be moved. The ``destinationParent`` index corresponds to the parent into which those rows are moved. The ``destinationChild`` is the row to which the rows will be moved. That is, the index at row ``sourceFirst`` in ``sourceParent`` will become row ``destinationChild`` in ``destinationParent`` , followed by all other rows up to ``sourceLast`` .

    However, when moving rows down in the same parent (``sourceParent`` and ``destinationParent`` are equal), the rows will be placed before the ``destinationChild`` index. That is, if you wish to move rows 0 and 1 so they will become rows 1 and 2, ``destinationChild`` should be 3. In this case, the new index for the source row ``i`` (which is between ``sourceFirst`` and ``sourceLast`` ) is equal to ``(destinationChild-sourceLast-1+i)`` .

    Note that if ``sourceParent`` and ``destinationParent`` are the same, you must ensure that the ``destinationChild`` is not within the range of ``sourceFirst`` and ``sourceLast`` + 1. You must also ensure that you do not attempt to move a row to one of its own children or ancestors. This method returns false if either condition is true, in which case you should abort your move operation.

    +---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-move-rows-1.png|Specify the first and last row numbers for the span of rows in the source parent you want to move in the model. Also specify the row in the destination parent to move the span to.                                                                                                                                                           |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    For example, as shown in the diagram, we move three rows from row 2 to 4 in the source, so ``sourceFirst`` is 2 and ``sourceLast`` is 4. We move those items to above row 2 in the destination, so ``destinationChild`` is 2.                                                                                                             |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    ::                                                                                                                                                                                                                                                                                                                                        |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |        beginMoveRows(sourceParent, 2, 4, destinationParent, 2)                                                                                                                                                                                                                                                                               |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    This moves the three rows rows 2, 3, and 4 in the source to become 2, 3 and 4 in the destination. Other affected siblings are displaced accordingly.                                                                                                                                                                                      |
    +---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-move-rows-2.png|To append rows to another parent, move them to after the last row.                                                                                                                                                                                                                                                                            |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    For example, as shown in the diagram, we move three rows to a collection of 6 existing rows (ending in row 5), so ``destinationChild`` is 6:                                                                                                                                                                                              |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    ::                                                                                                                                                                                                                                                                                                                                        |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |        beginMoveRows(sourceParent, 2, 4, destinationParent, 6)                                                                                                                                                                                                                                                                               |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    This moves the target rows to the end of the target parent as 6, 7 and 8.                                                                                                                                                                                                                                                                 |
    +---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-move-rows-3.png|To move rows within the same parent, specify the row to move them to.                                                                                                                                                                                                                                                                         |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    For example, as shown in the diagram, we move one item from row 2 to row 0, so ``sourceFirst`` and ``sourceLast`` are 2 and ``destinationChild`` is 0.                                                                                                                                                                                    |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    ::                                                                                                                                                                                                                                                                                                                                        |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |        beginMoveRows(parent, 2, 2, parent, 0)                                                                                                                                                                                                                                                                                                |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    Note that other rows may be displaced accordingly. Note also that when moving items within the same parent you should not attempt invalid or no-op moves. In the above example, item 2 is at row 2 before the move, so it can not be moved to row 2 (where it is already) or row 3 (no-op as row 3 means above row 3, where it is already)|
    +---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-move-rows-4.png|To move rows within the same parent, specify the row to move them to.                                                                                                                                                                                                                                                                         |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    For example, as shown in the diagram, we move one item from row 2 to row 4, so ``sourceFirst`` and ``sourceLast`` are 2 and ``destinationChild`` is 4.                                                                                                                                                                                    |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    ::                                                                                                                                                                                                                                                                                                                                        |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |        beginMoveRows(parent, 2, 2, parent, 4)                                                                                                                                                                                                                                                                                                |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |                                                                                                                                                                                                                                                                                                                                              |
    |                                                                                                               |    Note that other rows may be displaced accordingly.                                                                                                                                                                                                                                                                                        |
    +---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.endMoveRows` 


.. method:: PySide.QtCore.QAbstractItemModel.beginRemoveColumns(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`




    Begins a column removal operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.removeColumns` in a subclass, you must call this function *before* removing data from the model's underlying data store.

    The ``parent`` index corresponds to the parent from which the new columns are removed; ``first`` and ``last`` are the column numbers of the first and last columns to be removed.

    +------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-begin-remove-columns.png|Specify the first and last column numbers for the span of columns you want to remove from an item in a model.                        |
    |                                                                                                                        |                                                                                                                                     |
    |                                                                                                                        |    For example, as shown in the diagram, we remove the three columns from column 4 to column 6, so ``first`` is 4 and ``last`` is 6:|
    |                                                                                                                        |                                                                                                                                     |
    |                                                                                                                        |    ::                                                                                                                               |
    |                                                                                                                        |                                                                                                                                     |
    |                                                                                                                        |        beginRemoveColumns(parent, 4, 6)                                                                                             |
    +------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------+

    .. note::  This function emits the :meth:`PySide.QtCore.QAbstractItemModel.columnsAboutToBeRemoved` signal which connected views (or proxies) must handle before the data is removed. Otherwise, the views may end up in an invalid state.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.endRemoveColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.beginRemoveRows(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`




    Begins a row removal operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.removeRows` in a subclass, you must call this function *before* removing data from the model's underlying data store.

    The ``parent`` index corresponds to the parent from which the new rows are removed; ``first`` and ``last`` are the row numbers of the rows to be removed.

    +---------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/modelview-begin-remove-rows.png|Specify the first and last row numbers for the span of rows you want to remove from an item in a model.                   |
    |                                                                                                                     |                                                                                                                          |
    |                                                                                                                     |    For example, as shown in the diagram, we remove the two rows from row 2 to row 3, so ``first`` is 2 and ``last`` is 3:|
    |                                                                                                                     |                                                                                                                          |
    |                                                                                                                     |    ::                                                                                                                    |
    |                                                                                                                     |                                                                                                                          |
    |                                                                                                                     |        beginRemoveRows(parent, 2, 3)                                                                                     |
    +---------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------+

    .. note::  This function emits the :meth:`PySide.QtCore.QAbstractItemModel.rowsAboutToBeRemoved` signal which connected views (or proxies) must handle before the data is removed. Otherwise, the views may end up in an invalid state.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.endRemoveRows` 


.. method:: PySide.QtCore.QAbstractItemModel.beginResetModel()






    Begins a model reset operation.

    A reset operation resets the model to its current state in any attached views.

    .. note::  Any views attached to this model will be reset as well.

    When a model is reset it means that any previous data reported from the model is now invalid and has to be queried for again. This also means that the current item and any selected items will become invalid.

    When a model radically changes its data it can sometimes be easier to just call this function rather than emit :meth:`PySide.QtCore.QAbstractItemModel.dataChanged` to inform other components when the underlying data source, or its structure, has changed.

    You must call this function before resetting any internal data structures in your model or proxy model.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.modelAboutToBeReset`  :meth:`PySide.QtCore.QAbstractItemModel.modelReset`  :meth:`PySide.QtCore.QAbstractItemModel.endResetModel` 


.. method:: PySide.QtCore.QAbstractItemModel.buddy(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns a model index for the buddy of the item represented by ``index`` . When the user wants to edit an item, the view will call this function to check whether another item in the model should be edited instead. Then, the view will construct a delegate using the model index returned by the buddy item.

    The default implementation of this function has each item as its own buddy.



.. method:: PySide.QtCore.QAbstractItemModel.canFetchMore(parent)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if there is more data available for ``parent`` ; otherwise returns false.

    The default implementation always returns false.

    If :meth:`PySide.QtCore.QAbstractItemModel.canFetchMore` returns true, :class:`PySide.QtGui.QAbstractItemView` will call :meth:`PySide.QtCore.QAbstractItemModel.fetchMore` . However, the :meth:`PySide.QtCore.QAbstractItemModel.fetchMore` function is only called when the model is being populated incrementally.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.fetchMore` 


.. method:: PySide.QtCore.QAbstractItemModel.changePersistentIndex(from, to)


    :param from: :class:`PySide.QtCore.QModelIndex`
    :param to: :class:`PySide.QtCore.QModelIndex`




    Changes the :class:`PySide.QtCore.QPersistentModelIndex` that is equal to the given ``from`` model index to the given ``to`` model index.

    If no persistent model index equal to the given ``from`` model index was found, nothing is changed.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.persistentIndexList`  :meth:`PySide.QtCore.QAbstractItemModel.changePersistentIndexList` 


.. method:: PySide.QtCore.QAbstractItemModel.changePersistentIndexList(from, to)


    :param from: :class:`PySide.QtCore.QModelIndexList`
    :param to: :class:`PySide.QtCore.QModelIndexList`




    Changes the QPersistentModelIndexes that is equal to the indexes in the given ``from`` model index list to the given ``to`` model index list.

    If no persistent model indexes equal to the indexes in the given ``from`` model index list was found, nothing is changed.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.persistentIndexList`  :meth:`PySide.QtCore.QAbstractItemModel.changePersistentIndex` 


.. method:: PySide.QtCore.QAbstractItemModel.columnCount([parent=QModelIndex()])


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.int`




    Returns the number of columns for the children of the given ``parent`` .

    In most subclasses, the number of columns is independent of the ``parent`` .

    For example:

    ::

        def columnCount(self, parent):
            return 3


    .. note::  When implementing a table based model, :meth:`PySide.QtCore.QAbstractItemModel.columnCount` should return 0 when the parent is valid.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.rowCount` 


.. method:: PySide.QtCore.QAbstractItemModel.columnsAboutToBeInserted(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.columnsAboutToBeMoved(sourceParent, sourceStart, sourceEnd, destinationParent, destinationColumn)


    :param sourceParent: :class:`PySide.QtCore.QModelIndex`
    :param sourceStart: :class:`PySide.QtCore.int`
    :param sourceEnd: :class:`PySide.QtCore.int`
    :param destinationParent: :class:`PySide.QtCore.QModelIndex`
    :param destinationColumn: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.columnsAboutToBeRemoved(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.columnsInserted(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.columnsMoved(parent, start, end, destination, column)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param start: :class:`PySide.QtCore.int`
    :param end: :class:`PySide.QtCore.int`
    :param destination: :class:`PySide.QtCore.QModelIndex`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.columnsRemoved(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.createIndex(row, column[, id=0])


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param id: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Use :class:`PySide.QtCore.QModelIndex` QAbstractItemModel::createIndex(int row, int column, quint32 id) instead.



.. method:: PySide.QtCore.QAbstractItemModel.createIndex(row, column, ptr)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param ptr: :class:`PyObject`
    :rtype: :class:`PySide.QtCore.QModelIndex`






    
    Creates a model index for the given row and column with the internal pointer ptr.
    When using a QSortFilterProxyModel, its indexes have their own internal pointer. It is not advisable to access this internal pointer outside of the model. Use the data() function instead.
    This function provides a consistent interface that model subclasses must use to create model indexes.
    
    .. warning:: Because of some Qt/Python itegration rules, the ptr argument do not get the reference incremented during the QModelIndex life time. So it is necessary to keep the object used on ptr argument alive during the whole process. Do not destroy the object if you are not sure about that.
    


.. method:: PySide.QtCore.QAbstractItemModel.data(index[, role=Qt.DisplayRole])


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param role: :class:`PySide.QtCore.int`
    :rtype: object




    Returns the data stored under the given ``role`` for the item referred to by the ``index`` .

    .. note::  If you do not have a value to return, return an **invalid**\ :class:`PySide.QtCore.QVariant` instead of returning 0.

    .. seealso::  :attr:`Qt.ItemDataRole`  :meth:`PySide.QtCore.QAbstractItemModel.setData`  :meth:`PySide.QtCore.QAbstractItemModel.headerData` 


.. method:: PySide.QtCore.QAbstractItemModel.dataChanged(topLeft, bottomRight)


    :param topLeft: :class:`PySide.QtCore.QModelIndex`
    :param bottomRight: :class:`PySide.QtCore.QModelIndex`






.. method:: PySide.QtCore.QAbstractItemModel.decodeData(row, column, parent, stream)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param stream: :class:`PySide.QtCore.QDataStream`
    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtCore.QAbstractItemModel.dropMimeData(data, action, row, column, parent)


    :param data: :class:`PySide.QtCore.QMimeData`
    :param action: :attr:`PySide.QtCore.Qt.DropAction`
    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QAbstractItemModel.encodeData(indexes, stream)


    :param indexes: :class:`PySide.QtCore.QModelIndexList`
    :param stream: :class:`PySide.QtCore.QDataStream`






.. method:: PySide.QtCore.QAbstractItemModel.endInsertColumns()






    Ends a column insertion operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.insertColumns` in a subclass, you must call this function *after* inserting data into the model's underlying data store.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.beginInsertColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.endInsertRows()






    Ends a row insertion operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.insertRows` in a subclass, you must call this function *after* inserting data into the model's underlying data store.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.beginInsertRows` 


.. method:: PySide.QtCore.QAbstractItemModel.endMoveColumns()






    Ends a column move operation.

    When implementing a subclass, you must call this function *after* moving data within the model's underlying data store.

    layoutChanged is emitted by this method for compatibility reasons.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.beginMoveColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.endMoveRows()






    Ends a row move operation.

    When implementing a subclass, you must call this function *after* moving data within the model's underlying data store.

    layoutChanged is emitted by this method for compatibility reasons.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.beginMoveRows` 


.. method:: PySide.QtCore.QAbstractItemModel.endRemoveColumns()






    Ends a column removal operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.removeColumns` in a subclass, you must call this function *after* removing data from the model's underlying data store.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.beginRemoveColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.endRemoveRows()






    Ends a row removal operation.

    When reimplementing :meth:`PySide.QtCore.QAbstractItemModel.removeRows` in a subclass, you must call this function *after* removing data from the model's underlying data store.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.beginRemoveRows` 


.. method:: PySide.QtCore.QAbstractItemModel.endResetModel()






    Completes a model reset operation.

    You must call this function after resetting any internal data structure in your model or proxy model.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.beginResetModel` 


.. method:: PySide.QtCore.QAbstractItemModel.fetchMore(parent)


    :param parent: :class:`PySide.QtCore.QModelIndex`




    Fetches any available data for the items with the parent specified by the ``parent`` index.

    Reimplement this if you are populating your model incrementally.

    The default implementation does nothing.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.canFetchMore` 


.. method:: PySide.QtCore.QAbstractItemModel.flags(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.Qt.ItemFlags`




    Returns the item flags for the given ``index`` .

    The base class implementation returns a combination of flags that enables the item (``ItemIsEnabled`` ) and allows it to be selected (``ItemIsSelectable`` ).

    .. seealso::  :class:`Qt.ItemFlags` 


.. method:: PySide.QtCore.QAbstractItemModel.hasChildren([parent=QModelIndex()])


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``parent`` has any children; otherwise returns false.

    Use :meth:`PySide.QtCore.QAbstractItemModel.rowCount` on the parent to find out the number of children.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.parent`  :meth:`PySide.QtCore.QAbstractItemModel.index` 


.. method:: PySide.QtCore.QAbstractItemModel.hasIndex(row, column[, parent=QModelIndex()])


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the model returns a valid :class:`PySide.QtCore.QModelIndex` for ``row`` and ``column`` with ``parent`` , otherwise returns false.



.. method:: PySide.QtCore.QAbstractItemModel.headerData(section, orientation[, role=Qt.DisplayRole])


    :param section: :class:`PySide.QtCore.int`
    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :param role: :class:`PySide.QtCore.int`
    :rtype: object







.. method:: PySide.QtCore.QAbstractItemModel.headerDataChanged(orientation, first, last)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.index(row, column[, parent=QModelIndex()])


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the index of the item in the model specified by the given ``row`` , ``column`` and ``parent`` index.

    When reimplementing this function in a subclass, call :meth:`PySide.QtCore.QAbstractItemModel.createIndex` to generate model indexes that other components can use to refer to items in your model.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.createIndex` 


.. method:: PySide.QtCore.QAbstractItemModel.insertColumn(column[, parent=QModelIndex()])


    :param column: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Inserts a single column before the given ``column`` in the child items of the ``parent`` specified.

    Returns true if the column is inserted; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.insertColumns`  :meth:`PySide.QtCore.QAbstractItemModel.insertRow`  :meth:`PySide.QtCore.QAbstractItemModel.removeColumn` 


.. method:: PySide.QtCore.QAbstractItemModel.insertColumns(column, count[, parent=QModelIndex()])


    :param column: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    On models that support this, inserts ``count`` new columns into the model before the given ``column`` . The items in each new column will be children of the item represented by the ``parent`` model index.

    If ``column`` is 0, the columns are prepended to any existing columns.

    If ``column`` is :meth:`PySide.QtCore.QAbstractItemModel.columnCount` , the columns are appended to any existing columns.

    If ``parent`` has no children, a single row with ``count`` columns is inserted.

    Returns true if the columns were successfully inserted; otherwise returns false.

    The base class implementation does nothing and returns false.

    If you implement your own model, you can reimplement this function if you want to support insertions. Alternatively, you can provide your own API for altering the data.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.insertRows`  :meth:`PySide.QtCore.QAbstractItemModel.removeColumns`  :meth:`PySide.QtCore.QAbstractItemModel.beginInsertColumns`  :meth:`PySide.QtCore.QAbstractItemModel.endInsertColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.insertRow(row[, parent=QModelIndex()])


    :param row: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    .. note::  The base class implementation of this function does nothing and returns false.

    Inserts a single row before the given ``row`` in the child items of the ``parent`` specified.

    Returns true if the row is inserted; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.insertRows`  :meth:`PySide.QtCore.QAbstractItemModel.insertColumn`  :meth:`PySide.QtCore.QAbstractItemModel.removeRow` 


.. method:: PySide.QtCore.QAbstractItemModel.insertRows(row, count[, parent=QModelIndex()])


    :param row: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    .. note::  The base class implementation of this function does nothing and returns false.

    On models that support this, inserts ``count`` rows into the model before the given ``row`` . Items in the new row will be children of the item represented by the ``parent`` model index.

    If ``row`` is 0, the rows are prepended to any existing rows in the parent.

    If ``row`` is :meth:`PySide.QtCore.QAbstractItemModel.rowCount` , the rows are appended to any existing rows in the parent.

    If ``parent`` has no children, a single column with ``count`` rows is inserted.

    Returns true if the rows were successfully inserted; otherwise returns false.

    If you implement your own model, you can reimplement this function if you want to support insertions. Alternatively, you can provide your own API for altering the data. In either case, you will need to call :meth:`PySide.QtCore.QAbstractItemModel.beginInsertRows` and :meth:`PySide.QtCore.QAbstractItemModel.endInsertRows` to notify other components that the model has changed.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.insertColumns`  :meth:`PySide.QtCore.QAbstractItemModel.removeRows`  :meth:`PySide.QtCore.QAbstractItemModel.beginInsertRows`  :meth:`PySide.QtCore.QAbstractItemModel.endInsertRows` 


.. method:: PySide.QtCore.QAbstractItemModel.itemData(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: 




    Returns a map with values for all predefined roles in the model for the item at the given ``index`` .

    Reimplement this function if you want to extend the default behavior of this function to include custom roles in the map.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.setItemData`  :attr:`Qt.ItemDataRole`  :meth:`PySide.QtCore.QAbstractItemModel.data` 


.. method:: PySide.QtCore.QAbstractItemModel.layoutAboutToBeChanged()








.. method:: PySide.QtCore.QAbstractItemModel.layoutChanged()








.. method:: PySide.QtCore.QAbstractItemModel.match(start, role, value[, hits=1[, flags=Qt.MatchFlags(Qt.MatchStartsWith|Qt.MatchWrap)]])


    :param start: :class:`PySide.QtCore.QModelIndex`
    :param role: :class:`PySide.QtCore.int`
    :param value: object
    :param hits: :class:`PySide.QtCore.int`
    :param flags: :class:`PySide.QtCore.Qt.MatchFlags`
    :rtype: :class:`PySide.QtCore.QModelIndexList`







.. method:: PySide.QtCore.QAbstractItemModel.mimeData(indexes)


    :param indexes: :class:`PySide.QtCore.QModelIndexList`
    :rtype: :class:`PySide.QtCore.QMimeData`




    Returns an object that contains serialized items of data corresponding to the list of ``indexes`` specified. The formats used to describe the encoded data is obtained from the :meth:`PySide.QtCore.QAbstractItemModel.mimeTypes` function.

    If the list of indexes is empty, or there are no supported MIME types, 0 is returned rather than a serialized empty list.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.mimeTypes`  :meth:`PySide.QtCore.QAbstractItemModel.dropMimeData` 


.. method:: PySide.QtCore.QAbstractItemModel.mimeTypes()


    :rtype: list of strings




    Returns a list of MIME types that can be used to describe a list of model indexes.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.mimeData` 


.. method:: PySide.QtCore.QAbstractItemModel.modelAboutToBeReset()








.. method:: PySide.QtCore.QAbstractItemModel.modelReset()








.. method:: PySide.QtCore.QAbstractItemModel.parent(child)


    :param child: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the parent of the model item with the given ``index`` . If the item has no parent, an invalid :class:`PySide.QtCore.QModelIndex` is returned.

    A common convention used in models that expose tree data structures is that only items in the first column have children. For that case, when reimplementing this function in a subclass the column of the returned :class:`PySide.QtCore.QModelIndex` would be 0.

    When reimplementing this function in a subclass, be careful to avoid calling :class:`PySide.QtCore.QModelIndex` member functions, such as :meth:`QModelIndex.parent()<PySide.QtCore.QModelIndex.parent>` , since indexes belonging to your model will simply call your implementation, leading to infinite recursion.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.createIndex` 


.. method:: PySide.QtCore.QAbstractItemModel.persistentIndexList()


    :rtype: :class:`PySide.QtCore.QModelIndexList`




    Returns the list of indexes stored as persistent indexes in the model.



.. method:: PySide.QtCore.QAbstractItemModel.removeColumn(column[, parent=QModelIndex()])


    :param column: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Removes the given ``column`` from the child items of the ``parent`` specified.

    Returns true if the column is removed; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.removeColumns`  :meth:`PySide.QtCore.QAbstractItemModel.removeRow`  :meth:`PySide.QtCore.QAbstractItemModel.insertColumn` 


.. method:: PySide.QtCore.QAbstractItemModel.removeColumns(column, count[, parent=QModelIndex()])


    :param column: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    On models that support this, removes ``count`` columns starting with the given ``column`` under parent ``parent`` from the model.

    Returns true if the columns were successfully removed; otherwise returns false.

    The base class implementation does nothing and returns false.

    If you implement your own model, you can reimplement this function if you want to support removing. Alternatively, you can provide your own API for altering the data.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.removeColumn`  :meth:`PySide.QtCore.QAbstractItemModel.removeRows`  :meth:`PySide.QtCore.QAbstractItemModel.insertColumns`  :meth:`PySide.QtCore.QAbstractItemModel.beginRemoveColumns`  :meth:`PySide.QtCore.QAbstractItemModel.endRemoveColumns` 


.. method:: PySide.QtCore.QAbstractItemModel.removeRow(row[, parent=QModelIndex()])


    :param row: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Removes the given ``row`` from the child items of the ``parent`` specified.

    Returns true if the row is removed; otherwise returns false.

    This is a convenience function that calls :meth:`PySide.QtCore.QAbstractItemModel.removeRows` . The :class:`PySide.QtCore.QAbstractItemModel` implementation of :meth:`PySide.QtCore.QAbstractItemModel.removeRows` does nothing.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.removeRows`  :meth:`PySide.QtCore.QAbstractItemModel.removeColumn`  :meth:`PySide.QtCore.QAbstractItemModel.insertRow` 


.. method:: PySide.QtCore.QAbstractItemModel.removeRows(row, count[, parent=QModelIndex()])


    :param row: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    On models that support this, removes ``count`` rows starting with the given ``row`` under parent ``parent`` from the model.

    Returns true if the rows were successfully removed; otherwise returns false.

    The base class implementation does nothing and returns false.

    If you implement your own model, you can reimplement this function if you want to support removing. Alternatively, you can provide your own API for altering the data.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.removeRow`  :meth:`PySide.QtCore.QAbstractItemModel.removeColumns`  :meth:`PySide.QtCore.QAbstractItemModel.insertColumns`  :meth:`PySide.QtCore.QAbstractItemModel.beginRemoveRows`  :meth:`PySide.QtCore.QAbstractItemModel.endRemoveRows` 


.. method:: PySide.QtCore.QAbstractItemModel.reset()






    Resets the model to its original state in any attached views.

    .. note::  Use :meth:`PySide.QtCore.QAbstractItemModel.beginResetModel` and :meth:`PySide.QtCore.QAbstractItemModel.endResetModel` instead whenever possible. Use this method only if there is no way to call :meth:`PySide.QtCore.QAbstractItemModel.beginResetModel` before invalidating the model. Otherwise it could lead to unexpected behaviour, especially when used with proxy models.



.. method:: PySide.QtCore.QAbstractItemModel.revert()






    Lets the model know that it should discard cached information. This function is typically used for row editing.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.submit` 


.. method:: PySide.QtCore.QAbstractItemModel.roleNames()


    :rtype: 




    Returns the model's role names.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.setRoleNames` 


.. method:: PySide.QtCore.QAbstractItemModel.rowCount([parent=QModelIndex()])


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.int`




    Returns the number of rows under the given ``parent`` . When the parent is valid it means that rowCount is returning the number of children of parent.

    .. note::  When implementing a table based model, :meth:`PySide.QtCore.QAbstractItemModel.rowCount` should return 0 when the parent is valid.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.columnCount` 


.. method:: PySide.QtCore.QAbstractItemModel.rowsAboutToBeInserted(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.rowsAboutToBeMoved(sourceParent, sourceStart, sourceEnd, destinationParent, destinationRow)


    :param sourceParent: :class:`PySide.QtCore.QModelIndex`
    :param sourceStart: :class:`PySide.QtCore.int`
    :param sourceEnd: :class:`PySide.QtCore.int`
    :param destinationParent: :class:`PySide.QtCore.QModelIndex`
    :param destinationRow: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.rowsAboutToBeRemoved(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.rowsInserted(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.rowsMoved(parent, start, end, destination, row)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param start: :class:`PySide.QtCore.int`
    :param end: :class:`PySide.QtCore.int`
    :param destination: :class:`PySide.QtCore.QModelIndex`
    :param row: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.rowsRemoved(parent, first, last)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param first: :class:`PySide.QtCore.int`
    :param last: :class:`PySide.QtCore.int`






.. method:: PySide.QtCore.QAbstractItemModel.setData(index, value[, role=Qt.EditRole])


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param value: object
    :param role: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Sets the ``role`` data for the item at ``index`` to ``value`` .

    Returns true if successful; otherwise returns false.

    The :meth:`PySide.QtCore.QAbstractItemModel.dataChanged` signal should be emitted if the data was successfully set.

    The base class implementation returns false. This function and :meth:`PySide.QtCore.QAbstractItemModel.data` must be reimplemented for editable models.

    .. seealso::  :attr:`Qt.ItemDataRole`  :meth:`PySide.QtCore.QAbstractItemModel.data`  :meth:`PySide.QtCore.QAbstractItemModel.itemData` 


.. method:: PySide.QtCore.QAbstractItemModel.setHeaderData(section, orientation, value[, role=Qt.EditRole])


    :param section: :class:`PySide.QtCore.int`
    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :param value: object
    :param role: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QAbstractItemModel.setItemData(index, roles)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :param roles: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QAbstractItemModel.setRoleNames(roleNames)


    :param roleNames: 







.. method:: PySide.QtCore.QAbstractItemModel.setSupportedDragActions(arg__1)


    :param arg__1: :class:`PySide.QtCore.Qt.DropActions`







.. method:: PySide.QtCore.QAbstractItemModel.sibling(row, column, idx)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param idx: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the sibling at ``row`` and ``column`` for the item at ``index`` , or an invalid :class:`PySide.QtCore.QModelIndex` if there is no sibling at that location.

    :meth:`PySide.QtCore.QAbstractItemModel.sibling` is just a convenience function that finds the item's parent, and uses it to retrieve the index of the child item in the specified ``row`` and ``column`` .

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.index`  :meth:`QModelIndex.row()<PySide.QtCore.QModelIndex.row>`  :meth:`QModelIndex.column()<PySide.QtCore.QModelIndex.column>` 


.. method:: PySide.QtCore.QAbstractItemModel.sort(column[, order=Qt.AscendingOrder])


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtCore.QAbstractItemModel.span(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.QSize`




    Returns the row and column span of the item represented by ``index`` .

    .. note::  Currently, span is not used.



.. method:: PySide.QtCore.QAbstractItemModel.submit()


    :rtype: :class:`PySide.QtCore.bool`




    Lets the model know that it should submit cached information to permanent storage. This function is typically used for row editing.

    Returns true if there is no error; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.revert` 


.. method:: PySide.QtCore.QAbstractItemModel.supportedDragActions()


    :rtype: :class:`PySide.QtCore.Qt.DropActions`




    Returns the actions supported by the data in this model.

    The default implementation returns :meth:`PySide.QtCore.QAbstractItemModel.supportedDropActions` unless specific values have been set with :meth:`PySide.QtCore.QAbstractItemModel.setSupportedDragActions` .

    :meth:`PySide.QtCore.QAbstractItemModel.supportedDragActions` is used by :meth:`QAbstractItemView.startDrag()<PySide.QtGui.QAbstractItemView.startDrag>` as the default values when a drag occurs.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.setSupportedDragActions`  :class:`Qt.DropActions`  :ref:`Using drag and drop with item views<model-view-programming.html>` 


.. method:: PySide.QtCore.QAbstractItemModel.supportedDropActions()


    :rtype: :class:`PySide.QtCore.Qt.DropActions`




    Returns the drop actions supported by this model.

    The default implementation returns :attr:`Qt.CopyAction<Qt.DropAction>` . Reimplement this function if you wish to support additional actions. You must also reimplement the :meth:`PySide.QtCore.QAbstractItemModel.dropMimeData` function to handle the additional operations.

    .. seealso::  :meth:`PySide.QtCore.QAbstractItemModel.dropMimeData`  :class:`Qt.DropActions`  :ref:`Using drag and drop with item views<model-view-programming.html>` 



