.. module:: PySide.QtCore
.. _QMargins:

QMargins
********

.. inheritance-diagram:: QMargins
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtCore.QMargins.__eq__>` (, m2)
*    def :meth:`__ne__<PySide.QtCore.QMargins.__ne__>` (, m2)
*    def :meth:`bottom<PySide.QtCore.QMargins.bottom>` ()
*    def :meth:`isNull<PySide.QtCore.QMargins.isNull>` ()
*    def :meth:`left<PySide.QtCore.QMargins.left>` ()
*    def :meth:`right<PySide.QtCore.QMargins.right>` ()
*    def :meth:`setBottom<PySide.QtCore.QMargins.setBottom>` (bottom)
*    def :meth:`setLeft<PySide.QtCore.QMargins.setLeft>` (left)
*    def :meth:`setRight<PySide.QtCore.QMargins.setRight>` (right)
*    def :meth:`setTop<PySide.QtCore.QMargins.setTop>` (top)
*    def :meth:`top<PySide.QtCore.QMargins.top>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QMargins` class defines the four margins of a rectangle.

    QMargin defines a set of four margins; left, top, right and bottom, that describe the size of the borders surrounding a rectangle.

    The :meth:`PySide.QtCore.QMargins.isNull` function returns true only if all margins are set to zero.

    QMargin objects can be streamed as well as compared.


.. class:: QMargins()
           QMargins(QMargins)
           QMargins(left, top, right, bottom)

    :param right: :class:`PySide.QtCore.int`
    :param QMargins: :class:`PySide.QtCore.QMargins`
    :param left: :class:`PySide.QtCore.int`
    :param bottom: :class:`PySide.QtCore.int`
    :param top: :class:`PySide.QtCore.int`

    Constructs a margins object with all margins set to 0.

    .. seealso::  :meth:`PySide.QtCore.QMargins.isNull` 



    Constructs margins with the given ``left`` , ``top`` , ``right`` , ``bottom``\

    .. seealso::  :meth:`PySide.QtCore.QMargins.setLeft`  :meth:`PySide.QtCore.QMargins.setRight`  :meth:`PySide.QtCore.QMargins.setTop`  :meth:`PySide.QtCore.QMargins.setBottom` 

.. method:: PySide.QtCore.QMargins.bottom()


    :rtype: :class:`PySide.QtCore.int`




    Returns the bottom margin.

    .. seealso::  :meth:`PySide.QtCore.QMargins.setBottom` 


.. method:: PySide.QtCore.QMargins.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if all margins are is 0; otherwise returns false.



.. method:: PySide.QtCore.QMargins.left()


    :rtype: :class:`PySide.QtCore.int`




    Returns the left margin.

    .. seealso::  :meth:`PySide.QtCore.QMargins.setLeft` 


.. method:: PySide.QtCore.QMargins.__ne__(, m2)


    :param m2: :class:`PySide.QtCore.QMargins`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QMargins.__eq__(, m2)


    :param m2: :class:`PySide.QtCore.QMargins`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QMargins.right()


    :rtype: :class:`PySide.QtCore.int`




    Returns the right margin.

    .. seealso::  :meth:`PySide.QtCore.QMargins.setRight` 


.. method:: PySide.QtCore.QMargins.setBottom(bottom)


    :param bottom: :class:`PySide.QtCore.int`




    Sets the bottom margin to ``bottom`` .

    .. seealso::  :meth:`PySide.QtCore.QMargins.bottom` 


.. method:: PySide.QtCore.QMargins.setLeft(left)


    :param left: :class:`PySide.QtCore.int`




    Sets the left margin to ``left`` .

    .. seealso::  :meth:`PySide.QtCore.QMargins.left` 


.. method:: PySide.QtCore.QMargins.setRight(right)


    :param right: :class:`PySide.QtCore.int`




    Sets the right margin to ``right`` .

    .. seealso::  :meth:`PySide.QtCore.QMargins.right` 


.. method:: PySide.QtCore.QMargins.setTop(top)


    :param top: :class:`PySide.QtCore.int`




    Sets the Top margin to ``Top`` .

    .. seealso::  :meth:`PySide.QtCore.QMargins.top` 


.. method:: PySide.QtCore.QMargins.top()


    :rtype: :class:`PySide.QtCore.int`




    Returns the top margin.

    .. seealso::  :meth:`PySide.QtCore.QMargins.setTop` 



