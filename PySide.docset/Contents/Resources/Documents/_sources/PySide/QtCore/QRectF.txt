.. module:: PySide.QtCore
.. _QRectF:

QRectF
******

.. inheritance-diagram:: QRectF
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__and__<PySide.QtCore.QRectF.__and__>` (r)
*    def :meth:`__eq__<PySide.QtCore.QRectF.__eq__>` (, arg__2)
*    def :meth:`__iand__<PySide.QtCore.QRectF.__iand__>` (r)
*    def :meth:`__ior__<PySide.QtCore.QRectF.__ior__>` (r)
*    def :meth:`__ne__<PySide.QtCore.QRectF.__ne__>` (, arg__2)
*    def :meth:`__or__<PySide.QtCore.QRectF.__or__>` (r)
*    def :meth:`__reduce__<PySide.QtCore.QRectF.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QRectF.__repr__>` ()
*    def :meth:`adjust<PySide.QtCore.QRectF.adjust>` (x1, y1, x2, y2)
*    def :meth:`adjusted<PySide.QtCore.QRectF.adjusted>` (x1, y1, x2, y2)
*    def :meth:`bottom<PySide.QtCore.QRectF.bottom>` ()
*    def :meth:`bottomLeft<PySide.QtCore.QRectF.bottomLeft>` ()
*    def :meth:`bottomRight<PySide.QtCore.QRectF.bottomRight>` ()
*    def :meth:`center<PySide.QtCore.QRectF.center>` ()
*    def :meth:`contains<PySide.QtCore.QRectF.contains>` (p)
*    def :meth:`contains<PySide.QtCore.QRectF.contains>` (r)
*    def :meth:`contains<PySide.QtCore.QRectF.contains>` (x, y)
*    def :meth:`getCoords<PySide.QtCore.QRectF.getCoords>` ()
*    def :meth:`getRect<PySide.QtCore.QRectF.getRect>` ()
*    def :meth:`height<PySide.QtCore.QRectF.height>` ()
*    def :meth:`intersect<PySide.QtCore.QRectF.intersect>` (r)
*    def :meth:`intersected<PySide.QtCore.QRectF.intersected>` (other)
*    def :meth:`intersects<PySide.QtCore.QRectF.intersects>` (r)
*    def :meth:`isEmpty<PySide.QtCore.QRectF.isEmpty>` ()
*    def :meth:`isNull<PySide.QtCore.QRectF.isNull>` ()
*    def :meth:`isValid<PySide.QtCore.QRectF.isValid>` ()
*    def :meth:`left<PySide.QtCore.QRectF.left>` ()
*    def :meth:`moveBottom<PySide.QtCore.QRectF.moveBottom>` (pos)
*    def :meth:`moveBottomLeft<PySide.QtCore.QRectF.moveBottomLeft>` (p)
*    def :meth:`moveBottomRight<PySide.QtCore.QRectF.moveBottomRight>` (p)
*    def :meth:`moveCenter<PySide.QtCore.QRectF.moveCenter>` (p)
*    def :meth:`moveLeft<PySide.QtCore.QRectF.moveLeft>` (pos)
*    def :meth:`moveRight<PySide.QtCore.QRectF.moveRight>` (pos)
*    def :meth:`moveTo<PySide.QtCore.QRectF.moveTo>` (p)
*    def :meth:`moveTo<PySide.QtCore.QRectF.moveTo>` (x, t)
*    def :meth:`moveTop<PySide.QtCore.QRectF.moveTop>` (pos)
*    def :meth:`moveTopLeft<PySide.QtCore.QRectF.moveTopLeft>` (p)
*    def :meth:`moveTopRight<PySide.QtCore.QRectF.moveTopRight>` (p)
*    def :meth:`normalized<PySide.QtCore.QRectF.normalized>` ()
*    def :meth:`right<PySide.QtCore.QRectF.right>` ()
*    def :meth:`setBottom<PySide.QtCore.QRectF.setBottom>` (pos)
*    def :meth:`setBottomLeft<PySide.QtCore.QRectF.setBottomLeft>` (p)
*    def :meth:`setBottomRight<PySide.QtCore.QRectF.setBottomRight>` (p)
*    def :meth:`setCoords<PySide.QtCore.QRectF.setCoords>` (x1, y1, x2, y2)
*    def :meth:`setHeight<PySide.QtCore.QRectF.setHeight>` (h)
*    def :meth:`setLeft<PySide.QtCore.QRectF.setLeft>` (pos)
*    def :meth:`setRect<PySide.QtCore.QRectF.setRect>` (x, y, w, h)
*    def :meth:`setRight<PySide.QtCore.QRectF.setRight>` (pos)
*    def :meth:`setSize<PySide.QtCore.QRectF.setSize>` (s)
*    def :meth:`setTop<PySide.QtCore.QRectF.setTop>` (pos)
*    def :meth:`setTopLeft<PySide.QtCore.QRectF.setTopLeft>` (p)
*    def :meth:`setTopRight<PySide.QtCore.QRectF.setTopRight>` (p)
*    def :meth:`setWidth<PySide.QtCore.QRectF.setWidth>` (w)
*    def :meth:`setX<PySide.QtCore.QRectF.setX>` (pos)
*    def :meth:`setY<PySide.QtCore.QRectF.setY>` (pos)
*    def :meth:`size<PySide.QtCore.QRectF.size>` ()
*    def :meth:`toAlignedRect<PySide.QtCore.QRectF.toAlignedRect>` ()
*    def :meth:`toRect<PySide.QtCore.QRectF.toRect>` ()
*    def :meth:`top<PySide.QtCore.QRectF.top>` ()
*    def :meth:`topLeft<PySide.QtCore.QRectF.topLeft>` ()
*    def :meth:`topRight<PySide.QtCore.QRectF.topRight>` ()
*    def :meth:`translate<PySide.QtCore.QRectF.translate>` (dx, dy)
*    def :meth:`translate<PySide.QtCore.QRectF.translate>` (p)
*    def :meth:`translated<PySide.QtCore.QRectF.translated>` (dx, dy)
*    def :meth:`translated<PySide.QtCore.QRectF.translated>` (p)
*    def :meth:`unite<PySide.QtCore.QRectF.unite>` (r)
*    def :meth:`united<PySide.QtCore.QRectF.united>` (other)
*    def :meth:`width<PySide.QtCore.QRectF.width>` ()
*    def :meth:`x<PySide.QtCore.QRectF.x>` ()
*    def :meth:`y<PySide.QtCore.QRectF.y>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QRectF` class defines a rectangle in the plane using floating point precision.

    A rectangle is normally expressed as an upper-left corner and a size. The size (width and height) of a :class:`PySide.QtCore.QRectF` is always equivalent to the mathematical rectangle that forms the basis for its rendering.

    A :class:`PySide.QtCore.QRectF` can be constructed with a set of left, top, width and height integers, or from a :class:`PySide.QtCore.QPoint` and a :class:`PySide.QtCore.QSize` . The following code creates two identical rectangles.

    ::

        r1 = QRectF(100, 200, 11, 16)
        r2 = QRectF(QPoint(100, 200), QSize(11, 16))


    There is also a third constructor creating a :class:`PySide.QtCore.QRectF` from a :class:`PySide.QtCore.QRect` , and a corresponding :meth:`PySide.QtCore.QRectF.toRect` function that returns a :class:`PySide.QtCore.QRect` object based on the values of this rectangle (note that the coordinates in the returned rectangle are rounded to the nearest integer).

    The :class:`PySide.QtCore.QRectF` class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. :class:`PySide.QtCore.QRectF` also provide functions to move the rectangle relative to the various coordinates. In addition there is a :meth:`PySide.QtCore.QRectF.moveTo` function that moves the rectangle, leaving its top left corner at the given coordinates. Alternatively, the :meth:`PySide.QtCore.QRectF.translate` function moves the rectangle the given offset relative to the current position, and the :meth:`PySide.QtCore.QRectF.translated` function returns a translated copy of this rectangle.

    The :meth:`PySide.QtCore.QRectF.size` function returns the rectange's dimensions as a :class:`PySide.QtCore.QSize` . The dimensions can also be retrieved separately using the :meth:`PySide.QtCore.QRectF.width` and :meth:`PySide.QtCore.QRectF.height` functions. To manipulate the dimensions use the :meth:`PySide.QtCore.QRectF.setSize` , :meth:`PySide.QtCore.QRectF.setWidth` or :meth:`PySide.QtCore.QRectF.setHeight` functions. Alternatively, the size can be changed by applying either of the functions setting the rectangle coordinates, for example, :meth:`PySide.QtCore.QRectF.setBottom` or :meth:`PySide.QtCore.QRectF.setRight` .

    The :meth:`PySide.QtCore.QRectF.contains` function tells whether a given point is inside the rectangle or not, and the :meth:`PySide.QtCore.QRectF.intersects` function returns true if this rectangle intersects with a given rectangle (otherwise false). The :class:`PySide.QtCore.QRectF` class also provides the :meth:`PySide.QtCore.QRectF.intersected` function which returns the intersection rectangle, and the :meth:`PySide.QtCore.QRectF.united` function which returns the rectangle that encloses the given rectangle and this:

    +---------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrect-intersect.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrect-unite.png|
    +---------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
    |:meth:`PySide.QtCore.QRectF.intersected`                                                                 |:meth:`PySide.QtCore.QRectF.united`                                                                  |
    +---------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+

    The :meth:`PySide.QtCore.QRectF.isEmpty` function returns true if the rectangle's width or height is less than, or equal to, 0. Note that an empty rectangle is not valid: The :meth:`PySide.QtCore.QRectF.isValid` function returns true if both width and height is larger than 0. A null rectangle ( :meth:`PySide.QtCore.QRectF.isNull` == true) on the other hand, has both width and height set to 0.

    Note that due to the way :class:`PySide.QtCore.QRect` and :class:`PySide.QtCore.QRectF` are defined, an empty :class:`PySide.QtCore.QRectF` is defined in essentially the same way as :class:`PySide.QtCore.QRect` .

    Finally, :class:`PySide.QtCore.QRectF` objects can be streamed as well as compared.

    .. _PySide.QtCore.QRectF_rendering:



Rendering
^^^^^^^^^

    When using an :attr:`anti-aliased<QPainter.RenderHint>` painter, the boundary line of a :class:`PySide.QtCore.QRectF` will be rendered symmetrically on both sides of the mathematical rectangle's boundary line. But when using an aliased painter (the default) other rules apply.

    Then, when rendering with a one pixel wide pen the :class:`PySide.QtCore.QRectF` 's boundary line will be rendered to the right and below the mathematical rectangle's boundary line.

    When rendering with a two pixels wide pen the boundary line will be split in the middle by the mathematical rectangle. This will be the case whenever the pen is set to an even number of pixels, while rendering with a pen with an odd number of pixels, the spare pixel will be rendered to the right and below the mathematical rectangle as in the one pixel case.

    +------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrect-diagram-zero.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrectf-diagram-one.png  |
    +------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
    |Logical representation                                                                                      |One pixel wide pen                                                                                            |
    +------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrectf-diagram-two.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrectf-diagram-three.png|
    +------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
    |Two pixel wide pen                                                                                          |Three pixel wide pen                                                                                          |
    +------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+

    .. _PySide.QtCore.QRectF_coordinates:



Coordinates
^^^^^^^^^^^

    The :class:`PySide.QtCore.QRectF` class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. :class:`PySide.QtCore.QRectF` also provide functions to move the rectangle relative to the various coordinates.

    For example: the :meth:`PySide.QtCore.QRectF.bottom` , :meth:`PySide.QtCore.QRectF.setBottom` and :meth:`PySide.QtCore.QRectF.moveBottom` functions: :meth:`PySide.QtCore.QRectF.bottom` returns the y-coordinate of the rectangle's bottom edge, :meth:`PySide.QtCore.QRectF.setBottom` sets the bottom edge of the rectangle to the given y coordinate (it may change the height, but will never change the rectangle's top edge) and :meth:`PySide.QtCore.QRectF.moveBottom` moves the entire rectangle vertically, leaving the rectangle's bottom edge at the given y coordinate and its size unchanged.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrectf-coordinates.png

    It is also possible to add offsets to this rectangle's coordinates using the :meth:`PySide.QtCore.QRectF.adjust` function, as well as retrieve a new rectangle based on adjustments of the original one using the :meth:`PySide.QtCore.QRectF.adjusted` function. If either of the width and height is negative, use the :meth:`PySide.QtCore.QRectF.normalized` function to retrieve a rectangle where the corners are swapped.

    In addition, :class:`PySide.QtCore.QRectF` provides the :meth:`PySide.QtCore.QRectF.getCoords` function which extracts the position of the rectangle's top-left and bottom-right corner, and the :meth:`PySide.QtCore.QRectF.getRect` function which extracts the rectangle's top-left corner, width and height. Use the :meth:`PySide.QtCore.QRectF.setCoords` and :meth:`PySide.QtCore.QRectF.setRect` function to manipulate the rectangle's coordinates and dimensions in one go.

    .. seealso::  :class:`PySide.QtCore.QRect`  :class:`PySide.QtGui.QRegion` 

.. class:: QRectF()
           QRectF(topleft, bottomRight)
           QRectF(topleft, size)
           QRectF(rect)
           QRectF(QRectF)
           QRectF(left, top, width, height)

    :param width: :class:`PySide.QtCore.qreal`
    :param size: :class:`PySide.QtCore.QSizeF`
    :param bottomRight: :class:`PySide.QtCore.QPointF`
    :param rect: :class:`PySide.QtCore.QRect`
    :param QRectF: :class:`PySide.QtCore.QRectF`
    :param topleft: :class:`PySide.QtCore.QPointF`
    :param left: :class:`PySide.QtCore.qreal`
    :param height: :class:`PySide.QtCore.qreal`
    :param top: :class:`PySide.QtCore.qreal`

    Constructs a null rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.isNull` 

    Constructs a rectangle with the given ``topLeft`` and ``bottomRight`` corners.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setTopLeft`  :meth:`PySide.QtCore.QRectF.setBottomRight` 

    Constructs a rectangle with the given ``topLeft`` corner and the given ``size`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setTopLeft`  :meth:`PySide.QtCore.QRectF.setSize` 

    Constructs a :class:`PySide.QtCore.QRectF` rectangle from the given :class:`PySide.QtCore.QRect` ``rectangle`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.toRect` 



    Constructs a rectangle with (``x`` , ``y`` ) as its top-left corner and the given ``width`` and ``height`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setRect` 

.. method:: PySide.QtCore.QRectF.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QRectF.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QRectF.adjust(x1, y1, x2, y2)


    :param x1: :class:`PySide.QtCore.qreal`
    :param y1: :class:`PySide.QtCore.qreal`
    :param x2: :class:`PySide.QtCore.qreal`
    :param y2: :class:`PySide.QtCore.qreal`




    Adds ``dx1`` , ``dy1`` , ``dx2`` and ``dy2`` respectively to the existing coordinates of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.adjusted`  :meth:`PySide.QtCore.QRectF.setRect` 


.. method:: PySide.QtCore.QRectF.adjusted(x1, y1, x2, y2)


    :param x1: :class:`PySide.QtCore.qreal`
    :param y1: :class:`PySide.QtCore.qreal`
    :param x2: :class:`PySide.QtCore.qreal`
    :param y2: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QRectF`




    Returns a new rectangle with ``dx1`` , ``dy1`` , ``dx2`` and ``dy2`` added respectively to the existing coordinates of this rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.adjust` 


.. method:: PySide.QtCore.QRectF.bottom()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y-coordinate of the rectangle's bottom edge.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setBottom`  :meth:`PySide.QtCore.QRectF.bottomLeft`  :meth:`PySide.QtCore.QRectF.bottomRight` 


.. method:: PySide.QtCore.QRectF.bottomLeft()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the position of the rectangle's bottom-left corner.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setBottomLeft`  :meth:`PySide.QtCore.QRectF.bottom`  :meth:`PySide.QtCore.QRectF.left` 


.. method:: PySide.QtCore.QRectF.bottomRight()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the position of the rectangle's bottom-right corner.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setBottomRight`  :meth:`PySide.QtCore.QRectF.bottom`  :meth:`PySide.QtCore.QRectF.right` 


.. method:: PySide.QtCore.QRectF.center()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the center point of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.moveCenter` 


.. method:: PySide.QtCore.QRectF.contains(x, y)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Returns true if the point (``x`` , ``y`` ) is inside or on the edge of the rectangle; otherwise returns false.



.. method:: PySide.QtCore.QRectF.contains(p)


    :param p: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``point`` is inside or on the edge of the rectangle; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QRectF.intersects` 


.. method:: PySide.QtCore.QRectF.contains(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    Returns true if the given ``rectangle`` is inside this rectangle; otherwise returns false.



.. method:: PySide.QtCore.QRectF.getCoords()






    Extracts the position of the rectangle's top-left corner to \*``x1`` and \*``y1`` , and the position of the bottom-right corner to \*``x2`` and \*``y2`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setCoords`  :meth:`PySide.QtCore.QRectF.getRect` 


.. method:: PySide.QtCore.QRectF.getRect()






    Extracts the position of the rectangle's top-left corner to \*``x`` and \*``y`` , and its dimensions to \*``width`` and \*``height`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setRect`  :meth:`PySide.QtCore.QRectF.getCoords` 


.. method:: PySide.QtCore.QRectF.height()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the height of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setHeight`  :meth:`PySide.QtCore.QRectF.width`  :meth:`PySide.QtCore.QRectF.size` 


.. method:: PySide.QtCore.QRectF.intersect(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Use intersected(``rectangle`` ) instead.



.. method:: PySide.QtCore.QRectF.intersected(other)


    :param other: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the intersection of this rectangle and the given ``rectangle`` . Note that ``r.intersected(s)`` is equivalent to ``r & s`` .

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrect-intersect.png

    .. seealso::  :meth:`PySide.QtCore.QRectF.intersects`  :meth:`PySide.QtCore.QRectF.united`  :meth:`PySide.QtCore.QRectF.operator&=` 


.. method:: PySide.QtCore.QRectF.intersects(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this rectangle intersects with the given ``rectangle`` (i.e. there is a non-empty area of overlap between them), otherwise returns false.

    The intersection rectangle can be retrieved using the :meth:`PySide.QtCore.QRectF.intersected` function.

    .. seealso::  :meth:`PySide.QtCore.QRectF.contains` 


.. method:: PySide.QtCore.QRectF.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the rectangle is empty, otherwise returns false.

    An empty rectangle has :meth:`PySide.QtCore.QRectF.width` <= 0 or :meth:`PySide.QtCore.QRectF.height` <= 0. An empty rectangle is not valid (i.e., :meth:`PySide.QtCore.QRectF.isEmpty` == ! :meth:`PySide.QtCore.QRectF.isValid` ).

    Use the :meth:`PySide.QtCore.QRectF.normalized` function to retrieve a rectangle where the corners are swapped.

    .. seealso::  :meth:`PySide.QtCore.QRectF.isNull`  :meth:`PySide.QtCore.QRectF.isValid`  :meth:`PySide.QtCore.QRectF.normalized` 


.. method:: PySide.QtCore.QRectF.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the rectangle is a null rectangle, otherwise returns false.

    A null rectangle has both the width and the height set to 0. A null rectangle is also empty, and hence not valid.

    .. seealso::  :meth:`PySide.QtCore.QRectF.isEmpty`  :meth:`PySide.QtCore.QRectF.isValid` 


.. method:: PySide.QtCore.QRectF.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the rectangle is valid, otherwise returns false.

    A valid rectangle has a :meth:`PySide.QtCore.QRectF.width` > 0 and :meth:`PySide.QtCore.QRectF.height` > 0. Note that non-trivial operations like intersections are not defined for invalid rectangles. A valid rectangle is not empty (i.e., :meth:`PySide.QtCore.QRectF.isValid` == ! :meth:`PySide.QtCore.QRectF.isEmpty` ).

    .. seealso::  :meth:`PySide.QtCore.QRectF.isNull`  :meth:`PySide.QtCore.QRectF.isEmpty`  :meth:`PySide.QtCore.QRectF.normalized` 


.. method:: PySide.QtCore.QRectF.left()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x-coordinate of the rectangle's left edge. Equivalent to :meth:`PySide.QtCore.QRectF.x` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setLeft`  :meth:`PySide.QtCore.QRectF.topLeft`  :meth:`PySide.QtCore.QRectF.bottomLeft` 


.. method:: PySide.QtCore.QRectF.moveBottom(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Moves the rectangle vertically, leaving the rectangle's bottom edge at the given ``y`` coordinate. The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.bottom`  :meth:`PySide.QtCore.QRectF.setBottom`  :meth:`PySide.QtCore.QRectF.moveTop` 


.. method:: PySide.QtCore.QRectF.moveBottomLeft(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Moves the rectangle, leaving the bottom-left corner at the given ``position`` . The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setBottomLeft`  :meth:`PySide.QtCore.QRectF.moveBottom`  :meth:`PySide.QtCore.QRectF.moveLeft` 


.. method:: PySide.QtCore.QRectF.moveBottomRight(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Moves the rectangle, leaving the bottom-right corner at the given ``position`` . The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setBottomRight`  :meth:`PySide.QtCore.QRectF.moveBottom`  :meth:`PySide.QtCore.QRectF.moveRight` 


.. method:: PySide.QtCore.QRectF.moveCenter(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Moves the rectangle, leaving the center point at the given ``position`` . The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.center` 


.. method:: PySide.QtCore.QRectF.moveLeft(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Moves the rectangle horizontally, leaving the rectangle's left edge at the given ``x`` coordinate. The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.left`  :meth:`PySide.QtCore.QRectF.setLeft`  :meth:`PySide.QtCore.QRectF.moveRight` 


.. method:: PySide.QtCore.QRectF.moveRight(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Moves the rectangle horizontally, leaving the rectangle's right edge at the given ``x`` coordinate. The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.right`  :meth:`PySide.QtCore.QRectF.setRight`  :meth:`PySide.QtCore.QRectF.moveLeft` 


.. method:: PySide.QtCore.QRectF.moveTo(x, t)


    :param x: :class:`PySide.QtCore.qreal`
    :param t: :class:`PySide.QtCore.qreal`




    Moves the rectangle, leaving the top-left corner at the given position (``x`` , ``y`` ). The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.translate`  :meth:`PySide.QtCore.QRectF.moveTopLeft` 


.. method:: PySide.QtCore.QRectF.moveTo(p)


    :param p: :class:`PySide.QtCore.QPointF`




    This is an overloaded function.

    Moves the rectangle, leaving the top-left corner at the given ``position`` .



.. method:: PySide.QtCore.QRectF.moveTop(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Moves the rectangle vertically, leaving the rectangle's top line at the given ``y`` coordinate. The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.top`  :meth:`PySide.QtCore.QRectF.setTop`  :meth:`PySide.QtCore.QRectF.moveBottom` 


.. method:: PySide.QtCore.QRectF.moveTopLeft(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Moves the rectangle, leaving the top-left corner at the given ``position`` . The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setTopLeft`  :meth:`PySide.QtCore.QRectF.moveTop`  :meth:`PySide.QtCore.QRectF.moveLeft` 


.. method:: PySide.QtCore.QRectF.moveTopRight(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Moves the rectangle, leaving the top-right corner at the given ``position`` . The rectangle's size is unchanged.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setTopRight`  :meth:`PySide.QtCore.QRectF.moveTop`  :meth:`PySide.QtCore.QRectF.moveRight` 


.. method:: PySide.QtCore.QRectF.normalized()


    :rtype: :class:`PySide.QtCore.QRectF`




    Returns a normalized rectangle; i.e., a rectangle that has a non-negative width and height.

    If :meth:`PySide.QtCore.QRectF.width` < 0 the function swaps the left and right corners, and it swaps the top and bottom corners if :meth:`PySide.QtCore.QRectF.height` < 0.

    .. seealso::  :meth:`PySide.QtCore.QRectF.isValid`  :meth:`PySide.QtCore.QRectF.isEmpty` 


.. method:: PySide.QtCore.QRectF.__ne__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QRectF.__and__(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the intersection of this rectangle and the given ``rectangle`` . Returns an empty rectangle if there is no intersection.

    .. seealso::  :meth:`PySide.QtCore.QRectF.operator&=`  :meth:`PySide.QtCore.QRectF.intersected` 


.. method:: PySide.QtCore.QRectF.__iand__(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Intersects this rectangle with the given ``rectangle`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.intersected`  :meth:`PySide.QtCore.QRectF.operator|=` 


.. method:: PySide.QtCore.QRectF.__eq__(, arg__2)


    :param arg__2: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QRectF.__or__(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the bounding rectangle of this rectangle and the given ``rectangle`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.united`  :meth:`PySide.QtCore.QRectF.operator|=` 


.. method:: PySide.QtCore.QRectF.__ior__(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Unites this rectangle with the given ``rectangle`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.united`  :meth:`PySide.QtCore.QRectF.operator|` 


.. method:: PySide.QtCore.QRectF.right()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x-coordinate of the rectangle's right edge.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setRight`  :meth:`PySide.QtCore.QRectF.topRight`  :meth:`PySide.QtCore.QRectF.bottomRight` 


.. method:: PySide.QtCore.QRectF.setBottom(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Sets the bottom edge of the rectangle to the given ``y`` coordinate. May change the height, but will never change the top edge of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.bottom`  :meth:`PySide.QtCore.QRectF.moveBottom` 


.. method:: PySide.QtCore.QRectF.setBottomLeft(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Set the bottom-left corner of the rectangle to the given ``position`` . May change the size, but will never change the top-right corner of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.bottomLeft`  :meth:`PySide.QtCore.QRectF.moveBottomLeft` 


.. method:: PySide.QtCore.QRectF.setBottomRight(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Set the bottom-right corner of the rectangle to the given ``position`` . May change the size, but will never change the top-left corner of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.bottomRight`  :meth:`PySide.QtCore.QRectF.moveBottomRight` 


.. method:: PySide.QtCore.QRectF.setCoords(x1, y1, x2, y2)


    :param x1: :class:`PySide.QtCore.qreal`
    :param y1: :class:`PySide.QtCore.qreal`
    :param x2: :class:`PySide.QtCore.qreal`
    :param y2: :class:`PySide.QtCore.qreal`




    Sets the coordinates of the rectangle's top-left corner to (``x1`` , ``y1`` ), and the coordinates of its bottom-right corner to (``x2`` , ``y2`` ).

    .. seealso::  :meth:`PySide.QtCore.QRectF.getCoords`  :meth:`PySide.QtCore.QRectF.setRect` 


.. method:: PySide.QtCore.QRectF.setHeight(h)


    :param h: :class:`PySide.QtCore.qreal`




    Sets the height of the rectangle to the given ``height`` . The bottom edge is changed, but not the top one.

    .. seealso::  :meth:`PySide.QtCore.QRectF.height`  :meth:`PySide.QtCore.QRectF.setSize` 


.. method:: PySide.QtCore.QRectF.setLeft(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Sets the left edge of the rectangle to the given ``x`` coordinate. May change the width, but will never change the right edge of the rectangle.

    Equivalent to :meth:`PySide.QtCore.QRectF.setX` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.left`  :meth:`PySide.QtCore.QRectF.moveLeft` 


.. method:: PySide.QtCore.QRectF.setRect(x, y, w, h)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`




    Sets the coordinates of the rectangle's top-left corner to (``x`` , ``y`` ), and its size to the given ``width`` and ``height`` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.getRect`  :meth:`PySide.QtCore.QRectF.setCoords` 


.. method:: PySide.QtCore.QRectF.setRight(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Sets the right edge of the rectangle to the given ``x`` coordinate. May change the width, but will never change the left edge of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.right`  :meth:`PySide.QtCore.QRectF.moveRight` 


.. method:: PySide.QtCore.QRectF.setSize(s)


    :param s: :class:`PySide.QtCore.QSizeF`




    Sets the size of the rectangle to the given ``size`` . The top-left corner is not moved.

    .. seealso::  :meth:`PySide.QtCore.QRectF.size`  :meth:`PySide.QtCore.QRectF.setWidth`  :meth:`PySide.QtCore.QRectF.setHeight` 


.. method:: PySide.QtCore.QRectF.setTop(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Sets the top edge of the rectangle to the given ``y`` coordinate. May change the height, but will never change the bottom edge of the rectangle.

    Equivalent to :meth:`PySide.QtCore.QRectF.setY` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.top`  :meth:`PySide.QtCore.QRectF.moveTop` 


.. method:: PySide.QtCore.QRectF.setTopLeft(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Set the top-left corner of the rectangle to the given ``position`` . May change the size, but will never change the bottom-right corner of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.topLeft`  :meth:`PySide.QtCore.QRectF.moveTopLeft` 


.. method:: PySide.QtCore.QRectF.setTopRight(p)


    :param p: :class:`PySide.QtCore.QPointF`




    Set the top-right corner of the rectangle to the given ``position`` . May change the size, but will never change the bottom-left corner of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.topRight`  :meth:`PySide.QtCore.QRectF.moveTopRight` 


.. method:: PySide.QtCore.QRectF.setWidth(w)


    :param w: :class:`PySide.QtCore.qreal`




    Sets the width of the rectangle to the given ``width`` . The right edge is changed, but not the left one.

    .. seealso::  :meth:`PySide.QtCore.QRectF.width`  :meth:`PySide.QtCore.QRectF.setSize` 


.. method:: PySide.QtCore.QRectF.setX(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Sets the left edge of the rectangle to the given ``x`` coordinate. May change the width, but will never change the right edge of the rectangle.

    Equivalent to :meth:`PySide.QtCore.QRectF.setLeft` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.x`  :meth:`PySide.QtCore.QRectF.setY`  :meth:`PySide.QtCore.QRectF.setTopLeft` 


.. method:: PySide.QtCore.QRectF.setY(pos)


    :param pos: :class:`PySide.QtCore.qreal`




    Sets the top edge of the rectangle to the given ``y`` coordinate. May change the height, but will never change the bottom edge of the rectangle.

    Equivalent to :meth:`PySide.QtCore.QRectF.setTop` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.y`  :meth:`PySide.QtCore.QRectF.setX`  :meth:`PySide.QtCore.QRectF.setTopLeft` 


.. method:: PySide.QtCore.QRectF.size()


    :rtype: :class:`PySide.QtCore.QSizeF`




    Returns the size of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setSize`  :meth:`PySide.QtCore.QRectF.width`  :meth:`PySide.QtCore.QRectF.height` 


.. method:: PySide.QtCore.QRectF.toAlignedRect()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns a :class:`PySide.QtCore.QRect` based on the values of this rectangle that is the smallest possible integer rectangle that completely contains this rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.toRect` 


.. method:: PySide.QtCore.QRectF.toRect()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns a :class:`PySide.QtCore.QRect` based on the values of this rectangle. Note that the coordinates in the returned rectangle are rounded to the nearest integer.

    .. seealso::  :meth:`PySide.QtCore.QRectF.QRectF`  :meth:`PySide.QtCore.QRectF.toAlignedRect` 


.. method:: PySide.QtCore.QRectF.top()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y-coordinate of the rectangle's top edge. Equivalent to :meth:`PySide.QtCore.QRectF.y` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setTop`  :meth:`PySide.QtCore.QRectF.topLeft`  :meth:`PySide.QtCore.QRectF.topRight` 


.. method:: PySide.QtCore.QRectF.topLeft()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the position of the rectangle's top-left corner.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setTopLeft`  :meth:`PySide.QtCore.QRectF.top`  :meth:`PySide.QtCore.QRectF.left` 


.. method:: PySide.QtCore.QRectF.topRight()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the position of the rectangle's top-right corner.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setTopRight`  :meth:`PySide.QtCore.QRectF.top`  :meth:`PySide.QtCore.QRectF.right` 


.. method:: PySide.QtCore.QRectF.translate(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`




    Moves the rectangle ``dx`` along the x-axis and ``dy`` along the y-axis, relative to the current position. Positive values move the rectangle to the right and downwards.

    .. seealso::  :meth:`PySide.QtCore.QRectF.moveTopLeft`  :meth:`PySide.QtCore.QRectF.moveTo`  :meth:`PySide.QtCore.QRectF.translated` 


.. method:: PySide.QtCore.QRectF.translate(p)


    :param p: :class:`PySide.QtCore.QPointF`




    This is an overloaded function.

    Moves the rectangle ``offset`` . :meth:`PySide.QtCore.QPointF.x` along the x axis and ``offset`` . :meth:`PySide.QtCore.QPointF.y` along the y axis, relative to the current position.



.. method:: PySide.QtCore.QRectF.translated(p)


    :param p: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QRectF`




    This is an overloaded function.

    Returns a copy of the rectangle that is translated ``offset`` . :meth:`PySide.QtCore.QPointF.x` along the x axis and ``offset`` . :meth:`PySide.QtCore.QPointF.y` along the y axis, relative to the current position.



.. method:: PySide.QtCore.QRectF.translated(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QRectF`




    Returns a copy of the rectangle that is translated ``dx`` along the x axis and ``dy`` along the y axis, relative to the current position. Positive values move the rectangle to the right and down.

    .. seealso::  :meth:`PySide.QtCore.QRectF.translate` 


.. method:: PySide.QtCore.QRectF.unite(r)


    :param r: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Use united(``rectangle`` ) instead.



.. method:: PySide.QtCore.QRectF.united(other)


    :param other: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the bounding rectangle of this rectangle and the given ``rectangle`` .

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qrect-unite.png

    .. seealso::  :meth:`PySide.QtCore.QRectF.intersected` 


.. method:: PySide.QtCore.QRectF.width()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the width of the rectangle.

    .. seealso::  :meth:`PySide.QtCore.QRectF.setWidth`  :meth:`PySide.QtCore.QRectF.height`  :meth:`PySide.QtCore.QRectF.size` 


.. method:: PySide.QtCore.QRectF.x()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x-coordinate of the rectangle's left edge. Equivalent to :meth:`PySide.QtCore.QRectF.left` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setX`  :meth:`PySide.QtCore.QRectF.y`  :meth:`PySide.QtCore.QRectF.topLeft` 


.. method:: PySide.QtCore.QRectF.y()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y-coordinate of the rectangle's top edge. Equivalent to :meth:`PySide.QtCore.QRectF.top` .

    .. seealso::  :meth:`PySide.QtCore.QRectF.setY`  :meth:`PySide.QtCore.QRectF.x`  :meth:`PySide.QtCore.QRectF.topLeft` 



