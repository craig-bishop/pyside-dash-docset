.. module:: PySide.QtCore
.. _QTimerEvent:

QTimerEvent
***********

.. inheritance-diagram:: QTimerEvent
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`timerId<PySide.QtCore.QTimerEvent.timerId>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QTimerEvent` class contains parameters that describe a timer event.

    Timer events are sent at regular intervals to objects that have started one or more timers. Each timer has a unique identifier. A timer is started with :meth:`QObject.startTimer()<PySide.QtCore.QObject.startTimer>` .

    The :class:`PySide.QtCore.QTimer` class provides a high-level programming interface that uses signals instead of events. It also provides single-shot timers.

    The event handler :meth:`QObject.timerEvent()<PySide.QtCore.QObject.timerEvent>` receives timer events.

    .. seealso::  :class:`PySide.QtCore.QTimer`  :meth:`QObject.timerEvent()<PySide.QtCore.QObject.timerEvent>`  :meth:`QObject.startTimer()<PySide.QtCore.QObject.startTimer>`  :meth:`QObject.killTimer()<PySide.QtCore.QObject.killTimer>` 

.. class:: QTimerEvent(timerId)

    :param timerId: :class:`PySide.QtCore.int`

    Constructs a timer event object with the timer identifier set to ``timerId`` .


.. method:: PySide.QtCore.QTimerEvent.timerId()


    :rtype: :class:`PySide.QtCore.int`




    Returns the unique timer identifier, which is the same identifier as returned from :meth:`QObject.startTimer()<PySide.QtCore.QObject.startTimer>` .




