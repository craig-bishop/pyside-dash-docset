.. module:: PySide.QtCore
.. _QSizeF:

QSizeF
******

.. inheritance-diagram:: QSizeF
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtCore.QSizeF.__add__>` (, s2)
*    def :meth:`__div__<PySide.QtCore.QSizeF.__div__>` (, c)
*    def :meth:`__eq__<PySide.QtCore.QSizeF.__eq__>` (, s2)
*    def :meth:`__iadd__<PySide.QtCore.QSizeF.__iadd__>` (arg__1)
*    def :meth:`__idiv__<PySide.QtCore.QSizeF.__idiv__>` (c)
*    def :meth:`__imul__<PySide.QtCore.QSizeF.__imul__>` (c)
*    def :meth:`__isub__<PySide.QtCore.QSizeF.__isub__>` (arg__1)
*    def :meth:`__mul__<PySide.QtCore.QSizeF.__mul__>` (, c)
*    def :meth:`__mul__<PySide.QtCore.QSizeF.__mul__>` (c)
*    def :meth:`__ne__<PySide.QtCore.QSizeF.__ne__>` (, s2)
*    def :meth:`__reduce__<PySide.QtCore.QSizeF.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QSizeF.__repr__>` ()
*    def :meth:`__sub__<PySide.QtCore.QSizeF.__sub__>` (, s2)
*    def :meth:`boundedTo<PySide.QtCore.QSizeF.boundedTo>` (arg__1)
*    def :meth:`expandedTo<PySide.QtCore.QSizeF.expandedTo>` (arg__1)
*    def :meth:`height<PySide.QtCore.QSizeF.height>` ()
*    def :meth:`isEmpty<PySide.QtCore.QSizeF.isEmpty>` ()
*    def :meth:`isNull<PySide.QtCore.QSizeF.isNull>` ()
*    def :meth:`isValid<PySide.QtCore.QSizeF.isValid>` ()
*    def :meth:`scale<PySide.QtCore.QSizeF.scale>` (s, mode)
*    def :meth:`scale<PySide.QtCore.QSizeF.scale>` (w, h, mode)
*    def :meth:`setHeight<PySide.QtCore.QSizeF.setHeight>` (h)
*    def :meth:`setWidth<PySide.QtCore.QSizeF.setWidth>` (w)
*    def :meth:`toSize<PySide.QtCore.QSizeF.toSize>` ()
*    def :meth:`toTuple<PySide.QtCore.QSizeF.toTuple>` ()
*    def :meth:`transpose<PySide.QtCore.QSizeF.transpose>` ()
*    def :meth:`width<PySide.QtCore.QSizeF.width>` ()


Detailed Description
--------------------



    The :class:`PySide.QtCore.QSizeF` class defines the size of a two-dimensional object using floating point precision.

    A size is specified by a :meth:`PySide.QtCore.QSizeF.width` and a :meth:`PySide.QtCore.QSizeF.height` . It can be set in the constructor and changed using the :meth:`PySide.QtCore.QSizeF.setWidth` , :meth:`PySide.QtCore.QSizeF.setHeight` , or :meth:`PySide.QtCore.QSizeF.scale` functions, or using arithmetic operators. A size can also be manipulated directly by retrieving references to the width and height using the :meth:`PySide.QtCore.QSizeF.rwidth` and :meth:`PySide.QtCore.QSizeF.rheight` functions. Finally, the width and height can be swapped using the :meth:`PySide.QtCore.QSizeF.transpose` function.

    The :meth:`PySide.QtCore.QSizeF.isValid` function determines if a size is valid. A valid size has both width and height greater than or equal to zero. The :meth:`PySide.QtCore.QSizeF.isEmpty` function returns true if either of the width and height is *less* than (or equal to) zero, while the :meth:`PySide.QtCore.QSizeF.isNull` function returns true only if both the width and the height is zero.

    Use the :meth:`PySide.QtCore.QSizeF.expandedTo` function to retrieve a size which holds the maximum height and width of this size and a given size. Similarly, the :meth:`PySide.QtCore.QSizeF.boundedTo` function returns a size which holds the minimum height and width of this size and a given size.

    The :class:`PySide.QtCore.QSizeF` class also provides the :meth:`PySide.QtCore.QSizeF.toSize` function returning a :class:`PySide.QtCore.QSize` copy of this size, constructed by rounding the width and height to the nearest integers.

    :class:`PySide.QtCore.QSizeF` objects can be streamed as well as compared.

    .. seealso::  :class:`PySide.QtCore.QSize`  :class:`PySide.QtCore.QPointF`  :class:`PySide.QtCore.QRectF` 

.. class:: QSizeF()
           QSizeF(sz)
           QSizeF(QSizeF)
           QSizeF(w, h)

    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`
    :param QSizeF: :class:`PySide.QtCore.QSizeF`
    :param sz: :class:`PySide.QtCore.QSize`

    Constructs an invalid size.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.isValid` 

    Constructs a size with floating point accuracy from the given ``size`` .

    .. seealso::  :meth:`PySide.QtCore.QSizeF.toSize` 



    Constructs a size with the given ``width`` and ``height`` .


.. method:: PySide.QtCore.QSizeF.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QSizeF.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QSizeF.boundedTo(arg__1)


    :param arg__1: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`




    Returns a size holding the minimum width and height of this size and the given ``otherSize`` .

    .. seealso::  :meth:`PySide.QtCore.QSizeF.expandedTo`  :meth:`PySide.QtCore.QSizeF.scale` 


.. method:: PySide.QtCore.QSizeF.expandedTo(arg__1)


    :param arg__1: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`




    Returns a size holding the maximum width and height of this size and the given ``otherSize`` .

    .. seealso::  :meth:`PySide.QtCore.QSizeF.boundedTo`  :meth:`PySide.QtCore.QSizeF.scale` 


.. method:: PySide.QtCore.QSizeF.height()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the height.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.width`  :meth:`PySide.QtCore.QSizeF.setHeight` 


.. method:: PySide.QtCore.QSizeF.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if either of the width and height is less than or equal to 0; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.isNull`  :meth:`PySide.QtCore.QSizeF.isValid` 


.. method:: PySide.QtCore.QSizeF.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if both the width and height are +0.0; otherwise returns false.

    .. note::  Since this function treats +0.0 and -0.0 differently, sizes with zero width and height where either or both values have a negative sign are not defined to be null sizes.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.isValid`  :meth:`PySide.QtCore.QSizeF.isEmpty` 


.. method:: PySide.QtCore.QSizeF.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if both the width and height is equal to or greater than 0; otherwise returns false.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.isNull`  :meth:`PySide.QtCore.QSizeF.isEmpty` 


.. method:: PySide.QtCore.QSizeF.__ne__(, s2)


    :param s2: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QSizeF.__mul__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QSizeF`







.. method:: PySide.QtCore.QSizeF.__mul__(, c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QSizeF`







.. method:: PySide.QtCore.QSizeF.__imul__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QSizeF`




    This is an overloaded function.

    Multiplies both the width and height by the given ``factor`` and returns a reference to the size.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.scale` 


.. method:: PySide.QtCore.QSizeF.__add__(, s2)


    :param s2: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`







.. method:: PySide.QtCore.QSizeF.__iadd__(arg__1)


    :param arg__1: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`




    Adds the given ``size`` to this size and returns a reference to this size. For example:

    ::

        s = QSizeF( 3, 7)
        r = QSizeF(-1, 4)
        s += r

        # s becomes (2,11)




.. method:: PySide.QtCore.QSizeF.__sub__(, s2)


    :param s2: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`







.. method:: PySide.QtCore.QSizeF.__isub__(arg__1)


    :param arg__1: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.QSizeF`




    Subtracts the given ``size`` from this size and returns a reference to this size. For example:

    ::

        s = QSizeF( 3, 7)
        r = QSizeF(-1, 4)
        s -= r

        # s becomes (4,3)




.. method:: PySide.QtCore.QSizeF.__div__(, c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QSizeF`







.. method:: PySide.QtCore.QSizeF.__idiv__(c)


    :param c: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtCore.QSizeF`




    This is an overloaded function.

    Divides both the width and height by the given ``divisor`` and returns a reference to the size.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.scale` 


.. method:: PySide.QtCore.QSizeF.__eq__(, s2)


    :param s2: :class:`PySide.QtCore.QSizeF`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QSizeF.scale(w, h, mode)


    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`
    :param mode: :attr:`PySide.QtCore.Qt.AspectRatioMode`







.. method:: PySide.QtCore.QSizeF.scale(s, mode)


    :param s: :class:`PySide.QtCore.QSizeF`
    :param mode: :attr:`PySide.QtCore.Qt.AspectRatioMode`







.. method:: PySide.QtCore.QSizeF.setHeight(h)


    :param h: :class:`PySide.QtCore.qreal`




    Sets the height to the given ``height`` .

    .. seealso::  :meth:`PySide.QtCore.QSizeF.height`  :meth:`PySide.QtCore.QSizeF.rheight`  :meth:`PySide.QtCore.QSizeF.setWidth` 


.. method:: PySide.QtCore.QSizeF.setWidth(w)


    :param w: :class:`PySide.QtCore.qreal`




    Sets the width to the given ``width`` .

    .. seealso::  :meth:`PySide.QtCore.QSizeF.width`  :meth:`PySide.QtCore.QSizeF.rwidth`  :meth:`PySide.QtCore.QSizeF.setHeight` 


.. method:: PySide.QtCore.QSizeF.toSize()


    :rtype: :class:`PySide.QtCore.QSize`




    Returns an integer based copy of this size.

    Note that the coordinates in the returned size will be rounded to the nearest integer.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.QSizeF` 


.. method:: PySide.QtCore.QSizeF.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QSizeF.transpose()






    Swaps the width and height values.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.setWidth`  :meth:`PySide.QtCore.QSizeF.setHeight` 


.. method:: PySide.QtCore.QSizeF.width()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the width.

    .. seealso::  :meth:`PySide.QtCore.QSizeF.height`  :meth:`PySide.QtCore.QSizeF.setWidth` 



