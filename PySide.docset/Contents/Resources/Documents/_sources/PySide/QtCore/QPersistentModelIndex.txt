.. module:: PySide.QtCore
.. _QPersistentModelIndex:

QPersistentModelIndex
*********************

.. inheritance-diagram:: QPersistentModelIndex
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtCore.QPersistentModelIndex.__eq__>` (other)
*    def :meth:`__eq__<PySide.QtCore.QPersistentModelIndex.__eq__>` (other)
*    def :meth:`__lt__<PySide.QtCore.QPersistentModelIndex.__lt__>` (other)
*    def :meth:`__ne__<PySide.QtCore.QPersistentModelIndex.__ne__>` (other)
*    def :meth:`__ne__<PySide.QtCore.QPersistentModelIndex.__ne__>` (other)
*    def :meth:`child<PySide.QtCore.QPersistentModelIndex.child>` (row, column)
*    def :meth:`column<PySide.QtCore.QPersistentModelIndex.column>` ()
*    def :meth:`data<PySide.QtCore.QPersistentModelIndex.data>` ([role=Qt.DisplayRole])
*    def :meth:`flags<PySide.QtCore.QPersistentModelIndex.flags>` ()
*    def :meth:`internalId<PySide.QtCore.QPersistentModelIndex.internalId>` ()
*    def :meth:`internalPointer<PySide.QtCore.QPersistentModelIndex.internalPointer>` ()
*    def :meth:`isValid<PySide.QtCore.QPersistentModelIndex.isValid>` ()
*    def :meth:`model<PySide.QtCore.QPersistentModelIndex.model>` ()
*    def :meth:`parent<PySide.QtCore.QPersistentModelIndex.parent>` ()
*    def :meth:`row<PySide.QtCore.QPersistentModelIndex.row>` ()
*    def :meth:`sibling<PySide.QtCore.QPersistentModelIndex.sibling>` (row, column)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QPersistentModelIndex` class is used to locate data in a data model.

    A :class:`PySide.QtCore.QPersistentModelIndex` is a model index that can be stored by an application, and later used to access information in a model. Unlike the :class:`PySide.QtCore.QModelIndex` class, it is safe to store a :class:`PySide.QtCore.QPersistentModelIndex` since the model will ensure that references to items will continue to be valid as long as they can be accessed by the model.

    It is good practice to check that persistent model indexes are valid before using them.

    .. seealso::  :ref:`Model/View Programming<model-view-programming.html>`  :class:`PySide.QtCore.QModelIndex`  :class:`PySide.QtCore.QAbstractItemModel` 

.. class:: QPersistentModelIndex()
           QPersistentModelIndex(index)
           QPersistentModelIndex(other)

    :param other: :class:`PySide.QtCore.QPersistentModelIndex`
    :param index: :class:`PySide.QtCore.QModelIndex`


    Creates a new :class:`PySide.QtCore.QPersistentModelIndex` that is a copy of the model ``index`` .


    Creates a new :class:`PySide.QtCore.QPersistentModelIndex` that is a copy of the ``other`` persistent model index.


.. method:: PySide.QtCore.QPersistentModelIndex.child(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the child of the model index that is stored in the given ``row`` and ``column`` .

    .. seealso::  :meth:`PySide.QtCore.QPersistentModelIndex.parent`  :meth:`PySide.QtCore.QPersistentModelIndex.sibling` 


.. method:: PySide.QtCore.QPersistentModelIndex.column()


    :rtype: :class:`PySide.QtCore.int`




    Returns the column this persistent model index refers to.



.. method:: PySide.QtCore.QPersistentModelIndex.data([role=Qt.DisplayRole])


    :param role: :class:`PySide.QtCore.int`
    :rtype: object




    Returns the data for the given ``role`` for the item referred to by the index.

    .. seealso::  :attr:`Qt.ItemDataRole`  :meth:`QAbstractItemModel.setData()<PySide.QtCore.QAbstractItemModel.setData>` 


.. method:: PySide.QtCore.QPersistentModelIndex.flags()


    :rtype: :class:`PySide.QtCore.Qt.ItemFlags`




    Returns the flags for the item referred to by the index.



.. method:: PySide.QtCore.QPersistentModelIndex.internalId()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns a ``qint64`` used by the model to associate the index with the internal data structure.



.. method:: PySide.QtCore.QPersistentModelIndex.internalPointer()


    :rtype: :class:`void`




    Returns a ``void``\ ``*`` pointer used by the model to associate the index with the internal data structure.



.. method:: PySide.QtCore.QPersistentModelIndex.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this persistent model index is valid; otherwise returns false.

    A valid index belongs to a model, and has non-negative row and column numbers.

    .. seealso::  :meth:`PySide.QtCore.QPersistentModelIndex.model`  :meth:`PySide.QtCore.QPersistentModelIndex.row`  :meth:`PySide.QtCore.QPersistentModelIndex.column` 


.. method:: PySide.QtCore.QPersistentModelIndex.model()


    :rtype: :class:`PySide.QtCore.QAbstractItemModel`




    Returns the model that the index belongs to.



.. method:: PySide.QtCore.QPersistentModelIndex.__ne__(other)


    :param other: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this persistent model index does not refer to the same location as the ``other`` model index; otherwise returns false.



.. method:: PySide.QtCore.QPersistentModelIndex.__ne__(other)


    :param other: :class:`PySide.QtCore.QPersistentModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this persistent model index is not equal to the ``other`` persistent model index; otherwise returns false.



.. method:: PySide.QtCore.QPersistentModelIndex.__lt__(other)


    :param other: :class:`PySide.QtCore.QPersistentModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this persistent model index is smaller than the ``other`` persistent model index; otherwise returns false.

    All values in the persistent model index are used when comparing with another persistent model index.



.. method:: PySide.QtCore.QPersistentModelIndex.__eq__(other)


    :param other: :class:`PySide.QtCore.QPersistentModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this persistent model index is equal to the ``other`` persistent model index; otherwise returns false.

    All values in the persistent model index are used when comparing with another persistent model index.



.. method:: PySide.QtCore.QPersistentModelIndex.__eq__(other)


    :param other: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this persistent model index refers to the same location as the ``other`` model index; otherwise returns false.

    All values in the persistent model index are used when comparing with another model index.



.. method:: PySide.QtCore.QPersistentModelIndex.parent()


    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the parent :class:`PySide.QtCore.QModelIndex` for this persistent index, or an invalid :class:`PySide.QtCore.QModelIndex` if it has no parent.

    .. seealso::  :meth:`PySide.QtCore.QPersistentModelIndex.child`  :meth:`PySide.QtCore.QPersistentModelIndex.sibling`  :meth:`PySide.QtCore.QPersistentModelIndex.model` 


.. method:: PySide.QtCore.QPersistentModelIndex.row()


    :rtype: :class:`PySide.QtCore.int`




    Returns the row this persistent model index refers to.



.. method:: PySide.QtCore.QPersistentModelIndex.sibling(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the sibling at ``row`` and ``column`` or an invalid :class:`PySide.QtCore.QModelIndex` if there is no sibling at this position.

    .. seealso::  :meth:`PySide.QtCore.QPersistentModelIndex.parent`  :meth:`PySide.QtCore.QPersistentModelIndex.child` 



