.. module:: PySide.QtGui
.. _QPainter:

QPainter
********

.. inheritance-diagram:: QPainter
    :parts: 2

**Inherited by:** :ref:`QStylePainter`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`background<PySide.QtGui.QPainter.background>` ()
*    def :meth:`backgroundMode<PySide.QtGui.QPainter.backgroundMode>` ()
*    def :meth:`begin<PySide.QtGui.QPainter.begin>` (arg__1)
*    def :meth:`beginNativePainting<PySide.QtGui.QPainter.beginNativePainting>` ()
*    def :meth:`boundingRect<PySide.QtGui.QPainter.boundingRect>` (rect, flags, text)
*    def :meth:`boundingRect<PySide.QtGui.QPainter.boundingRect>` (rect, flags, text)
*    def :meth:`boundingRect<PySide.QtGui.QPainter.boundingRect>` (rect, text[, o=QTextOption()])
*    def :meth:`boundingRect<PySide.QtGui.QPainter.boundingRect>` (x, y, w, h, flags, text)
*    def :meth:`brush<PySide.QtGui.QPainter.brush>` ()
*    def :meth:`brushOrigin<PySide.QtGui.QPainter.brushOrigin>` ()
*    def :meth:`clipPath<PySide.QtGui.QPainter.clipPath>` ()
*    def :meth:`clipRegion<PySide.QtGui.QPainter.clipRegion>` ()
*    def :meth:`combinedMatrix<PySide.QtGui.QPainter.combinedMatrix>` ()
*    def :meth:`combinedTransform<PySide.QtGui.QPainter.combinedTransform>` ()
*    def :meth:`compositionMode<PySide.QtGui.QPainter.compositionMode>` ()
*    def :meth:`device<PySide.QtGui.QPainter.device>` ()
*    def :meth:`deviceMatrix<PySide.QtGui.QPainter.deviceMatrix>` ()
*    def :meth:`deviceTransform<PySide.QtGui.QPainter.deviceTransform>` ()
*    def :meth:`drawArc<PySide.QtGui.QPainter.drawArc>` (arg__1, a, alen)
*    def :meth:`drawArc<PySide.QtGui.QPainter.drawArc>` (rect, a, alen)
*    def :meth:`drawArc<PySide.QtGui.QPainter.drawArc>` (x, y, w, h, a, alen)
*    def :meth:`drawChord<PySide.QtGui.QPainter.drawChord>` (arg__1, a, alen)
*    def :meth:`drawChord<PySide.QtGui.QPainter.drawChord>` (rect, a, alen)
*    def :meth:`drawChord<PySide.QtGui.QPainter.drawChord>` (x, y, w, h, a, alen)
*    def :meth:`drawConvexPolygon<PySide.QtGui.QPainter.drawConvexPolygon>` (arg__1)
*    def :meth:`drawConvexPolygon<PySide.QtGui.QPainter.drawConvexPolygon>` (arg__1)
*    def :meth:`drawConvexPolygon<PySide.QtGui.QPainter.drawConvexPolygon>` (polygon)
*    def :meth:`drawConvexPolygon<PySide.QtGui.QPainter.drawConvexPolygon>` (polygon)
*    def :meth:`drawEllipse<PySide.QtGui.QPainter.drawEllipse>` (center, rx, ry)
*    def :meth:`drawEllipse<PySide.QtGui.QPainter.drawEllipse>` (center, rx, ry)
*    def :meth:`drawEllipse<PySide.QtGui.QPainter.drawEllipse>` (r)
*    def :meth:`drawEllipse<PySide.QtGui.QPainter.drawEllipse>` (r)
*    def :meth:`drawEllipse<PySide.QtGui.QPainter.drawEllipse>` (x, y, w, h)
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (p, image)
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (p, image)
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (p, image, sr[, flags=Qt.AutoColor])
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (p, image, sr[, flags=Qt.AutoColor])
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (r, image)
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (r, image)
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (targetRect, image, sourceRect[, flags=Qt.AutoColor])
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (targetRect, image, sourceRect[, flags=Qt.AutoColor])
*    def :meth:`drawImage<PySide.QtGui.QPainter.drawImage>` (x, y, image[, sx=0[, sy=0[, sw=-1[, sh=-1[, flags=Qt.AutoColor]]]]])
*    def :meth:`drawLine<PySide.QtGui.QPainter.drawLine>` (line)
*    def :meth:`drawLine<PySide.QtGui.QPainter.drawLine>` (line)
*    def :meth:`drawLine<PySide.QtGui.QPainter.drawLine>` (p1, p2)
*    def :meth:`drawLine<PySide.QtGui.QPainter.drawLine>` (p1, p2)
*    def :meth:`drawLine<PySide.QtGui.QPainter.drawLine>` (x1, y1, x2, y2)
*    def :meth:`drawLines<PySide.QtGui.QPainter.drawLines>` (lines)
*    def :meth:`drawLines<PySide.QtGui.QPainter.drawLines>` (lines)
*    def :meth:`drawLines<PySide.QtGui.QPainter.drawLines>` (pointPairs)
*    def :meth:`drawLines<PySide.QtGui.QPainter.drawLines>` (pointPairs)
*    def :meth:`drawPath<PySide.QtGui.QPainter.drawPath>` (path)
*    def :meth:`drawPicture<PySide.QtGui.QPainter.drawPicture>` (p, picture)
*    def :meth:`drawPicture<PySide.QtGui.QPainter.drawPicture>` (p, picture)
*    def :meth:`drawPicture<PySide.QtGui.QPainter.drawPicture>` (x, y, picture)
*    def :meth:`drawPie<PySide.QtGui.QPainter.drawPie>` (arg__1, a, alen)
*    def :meth:`drawPie<PySide.QtGui.QPainter.drawPie>` (rect, a, alen)
*    def :meth:`drawPie<PySide.QtGui.QPainter.drawPie>` (x, y, w, h, a, alen)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (p, pm)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (p, pm)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (p, pm, sr)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (p, pm, sr)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (r, pm)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (targetRect, pixmap, sourceRect)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (targetRect, pixmap, sourceRect)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (x, y, pm)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (x, y, pm, sx, sy, sw, sh)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (x, y, w, h, pm)
*    def :meth:`drawPixmap<PySide.QtGui.QPainter.drawPixmap>` (x, y, w, h, pm, sx, sy, sw, sh)
*    def :meth:`drawPixmapFragments<PySide.QtGui.QPainter.drawPixmapFragments>` (fragments, fragmentCount, pixmap[, hints=0])
*    def :meth:`drawPoint<PySide.QtGui.QPainter.drawPoint>` (p)
*    def :meth:`drawPoint<PySide.QtGui.QPainter.drawPoint>` (pt)
*    def :meth:`drawPoint<PySide.QtGui.QPainter.drawPoint>` (x, y)
*    def :meth:`drawPoints<PySide.QtGui.QPainter.drawPoints>` (arg__1)
*    def :meth:`drawPoints<PySide.QtGui.QPainter.drawPoints>` (arg__1)
*    def :meth:`drawPoints<PySide.QtGui.QPainter.drawPoints>` (points)
*    def :meth:`drawPoints<PySide.QtGui.QPainter.drawPoints>` (points)
*    def :meth:`drawPolygon<PySide.QtGui.QPainter.drawPolygon>` (arg__1, arg__2)
*    def :meth:`drawPolygon<PySide.QtGui.QPainter.drawPolygon>` (arg__1, arg__2)
*    def :meth:`drawPolygon<PySide.QtGui.QPainter.drawPolygon>` (polygon[, fillRule=Qt.OddEvenFill])
*    def :meth:`drawPolygon<PySide.QtGui.QPainter.drawPolygon>` (polygon[, fillRule=Qt.OddEvenFill])
*    def :meth:`drawPolyline<PySide.QtGui.QPainter.drawPolyline>` (arg__1)
*    def :meth:`drawPolyline<PySide.QtGui.QPainter.drawPolyline>` (arg__1)
*    def :meth:`drawPolyline<PySide.QtGui.QPainter.drawPolyline>` (polygon)
*    def :meth:`drawPolyline<PySide.QtGui.QPainter.drawPolyline>` (polyline)
*    def :meth:`drawRect<PySide.QtGui.QPainter.drawRect>` (rect)
*    def :meth:`drawRect<PySide.QtGui.QPainter.drawRect>` (rect)
*    def :meth:`drawRect<PySide.QtGui.QPainter.drawRect>` (x1, y1, w, h)
*    def :meth:`drawRects<PySide.QtGui.QPainter.drawRects>` (rectangles)
*    def :meth:`drawRects<PySide.QtGui.QPainter.drawRects>` (rectangles)
*    def :meth:`drawRoundRect<PySide.QtGui.QPainter.drawRoundRect>` (r[, xround=25[, yround=25]])
*    def :meth:`drawRoundRect<PySide.QtGui.QPainter.drawRoundRect>` (r[, xround=25[, yround=25]])
*    def :meth:`drawRoundRect<PySide.QtGui.QPainter.drawRoundRect>` (x, y, w, h[, xRound=25[, yRound=25]])
*    def :meth:`drawRoundedRect<PySide.QtGui.QPainter.drawRoundedRect>` (rect, xRadius, yRadius[, mode=Qt.AbsoluteSize])
*    def :meth:`drawRoundedRect<PySide.QtGui.QPainter.drawRoundedRect>` (rect, xRadius, yRadius[, mode=Qt.AbsoluteSize])
*    def :meth:`drawRoundedRect<PySide.QtGui.QPainter.drawRoundedRect>` (x, y, w, h, xRadius, yRadius[, mode=Qt.AbsoluteSize])
*    def :meth:`drawText<PySide.QtGui.QPainter.drawText>` (p, s)
*    def :meth:`drawText<PySide.QtGui.QPainter.drawText>` (p, s)
*    def :meth:`drawText<PySide.QtGui.QPainter.drawText>` (r, flags, text)
*    def :meth:`drawText<PySide.QtGui.QPainter.drawText>` (r, flags, text)
*    def :meth:`drawText<PySide.QtGui.QPainter.drawText>` (r, text[, o=QTextOption()])
*    def :meth:`drawText<PySide.QtGui.QPainter.drawText>` (x, y, s)
*    def :meth:`drawText<PySide.QtGui.QPainter.drawText>` (x, y, w, h, flags, text)
*    def :meth:`drawTextItem<PySide.QtGui.QPainter.drawTextItem>` (p, ti)
*    def :meth:`drawTextItem<PySide.QtGui.QPainter.drawTextItem>` (p, ti)
*    def :meth:`drawTextItem<PySide.QtGui.QPainter.drawTextItem>` (x, y, ti)
*    def :meth:`drawTiledPixmap<PySide.QtGui.QPainter.drawTiledPixmap>` (arg__1, arg__2[, pos=QPoint()])
*    def :meth:`drawTiledPixmap<PySide.QtGui.QPainter.drawTiledPixmap>` (rect, pm[, offset=QPointF()])
*    def :meth:`drawTiledPixmap<PySide.QtGui.QPainter.drawTiledPixmap>` (x, y, w, h, arg__5[, sx=0[, sy=0]])
*    def :meth:`end<PySide.QtGui.QPainter.end>` ()
*    def :meth:`endNativePainting<PySide.QtGui.QPainter.endNativePainting>` ()
*    def :meth:`eraseRect<PySide.QtGui.QPainter.eraseRect>` (arg__1)
*    def :meth:`eraseRect<PySide.QtGui.QPainter.eraseRect>` (arg__1)
*    def :meth:`eraseRect<PySide.QtGui.QPainter.eraseRect>` (x, y, w, h)
*    def :meth:`fillPath<PySide.QtGui.QPainter.fillPath>` (path, brush)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (arg__1, arg__2)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (arg__1, arg__2)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (arg__1, color)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (arg__1, color)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (r, c)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (r, c)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (r, style)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (r, style)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (x, y, w, h, arg__5)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (x, y, w, h, c)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (x, y, w, h, color)
*    def :meth:`fillRect<PySide.QtGui.QPainter.fillRect>` (x, y, w, h, style)
*    def :meth:`font<PySide.QtGui.QPainter.font>` ()
*    def :meth:`fontInfo<PySide.QtGui.QPainter.fontInfo>` ()
*    def :meth:`fontMetrics<PySide.QtGui.QPainter.fontMetrics>` ()
*    def :meth:`hasClipping<PySide.QtGui.QPainter.hasClipping>` ()
*    def :meth:`initFrom<PySide.QtGui.QPainter.initFrom>` (widget)
*    def :meth:`isActive<PySide.QtGui.QPainter.isActive>` ()
*    def :meth:`layoutDirection<PySide.QtGui.QPainter.layoutDirection>` ()
*    def :meth:`opacity<PySide.QtGui.QPainter.opacity>` ()
*    def :meth:`paintEngine<PySide.QtGui.QPainter.paintEngine>` ()
*    def :meth:`pen<PySide.QtGui.QPainter.pen>` ()
*    def :meth:`renderHints<PySide.QtGui.QPainter.renderHints>` ()
*    def :meth:`resetMatrix<PySide.QtGui.QPainter.resetMatrix>` ()
*    def :meth:`resetTransform<PySide.QtGui.QPainter.resetTransform>` ()
*    def :meth:`restore<PySide.QtGui.QPainter.restore>` ()
*    def :meth:`rotate<PySide.QtGui.QPainter.rotate>` (a)
*    def :meth:`save<PySide.QtGui.QPainter.save>` ()
*    def :meth:`scale<PySide.QtGui.QPainter.scale>` (sx, sy)
*    def :meth:`setBackground<PySide.QtGui.QPainter.setBackground>` (bg)
*    def :meth:`setBackgroundMode<PySide.QtGui.QPainter.setBackgroundMode>` (mode)
*    def :meth:`setBrush<PySide.QtGui.QPainter.setBrush>` (brush)
*    def :meth:`setBrush<PySide.QtGui.QPainter.setBrush>` (style)
*    def :meth:`setBrushOrigin<PySide.QtGui.QPainter.setBrushOrigin>` (arg__1)
*    def :meth:`setBrushOrigin<PySide.QtGui.QPainter.setBrushOrigin>` (arg__1)
*    def :meth:`setBrushOrigin<PySide.QtGui.QPainter.setBrushOrigin>` (x, y)
*    def :meth:`setClipPath<PySide.QtGui.QPainter.setClipPath>` (path[, op=Qt.ReplaceClip])
*    def :meth:`setClipRect<PySide.QtGui.QPainter.setClipRect>` (arg__1[, op=Qt.ReplaceClip])
*    def :meth:`setClipRect<PySide.QtGui.QPainter.setClipRect>` (arg__1[, op=Qt.ReplaceClip])
*    def :meth:`setClipRect<PySide.QtGui.QPainter.setClipRect>` (x, y, w, h[, op=Qt.ReplaceClip])
*    def :meth:`setClipRegion<PySide.QtGui.QPainter.setClipRegion>` (arg__1[, op=Qt.ReplaceClip])
*    def :meth:`setClipping<PySide.QtGui.QPainter.setClipping>` (enable)
*    def :meth:`setCompositionMode<PySide.QtGui.QPainter.setCompositionMode>` (mode)
*    def :meth:`setFont<PySide.QtGui.QPainter.setFont>` (f)
*    def :meth:`setLayoutDirection<PySide.QtGui.QPainter.setLayoutDirection>` (direction)
*    def :meth:`setOpacity<PySide.QtGui.QPainter.setOpacity>` (opacity)
*    def :meth:`setPen<PySide.QtGui.QPainter.setPen>` (color)
*    def :meth:`setPen<PySide.QtGui.QPainter.setPen>` (pen)
*    def :meth:`setPen<PySide.QtGui.QPainter.setPen>` (style)
*    def :meth:`setRenderHint<PySide.QtGui.QPainter.setRenderHint>` (hint[, on=true])
*    def :meth:`setRenderHints<PySide.QtGui.QPainter.setRenderHints>` (hints[, on=true])
*    def :meth:`setTransform<PySide.QtGui.QPainter.setTransform>` (transform[, combine=false])
*    def :meth:`setViewTransformEnabled<PySide.QtGui.QPainter.setViewTransformEnabled>` (enable)
*    def :meth:`setViewport<PySide.QtGui.QPainter.setViewport>` (viewport)
*    def :meth:`setViewport<PySide.QtGui.QPainter.setViewport>` (x, y, w, h)
*    def :meth:`setWindow<PySide.QtGui.QPainter.setWindow>` (window)
*    def :meth:`setWindow<PySide.QtGui.QPainter.setWindow>` (x, y, w, h)
*    def :meth:`setWorldMatrix<PySide.QtGui.QPainter.setWorldMatrix>` (matrix[, combine=false])
*    def :meth:`setWorldMatrixEnabled<PySide.QtGui.QPainter.setWorldMatrixEnabled>` (enabled)
*    def :meth:`setWorldTransform<PySide.QtGui.QPainter.setWorldTransform>` (matrix[, combine=false])
*    def :meth:`shear<PySide.QtGui.QPainter.shear>` (sh, sv)
*    def :meth:`strokePath<PySide.QtGui.QPainter.strokePath>` (path, pen)
*    def :meth:`testRenderHint<PySide.QtGui.QPainter.testRenderHint>` (hint)
*    def :meth:`transform<PySide.QtGui.QPainter.transform>` ()
*    def :meth:`translate<PySide.QtGui.QPainter.translate>` (dx, dy)
*    def :meth:`translate<PySide.QtGui.QPainter.translate>` (offset)
*    def :meth:`translate<PySide.QtGui.QPainter.translate>` (offset)
*    def :meth:`viewTransformEnabled<PySide.QtGui.QPainter.viewTransformEnabled>` ()
*    def :meth:`viewport<PySide.QtGui.QPainter.viewport>` ()
*    def :meth:`window<PySide.QtGui.QPainter.window>` ()
*    def :meth:`worldMatrix<PySide.QtGui.QPainter.worldMatrix>` ()
*    def :meth:`worldMatrixEnabled<PySide.QtGui.QPainter.worldMatrixEnabled>` ()
*    def :meth:`worldTransform<PySide.QtGui.QPainter.worldTransform>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`restoreRedirected<PySide.QtGui.QPainter.restoreRedirected>` (device)
*    def :meth:`setRedirected<PySide.QtGui.QPainter.setRedirected>` (device, replacement[, offset=QPoint()])


Detailed Description
--------------------



    The :class:`PySide.QtGui.QPainter` class performs low-level painting on widgets and other paint devices.

    :class:`PySide.QtGui.QPainter` provides highly optimized functions to do most of the drawing GUI programs require. It can draw everything from simple lines to complex shapes like pies and chords. It can also draw aligned text and pixmaps. Normally, it draws in a "natural" coordinate system, but it can also do view and world transformation. :class:`PySide.QtGui.QPainter` can operate on any object that inherits the :class:`PySide.QtGui.QPaintDevice` class.

    The common use of :class:`PySide.QtGui.QPainter` is inside a widget's paint event: Construct and customize (e.g. set the pen or the brush) the painter. Then draw. Remember to destroy the :class:`PySide.QtGui.QPainter` object after drawing. For example:

    ::

        def paintEvent(self, paintEvent):
            painter = QPainter(self)
            painter.setPen(Qt.blue)
            painter.setFont(QFont("Arial", 30))
            painter.drawText(rect(), Qt.AlignCenter, "Qt")


    The core functionality of :class:`PySide.QtGui.QPainter` is drawing, but the class also provide several functions that allows you to customize :class:`PySide.QtGui.QPainter` 's settings and its rendering quality, and others that enable clipping. In addition you can control how different shapes are merged together by specifying the painter's composition mode.

    The :meth:`PySide.QtGui.QPainter.isActive` function indicates whether the painter is active. A painter is activated by the :meth:`PySide.QtGui.QPainter.begin` function and the constructor that takes a :class:`PySide.QtGui.QPaintDevice` argument. The :meth:`PySide.QtGui.QPainter.end` function, and the destructor, deactivates it.

    Together with the :class:`PySide.QtGui.QPaintDevice` and :class:`PySide.QtGui.QPaintEngine` classes, :class:`PySide.QtGui.QPainter` form the basis for Qt's paint system. :class:`PySide.QtGui.QPainter` is the class used to perform drawing operations. :class:`PySide.QtGui.QPaintDevice` represents a device that can be painted on using a :class:`PySide.QtGui.QPainter` . :class:`PySide.QtGui.QPaintEngine` provides the interface that the painter uses to draw onto different types of devices. If the painter is active, :meth:`PySide.QtGui.QPainter.device` returns the paint device on which the painter paints, and :meth:`PySide.QtGui.QPainter.paintEngine` returns the paint engine that the painter is currently operating on. For more information, see the :ref:`Paint System<paintsystem.html>` .

    Sometimes it is desirable to make someone else paint on an unusual :class:`PySide.QtGui.QPaintDevice` . :class:`PySide.QtGui.QPainter` supports a static function to do this, :meth:`PySide.QtGui.QPainter.setRedirected` .

    .. warning::  When the paintdevice is a widget, :class:`PySide.QtGui.QPainter` can only be used inside a paintEvent() function or in a function called by paintEvent(); that is unless the :attr:`Qt.WA_PaintOutsidePaintEvent<Qt.WidgetAttribute>` widget attribute is set. On Mac OS X and Windows, you can only paint in a paintEvent() function regardless of this attribute's setting.

    .. _PySide.QtGui.QPainter_settings:



Settings
^^^^^^^^

    There are several settings that you can customize to make :class:`PySide.QtGui.QPainter` draw according to your preferences:


    * :meth:`PySide.QtGui.QPainter.font` is the font used for drawing text. If the painter :meth:`PySide.QtGui.QPainter.isActive` , you can retrieve information about the currently set font, and its metrics, using the :meth:`PySide.QtGui.QPainter.fontInfo` and :meth:`PySide.QtGui.QPainter.fontMetrics` functions respectively.
    * :meth:`PySide.QtGui.QPainter.brush` defines the color or pattern that is used for filling shapes.
    * :meth:`PySide.QtGui.QPainter.pen` defines the color or stipple that is used for drawing lines or boundaries.
    * :meth:`PySide.QtGui.QPainter.backgroundMode` defines whether there is a :meth:`PySide.QtGui.QPainter.background` or not, i.e it is either :attr:`Qt.OpaqueMode<Qt.BGMode>` or :attr:`Qt.TransparentMode<Qt.BGMode>` .
    * :meth:`PySide.QtGui.QPainter.background` only applies when :meth:`PySide.QtGui.QPainter.backgroundMode` is :attr:`Qt.OpaqueMode<Qt.BGMode>` and :meth:`PySide.QtGui.QPainter.pen` is a stipple. In that case, it describes the color of the background pixels in the stipple.
    * :meth:`PySide.QtGui.QPainter.brushOrigin` defines the origin of the tiled brushes, normally the origin of widget's background.
    * :meth:`PySide.QtGui.QPainter.viewport` , :meth:`PySide.QtGui.QPainter.window` , :meth:`PySide.QtGui.QPainter.worldTransform` make up the painter's coordinate transformation system. For more information, see the :class:`~PySide.QtGui.Coordinate Transformations` section and the :ref:`Coordinate System<coordsys.html>` documentation.
    * :meth:`PySide.QtGui.QPainter.hasClipping` tells whether the painter clips at all. (The paint device clips, too.) If the painter clips, it clips to :meth:`PySide.QtGui.QPainter.clipRegion` .
    * :meth:`PySide.QtGui.QPainter.layoutDirection` defines the layout direction used by the painter when drawing text.
    * :meth:`PySide.QtGui.QPainter.worldMatrixEnabled` tells whether world transformation is enabled.
    * :meth:`PySide.QtGui.QPainter.viewTransformEnabled` tells whether view transformation is enabled.

    Note that some of these settings mirror settings in some paint devices, e.g. :meth:`QWidget.font()<PySide.QtGui.QWidget.font>` . The :meth:`QPainter.begin()<PySide.QtGui.QPainter.begin>` function (or equivalently the :class:`PySide.QtGui.QPainter` constructor) copies these attributes from the paint device.

    You can at any time save the :class:`PySide.QtGui.QPainter` 's state by calling the :meth:`PySide.QtGui.QPainter.save` function which saves all the available settings on an internal stack. The :meth:`PySide.QtGui.QPainter.restore` function pops them back.

    .. _PySide.QtGui.QPainter_drawing:



Drawing
^^^^^^^

    :class:`PySide.QtGui.QPainter` provides functions to draw most primitives: :meth:`PySide.QtGui.QPainter.drawPoint` , :meth:`PySide.QtGui.QPainter.drawPoints` , :meth:`PySide.QtGui.QPainter.drawLine` , :meth:`PySide.QtGui.QPainter.drawRect` , :meth:`PySide.QtGui.QPainter.drawRoundedRect` , :meth:`PySide.QtGui.QPainter.drawEllipse` , :meth:`PySide.QtGui.QPainter.drawArc` , :meth:`PySide.QtGui.QPainter.drawPie` , :meth:`PySide.QtGui.QPainter.drawChord` , :meth:`PySide.QtGui.QPainter.drawPolyline` , :meth:`PySide.QtGui.QPainter.drawPolygon` , :meth:`PySide.QtGui.QPainter.drawConvexPolygon` and :meth:`~PySide.QtGui.QPainter.drawCubicBezier` . The two convenience functions, :meth:`PySide.QtGui.QPainter.drawRects` and :meth:`PySide.QtGui.QPainter.drawLines` , draw the given number of rectangles or lines in the given array of :class:`QRects<PySide.QtCore.QRect>` or :class:`QLines<PySide.QtCore.QLine>` using the current pen and brush.

    The :class:`PySide.QtGui.QPainter` class also provides the :meth:`PySide.QtGui.QPainter.fillRect` function which fills the given :class:`PySide.QtCore.QRect` , with the given :class:`PySide.QtGui.QBrush` , and the :meth:`PySide.QtGui.QPainter.eraseRect` function that erases the area inside the given rectangle.

    All of these functions have both integer and floating point versions.

    +---------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-basicdrawing.png|**Basic Drawing Example**\                                                                                                                                                       |
    |                                                                                                               |                                                                                                                                                                                 |
    |                                                                                                               |    The :ref:`Basic Drawing<painting/basicdrawing>` example shows how to display basic graphics primitives in a variety of styles using the :class:`PySide.QtGui.QPainter` class.|
    +---------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    If you need to draw a complex shape, especially if you need to do so repeatedly, consider creating a :class:`PySide.QtGui.QPainterPath` and drawing it using :meth:`PySide.QtGui.QPainter.drawPath` .

    +------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+
    |**Painter Paths example**\                                                                                                                            |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-painterpaths.png|
    |                                                                                                                                                      |                                                                                                               |
    |    The :class:`PySide.QtGui.QPainterPath` class provides a container for painting operations, enabling graphical shapes to be constructed and reused.|                                                                                                               |
    |                                                                                                                                                      |                                                                                                               |
    |    The :ref:`Painter Paths<painting/painterpaths>` example shows how painter paths can be used to build complex shapes for rendering.                |                                                                                                               |
    +------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+

    :class:`PySide.QtGui.QPainter` also provides the :meth:`PySide.QtGui.QPainter.fillPath` function which fills the given :class:`PySide.QtGui.QPainterPath` with the given :class:`PySide.QtGui.QBrush` , and the :meth:`PySide.QtGui.QPainter.strokePath` function that draws the outline of the given path (i.e. strokes the path).

    See also the :ref:`Vector Deformation<demos/deform>` demo which shows how to use advanced vector techniques to draw text using a :class:`PySide.QtGui.QPainterPath` , the :ref:`Gradients<demos/gradients>` demo which shows the different types of gradients that are available in Qt, and the :ref:`Path Stroking<demos/pathstroke>` demo which shows Qt's built-in dash patterns and shows how custom patterns can be used to extend the range of available patterns.

    +--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-vectordeformation.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-gradients.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-pathstroking.png|
    +====================================================================================================================+============================================================================================================+===============================================================================================================+
    |:ref:`Vector Deformation<demos/deform>`                                                                             |:ref:`Gradients<demos/gradients>`                                                                           |:ref:`Path Stroking<demos/pathstroke>`                                                                         |
    +--------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+

    There are functions to draw pixmaps/images, namely :meth:`PySide.QtGui.QPainter.drawPixmap` , :meth:`PySide.QtGui.QPainter.drawImage` and :meth:`PySide.QtGui.QPainter.drawTiledPixmap` . Both :meth:`PySide.QtGui.QPainter.drawPixmap` and :meth:`PySide.QtGui.QPainter.drawImage` produce the same result, except that :meth:`PySide.QtGui.QPainter.drawPixmap` is faster on-screen while :meth:`PySide.QtGui.QPainter.drawImage` may be faster on a :class:`PySide.QtGui.QPrinter` or other devices.

    Text drawing is done using :meth:`PySide.QtGui.QPainter.drawText` . When you need fine-grained positioning, :meth:`PySide.QtGui.QPainter.boundingRect` tells you where a given :meth:`PySide.QtGui.QPainter.drawText` command will draw.

    There is a :meth:`PySide.QtGui.QPainter.drawPicture` function that draws the contents of an entire :class:`PySide.QtGui.QPicture` . The :meth:`PySide.QtGui.QPainter.drawPicture` function is the only function that disregards all the painter's settings as :class:`PySide.QtGui.QPicture` has its own settings.

    .. _PySide.QtGui.QPainter_rendering-quality:



Rendering Quality
^^^^^^^^^^^^^^^^^

    To get the optimal rendering result using :class:`PySide.QtGui.QPainter` , you should use the platform independent :class:`PySide.QtGui.QImage` as paint device; i.e. using :class:`PySide.QtGui.QImage` will ensure that the result has an identical pixel representation on any platform.

    The :class:`PySide.QtGui.QPainter` class also provides a means of controlling the rendering quality through its :attr:`QPainter.RenderHint` enum and the support for floating point precision: All the functions for drawing primitives has a floating point version. These are often used in combination with the :attr:`QPainter.Antialiasing<QPainter.RenderHint>` render hint.

    +--------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-concentriccircles.png|**Concentric Circles Example**\                                                                                                                                                                              |
    |                                                                                                                    |                                                                                                                                                                                                             |
    |                                                                                                                    |    The :ref:`Concentric Circles<painting/concentriccircles>` example shows the improved rendering quality that can be obtained using floating point precision and anti-aliasing when drawing custom widgets.|
    |                                                                                                                    |                                                                                                                                                                                                             |
    |                                                                                                                    |    The application's main window displays several widgets which are drawn using the various combinations of precision and anti-aliasing.                                                                    |
    +--------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    The :attr:`QPainter.RenderHint` enum specifies flags to :class:`PySide.QtGui.QPainter` that may or may not be respected by any given engine. :attr:`QPainter.Antialiasing<QPainter.RenderHint>` indicates that the engine should antialias edges of primitives if possible, :attr:`QPainter.TextAntialiasing<QPainter.RenderHint>` indicates that the engine should antialias text if possible, and the :attr:`QPainter.SmoothPixmapTransform<QPainter.RenderHint>` indicates that the engine should use a smooth pixmap transformation algorithm. :attr:`HighQualityAntialiasing<QPainter.RenderHint>` is an OpenGL-specific rendering hint indicating that the engine should use fragment programs and offscreen rendering for antialiasing.

    The :meth:`PySide.QtGui.QPainter.renderHints` function returns a flag that specifies the rendering hints that are set for this painter. Use the :meth:`PySide.QtGui.QPainter.setRenderHint` function to set or clear the currently set :class:`~PySide.QtGui.RenderHints` .

    .. _PySide.QtGui.QPainter_coordinate-transformations:



Coordinate Transformations
^^^^^^^^^^^^^^^^^^^^^^^^^^

    Normally, the :class:`PySide.QtGui.QPainter` operates on the device's own coordinate system (usually pixels), but :class:`PySide.QtGui.QPainter` has good support for coordinate transformations.

    +--------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-clock.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-rotation.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-scale.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-translation.png|
    +========================================================================================================+===========================================================================================================+========================================================================================================+==============================================================================================================+
    |nop                                                                                                     |:meth:`PySide.QtGui.QPainter.rotate`                                                                       |:meth:`PySide.QtGui.QPainter.scale`                                                                     |:meth:`PySide.QtGui.QPainter.translate`                                                                       |
    +--------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------+

    The most commonly used transformations are scaling, rotation, translation and shearing. Use the :meth:`PySide.QtGui.QPainter.scale` function to scale the coordinate system by a given offset, the :meth:`PySide.QtGui.QPainter.rotate` function to rotate it clockwise and :meth:`PySide.QtGui.QPainter.translate` to translate it (i.e. adding a given offset to the points). You can also twist the coordinate system around the origin using the :meth:`PySide.QtGui.QPainter.shear` function. See the :ref:`Affine Transformations<demos/affine>` demo for a visualization of a sheared coordinate system.

    See also the :ref:`Transformations<painting/transformations>` example which shows how transformations influence the way that :class:`PySide.QtGui.QPainter` renders graphics primitives. In particular it shows how the order of transformations affects the result.

    +----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+
    |**Affine Transformations Demo**\                                                                                                                                                                                                                    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-affinetransformations.png|
    |                                                                                                                                                                                                                                                    |                                                                                                                        |
    |    The :ref:`Affine Transformations<demos/affine>` demo show Qt's ability to perform affine transformations on painting operations. The demo also allows the user to experiment with the transformation operations and see the results immediately.|                                                                                                                        |
    +----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+

    All the tranformation operations operate on the transformation :meth:`PySide.QtGui.QPainter.worldTransform` . A matrix transforms a point in the plane to another point. For more information about the transformation matrix, see the :ref:`Coordinate System<coordsys.html>` and :class:`PySide.QtGui.QTransform` documentation.

    The :meth:`PySide.QtGui.QPainter.setWorldTransform` function can replace or add to the currently set :meth:`PySide.QtGui.QPainter.worldTransform` . The :meth:`PySide.QtGui.QPainter.resetTransform` function resets any transformations that were made using :meth:`PySide.QtGui.QPainter.translate` , :meth:`PySide.QtGui.QPainter.scale` , :meth:`PySide.QtGui.QPainter.shear` , :meth:`PySide.QtGui.QPainter.rotate` , :meth:`PySide.QtGui.QPainter.setWorldTransform` , :meth:`PySide.QtGui.QPainter.setViewport` and :meth:`PySide.QtGui.QPainter.setWindow` functions. The :meth:`PySide.QtGui.QPainter.deviceTransform` returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device. The latter function is only needed when using platform painting commands on the platform dependent handle, and the platform does not do transformations nativly.

    When drawing with :class:`PySide.QtGui.QPainter` , we specify points using logical coordinates which then are converted into the physical coordinates of the paint device. The mapping of the logical coordinates to the physical coordinates are handled by :class:`PySide.QtGui.QPainter` 's :meth:`PySide.QtGui.QPainter.combinedTransform` , a combination of :meth:`PySide.QtGui.QPainter.viewport` and :meth:`PySide.QtGui.QPainter.window` and :meth:`PySide.QtGui.QPainter.worldTransform` . The :meth:`PySide.QtGui.QPainter.viewport` represents the physical coordinates specifying an arbitrary rectangle, the :meth:`PySide.QtGui.QPainter.window` describes the same rectangle in logical coordinates, and the :meth:`PySide.QtGui.QPainter.worldTransform` is identical with the transformation matrix.

    See also :ref:`Coordinate System<coordsys.html>`

    .. _PySide.QtGui.QPainter_clipping:



Clipping
^^^^^^^^

    :class:`PySide.QtGui.QPainter` can clip any drawing operation to a rectangle, a region, or a vector path. The current clip is available using the functions :meth:`PySide.QtGui.QPainter.clipRegion` and :meth:`PySide.QtGui.QPainter.clipPath` . Whether paths or regions are preferred (faster) depends on the underlying :meth:`PySide.QtGui.QPainter.paintEngine` . For example, the :class:`PySide.QtGui.QImage` paint engine prefers paths while the X11 paint engine prefers regions. Setting a clip is done in the painters logical coordinates.

    After :class:`PySide.QtGui.QPainter` 's clipping, the paint device may also clip. For example, most widgets clip away the pixels used by child widgets, and most printers clip away an area near the edges of the paper. This additional clipping is not reflected by the return value of :meth:`PySide.QtGui.QPainter.clipRegion` or :meth:`PySide.QtGui.QPainter.hasClipping` .

    .. _PySide.QtGui.QPainter_composition-modes:



Composition Modes
^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QPainter` provides the :attr:`QPainter.CompositionMode` enum which defines the Porter-Duff rules for digital image compositing; it describes a model for combining the pixels in one image, the source, with the pixels in another image, the destination.

    The two most common forms of composition are :attr:`Source<QPainter.CompositionMode>` and :attr:`SourceOver<QPainter.CompositionMode>` . :attr:`Source<QPainter.CompositionMode>` is used to draw opaque objects onto a paint device. In this mode, each pixel in the source replaces the corresponding pixel in the destination. In :attr:`SourceOver<QPainter.CompositionMode>` composition mode, the source object is transparent and is drawn on top of the destination.

    Note that composition transformation operates pixelwise. For that reason, there is a difference between using the graphic primitive itself and its bounding rectangle: The bounding rect contains pixels with alpha == 0 (i.e the pixels surrounding the primitive). These pixels will overwrite the other image's pixels, affectively clearing those, while the primitive only overwrites its own area.

    +------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-compositiondemo.png|**Composition Modes Demo**\                                                                                                                                                             |
    |                                                                                                                  |                                                                                                                                                                                        |
    |                                                                                                                  |    The :ref:`Composition Modes<demos/composition>` demo, available in Qt's demo directory, allows you to experiment with the various composition modes and see the results immediately.|
    +------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. _PySide.QtGui.QPainter_limitations:



Limitations
^^^^^^^^^^^

    If you are using coordinates with Qt's raster-based paint engine, it is important to note that, while coordinates greater than +/- 2 :sup:`15` can be used, any painting performed with coordinates outside this range is not guaranteed to be shown; the drawing may be clipped. This is due to the use of ``short int`` in the implementation.

    The outlines generated by Qt's stroker are only an approximation when dealing with curved shapes. It is in most cases impossible to represent the outline of a bezier curve segment using another bezier curve segment, and so Qt approximates the curve outlines by using several smaller curves. For performance reasons there is a limit to how many curves Qt uses for these outlines, and thus when using large pen widths or scales the outline error increases. To generate outlines with smaller errors it is possible to use the :class:`PySide.QtGui.QPainterPathStroker` class, which has the setCurveThreshold member function which let's the user specify the error tolerance. Another workaround is to convert the paths to polygons first and then draw the polygons instead.

    .. _PySide.QtGui.QPainter_performance:



Performance
^^^^^^^^^^^

    :class:`PySide.QtGui.QPainter` is a rich framework that allows developers to do a great variety of graphical operations, such as gradients, composition modes and vector graphics. And :class:`PySide.QtGui.QPainter` can do this across a variety of different hardware and software stacks. Naturally the underlying combination of hardware and software has some implications for performance, and ensuring that every single operation is fast in combination with all the various combinations of composition modes, brushes, clipping, transformation, etc, is close to an impossible task because of the number of permutations. As a compromise we have selected a subset of the :class:`PySide.QtGui.QPainter` API and backends, where performance is guaranteed to be as good as we can sensibly get it for the given combination of hardware and software.

    The backends we focus on as high-performance engines are:


    * Raster - This backend implements all rendering in pure software and is always used to render into QImages. For optimal performance only use the format types :attr:`QImage.Format_ARGB32_Premultiplied<QImage.Format>` , :attr:`QImage.Format_RGB32<QImage.Format>` or :attr:`QImage.Format_RGB16<QImage.Format>` . Any other format, including :attr:`QImage.Format_ARGB32<QImage.Format>` , has significantly worse performance. This engine is also used by default on Windows and on QWS. It can be used as default graphics system on any OS/hardware/software combination by passing ``-graphicssystem raster`` on the command line
    * OpenGL 2.0 (ES) - This backend is the primary backend for hardware accelerated graphics. It can be run on desktop machines and embedded devices supporting the OpenGL 2.0 or OpenGL/ES 2.0 specification. This includes most graphics chips produced in the last couple of years. The engine can be enabled by using :class:`PySide.QtGui.QPainter` onto a :class:`PySide.QtOpenGL.QGLWidget` or by passing ``-graphicssystem opengl`` on the command line when the underlying system supports it.
    * OpenVG - This backend implements the Khronos standard for 2D and Vector Graphics. It is primarily for embedded devices with hardware support for OpenVG. The engine can be enabled by passing ``-graphicssystem openvg`` on the command line when the underlying system supports it.

    These operations are:


    * Simple transformations, meaning translation and scaling, pluss 0, 90, 180, 270 degree rotations.
    * ``drawPixmap()`` in combination with simple transformations and opacity with non-smooth transformation mode (``QPainter::SmoothPixmapTransform`` not enabled as a render hint).
    * Rectangle fills with solid color, two-color linear gradients and simple transforms.
    * Rectangular clipping with simple transformations and intersect clip.
    * Composition Modes ``QPainter::CompositionMode_Source`` and :attr:`QPainter.CompositionMode_SourceOver<QPainter.CompositionMode>`
    * Rounded rectangle filling using solid color and two-color linear gradients fills.
    * 3x3 patched pixmaps, via qDrawBorderPixmap.

    This list gives an indication of which features to safely use in an application where performance is critical. For certain setups, other operations may be fast too, but before making extensive use of them, it is recommended to benchmark and verify them on the system where the software will run in the end. There are also cases where expensive operations are ok to use, for instance when the result is cached in a :class:`PySide.QtGui.QPixmap` .

    .. seealso::  :class:`PySide.QtGui.QPaintDevice`  :class:`PySide.QtGui.QPaintEngine`  :ref:`QtSvg Module<QtSvg>`  :ref:`Basic Drawing Example<painting/basicdrawing>`  :ref:`Drawing Utility Functions<<qdrawutil.h>>` 

.. class:: QPainter()
           QPainter(arg__1)

    :param arg__1: :class:`PySide.QtGui.QPaintDevice`

    Constructs a painter.

    .. seealso::  :meth:`PySide.QtGui.QPainter.begin`  :meth:`PySide.QtGui.QPainter.end` 

    Constructs a painter that begins painting the paint ``device`` immediately.

    This constructor is convenient for short-lived painters, e.g. in a :meth:`QWidget.paintEvent()<PySide.QtGui.QWidget.paintEvent>` and should be used only once. The constructor calls :meth:`PySide.QtGui.QPainter.begin` for you and the :class:`PySide.QtGui.QPainter` destructor automatically calls :meth:`PySide.QtGui.QPainter.end` .

    Here's an example using :meth:`PySide.QtGui.QPainter.begin` and :meth:`PySide.QtGui.QPainter.end` :

    ::

        def paintEvent(self, paintEvent):
            p = QPainter()
            p.begin(self)
            p.drawLine(...)         # drawing code
            p.end()


    The same example using this constructor:

    ::

        self paintEvent(self, paintEvent):
            p = QPainter(self)
            p.drawLine(...)         # drawing code



    Since the constructor cannot provide feedback when the initialization of the painter failed you should rather use :meth:`PySide.QtGui.QPainter.begin` and :meth:`PySide.QtGui.QPainter.end` to paint on external devices, e.g. printers.

    .. seealso::  :meth:`PySide.QtGui.QPainter.begin`  :meth:`PySide.QtGui.QPainter.end` 

.. attribute:: PySide.QtGui.QPainter.CompositionMode

    Defines the modes supported for digital image compositing. Composition modes are used to specify how the pixels in one image, the source, are merged with the pixel in another image, the destination.

    Please note that the bitwise raster operation modes, denoted with a RasterOp prefix, are only natively supported in the X11 and raster paint engines. This means that the only way to utilize these modes on the Mac is via a :class:`PySide.QtGui.QImage` . The RasterOp denoted blend modes are *not* supported for pens and brushes with alpha components. Also, turning on the :attr:`QPainter.Antialiasing<QPainter.RenderHint>` render hint will effectively disable the RasterOp modes.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-compositionmode1.png

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-compositionmode2.png

    The most common type is SourceOver (often referred to as just alpha blending) where the source pixel is blended on top of the destination pixel in such a way that the alpha component of the source defines the translucency of the pixel.

    When the paint device is a :class:`PySide.QtGui.QImage` , the image format must be set to :attr:`Format_ARGB32Premultiplied<QImage.Format>` or :attr:`Format_ARGB32<QImage.Format>` for the composition modes to have any effect. For performance the premultiplied version is the preferred format.

    When a composition mode is set it applies to all painting operator, pens, brushes, gradients and pixmap/image drawing.

    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                                    |Description                                                                                                                                                                                                                                                       |
    +============================================+==================================================================================================================================================================================================================================================================+
    |QPainter.CompositionMode_SourceOver         |This is the default mode. The alpha of the source is used to blend the pixel on top of the destination.                                                                                                                                                           |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_DestinationOver    |The alpha of the destination is used to blend it on top of the source pixels. This mode is the inverse of :attr:`CompositionMode_SourceOver<QPainter.CompositionMode>` .                                                                                          |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Clear              |The pixels in the destination are cleared (set to fully transparent) independent of the source.                                                                                                                                                                   |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Source             |The output is the source pixel. (This means a basic copy operation and is identical to SourceOver when the source pixel is opaque).                                                                                                                               |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Destination        |The output is the destination pixel. This means that the blending has no effect. This mode is the inverse of :attr:`CompositionMode_Source<QPainter.CompositionMode>` .                                                                                           |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_SourceIn           |The output is the source, where the alpha is reduced by that of the destination.                                                                                                                                                                                  |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_DestinationIn      |The output is the destination, where the alpha is reduced by that of the source. This mode is the inverse of :attr:`CompositionMode_SourceIn<QPainter.CompositionMode>` .                                                                                         |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_SourceOut          |The output is the source, where the alpha is reduced by the inverse of destination.                                                                                                                                                                               |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_DestinationOut     |The output is the destination, where the alpha is reduced by the inverse of the source. This mode is the inverse of :attr:`CompositionMode_SourceOut<QPainter.CompositionMode>` .                                                                                 |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_SourceAtop         |The source pixel is blended on top of the destination, with the alpha of the source pixel reduced by the alpha of the destination pixel.                                                                                                                          |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_DestinationAtop    |The destination pixel is blended on top of the source, with the alpha of the destination pixel is reduced by the alpha of the destination pixel. This mode is the inverse of :attr:`CompositionMode_SourceAtop<QPainter.CompositionMode>` .                       |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Xor                |The source, whose alpha is reduced with the inverse of the destination alpha, is merged with the destination, whose alpha is reduced by the inverse of the source alpha. :attr:`CompositionMode_Xor<QPainter.CompositionMode>` is not the same as the bitwise Xor.|
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Plus               |Both the alpha and color of the source and destination pixels are added together.                                                                                                                                                                                 |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Multiply           |The output is the source color multiplied by the destination. Multiplying a color with white leaves the color unchanged, while multiplying a color with black produces black.                                                                                     |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Screen             |The source and destination colors are inverted and then multiplied. Screening a color with white produces white, whereas screening a color with black leaves the color unchanged.                                                                                 |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Overlay            |Multiplies or screens the colors depending on the destination color. The destination color is mixed with the source color to reflect the lightness or darkness of the destination.                                                                                |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Darken             |The darker of the source and destination colors is selected.                                                                                                                                                                                                      |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Lighten            |The lighter of the source and destination colors is selected.                                                                                                                                                                                                     |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_ColorDodge         |The destination color is brightened to reflect the source color. A black source color leaves the destination color unchanged.                                                                                                                                     |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_ColorBurn          |The destination color is darkened to reflect the source color. A white source color leaves the destination color unchanged.                                                                                                                                       |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_HardLight          |Multiplies or screens the colors depending on the source color. A light source color will lighten the destination color, whereas a dark source color will darken the destination color.                                                                           |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_SoftLight          |Darkens or lightens the colors depending on the source color. Similar to :attr:`CompositionMode_HardLight<QPainter.CompositionMode>` .                                                                                                                            |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Difference         |Subtracts the darker of the colors from the lighter. Painting with white inverts the destination color, whereas painting with black leaves the destination color unchanged.                                                                                       |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.CompositionMode_Exclusion          |Similar to :attr:`CompositionMode_Difference<QPainter.CompositionMode>` , but with a lower contrast. Painting with white inverts the destination color, whereas painting with black leaves the destination color unchanged.                                       |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_SourceOrDestination       |Does a bitwise OR operation on the source and destination pixels (src OR dst).                                                                                                                                                                                    |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_SourceAndDestination      |Does a bitwise AND operation on the source and destination pixels (src AND dst).                                                                                                                                                                                  |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_SourceXorDestination      |Does a bitwise XOR operation on the source and destination pixels (src XOR dst).                                                                                                                                                                                  |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_NotSourceAndNotDestination|Does a bitwise NOR operation on the source and destination pixels ((NOT src) AND (NOT dst)).                                                                                                                                                                      |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_NotSourceOrNotDestination |Does a bitwise NAND operation on the source and destination pixels ((NOT src) OR (NOT dst)).                                                                                                                                                                      |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_NotSourceXorDestination   |Does a bitwise operation where the source pixels are inverted and then XOR'ed with the destination ((NOT src) XOR dst).                                                                                                                                           |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_NotSource                 |Does a bitwise operation where the source pixels are inverted (NOT src).                                                                                                                                                                                          |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_NotSourceAndDestination   |Does a bitwise operation where the source is inverted and then AND'ed with the destination ((NOT src) AND dst).                                                                                                                                                   |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.RasterOp_SourceAndNotDestination   |Does a bitwise operation where the source is AND'ed with the inverted destination pixels (src AND (NOT dst)).                                                                                                                                                     |
    +--------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.compositionMode`  :meth:`PySide.QtGui.QPainter.setCompositionMode`  :class:`Composition Modes<~PySide.QtGui.QPainter#Composition Modes>`  :ref:`Image Composition Example<painting/imagecomposition>` 

.. attribute:: PySide.QtGui.QPainter.RenderHint

    Renderhints are used to specify flags to :class:`PySide.QtGui.QPainter` that may or may not be respected by any given engine.

    +--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                        |Description                                                                                                                                                                                                             |
    +================================+========================================================================================================================================================================================================================+
    |QPainter.Antialiasing           |Indicates that the engine should antialias edges of primitives if possible.                                                                                                                                             |
    +--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.TextAntialiasing       |Indicates that the engine should antialias text if possible. To forcibly disable antialiasing for text, do not use this hint. Instead, set :attr:`QFont.NoAntialias<QFont.StyleStrategy>` on your font's style strategy.|
    +--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.SmoothPixmapTransform  |Indicates that the engine should use a smooth pixmap transformation algorithm (such as bilinear) rather than nearest neighbor.                                                                                          |
    +--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.HighQualityAntialiasing|An OpenGL-specific rendering hint indicating that the engine should use fragment programs and offscreen rendering for antialiasing.                                                                                     |
    +--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QPainter.NonCosmeticDefaultPen  |The engine should interpret pens with a width of 0 (which otherwise enables :meth:`QPen.isCosmetic()<PySide.QtGui.QPen.isCosmetic>` ) as being a non-cosmetic pen with a width of 1.                                    |
    +--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.renderHints`  :meth:`PySide.QtGui.QPainter.setRenderHint`  :class:`Rendering Quality<~PySide.QtGui.QPainter#Rendering Quality>`  :ref:`Concentric Circles Example<painting/concentriccircles>` 

.. attribute:: PySide.QtGui.QPainter.PixmapFragmentHint

    +-------------------+------------------------------------------------------------------------------------------------------------+
    |Constant           |Description                                                                                                 |
    +===================+============================================================================================================+
    |QPainter.OpaqueHint|Indicates that the pixmap fragments to be drawn are opaque. Opaque fragments are potentially faster to draw.|
    +-------------------+------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`QPainter.drawPixmapFragments()<PySide.QtGui.QPainter.drawPixmapFragments>`  :class:`QPainter.PixmapFragment<~PySide.QtGui.QPainter.PixmapFragment>` 

.. note:: This enum was introduced or modified in Qt 4.7
.. method:: PySide.QtGui.QPainter.background()


    :rtype: :class:`PySide.QtGui.QBrush`




    Returns the current background brush.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setBackground`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.backgroundMode()


    :rtype: :attr:`PySide.QtCore.Qt.BGMode`




    Returns the current background mode.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setBackgroundMode`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.begin(arg__1)


    :param arg__1: :class:`PySide.QtGui.QPaintDevice`
    :rtype: :class:`PySide.QtCore.bool`




    Begins painting the paint ``device`` and returns true if successful; otherwise returns false.

    Notice that all painter settings ( :meth:`PySide.QtGui.QPainter.setPen` , :meth:`PySide.QtGui.QPainter.setBrush` etc.) are reset to default values when :meth:`PySide.QtGui.QPainter.begin` is called.

    The errors that can occur are serious problems, such as these:

    ::

        painter.begin(0)  # impossible - paint device cannot be 0

        image = QPixmap(0, 0)
        painter.begin(&image) # impossible - image.isNull() == true

        painter.begin(myWidget)
        painter2.begin(myWidget) # impossible - only one painter at a time


    Note that most of the time, you can use one of the constructors instead of :meth:`PySide.QtGui.QPainter.begin` , and that :meth:`PySide.QtGui.QPainter.end` is automatically done at destruction.

    .. warning::  A paint device can only be painted by one painter at a time.

    .. warning::  Painting on a :class:`PySide.QtGui.QImage` with the format :attr:`QImage.Format_Indexed8<QImage.Format>` is not supported.

    .. seealso::  :meth:`PySide.QtGui.QPainter.end`  :meth:`PySide.QtGui.QPainter.QPainter` 


.. method:: PySide.QtGui.QPainter.beginNativePainting()






    Flushes the painting pipeline and prepares for the user issuing commands directly to the underlying graphics context. Must be followed by a call to :meth:`PySide.QtGui.QPainter.endNativePainting` .

    Note that only the states the underlying paint engine changes will be reset to their respective default states. The states we reset may change from release to release. The following states are currently reset in the OpenGL 2 engine:


    * blending is disabled
    * the depth, stencil and scissor tests are disabled
    * the active texture unit is reset to 0
    * the depth mask, depth function and the clear depth are reset to their default values
    * the stencil mask, stencil operation and stencil function are reset to their default values
    * the current color is reset to solid white

    If, for example, the OpenGL polygon mode is changed by the user inside a beginNativePaint()/ :meth:`PySide.QtGui.QPainter.endNativePainting` block, it will not be reset to the default state by :meth:`PySide.QtGui.QPainter.endNativePainting` . Here is an example that shows intermixing of painter commands and raw OpenGL commands:

    ::

        painter = QPainter(self)
        painter.fillRect(0, 0, 128, 128, Qt.green)
        painter.beginNativePainting()

        glEnable(GL_SCISSOR_TEST)
        glScissor(0, 0, 64, 64)

        glClearColor(1, 0, 0, 1)
        glClear(GL_COLOR_BUFFER_BIT)

        glDisable(GL_SCISSOR_TEST)

        painter.endNativePainting()


    .. seealso::  :meth:`PySide.QtGui.QPainter.endNativePainting` 


.. method:: PySide.QtGui.QPainter.boundingRect(x, y, w, h, flags, text)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param flags: :class:`PySide.QtCore.int`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Returns the bounding rectangle of the given ``text`` as it will appear when drawn inside the rectangle beginning at the point (``x`` , ``y`` ) with width ``w`` and height ``h`` .



.. method:: PySide.QtGui.QPainter.boundingRect(rect, flags, text)


    :param rect: :class:`PySide.QtCore.QRectF`
    :param flags: :class:`PySide.QtCore.int`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the bounding rectangle of the ``text`` as it will appear when drawn inside the given ``rectangle`` with the specified ``flags`` using the currently set :meth:`PySide.QtGui.QPainter.font` ; i.e the function tells you where the :meth:`PySide.QtGui.QPainter.drawText` function will draw when given the same arguments.

    If the ``text`` does not fit within the given ``rectangle`` using the specified ``flags`` , the function returns the required rectangle.

    The ``flags`` argument is a bitwise OR of the following flags:


    * :attr:`Qt.AlignLeft<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignRight<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignHCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignTop<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignBottom<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignVCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.TextSingleLine<Qt.TextFlag>`
    * :attr:`Qt.TextExpandTabs<Qt.TextFlag>`
    * :attr:`Qt.TextShowMnemonic<Qt.TextFlag>`
    * :attr:`Qt.TextWordWrap<Qt.TextFlag>`
    * :attr:`Qt.TextIncludeTrailingSpaces<Qt.TextFlag>`

    If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawText`  :class:`Qt.Alignment`  :attr:`Qt.TextFlag` 


.. method:: PySide.QtGui.QPainter.boundingRect(rect, flags, text)


    :param rect: :class:`PySide.QtCore.QRect`
    :param flags: :class:`PySide.QtCore.int`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Returns the bounding rectangle of the ``text`` as it will appear when drawn inside the given ``rectangle`` with the specified ``flags`` using the currently set :meth:`PySide.QtGui.QPainter.font` .



.. method:: PySide.QtGui.QPainter.boundingRect(rect, text[, o=QTextOption()])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param text: unicode
    :param o: :class:`PySide.QtGui.QTextOption`
    :rtype: :class:`PySide.QtCore.QRectF`




    This is an overloaded function.

    Instead of specifying flags as a bitwise OR of the :attr:`Qt.AlignmentFlag` and :attr:`Qt.TextFlag` , this overloaded function takes an ``option`` argument. The :class:`PySide.QtGui.QTextOption` class provides a description of general rich text properties.

    .. seealso::  :class:`PySide.QtGui.QTextOption` 


.. method:: PySide.QtGui.QPainter.brush()


    :rtype: :class:`PySide.QtGui.QBrush`




    Returns the painter's current brush.

    .. seealso::  :meth:`QPainter.setBrush()<PySide.QtGui.QPainter.setBrush>`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.brushOrigin()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the currently set brush origin.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setBrushOrigin`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.clipPath()


    :rtype: :class:`PySide.QtGui.QPainterPath`




    Returns the currently clip as a path. Note that the clip path is given in logical coordinates.

    .. warning:: \ :class:`PySide.QtGui.QPainter` does not store the combined clip explicitly as this is handled by the underlying :class:`PySide.QtGui.QPaintEngine` , so the path is recreated on demand and transformed to the current logical coordinate system. This is potentially an expensive operation.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setClipPath`  :meth:`PySide.QtGui.QPainter.clipRegion`  :meth:`PySide.QtGui.QPainter.setClipping` 


.. method:: PySide.QtGui.QPainter.clipRegion()


    :rtype: :class:`PySide.QtGui.QRegion`




    Returns the currently set clip region. Note that the clip region is given in logical coordinates.

    .. warning:: \ :class:`PySide.QtGui.QPainter` does not store the combined clip explicitly as this is handled by the underlying :class:`PySide.QtGui.QPaintEngine` , so the path is recreated on demand and transformed to the current logical coordinate system. This is potentially an expensive operation.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setClipRegion`  :meth:`PySide.QtGui.QPainter.clipPath`  :meth:`PySide.QtGui.QPainter.setClipping` 


.. method:: PySide.QtGui.QPainter.combinedMatrix()


    :rtype: :class:`PySide.QtGui.QMatrix`




    Returns the transformation matrix combining the current window/viewport and world transformation.

    It is advisable to use :meth:`PySide.QtGui.QPainter.combinedTransform` instead of this function to preserve the properties of perspective transformations.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldTransform`  :meth:`PySide.QtGui.QPainter.setWindow`  :meth:`PySide.QtGui.QPainter.setViewport` 


.. method:: PySide.QtGui.QPainter.combinedTransform()


    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the transformation matrix combining the current window/viewport and world transformation.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldTransform`  :meth:`PySide.QtGui.QPainter.setWindow`  :meth:`PySide.QtGui.QPainter.setViewport` 


.. method:: PySide.QtGui.QPainter.compositionMode()


    :rtype: :attr:`PySide.QtGui.QPainter.CompositionMode`




    Returns the current composition mode.

    .. seealso::  :attr:`QPainter.CompositionMode`  :meth:`PySide.QtGui.QPainter.setCompositionMode` 


.. method:: PySide.QtGui.QPainter.device()


    :rtype: :class:`PySide.QtGui.QPaintDevice`




    Returns the paint device on which this painter is currently painting, or 0 if the painter is not active.

    .. seealso::  :meth:`PySide.QtGui.QPainter.isActive` 


.. method:: PySide.QtGui.QPainter.deviceMatrix()


    :rtype: :class:`PySide.QtGui.QMatrix`




    Returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device.

    .. note::  It is advisable to use :meth:`PySide.QtGui.QPainter.deviceTransform` instead of this function to preserve the properties of perspective transformations.

    This function is *only* needed when using platform painting commands on the platform dependent handle ( :class:`Qt.HANDLE` ), and the platform does not do transformations nativly.

    The :attr:`QPaintEngine.PaintEngineFeature` enum can be queried to determine whether the platform performs the transformations or not.

    .. seealso::  :meth:`PySide.QtGui.QPainter.worldMatrix`  :meth:`QPaintEngine.hasFeature()<PySide.QtGui.QPaintEngine.hasFeature>` 


.. method:: PySide.QtGui.QPainter.deviceTransform()


    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device.

    This function is *only* needed when using platform painting commands on the platform dependent handle ( :class:`Qt.HANDLE` ), and the platform does not do transformations nativly.

    The :attr:`QPaintEngine.PaintEngineFeature` enum can be queried to determine whether the platform performs the transformations or not.

    .. seealso::  :meth:`PySide.QtGui.QPainter.worldTransform`  :meth:`QPaintEngine.hasFeature()<PySide.QtGui.QPaintEngine.hasFeature>` 


.. method:: PySide.QtGui.QPainter.drawArc(rect, a, alen)


    :param rect: :class:`PySide.QtCore.QRectF`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    Draws the arc defined by the given ``rectangle`` , ``startAngle`` and ``spanAngle`` .

    The ``startAngle`` and ``spanAngle`` must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 \* 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

    +------------------------------------------------------------------------------------------------------+---------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-arc.png|::                                                       |
    |                                                                                                      |                                                         |
    |                                                                                                      |        rectangle = QRectF(10.0, 20.0, 80.0, 60.0)       |
    |                                                                                                      |        startAngle = 30 * 16                             |
    |                                                                                                      |        spanAngle = 120 * 16                             |
    |                                                                                                      |                                                         |
    |                                                                                                      |        painter = QPainter(self)                         |
    |                                                                                                      |        painter.drawArc(rectangle, startAngle, spanAngle)|
    +------------------------------------------------------------------------------------------------------+---------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawPie`  :meth:`PySide.QtGui.QPainter.drawChord`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.drawArc(x, y, w, h, a, alen)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the arc defined by the rectangle beginning at (``x`` , ``y`` ) with the specified ``width`` and ``height`` , and the given ``startAngle`` and ``spanAngle`` .



.. method:: PySide.QtGui.QPainter.drawArc(arg__1, a, alen)


    :param arg__1: :class:`PySide.QtCore.QRect`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the arc defined by the given ``rectangle`` , ``startAngle`` and ``spanAngle`` .



.. method:: PySide.QtGui.QPainter.drawChord(rect, a, alen)


    :param rect: :class:`PySide.QtCore.QRectF`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    Draws the chord defined by the given ``rectangle`` , ``startAngle`` and ``spanAngle`` . The chord is filled with the current :meth:`PySide.QtGui.QPainter.brush` .

    The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 \* 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

    +--------------------------------------------------------------------------------------------------------+------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-chord.png|::                                                    |
    |                                                                                                        |                                                      |
    |                                                                                                        |        rectangle = QRectF(10.0, 20.0, 80.0, 60.0)    |
    |                                                                                                        |        startAngle = 30 * 16                          |
    |                                                                                                        |        spanAngle = 120 * 16                          |
    |                                                                                                        |                                                      |
    |                                                                                                        |        painter = QPainter(self)                      |
    |                                                                                                        |        painter.drawChord(rect, startAngle, spanAngle)|
    +--------------------------------------------------------------------------------------------------------+------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawArc`  :meth:`PySide.QtGui.QPainter.drawPie`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.drawChord(x, y, w, h, a, alen)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the chord defined by the rectangle beginning at (``x`` , ``y`` ) with the specified ``width`` and ``height`` , and the given ``startAngle`` and ``spanAngle`` .



.. method:: PySide.QtGui.QPainter.drawChord(arg__1, a, alen)


    :param arg__1: :class:`PySide.QtCore.QRect`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the chord defined by the given ``rectangle`` , ``startAngle`` and ``spanAngle`` .



.. method:: PySide.QtGui.QPainter.drawConvexPolygon(polygon)


    :param polygon: :class:`PySide.QtGui.QPolygon`




    This is an overloaded function.

    Draws the convex polygon defined by ``polygon`` using the current pen and brush.



.. method:: PySide.QtGui.QPainter.drawConvexPolygon(polygon)


    :param polygon: :class:`PySide.QtGui.QPolygonF`




    This is an overloaded function.

    Draws the convex polygon defined by ``polygon`` using the current pen and brush.



.. method:: PySide.QtGui.QPainter.drawConvexPolygon(arg__1)


    :param arg__1: 







.. method:: PySide.QtGui.QPainter.drawConvexPolygon(arg__1)


    :param arg__1: 







.. method:: PySide.QtGui.QPainter.drawEllipse(x, y, w, h)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the ellipse defined by the rectangle beginning at (``x`` , ``y`` ) with the given ``width`` and ``height`` .



.. method:: PySide.QtGui.QPainter.drawEllipse(r)


    :param r: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Draws the ellipse defined by the given ``rectangle`` .



.. method:: PySide.QtGui.QPainter.drawEllipse(r)


    :param r: :class:`PySide.QtCore.QRectF`




    Draws the ellipse defined by the given ``rectangle`` .

    A filled ellipse has a size of ``rectangle`` . :meth:`PySide.QtCore.QRect.size` . A stroked ellipse has a size of ``rectangle`` . :meth:`PySide.QtCore.QRect.size` plus the pen width.

    +----------------------------------------------------------------------------------------------------------+--------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-ellipse.png|::                                                |
    |                                                                                                          |                                                  |
    |                                                                                                          |        rectangle = QRectF(10.0, 20.0, 80.0, 60.0)|
    |                                                                                                          |                                                  |
    |                                                                                                          |        painter = QPainter(self)                  |
    |                                                                                                          |        painter.drawEllipse(rectangle)            |
    +----------------------------------------------------------------------------------------------------------+--------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawPie`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.drawEllipse(center, rx, ry)


    :param center: :class:`PySide.QtCore.QPointF`
    :param rx: :class:`PySide.QtCore.qreal`
    :param ry: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Draws the ellipse positioned at ``center`` with radii ``rx`` and ``ry`` .



.. method:: PySide.QtGui.QPainter.drawEllipse(center, rx, ry)


    :param center: :class:`PySide.QtCore.QPoint`
    :param rx: :class:`PySide.QtCore.int`
    :param ry: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the ellipse positioned at ``center`` with radii ``rx`` and ``ry`` .



.. method:: PySide.QtGui.QPainter.drawImage(r, image)


    :param r: :class:`PySide.QtCore.QRectF`
    :param image: :class:`PySide.QtGui.QImage`




    This is an overloaded function.

    Draws the given ``image`` into the given ``rectangle`` .

    .. note::  The image is scaled to fit the rectangle, if both the image and rectangle size disagree.



.. method:: PySide.QtGui.QPainter.drawImage(targetRect, image, sourceRect[, flags=Qt.AutoColor])


    :param targetRect: :class:`PySide.QtCore.QRectF`
    :param image: :class:`PySide.QtGui.QImage`
    :param sourceRect: :class:`PySide.QtCore.QRectF`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`







.. method:: PySide.QtGui.QPainter.drawImage(x, y, image[, sx=0[, sy=0[, sw=-1[, sh=-1[, flags=Qt.AutoColor]]]]])


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param image: :class:`PySide.QtGui.QImage`
    :param sx: :class:`PySide.QtCore.int`
    :param sy: :class:`PySide.QtCore.int`
    :param sw: :class:`PySide.QtCore.int`
    :param sh: :class:`PySide.QtCore.int`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`







.. method:: PySide.QtGui.QPainter.drawImage(r, image)


    :param r: :class:`PySide.QtCore.QRect`
    :param image: :class:`PySide.QtGui.QImage`




    This is an overloaded function.

    Draws the given ``image`` into the given ``rectangle`` .

    .. note::  The image is scaled to fit the rectangle, if both the image and rectangle size disagree.



.. method:: PySide.QtGui.QPainter.drawImage(targetRect, image, sourceRect[, flags=Qt.AutoColor])


    :param targetRect: :class:`PySide.QtCore.QRect`
    :param image: :class:`PySide.QtGui.QImage`
    :param sourceRect: :class:`PySide.QtCore.QRect`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`







.. method:: PySide.QtGui.QPainter.drawImage(p, image, sr[, flags=Qt.AutoColor])


    :param p: :class:`PySide.QtCore.QPoint`
    :param image: :class:`PySide.QtGui.QImage`
    :param sr: :class:`PySide.QtCore.QRect`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`







.. method:: PySide.QtGui.QPainter.drawImage(p, image)


    :param p: :class:`PySide.QtCore.QPoint`
    :param image: :class:`PySide.QtGui.QImage`




    This is an overloaded function.

    Draws the given ``image`` at the given ``point`` .



.. method:: PySide.QtGui.QPainter.drawImage(p, image)


    :param p: :class:`PySide.QtCore.QPointF`
    :param image: :class:`PySide.QtGui.QImage`




    This is an overloaded function.

    Draws the given ``image`` at the given ``point`` .



.. method:: PySide.QtGui.QPainter.drawImage(p, image, sr[, flags=Qt.AutoColor])


    :param p: :class:`PySide.QtCore.QPointF`
    :param image: :class:`PySide.QtGui.QImage`
    :param sr: :class:`PySide.QtCore.QRectF`
    :param flags: :class:`PySide.QtCore.Qt.ImageConversionFlags`







.. method:: PySide.QtGui.QPainter.drawLine(x1, y1, x2, y2)


    :param x1: :class:`PySide.QtCore.int`
    :param y1: :class:`PySide.QtCore.int`
    :param x2: :class:`PySide.QtCore.int`
    :param y2: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws a line from (``x1`` , ``y1`` ) to (``x2`` , ``y2`` ) and sets the current pen position to (``x2`` , ``y2`` ).



.. method:: PySide.QtGui.QPainter.drawLine(p1, p2)


    :param p1: :class:`PySide.QtCore.QPointF`
    :param p2: :class:`PySide.QtCore.QPointF`




    This is an overloaded function.

    Draws a line from ``p1`` to ``p2`` .



.. method:: PySide.QtGui.QPainter.drawLine(p1, p2)


    :param p1: :class:`PySide.QtCore.QPoint`
    :param p2: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Draws a line from ``p1`` to ``p2`` .



.. method:: PySide.QtGui.QPainter.drawLine(line)


    :param line: :class:`PySide.QtCore.QLineF`




    Draws a line defined by ``line`` .

    +-------------------------------------------------------------------------------------------------------+---------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-line.png|::                                           |
    |                                                                                                       |                                             |
    |                                                                                                       |        line = QLineF(10.0, 80.0, 90.0, 20.0)|
    |                                                                                                       |                                             |
    |                                                                                                       |        painter = QPainter(self)             |
    |                                                                                                       |        painter.drawLine(line)               |
    +-------------------------------------------------------------------------------------------------------+---------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawLines`  :meth:`PySide.QtGui.QPainter.drawPolyline`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.drawLine(line)


    :param line: :class:`PySide.QtCore.QLine`




    This is an overloaded function.

    Draws a line defined by ``line`` .



.. method:: PySide.QtGui.QPainter.drawLines(lines)


    :param lines: 







.. method:: PySide.QtGui.QPainter.drawLines(pointPairs)


    :param pointPairs: 







.. method:: PySide.QtGui.QPainter.drawLines(pointPairs)


    :param pointPairs: 







.. method:: PySide.QtGui.QPainter.drawLines(lines)


    :param lines: 







.. method:: PySide.QtGui.QPainter.drawPath(path)


    :param path: :class:`PySide.QtGui.QPainterPath`




    Draws the given painter ``path`` using the current pen for outline and the current brush for filling.

    +-------------------------------------------------------------------------------------------------------+-------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-path.png|::                                         |
    |                                                                                                       |                                           |
    |                                                                                                       |        path = QPainterPath()              |
    |                                                                                                       |        path.moveTo(20, 80)                |
    |                                                                                                       |        path.lineTo(20, 30)                |
    |                                                                                                       |        path.cubicTo(80, 0, 50, 50, 80, 80)|
    |                                                                                                       |                                           |
    |                                                                                                       |        painter = QPainter(self)           |
    |                                                                                                       |        painter.drawPath(path)             |
    +-------------------------------------------------------------------------------------------------------+-------------------------------------------+

    .. seealso::  :ref:`the Painter Paths example<painting/painterpaths>`  :ref:`the Vector Deformation demo<demos/deform>` 


.. method:: PySide.QtGui.QPainter.drawPicture(x, y, picture)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param picture: :class:`PySide.QtGui.QPicture`




    This is an overloaded function.

    Draws the given ``picture`` at point (``x`` , ``y`` ).



.. method:: PySide.QtGui.QPainter.drawPicture(p, picture)


    :param p: :class:`PySide.QtCore.QPoint`
    :param picture: :class:`PySide.QtGui.QPicture`




    This is an overloaded function.

    Replays the given ``picture`` at the given ``point`` .



.. method:: PySide.QtGui.QPainter.drawPicture(p, picture)


    :param p: :class:`PySide.QtCore.QPointF`
    :param picture: :class:`PySide.QtGui.QPicture`




    Replays the given ``picture`` at the given ``point`` .

    The :class:`PySide.QtGui.QPicture` class is a paint device that records and replays :class:`PySide.QtGui.QPainter` commands. A picture serializes the painter commands to an IO device in a platform-independent format. Everything that can be painted on a widget or pixmap can also be stored in a picture.

    This function does exactly the same as :meth:`QPicture.play()<PySide.QtGui.QPicture.play>` when called with ``point`` = :class:`PySide.QtCore.QPoint` (0, 0).

    +------------------------------------------+
    |::                                        |
    |                                          |
    |        picture = QPicture()              |
    |        point = QPointF(10.0, 20.0)       |
    |        picture.load("drawing.pic")       |
    |                                          |
    |        painter = QPainter(self)          |
    |        painter.drawPicture(0, 0, picture)|
    +------------------------------------------+

    .. seealso::  :meth:`QPicture.play()<PySide.QtGui.QPicture.play>` 


.. method:: PySide.QtGui.QPainter.drawPie(x, y, w, h, a, alen)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the pie defined by the rectangle beginning at (``x`` , ``y`` ) with the specified ``width`` and ``height`` , and the given ``startAngle`` and ``spanAngle`` .



.. method:: PySide.QtGui.QPainter.drawPie(arg__1, a, alen)


    :param arg__1: :class:`PySide.QtCore.QRect`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws a pie defined by the given ``rectangle`` , ``startAngle`` and and ``spanAngle`` .



.. method:: PySide.QtGui.QPainter.drawPie(rect, a, alen)


    :param rect: :class:`PySide.QtCore.QRectF`
    :param a: :class:`PySide.QtCore.int`
    :param alen: :class:`PySide.QtCore.int`




    Draws a pie defined by the given ``rectangle`` , ``startAngle`` and and ``spanAngle`` .

    The pie is filled with the current :meth:`PySide.QtGui.QPainter.brush` .

    The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 \* 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.

    +------------------------------------------------------------------------------------------------------+---------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-pie.png|::                                                       |
    |                                                                                                      |                                                         |
    |                                                                                                      |        rectangle = QRectF(10.0, 20.0, 80.0, 60.0)       |
    |                                                                                                      |        startAngle = 30 * 16                             |
    |                                                                                                      |        spanAngle = 120 * 16                             |
    |                                                                                                      |                                                         |
    |                                                                                                      |        painter = QPainter(self)                         |
    |                                                                                                      |        painter.drawPie(rectangle, startAngle, spanAngle)|
    +------------------------------------------------------------------------------------------------------+---------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawEllipse`  :meth:`PySide.QtGui.QPainter.drawChord`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.drawPixmap(x, y, pm)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param pm: :class:`PySide.QtGui.QPixmap`




    This is an overloaded function.

    Draws the given ``pixmap`` at position (``x`` , ``y`` ).



.. method:: PySide.QtGui.QPainter.drawPixmap(targetRect, pixmap, sourceRect)


    :param targetRect: :class:`PySide.QtCore.QRectF`
    :param pixmap: :class:`PySide.QtGui.QPixmap`
    :param sourceRect: :class:`PySide.QtCore.QRectF`




    Draws the rectangular portion ``source`` of the given ``pixmap`` into the given ``target`` in the paint device.

    .. note::  The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.

    +-------------------------------------------------+
    |::                                               |
    |                                                 |
    |        target = QRectF(10.0, 20.0, 80.0, 60.0)  |
    |        source = QRectF(0.0, 0.0, 70.0, 40.0)    |
    |        pixmap = QPixmap(":myPixmap.png")        |
    |                                                 |
    |        painter = QPainter(self)                 |
    |        painter.drawPixmap(target, image, source)|
    +-------------------------------------------------+

    If ``pixmap`` is a :class:`PySide.QtGui.QBitmap` it is drawn with the bits that are "set" using the pens color. If backgroundMode is :attr:`Qt.OpaqueMode<Qt.BGMode>` , the "unset" bits are drawn using the color of the background brush; if backgroundMode is :attr:`Qt.TransparentMode<Qt.BGMode>` , the "unset" bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawImage` 


.. method:: PySide.QtGui.QPainter.drawPixmap(x, y, pm, sx, sy, sw, sh)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param pm: :class:`PySide.QtGui.QPixmap`
    :param sx: :class:`PySide.QtCore.int`
    :param sy: :class:`PySide.QtCore.int`
    :param sw: :class:`PySide.QtCore.int`
    :param sh: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws a pixmap at (``x`` , ``y`` ) by copying a part of the given ``pixmap`` into the paint device.

    (``x`` , ``y`` ) specifies the top-left point in the paint device that is to be drawn onto. (``sx`` , ``sy`` ) specifies the top-left point in ``pixmap`` that is to be drawn. The default is (0, 0).

    (``sw`` , ``sh`` ) specifies the size of the pixmap that is to be drawn. The default, (0, 0) (and negative) means all the way to the bottom-right of the pixmap.



.. method:: PySide.QtGui.QPainter.drawPixmap(x, y, w, h, pm, sx, sy, sw, sh)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param pm: :class:`PySide.QtGui.QPixmap`
    :param sx: :class:`PySide.QtCore.int`
    :param sy: :class:`PySide.QtCore.int`
    :param sw: :class:`PySide.QtCore.int`
    :param sh: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the rectangular portion with the origin (``sx`` , ``sy`` ), width ``sw`` and height ``sh`` , of the given ``pixmap`` , at the point (``x`` , ``y`` ), with a width of ``w`` and a height of ``h`` . If sw or sh are equal to zero the width/height of the pixmap is used and adjusted by the offset sx/sy;



.. method:: PySide.QtGui.QPainter.drawPixmap(x, y, w, h, pm)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param pm: :class:`PySide.QtGui.QPixmap`




    This is an overloaded function.

    Draws the ``pixmap`` into the rectangle at position (``x`` , ``y`` ) with the given ``width`` and ``height`` .



.. method:: PySide.QtGui.QPainter.drawPixmap(r, pm)


    :param r: :class:`PySide.QtCore.QRect`
    :param pm: :class:`PySide.QtGui.QPixmap`




    This is an overloaded function.

    Draws the given ``pixmap`` into the given ``rectangle`` .

    .. note::  The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.



.. method:: PySide.QtGui.QPainter.drawPixmap(p, pm)


    :param p: :class:`PySide.QtCore.QPoint`
    :param pm: :class:`PySide.QtGui.QPixmap`




    This is an overloaded function.

    Draws the given ``pixmap`` with its origin at the given ``point`` .



.. method:: PySide.QtGui.QPainter.drawPixmap(p, pm)


    :param p: :class:`PySide.QtCore.QPointF`
    :param pm: :class:`PySide.QtGui.QPixmap`




    This is an overloaded function.

    Draws the given ``pixmap`` with its origin at the given ``point`` .



.. method:: PySide.QtGui.QPainter.drawPixmap(p, pm, sr)


    :param p: :class:`PySide.QtCore.QPoint`
    :param pm: :class:`PySide.QtGui.QPixmap`
    :param sr: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Draws the rectangular portion ``source`` of the given ``pixmap`` with its origin at the given ``point`` .



.. method:: PySide.QtGui.QPainter.drawPixmap(p, pm, sr)


    :param p: :class:`PySide.QtCore.QPointF`
    :param pm: :class:`PySide.QtGui.QPixmap`
    :param sr: :class:`PySide.QtCore.QRectF`




    This is an overloaded function.

    Draws the rectangular portion ``source`` of the given ``pixmap`` with its origin at the given ``point`` .



.. method:: PySide.QtGui.QPainter.drawPixmap(targetRect, pixmap, sourceRect)


    :param targetRect: :class:`PySide.QtCore.QRect`
    :param pixmap: :class:`PySide.QtGui.QPixmap`
    :param sourceRect: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Draws the rectangular portion ``source`` of the given ``pixmap`` into the given ``target`` in the paint device.

    .. note::  The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.



.. method:: PySide.QtGui.QPainter.drawPixmapFragments(fragments, fragmentCount, pixmap[, hints=0])


    :param fragments: :class:`PySide.QtGui.QPainter::PixmapFragment`
    :param fragmentCount: :class:`PySide.QtCore.int`
    :param pixmap: :class:`PySide.QtGui.QPixmap`
    :param hints: :class:`PySide.QtGui.QPainter.PixmapFragmentHints`







.. method:: PySide.QtGui.QPainter.drawPoint(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws a single point at position (``x`` , ``y`` ).



.. method:: PySide.QtGui.QPainter.drawPoint(p)


    :param p: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Draws a single point at the given ``position`` using the current pen's color.



.. method:: PySide.QtGui.QPainter.drawPoint(pt)


    :param pt: :class:`PySide.QtCore.QPointF`




    Draws a single point at the given ``position`` using the current pen's color.

    .. seealso::  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.drawPoints(points)


    :param points: :class:`PySide.QtGui.QPolygon`




    This is an overloaded function.

    Draws the points in the vector ``points`` .



.. method:: PySide.QtGui.QPainter.drawPoints(points)


    :param points: :class:`PySide.QtGui.QPolygonF`




    This is an overloaded function.

    Draws the points in the vector ``points`` .



.. method:: PySide.QtGui.QPainter.drawPoints(arg__1)


    :param arg__1: 







.. method:: PySide.QtGui.QPainter.drawPoints(arg__1)


    :param arg__1: 







.. method:: PySide.QtGui.QPainter.drawPolygon(polygon[, fillRule=Qt.OddEvenFill])


    :param polygon: :class:`PySide.QtGui.QPolygonF`
    :param fillRule: :attr:`PySide.QtCore.Qt.FillRule`







.. method:: PySide.QtGui.QPainter.drawPolygon(polygon[, fillRule=Qt.OddEvenFill])


    :param polygon: :class:`PySide.QtGui.QPolygon`
    :param fillRule: :attr:`PySide.QtCore.Qt.FillRule`







.. method:: PySide.QtGui.QPainter.drawPolygon(arg__1, arg__2)


    :param arg__1: 
    :param arg__2: :attr:`PySide.QtCore.Qt.FillRule`







.. method:: PySide.QtGui.QPainter.drawPolygon(arg__1, arg__2)


    :param arg__1: 
    :param arg__2: :attr:`PySide.QtCore.Qt.FillRule`







.. method:: PySide.QtGui.QPainter.drawPolyline(polyline)


    :param polyline: :class:`PySide.QtGui.QPolygonF`




    This is an overloaded function.

    Draws the polyline defined by the given ``points`` using the current pen.



.. method:: PySide.QtGui.QPainter.drawPolyline(polygon)


    :param polygon: :class:`PySide.QtGui.QPolygon`




    This is an overloaded function.

    Draws the polyline defined by the given ``points`` using the current pen.



.. method:: PySide.QtGui.QPainter.drawPolyline(arg__1)


    :param arg__1: 







.. method:: PySide.QtGui.QPainter.drawPolyline(arg__1)


    :param arg__1: 







.. method:: PySide.QtGui.QPainter.drawRect(rect)


    :param rect: :class:`PySide.QtCore.QRectF`




    Draws the current ``rectangle`` with the current pen and brush.

    A filled rectangle has a size of ``rectangle`` . :meth:`~PySide.QtGui.QPainter.size` . A stroked rectangle has a size of ``rectangle`` . :meth:`~PySide.QtGui.QPainter.size` plus the pen width.

    +------------------------------------------------------------------------------------------------------------+--------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-rectangle.png|::                                                |
    |                                                                                                            |                                                  |
    |                                                                                                            |        rectangle = QRectF(10.0, 20.0, 80.0, 60.0)|
    |                                                                                                            |                                                  |
    |                                                                                                            |        painter = QPainter(self)                  |
    |                                                                                                            |        painter.drawRect(rectangle)               |
    +------------------------------------------------------------------------------------------------------------+--------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawRects`  :meth:`PySide.QtGui.QPainter.drawPolygon`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.drawRect(x1, y1, w, h)


    :param x1: :class:`PySide.QtCore.int`
    :param y1: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws a rectangle with upper left corner at (``x`` , ``y`` ) and with the given ``width`` and ``height`` .



.. method:: PySide.QtGui.QPainter.drawRect(rect)


    :param rect: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Draws the current ``rectangle`` with the current pen and brush.



.. method:: PySide.QtGui.QPainter.drawRects(rectangles)


    :param rectangles: 







.. method:: PySide.QtGui.QPainter.drawRects(rectangles)


    :param rectangles: 







.. method:: PySide.QtGui.QPainter.drawRoundRect(x, y, w, h[, xRound=25[, yRound=25]])


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param xRound: :class:`PySide.QtCore.int`
    :param yRound: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the rectangle ``x`` , ``y`` , ``w`` , ``h`` with rounded corners.



.. method:: PySide.QtGui.QPainter.drawRoundRect(r[, xround=25[, yround=25]])


    :param r: :class:`PySide.QtCore.QRect`
    :param xround: :class:`PySide.QtCore.int`
    :param yround: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws the rectangle ``r`` with rounded corners.



.. method:: PySide.QtGui.QPainter.drawRoundRect(r[, xround=25[, yround=25]])


    :param r: :class:`PySide.QtCore.QRectF`
    :param xround: :class:`PySide.QtCore.int`
    :param yround: :class:`PySide.QtCore.int`




    Draws a rectangle ``r`` with rounded corners.

    The ``xRnd`` and ``yRnd`` arguments specify how rounded the corners should be. 0 is angled corners, 99 is maximum roundedness.

    A filled rectangle has a size of r. :meth:`~PySide.QtGui.QPainter.size` . A stroked rectangle has a size of r. :meth:`~PySide.QtGui.QPainter.size` plus the pen width.

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawRoundedRect` 


.. method:: PySide.QtGui.QPainter.drawRoundedRect(rect, xRadius, yRadius[, mode=Qt.AbsoluteSize])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param xRadius: :class:`PySide.QtCore.qreal`
    :param yRadius: :class:`PySide.QtCore.qreal`
    :param mode: :attr:`PySide.QtCore.Qt.SizeMode`







.. method:: PySide.QtGui.QPainter.drawRoundedRect(x, y, w, h, xRadius, yRadius[, mode=Qt.AbsoluteSize])


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param xRadius: :class:`PySide.QtCore.qreal`
    :param yRadius: :class:`PySide.QtCore.qreal`
    :param mode: :attr:`PySide.QtCore.Qt.SizeMode`







.. method:: PySide.QtGui.QPainter.drawRoundedRect(rect, xRadius, yRadius[, mode=Qt.AbsoluteSize])


    :param rect: :class:`PySide.QtCore.QRect`
    :param xRadius: :class:`PySide.QtCore.qreal`
    :param yRadius: :class:`PySide.QtCore.qreal`
    :param mode: :attr:`PySide.QtCore.Qt.SizeMode`







.. method:: PySide.QtGui.QPainter.drawText(r, flags, text)


    :param r: :class:`PySide.QtCore.QRectF`
    :param flags: :class:`PySide.QtCore.int`
    :param text: unicode




    This is an overloaded function.

    Draws the given ``text`` within the provided ``rectangle`` .

    +-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qpainter-text.png|::                                                                    |
    |                                                                                                       |                                                                      |
    |                                                                                                       |        painter = QPainter(self)                                      |
    |                                                                                                       |        painter.drawText(rect, Qt.AlignCenter, tr("Qt by\nTrolltech"))|
    +-------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------+

    The ``boundingRect`` (if not null) is set to the what the bounding rectangle should be in order to enclose the whole text. The ``flags`` argument is a bitwise OR of the following flags:


    * :attr:`Qt.AlignLeft<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignRight<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignHCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignJustify<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignTop<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignBottom<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignVCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.TextDontClip<Qt.TextFlag>`
    * :attr:`Qt.TextSingleLine<Qt.TextFlag>`
    * :attr:`Qt.TextExpandTabs<Qt.TextFlag>`
    * :attr:`Qt.TextShowMnemonic<Qt.TextFlag>`
    * :attr:`Qt.TextWordWrap<Qt.TextFlag>`
    * :attr:`Qt.TextIncludeTrailingSpaces<Qt.TextFlag>`

    By default, :class:`PySide.QtGui.QPainter` draws text anti-aliased.

    .. note::  The y-coordinate of ``rectangle`` is used as the top of the font.

    .. seealso::  :attr:`Qt.AlignmentFlag`  :attr:`Qt.TextFlag`  :meth:`PySide.QtGui.QPainter.boundingRect`  :meth:`PySide.QtGui.QPainter.layoutDirection` 


.. method:: PySide.QtGui.QPainter.drawText(x, y, s)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param s: unicode




    This is an overloaded function.

    Draws the given ``text`` at position (``x`` , ``y`` ), using the painter's currently defined text direction.

    By default, :class:`PySide.QtGui.QPainter` draws text anti-aliased.

    .. note::  The y-position is used as the baseline of the font.



.. method:: PySide.QtGui.QPainter.drawText(x, y, w, h, flags, text)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param flags: :class:`PySide.QtCore.int`
    :param text: unicode




    This is an overloaded function.

    Draws the given ``text`` within the rectangle with origin (``x`` , ``y`` ), ``width`` and ``height`` .

    The ``boundingRect`` (if not null) is set to the actual bounding rectangle of the output. The ``flags`` argument is a bitwise OR of the following flags:


    * :attr:`Qt.AlignLeft<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignRight<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignHCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignJustify<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignTop<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignBottom<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignVCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.AlignCenter<Qt.AlignmentFlag>`
    * :attr:`Qt.TextSingleLine<Qt.TextFlag>`
    * :attr:`Qt.TextExpandTabs<Qt.TextFlag>`
    * :attr:`Qt.TextShowMnemonic<Qt.TextFlag>`
    * :attr:`Qt.TextWordWrap<Qt.TextFlag>`

    By default, :class:`PySide.QtGui.QPainter` draws text anti-aliased.

    .. note::  The y-position is used as the top of the font.

    .. seealso::  :attr:`Qt.AlignmentFlag`  :attr:`Qt.TextFlag` 


.. method:: PySide.QtGui.QPainter.drawText(r, text[, o=QTextOption()])


    :param r: :class:`PySide.QtCore.QRectF`
    :param text: unicode
    :param o: :class:`PySide.QtGui.QTextOption`




    This is an overloaded function.

    Draws the given ``text`` in the ``rectangle`` specified using the ``option`` to control its positioning and orientation.

    By default, :class:`PySide.QtGui.QPainter` draws text anti-aliased.

    .. note::  The y-coordinate of ``rectangle`` is used as the top of the font.



.. method:: PySide.QtGui.QPainter.drawText(p, s)


    :param p: :class:`PySide.QtCore.QPoint`
    :param s: unicode




    This is an overloaded function.

    Draws the given ``text`` with the currently defined text direction, beginning at the given ``position`` .

    By default, :class:`PySide.QtGui.QPainter` draws text anti-aliased.

    .. note::  The y-position is used as the baseline of the font.



.. method:: PySide.QtGui.QPainter.drawText(p, s)


    :param p: :class:`PySide.QtCore.QPointF`
    :param s: unicode




    Draws the given ``text`` with the currently defined text direction, beginning at the given ``position`` .

    This function does not handle the newline character (\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the :meth:`QPainter.drawText()<PySide.QtGui.QPainter.drawText>` overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.

    By default, :class:`PySide.QtGui.QPainter` draws text anti-aliased.

    .. note::  The y-position is used as the baseline of the font.



.. method:: PySide.QtGui.QPainter.drawText(r, flags, text)


    :param r: :class:`PySide.QtCore.QRect`
    :param flags: :class:`PySide.QtCore.int`
    :param text: unicode




    This is an overloaded function.

    Draws the given ``text`` within the provided ``rectangle`` according to the specified ``flags`` . The ``boundingRect`` (if not null) is set to the what the bounding rectangle should be in order to enclose the whole text.

    By default, :class:`PySide.QtGui.QPainter` draws text anti-aliased.

    .. note::  The y-coordinate of ``rectangle`` is used as the top of the font.



.. method:: PySide.QtGui.QPainter.drawTextItem(x, y, ti)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param ti: :class:`PySide.QtGui.QTextItem`




    This is an overloaded function.



.. method:: PySide.QtGui.QPainter.drawTextItem(p, ti)


    :param p: :class:`PySide.QtCore.QPoint`
    :param ti: :class:`PySide.QtGui.QTextItem`




    This is an overloaded function.

    Draws the text item ``ti`` at position ``p`` .



.. method:: PySide.QtGui.QPainter.drawTextItem(p, ti)


    :param p: :class:`PySide.QtCore.QPointF`
    :param ti: :class:`PySide.QtGui.QTextItem`




    Draws the text item ``ti`` at position ``p`` .

    This method ignores the painters background mode and color. drawText and qt\_format\_text have to do it themselves, as only they know the extents of the complete string.

    It ignores the font set on the painter as the text item has one of its own.

    The underline and strikeout parameters of the text items font are ignored aswell. You'll need to pass in the correct flags to get underlining and strikeout.



.. method:: PySide.QtGui.QPainter.drawTiledPixmap(x, y, w, h, arg__5[, sx=0[, sy=0]])


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param arg__5: :class:`PySide.QtGui.QPixmap`
    :param sx: :class:`PySide.QtCore.int`
    :param sy: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Draws a tiled ``pixmap`` in the specified rectangle.

    (``x`` , ``y`` ) specifies the top-left point in the paint device that is to be drawn onto; with the given ``width`` and ``height`` . (``sx`` , ``sy`` ) specifies the top-left point in the ``pixmap`` that is to be drawn; this defaults to (0, 0).



.. method:: PySide.QtGui.QPainter.drawTiledPixmap(arg__1, arg__2[, pos=QPoint()])


    :param arg__1: :class:`PySide.QtCore.QRect`
    :param arg__2: :class:`PySide.QtGui.QPixmap`
    :param pos: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Draws a tiled ``pixmap`` , inside the given ``rectangle`` with its origin at the given ``position`` .



.. method:: PySide.QtGui.QPainter.drawTiledPixmap(rect, pm[, offset=QPointF()])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param pm: :class:`PySide.QtGui.QPixmap`
    :param offset: :class:`PySide.QtCore.QPointF`




    Draws a tiled ``pixmap`` , inside the given ``rectangle`` with its origin at the given ``position`` .

    Calling :meth:`PySide.QtGui.QPainter.drawTiledPixmap` is similar to calling :meth:`PySide.QtGui.QPainter.drawPixmap` several times to fill (tile) an area with a pixmap, but is potentially much more efficient depending on the underlying window system.

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawPixmap` 


.. method:: PySide.QtGui.QPainter.end()


    :rtype: :class:`PySide.QtCore.bool`




    Ends painting. Any resources used while painting are released. You don't normally need to call this since it is called by the destructor.

    Returns true if the painter is no longer active; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.begin`  :meth:`PySide.QtGui.QPainter.isActive` 


.. method:: PySide.QtGui.QPainter.endNativePainting()






    Restores the painter after manually issuing native painting commands. Lets the painter restore any native state that it relies on before calling any other painter commands.

    .. seealso::  :meth:`PySide.QtGui.QPainter.beginNativePainting` 


.. method:: PySide.QtGui.QPainter.eraseRect(arg__1)


    :param arg__1: :class:`PySide.QtCore.QRectF`




    Erases the area inside the given ``rectangle`` . Equivalent to calling

    ::

        fillRect(rectangle, background())


    .. seealso::  :meth:`PySide.QtGui.QPainter.fillRect` 


.. method:: PySide.QtGui.QPainter.eraseRect(arg__1)


    :param arg__1: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Erases the area inside the given ``rectangle`` .



.. method:: PySide.QtGui.QPainter.eraseRect(x, y, w, h)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Erases the area inside the rectangle beginning at (``x`` , ``y`` ) with the given ``width`` and ``height`` .



.. method:: PySide.QtGui.QPainter.fillPath(path, brush)


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param brush: :class:`PySide.QtGui.QBrush`




    Fills the given ``path`` using the given ``brush`` . The outline is not drawn.

    Alternatively, you can specify a :class:`PySide.QtGui.QColor` instead of a :class:`PySide.QtGui.QBrush` ; the :class:`PySide.QtGui.QBrush` constructor (taking a :class:`PySide.QtGui.QColor` argument) will automatically create a solid pattern brush.

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawPath` 


.. method:: PySide.QtGui.QPainter.fillRect(r, c)


    :param r: :class:`PySide.QtCore.QRectF`
    :param c: :attr:`PySide.QtCore.Qt.GlobalColor`







.. method:: PySide.QtGui.QPainter.fillRect(r, style)


    :param r: :class:`PySide.QtCore.QRectF`
    :param style: :attr:`PySide.QtCore.Qt.BrushStyle`







.. method:: PySide.QtGui.QPainter.fillRect(x, y, w, h, style)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param style: :attr:`PySide.QtCore.Qt.BrushStyle`







.. method:: PySide.QtGui.QPainter.fillRect(x, y, w, h, arg__5)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param arg__5: :class:`PySide.QtGui.QBrush`




    This is an overloaded function.

    Fills the rectangle beginning at (``x`` , ``y`` ) with the given ``width`` and ``height`` , using the given ``brush`` .



.. method:: PySide.QtGui.QPainter.fillRect(x, y, w, h, color)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param color: :class:`PySide.QtGui.QColor`




    This is an overloaded function.

    Fills the rectangle beginning at (``x`` , ``y`` ) with the given ``width`` and ``height`` , using the given ``color`` .



.. method:: PySide.QtGui.QPainter.fillRect(x, y, w, h, c)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param c: :attr:`PySide.QtCore.Qt.GlobalColor`







.. method:: PySide.QtGui.QPainter.fillRect(r, style)


    :param r: :class:`PySide.QtCore.QRect`
    :param style: :attr:`PySide.QtCore.Qt.BrushStyle`







.. method:: PySide.QtGui.QPainter.fillRect(arg__1, arg__2)


    :param arg__1: :class:`PySide.QtCore.QRect`
    :param arg__2: :class:`PySide.QtGui.QBrush`




    This is an overloaded function.

    Fills the given ``rectangle`` with the specified ``brush`` .



.. method:: PySide.QtGui.QPainter.fillRect(arg__1, color)


    :param arg__1: :class:`PySide.QtCore.QRect`
    :param color: :class:`PySide.QtGui.QColor`




    This is an overloaded function.

    Fills the given ``rectangle`` with the ``color`` specified.



.. method:: PySide.QtGui.QPainter.fillRect(arg__1, color)


    :param arg__1: :class:`PySide.QtCore.QRectF`
    :param color: :class:`PySide.QtGui.QColor`




    This is an overloaded function.

    Fills the given ``rectangle`` with the ``color`` specified.



.. method:: PySide.QtGui.QPainter.fillRect(r, c)


    :param r: :class:`PySide.QtCore.QRect`
    :param c: :attr:`PySide.QtCore.Qt.GlobalColor`







.. method:: PySide.QtGui.QPainter.fillRect(arg__1, arg__2)


    :param arg__1: :class:`PySide.QtCore.QRectF`
    :param arg__2: :class:`PySide.QtGui.QBrush`




    Fills the given ``rectangle`` with the ``brush`` specified.

    Alternatively, you can specify a :class:`PySide.QtGui.QColor` instead of a :class:`PySide.QtGui.QBrush` ; the :class:`PySide.QtGui.QBrush` constructor (taking a :class:`PySide.QtGui.QColor` argument) will automatically create a solid pattern brush.

    .. seealso::  :meth:`PySide.QtGui.QPainter.drawRect` 


.. method:: PySide.QtGui.QPainter.font()


    :rtype: :class:`PySide.QtGui.QFont`




    Returns the currently set font used for drawing text.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setFont`  :meth:`PySide.QtGui.QPainter.drawText`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.fontInfo()


    :rtype: :class:`PySide.QtGui.QFontInfo`




    Returns the font info for the painter if the painter is active. Otherwise, the return value is undefined.

    .. seealso::  :meth:`PySide.QtGui.QPainter.font`  :meth:`PySide.QtGui.QPainter.isActive`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.fontMetrics()


    :rtype: :class:`PySide.QtGui.QFontMetrics`




    Returns the font metrics for the painter if the painter is active. Otherwise, the return value is undefined.

    .. seealso::  :meth:`PySide.QtGui.QPainter.font`  :meth:`PySide.QtGui.QPainter.isActive`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.hasClipping()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if clipping has been set; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setClipping`  :class:`Clipping<~PySide.QtGui.QPainter#Clipping>` 


.. method:: PySide.QtGui.QPainter.initFrom(widget)


    :param widget: :class:`PySide.QtGui.QWidget`




    Initializes the painters pen, background and font to the same as the given ``widget`` . This function is called automatically when the painter is opened on a :class:`PySide.QtGui.QWidget` .

    .. seealso::  :meth:`PySide.QtGui.QPainter.begin`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.isActive()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if :meth:`PySide.QtGui.QPainter.begin` has been called and :meth:`PySide.QtGui.QPainter.end` has not yet been called; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.begin`  :meth:`QPaintDevice.paintingActive()<PySide.QtGui.QPaintDevice.paintingActive>` 


.. method:: PySide.QtGui.QPainter.layoutDirection()


    :rtype: :attr:`PySide.QtCore.Qt.LayoutDirection`




    Returns the layout direction used by the painter when drawing text.

    .. seealso::  :meth:`QTextOption.textDirection()<PySide.QtGui.QTextOption.textDirection>`  :meth:`PySide.QtGui.QPainter.setLayoutDirection`  :meth:`PySide.QtGui.QPainter.drawText`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.opacity()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the opacity of the painter. The default value is 1.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setOpacity` 


.. method:: PySide.QtGui.QPainter.paintEngine()


    :rtype: :class:`PySide.QtGui.QPaintEngine`




    Returns the paint engine that the painter is currently operating on if the painter is active; otherwise 0.

    .. seealso::  :meth:`PySide.QtGui.QPainter.isActive` 


.. method:: PySide.QtGui.QPainter.pen()


    :rtype: :class:`PySide.QtGui.QPen`




    Returns the painter's current pen.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setPen`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.renderHints()


    :rtype: :class:`PySide.QtGui.QPainter.RenderHints`




    Returns a flag that specifies the rendering hints that are set for this painter.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setRenderHints`  :meth:`PySide.QtGui.QPainter.testRenderHint`  :class:`Rendering Quality<~PySide.QtGui.QPainter#Rendering Quality>` 


.. method:: PySide.QtGui.QPainter.resetMatrix()






    Resets any transformations that were made using :meth:`PySide.QtGui.QPainter.translate` , :meth:`PySide.QtGui.QPainter.scale` , :meth:`PySide.QtGui.QPainter.shear` , :meth:`PySide.QtGui.QPainter.rotate` , :meth:`PySide.QtGui.QPainter.setWorldMatrix` , :meth:`PySide.QtGui.QPainter.setViewport` and :meth:`PySide.QtGui.QPainter.setWindow` .

    It is advisable to use :meth:`PySide.QtGui.QPainter.resetTransform` instead of this function to preserve the properties of perspective transformations.

    .. seealso::  :class:`Coordinate Transformations<~PySide.QtGui.QPainter#Coordinate Transformations>` 


.. method:: PySide.QtGui.QPainter.resetTransform()






    Resets any transformations that were made using :meth:`PySide.QtGui.QPainter.translate` , :meth:`PySide.QtGui.QPainter.scale` , :meth:`PySide.QtGui.QPainter.shear` , :meth:`PySide.QtGui.QPainter.rotate` , :meth:`PySide.QtGui.QPainter.setWorldTransform` , :meth:`PySide.QtGui.QPainter.setViewport` and :meth:`PySide.QtGui.QPainter.setWindow` .

    .. seealso::  :class:`~PySide.QtGui.Coordinate Transformations` 


.. method:: PySide.QtGui.QPainter.restore()






    Restores the current painter state (pops a saved state off the stack).

    .. seealso::  :meth:`PySide.QtGui.QPainter.save` 


.. staticmethod:: PySide.QtGui.QPainter.restoreRedirected(device)


    :param device: :class:`PySide.QtGui.QPaintDevice`




    Using :meth:`QWidget.render()<PySide.QtGui.QWidget.render>` obsoletes the use of this function.

    Restores the previous redirection for the given ``device`` after a call to :meth:`PySide.QtGui.QPainter.setRedirected` .

    .. warning::  Making use of redirections in the :class:`PySide.QtGui.QPainter` API implies that :meth:`QPainter.begin()<PySide.QtGui.QPainter.begin>` and :class:`PySide.QtGui.QPaintDevice` destructors need to hold a mutex for a short period. This can impact performance. Use of QWidget::render is strongly encouraged.

    .. seealso::  :meth:`PySide.QtGui.QPainter.redirected` 


.. method:: PySide.QtGui.QPainter.rotate(a)


    :param a: :class:`PySide.QtCore.qreal`




    Rotates the coordinate system the given ``angle`` clockwise.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldTransform`  :class:`Coordinate Transformations<~PySide.QtGui.QPainter#Coordinate Transformations>` 


.. method:: PySide.QtGui.QPainter.save()






    Saves the current painter state (pushes the state onto a stack). A :meth:`PySide.QtGui.QPainter.save` must be followed by a corresponding :meth:`PySide.QtGui.QPainter.restore` ; the :meth:`PySide.QtGui.QPainter.end` function unwinds the stack.

    .. seealso::  :meth:`PySide.QtGui.QPainter.restore` 


.. method:: PySide.QtGui.QPainter.scale(sx, sy)


    :param sx: :class:`PySide.QtCore.qreal`
    :param sy: :class:`PySide.QtCore.qreal`




    Scales the coordinate system by (``sx`` , ``sy`` ).

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldTransform`  :class:`Coordinate Transformations<~PySide.QtGui.QPainter#Coordinate Transformations>` 


.. method:: PySide.QtGui.QPainter.setBackground(bg)


    :param bg: :class:`PySide.QtGui.QBrush`




    Sets the background brush of the painter to the given ``brush`` .

    The background brush is the brush that is filled in when drawing opaque text, stippled lines and bitmaps. The background brush has no effect in transparent background mode (which is the default).

    .. seealso::  :meth:`PySide.QtGui.QPainter.background`  :meth:`PySide.QtGui.QPainter.setBackgroundMode`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.setBackgroundMode(mode)


    :param mode: :attr:`PySide.QtCore.Qt.BGMode`







.. method:: PySide.QtGui.QPainter.setBrush(style)


    :param style: :attr:`PySide.QtCore.Qt.BrushStyle`







.. method:: PySide.QtGui.QPainter.setBrush(brush)


    :param brush: :class:`PySide.QtGui.QBrush`




    Sets the painter's brush to the given ``brush`` .

    The painter's brush defines how shapes are filled.

    .. seealso::  :meth:`PySide.QtGui.QPainter.brush`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.setBrushOrigin(arg__1)


    :param arg__1: :class:`PySide.QtCore.QPointF`




    Sets the brush origin to ``position`` .

    The brush origin specifies the (0, 0) coordinate of the painter's brush.

    Note that while the :meth:`PySide.QtGui.QPainter.brushOrigin` was necessary to adopt the parent's background for a widget in Qt 3, this is no longer the case since the Qt 4 painter doesn't paint the background unless you explicitly tell it to do so by setting the widget's :meth:`PySide.QtGui.QWidget.autoFillBackground` property to true.

    .. seealso::  :meth:`PySide.QtGui.QPainter.brushOrigin`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.setBrushOrigin(arg__1)


    :param arg__1: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Sets the brush's origin to the given ``position`` .



.. method:: PySide.QtGui.QPainter.setBrushOrigin(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Sets the brush's origin to point (``x`` , ``y`` ).



.. method:: PySide.QtGui.QPainter.setClipPath(path[, op=Qt.ReplaceClip])


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param op: :attr:`PySide.QtCore.Qt.ClipOperation`







.. method:: PySide.QtGui.QPainter.setClipRect(arg__1[, op=Qt.ReplaceClip])


    :param arg__1: :class:`PySide.QtCore.QRect`
    :param op: :attr:`PySide.QtCore.Qt.ClipOperation`







.. method:: PySide.QtGui.QPainter.setClipRect(arg__1[, op=Qt.ReplaceClip])


    :param arg__1: :class:`PySide.QtCore.QRectF`
    :param op: :attr:`PySide.QtCore.Qt.ClipOperation`







.. method:: PySide.QtGui.QPainter.setClipRect(x, y, w, h[, op=Qt.ReplaceClip])


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`
    :param op: :attr:`PySide.QtCore.Qt.ClipOperation`







.. method:: PySide.QtGui.QPainter.setClipRegion(arg__1[, op=Qt.ReplaceClip])


    :param arg__1: :class:`PySide.QtGui.QRegion`
    :param op: :attr:`PySide.QtCore.Qt.ClipOperation`







.. method:: PySide.QtGui.QPainter.setClipping(enable)


    :param enable: :class:`PySide.QtCore.bool`




    Enables clipping if ``enable`` is true, or disables clipping if ``enable`` is false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.hasClipping`  :class:`Clipping<~PySide.QtGui.QPainter#Clipping>` 


.. method:: PySide.QtGui.QPainter.setCompositionMode(mode)


    :param mode: :attr:`PySide.QtGui.QPainter.CompositionMode`




    Sets the composition mode to the given ``mode`` .

    .. warning::  Only a :class:`PySide.QtGui.QPainter` operating on a :class:`PySide.QtGui.QImage` fully supports all composition modes. The RasterOp modes are supported for X11 as described in :meth:`PySide.QtGui.QPainter.compositionMode` .

    .. seealso::  :meth:`PySide.QtGui.QPainter.compositionMode` 


.. method:: PySide.QtGui.QPainter.setFont(f)


    :param f: :class:`PySide.QtGui.QFont`




    Sets the painter's font to the given ``font`` .

    This font is used by subsequent :meth:`PySide.QtGui.QPainter.drawText` functions. The text color is the same as the pen color.

    If you set a font that isn't available, Qt finds a close match. :meth:`PySide.QtGui.QPainter.font` will return what you set using :meth:`PySide.QtGui.QPainter.setFont` and :meth:`PySide.QtGui.QPainter.fontInfo` returns the font actually being used (which may be the same).

    .. seealso::  :meth:`PySide.QtGui.QPainter.font`  :meth:`PySide.QtGui.QPainter.drawText`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.setLayoutDirection(direction)


    :param direction: :attr:`PySide.QtCore.Qt.LayoutDirection`







.. method:: PySide.QtGui.QPainter.setOpacity(opacity)


    :param opacity: :class:`PySide.QtCore.qreal`




    Sets the opacity of the painter to ``opacity`` . The value should be in the range 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque.

    Opacity set on the painter will apply to all drawing operations individually.

    .. seealso::  :meth:`PySide.QtGui.QPainter.opacity` 


.. method:: PySide.QtGui.QPainter.setPen(color)


    :param color: :class:`PySide.QtGui.QColor`




    This is an overloaded function.

    Sets the painter's pen to have style :attr:`Qt.SolidLine<Qt.PenStyle>` , width 0 and the specified ``color`` .



.. method:: PySide.QtGui.QPainter.setPen(pen)


    :param pen: :class:`PySide.QtGui.QPen`




    Sets the painter's pen to be the given ``pen`` .

    The ``pen`` defines how to draw lines and outlines, and it also defines the text color.

    .. seealso::  :meth:`PySide.QtGui.QPainter.pen`  :class:`Settings<~PySide.QtGui.QPainter#Settings>` 


.. method:: PySide.QtGui.QPainter.setPen(style)


    :param style: :attr:`PySide.QtCore.Qt.PenStyle`







.. staticmethod:: PySide.QtGui.QPainter.setRedirected(device, replacement[, offset=QPoint()])


    :param device: :class:`PySide.QtGui.QPaintDevice`
    :param replacement: :class:`PySide.QtGui.QPaintDevice`
    :param offset: :class:`PySide.QtCore.QPoint`




    Please use :meth:`QWidget.render()<PySide.QtGui.QWidget.render>` instead.

    Redirects all paint commands for the given paint ``device`` , to the ``replacement`` device. The optional point ``offset`` defines an offset within the source device.

    The redirection will not be effective until the :meth:`PySide.QtGui.QPainter.begin` function has been called; make sure to call :meth:`PySide.QtGui.QPainter.end` for the given ``device`` 's painter (if any) before redirecting. Call :meth:`PySide.QtGui.QPainter.restoreRedirected` to restore the previous redirection.

    .. warning::  Making use of redirections in the :class:`PySide.QtGui.QPainter` API implies that :meth:`QPainter.begin()<PySide.QtGui.QPainter.begin>` and :class:`PySide.QtGui.QPaintDevice` destructors need to hold a mutex for a short period. This can impact performance. Use of QWidget::render is strongly encouraged.

    .. seealso::  :meth:`PySide.QtGui.QPainter.redirected`  :meth:`PySide.QtGui.QPainter.restoreRedirected` 


.. method:: PySide.QtGui.QPainter.setRenderHint(hint[, on=true])


    :param hint: :attr:`PySide.QtGui.QPainter.RenderHint`
    :param on: :class:`PySide.QtCore.bool`




    Sets the given render ``hint`` on the painter if ``on`` is true; otherwise clears the render hint.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setRenderHints`  :meth:`PySide.QtGui.QPainter.renderHints`  :class:`Rendering Quality<~PySide.QtGui.QPainter#Rendering Quality>` 


.. method:: PySide.QtGui.QPainter.setRenderHints(hints[, on=true])


    :param hints: :class:`PySide.QtGui.QPainter.RenderHints`
    :param on: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QPainter.setTransform(transform[, combine=false])


    :param transform: :class:`PySide.QtGui.QTransform`
    :param combine: :class:`PySide.QtCore.bool`




    Sets the world transformation matrix. If ``combine`` is true, the specified ``transform`` is combined with the current matrix; otherwise it replaces the current matrix.

    .. seealso::  :meth:`PySide.QtGui.QPainter.transform`  :meth:`PySide.QtGui.QPainter.setWorldTransform` 


.. method:: PySide.QtGui.QPainter.setViewTransformEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    Enables view transformations if ``enable`` is true, or disables view transformations if ``enable`` is false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.viewTransformEnabled`  :ref:`Window-Viewport Conversion<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.setViewport(x, y, w, h)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Sets the painter's viewport rectangle to be the rectangle beginning at (``x`` , ``y`` ) with the given ``width`` and ``height`` .



.. method:: PySide.QtGui.QPainter.setViewport(viewport)


    :param viewport: :class:`PySide.QtCore.QRect`




    Sets the painter's viewport rectangle to the given ``rectangle`` , and enables view transformations.

    The viewport rectangle is part of the view transformation. The viewport specifies the device coordinate system. Its sister, the :meth:`PySide.QtGui.QPainter.window` , specifies the logical coordinate system.

    The default viewport rectangle is the same as the device's rectangle.

    .. seealso::  :meth:`PySide.QtGui.QPainter.viewport`  :meth:`PySide.QtGui.QPainter.viewTransformEnabled`  :ref:`Window-Viewport Conversion<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.setWindow(window)


    :param window: :class:`PySide.QtCore.QRect`




    Sets the painter's window to the given ``rectangle`` , and enables view transformations.

    The window rectangle is part of the view transformation. The window specifies the logical coordinate system. Its sister, the :meth:`PySide.QtGui.QPainter.viewport` , specifies the device coordinate system.

    The default window rectangle is the same as the device's rectangle.

    .. seealso::  :meth:`PySide.QtGui.QPainter.window`  :meth:`PySide.QtGui.QPainter.viewTransformEnabled`  :ref:`Window-Viewport Conversion<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.setWindow(x, y, w, h)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :param w: :class:`PySide.QtCore.int`
    :param h: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Sets the painter's window to the rectangle beginning at (``x`` , ``y`` ) and the given ``width`` and ``height`` .



.. method:: PySide.QtGui.QPainter.setWorldMatrix(matrix[, combine=false])


    :param matrix: :class:`PySide.QtGui.QMatrix`
    :param combine: :class:`PySide.QtCore.bool`




    Sets the transformation matrix to ``matrix`` and enables transformations.

    .. note::  It is advisable to use :meth:`PySide.QtGui.QPainter.setWorldTransform` instead of this function to preserve the properties of perspective transformations.

    If ``combine`` is true, then ``matrix`` is combined with the current transformation matrix; otherwise ``matrix`` replaces the current transformation matrix.

    If ``matrix`` is the identity matrix and ``combine`` is false, this function calls setWorldMatrixEnabled(false). (The identity matrix is the matrix where :meth:`QMatrix.m11()<PySide.QtGui.QMatrix.m11>` and :meth:`QMatrix.m22()<PySide.QtGui.QMatrix.m22>` are 1.0 and the rest are 0.0.)

    The following functions can transform the coordinate system without using a :class:`PySide.QtGui.QMatrix` :


    * :meth:`PySide.QtGui.QPainter.translate`
    * :meth:`PySide.QtGui.QPainter.scale`
    * :meth:`PySide.QtGui.QPainter.shear`
    * :meth:`PySide.QtGui.QPainter.rotate`

    They operate on the painter's :meth:`PySide.QtGui.QPainter.worldMatrix` and are implemented like this:

    ::

        def rotate(self, angle):
            matrix = QMatrix()
            matrix.rotate(angle)
            setWorldMatrix(matrix, true)


    Note that when using :meth:`PySide.QtGui.QPainter.setWorldMatrix` function you should always have ``combine`` be true when you are drawing into a :class:`PySide.QtGui.QPicture` . Otherwise it may not be possible to replay the picture with additional transformations; using the :meth:`PySide.QtGui.QPainter.translate` , :meth:`PySide.QtGui.QPainter.scale` , etc. convenience functions is safe.

    For more information about the coordinate system, transformations and window-viewport conversion, see :ref:`Coordinate System<coordsys.html>` .

    .. seealso::  :meth:`PySide.QtGui.QPainter.worldMatrix`  :meth:`PySide.QtGui.QPainter.setWorldTransform`  :class:`PySide.QtGui.QTransform` 


.. method:: PySide.QtGui.QPainter.setWorldMatrixEnabled(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    Enables transformations if ``enable`` is true, or disables transformations if ``enable`` is false. The world transformation matrix is not changed.

    .. seealso::  :meth:`PySide.QtGui.QPainter.worldMatrixEnabled`  :meth:`PySide.QtGui.QPainter.worldTransform`  :class:`Coordinate Transformations<~PySide.QtGui.QPainter#Coordinate Transformations>` 


.. method:: PySide.QtGui.QPainter.setWorldTransform(matrix[, combine=false])


    :param matrix: :class:`PySide.QtGui.QTransform`
    :param combine: :class:`PySide.QtCore.bool`




    Sets the world transformation matrix. If ``combine`` is true, the specified ``matrix`` is combined with the current matrix; otherwise it replaces the current matrix.

    .. seealso::  :meth:`PySide.QtGui.QPainter.worldTransform`  :meth:`PySide.QtGui.QPainter.transform`  :meth:`PySide.QtGui.QPainter.setTransform` 


.. method:: PySide.QtGui.QPainter.shear(sh, sv)


    :param sh: :class:`PySide.QtCore.qreal`
    :param sv: :class:`PySide.QtCore.qreal`




    Shears the coordinate system by (``sh`` , ``sv`` ).

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldTransform`  :class:`Coordinate Transformations<~PySide.QtGui.QPainter#Coordinate Transformations>` 


.. method:: PySide.QtGui.QPainter.strokePath(path, pen)


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param pen: :class:`PySide.QtGui.QPen`




    Draws the outline (strokes) the path ``path`` with the pen specified by ``pen``\

    .. seealso::  :meth:`PySide.QtGui.QPainter.fillPath`  :class:`Drawing<~PySide.QtGui.QPainter#Drawing>` 


.. method:: PySide.QtGui.QPainter.testRenderHint(hint)


    :param hint: :attr:`PySide.QtGui.QPainter.RenderHint`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if ``hint`` is set; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.renderHints`  :meth:`PySide.QtGui.QPainter.setRenderHint` 


.. method:: PySide.QtGui.QPainter.transform()


    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the world transformation matrix.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setTransform`  :meth:`PySide.QtGui.QPainter.worldTransform` 


.. method:: PySide.QtGui.QPainter.translate(offset)


    :param offset: :class:`PySide.QtCore.QPointF`




    Translates the coordinate system by the given ``offset`` ; i.e. the given ``offset`` is added to points.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldTransform`  :class:`Coordinate Transformations<~PySide.QtGui.QPainter#Coordinate Transformations>` 


.. method:: PySide.QtGui.QPainter.translate(offset)


    :param offset: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Translates the coordinate system by the given ``offset`` .



.. method:: PySide.QtGui.QPainter.translate(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    Translates the coordinate system by the vector (``dx`` , ``dy`` ).



.. method:: PySide.QtGui.QPainter.viewTransformEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if view transformation is enabled; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setViewTransformEnabled`  :meth:`PySide.QtGui.QPainter.worldTransform` 


.. method:: PySide.QtGui.QPainter.viewport()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns the viewport rectangle.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setViewport`  :meth:`PySide.QtGui.QPainter.setViewTransformEnabled` 


.. method:: PySide.QtGui.QPainter.window()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns the window rectangle.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWindow`  :meth:`PySide.QtGui.QPainter.setViewTransformEnabled` 


.. method:: PySide.QtGui.QPainter.worldMatrix()


    :rtype: :class:`PySide.QtGui.QMatrix`




    Returns the world transformation matrix.

    It is advisable to use :meth:`PySide.QtGui.QPainter.worldTransform` because :meth:`PySide.QtGui.QPainter.worldMatrix` does not preserve the properties of perspective transformations.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldMatrix`  :class:`Coordinate Transformations<~PySide.QtGui.QPainter#Coordinate Transformations>`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.worldMatrixEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if world transformation is enabled; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldMatrixEnabled`  :meth:`PySide.QtGui.QPainter.worldTransform`  :ref:`Coordinate System<coordsys.html>` 


.. method:: PySide.QtGui.QPainter.worldTransform()


    :rtype: :class:`PySide.QtGui.QTransform`




    Returns the world transformation matrix.

    .. seealso::  :meth:`PySide.QtGui.QPainter.setWorldTransform` 



