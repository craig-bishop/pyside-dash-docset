.. module:: PySide.QtGui
.. _QMatrix:

QMatrix
*******

.. inheritance-diagram:: QMatrix
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtGui.QMatrix.__eq__>` (arg__1)
*    def :meth:`__imul__<PySide.QtGui.QMatrix.__imul__>` (arg__1)
*    def :meth:`__mul__<PySide.QtGui.QMatrix.__mul__>` (o)
*    def :meth:`__ne__<PySide.QtGui.QMatrix.__ne__>` (arg__1)
*    def :meth:`__reduce__<PySide.QtGui.QMatrix.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtGui.QMatrix.__repr__>` ()
*    def :meth:`det<PySide.QtGui.QMatrix.det>` ()
*    def :meth:`determinant<PySide.QtGui.QMatrix.determinant>` ()
*    def :meth:`dx<PySide.QtGui.QMatrix.dx>` ()
*    def :meth:`dy<PySide.QtGui.QMatrix.dy>` ()
*    def :meth:`inverted<PySide.QtGui.QMatrix.inverted>` ()
*    def :meth:`isIdentity<PySide.QtGui.QMatrix.isIdentity>` ()
*    def :meth:`isInvertible<PySide.QtGui.QMatrix.isInvertible>` ()
*    def :meth:`m11<PySide.QtGui.QMatrix.m11>` ()
*    def :meth:`m12<PySide.QtGui.QMatrix.m12>` ()
*    def :meth:`m21<PySide.QtGui.QMatrix.m21>` ()
*    def :meth:`m22<PySide.QtGui.QMatrix.m22>` ()
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (a)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (a)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (l)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (l)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (p)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (p)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (p)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (r)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (x, y)
*    def :meth:`map<PySide.QtGui.QMatrix.map>` (x, y)
*    def :meth:`mapRect<PySide.QtGui.QMatrix.mapRect>` (arg__1)
*    def :meth:`mapRect<PySide.QtGui.QMatrix.mapRect>` (arg__1)
*    def :meth:`mapToPolygon<PySide.QtGui.QMatrix.mapToPolygon>` (r)
*    def :meth:`reset<PySide.QtGui.QMatrix.reset>` ()
*    def :meth:`rotate<PySide.QtGui.QMatrix.rotate>` (a)
*    def :meth:`scale<PySide.QtGui.QMatrix.scale>` (sx, sy)
*    def :meth:`setMatrix<PySide.QtGui.QMatrix.setMatrix>` (m11, m12, m21, m22, dx, dy)
*    def :meth:`shear<PySide.QtGui.QMatrix.shear>` (sh, sv)
*    def :meth:`translate<PySide.QtGui.QMatrix.translate>` (dx, dy)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QMatrix` class specifies 2D transformations of a coordinate system.

    A matrix specifies how to translate, scale, shear or rotate the coordinate system, and is typically used when rendering graphics. :class:`PySide.QtGui.QMatrix` , in contrast to :class:`PySide.QtGui.QTransform` , does not allow perspective transformations. :class:`PySide.QtGui.QTransform` is the recommended transformation class in Qt.

    A :class:`PySide.QtGui.QMatrix` object can be built using the :meth:`PySide.QtGui.QMatrix.setMatrix` , :meth:`PySide.QtGui.QMatrix.scale` , :meth:`PySide.QtGui.QMatrix.rotate` , :meth:`PySide.QtGui.QMatrix.translate` and :meth:`PySide.QtGui.QMatrix.shear` functions. Alternatively, it can be built by applying :class:`basic matrix operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` . The matrix can also be defined when constructed, and it can be reset to the identity matrix (the default) using the :meth:`PySide.QtGui.QMatrix.reset` function.

    The :class:`PySide.QtGui.QMatrix` class supports mapping of graphic primitives: A given point, line, polygon, region, or painter path can be mapped to the coordinate system defined by *this* matrix using the :meth:`PySide.QtGui.QMatrix.map` function. In case of a rectangle, its coordinates can be transformed using the :meth:`PySide.QtGui.QMatrix.mapRect` function. A rectangle can also be transformed into a *polygon* (mapped to the coordinate system defined by *this* matrix), using the :meth:`PySide.QtGui.QMatrix.mapToPolygon` function.

    :class:`PySide.QtGui.QMatrix` provides the :meth:`PySide.QtGui.QMatrix.isIdentity` function which returns true if the matrix is the identity matrix, and the :meth:`PySide.QtGui.QMatrix.isInvertible` function which returns true if the matrix is non-singular (i.e. AB = BA = I). The :meth:`PySide.QtGui.QMatrix.inverted` function returns an inverted copy of *this* matrix if it is invertible (otherwise it returns the identity matrix). In addition, :class:`PySide.QtGui.QMatrix` provides the :meth:`PySide.QtGui.QMatrix.determinant` function returning the matrix's determinant.

    Finally, the :class:`PySide.QtGui.QMatrix` class supports matrix multiplication, and objects of the class can be streamed as well as compared.

    .. _PySide.QtGui.QMatrix_rendering-graphics:



Rendering Graphics
^^^^^^^^^^^^^^^^^^

    When rendering graphics, the matrix defines the transformations but the actual transformation is performed by the drawing routines in :class:`PySide.QtGui.QPainter` .

    By default, :class:`PySide.QtGui.QPainter` operates on the associated device's own coordinate system. The standard coordinate system of a :class:`PySide.QtGui.QPaintDevice` has its origin located at the top-left position. The *x* values increase to the right; *y* values increase downward. For a complete description, see the :ref:`coordinate system<coordsys.html>` documentation.

    :class:`PySide.QtGui.QPainter` has functions to translate, scale, shear and rotate the coordinate system without using a :class:`PySide.QtGui.QMatrix` . For example:

    +----------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qmatrix-simpletransformation.png|::                                                       |
    |                                                                                                                      |                                                         |
    |                                                                                                                      |        def paintEvent(self, event):                     |
    |                                                                                                                      |            painter = QPainter(self)                     |
    |                                                                                                                      |            painter.setPen(QPen(Qt.blue, 1, Qt.DashLine))|
    |                                                                                                                      |            painter.drawRect(0, 0, 100, 100)             |
    |                                                                                                                      |                                                         |
    |                                                                                                                      |            painter.rotate(45)                           |
    |                                                                                                                      |                                                         |
    |                                                                                                                      |            painter.setFont(QFont("Helvetica", 24))      |
    |                                                                                                                      |            painter.setPen(QPen(Qt.black, 1))            |
    |                                                                                                                      |            painter.drawText(20, 10, "QMatrix")          |
    +----------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------+

    Although these functions are very convenient, it can be more efficient to build a :class:`PySide.QtGui.QMatrix` and call :meth:`QPainter.setMatrix()<PySide.QtGui.QPainter.setMatrix>` if you want to perform more than a single transform operation. For example:

    +------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qmatrix-combinedtransformation.png|::                                                       |
    |                                                                                                                        |                                                         |
    |                                                                                                                        |        def paintEvent(self, event)                      |
    |                                                                                                                        |                                                         |
    |                                                                                                                        |            painter = QPainter(self)                     |
    |                                                                                                                        |            painter.setPen(QPen(Qt.blue, 1, Qt.DashLine))|
    |                                                                                                                        |            painter.drawRect(0, 0, 100, 100)             |
    |                                                                                                                        |                                                         |
    |                                                                                                                        |            matrix = QMatrix()                           |
    |                                                                                                                        |            matrix.translate(50, 50)                     |
    |                                                                                                                        |            matrix.rotate(45)                            |
    |                                                                                                                        |            matrix.scale(0.5, 1.0)                       |
    |                                                                                                                        |            painter.setMatrix(matrix)                    |
    |                                                                                                                        |                                                         |
    |                                                                                                                        |            painter.setFont(QFont("Helvetica", 24))      |
    |                                                                                                                        |            painter.setPen(QPen(Qt.black, 1))            |
    |                                                                                                                        |            painter.drawText(20, 10, "QMatrix")          |
    +------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------+

    .. _PySide.QtGui.QMatrix_basic-matrix-operations:



Basic Matrix Operations
^^^^^^^^^^^^^^^^^^^^^^^

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qmatrix-representation.png

    A :class:`PySide.QtGui.QMatrix` object contains a 3 x 3 matrix. The ``dx`` and ``dy`` elements specify horizontal and vertical translation. The ``m11`` and ``m22`` elements specify horizontal and vertical scaling. And finally, the ``m21`` and ``m12`` elements specify horizontal and vertical *shearing* .

    :class:`PySide.QtGui.QMatrix` transforms a point in the plane to another point using the following formulas:

    ::

        x' = m11*x + m21*y + dx
        y' = m22*y + m12*x + dy


    The point *(x, y)* is the original point, and *(x', y')* is the transformed point. *(x', y')* can be transformed back to *(x, y)* by performing the same operation on the :meth:`PySide.QtGui.QMatrix.inverted` matrix.

    The various matrix elements can be set when constructing the matrix, or by using the :meth:`PySide.QtGui.QMatrix.setMatrix` function later on. They can also be manipulated using the :meth:`PySide.QtGui.QMatrix.translate` , :meth:`PySide.QtGui.QMatrix.rotate` , :meth:`PySide.QtGui.QMatrix.scale` and :meth:`PySide.QtGui.QMatrix.shear` convenience functions, The currently set values can be retrieved using the :meth:`PySide.QtGui.QMatrix.m11` , :meth:`PySide.QtGui.QMatrix.m12` , :meth:`PySide.QtGui.QMatrix.m21` , :meth:`PySide.QtGui.QMatrix.m22` , :meth:`PySide.QtGui.QMatrix.dx` and :meth:`PySide.QtGui.QMatrix.dy` functions.

    Translation is the simplest transformation. Setting ``dx`` and ``dy`` will move the coordinate system ``dx`` units along the X axis and ``dy`` units along the Y axis. Scaling can be done by setting ``m11`` and ``m22`` . For example, setting ``m11`` to 2 and ``m22`` to 1.5 will double the height and increase the width by 50%. The identity matrix has ``m11`` and ``m22`` set to 1 (all others are set to 0) mapping a point to itself. Shearing is controlled by ``m12`` and ``m21`` . Setting these elements to values different from zero will twist the coordinate system. Rotation is achieved by carefully setting both the shearing factors and the scaling factors.

    Here's the combined transformations example using basic matrix operations:

    +------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qmatrix-combinedtransformation.png|::                                                                      |
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |        def paintEvent(self, event)                                     |
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |            pi = 3.14                                                   |
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |            a    = pi/180 * 45.0                                        |
    |                                                                                                                        |            sina = sin(a)                                               |
    |                                                                                                                        |            cosa = cos(a)                                               |
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |            translationMatrix = QMatrix(1, 0, 0, 1, 50.0, 50.0)         |
    |                                                                                                                        |            rotationMatrix = QMatrix(cosa, sina, -sina, cosa, 0, 0)     |
    |                                                                                                                        |            scalingMatrix = QMatrix(0.5, 0, 0, 1.0, 0, 0)               |
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |            matrix = QMatrix()                                          |
    |                                                                                                                        |            matrix =  scalingMatrix * rotationMatrix * translationMatrix|
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |            painter = QPainter(self)                                    |
    |                                                                                                                        |            painter.setPen(QPen(Qt.blue, 1, Qt::DashLine))              |
    |                                                                                                                        |            painter.drawRect(0, 0, 100, 100)                            |
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |            painter.setMatrix(matrix)                                   |
    |                                                                                                                        |                                                                        |
    |                                                                                                                        |            painter.setFont(QFont("Helvetica", 24))                     |
    |                                                                                                                        |            painter.setPen(QPen(Qt.black, 1))                           |
    |                                                                                                                        |            painter.drawText(20, 10, "QMatrix")                         |
    +------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QPainter`  :class:`PySide.QtGui.QTransform`  :ref:`Coordinate System<coordsys.html>`  :ref:`Affine Transformations Demo<demos/affine>`  :ref:`Transformations Example<painting/transformations>` 

.. class:: QMatrix()
           QMatrix(matrix)
           QMatrix(m11, m12, m21, m22, dx, dy)

    :param matrix: :class:`PySide.QtGui.QMatrix`
    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`
    :param m21: :class:`PySide.QtCore.qreal`
    :param m11: :class:`PySide.QtCore.qreal`
    :param m22: :class:`PySide.QtCore.qreal`
    :param m12: :class:`PySide.QtCore.qreal`

    Constructs an identity matrix.

    All elements are set to zero except ``m11`` and ``m22`` (specifying the scale), which are set to 1.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.reset` 

    Constructs a matrix that is a copy of the given ``matrix`` .


    Constructs a matrix with the elements, ``m11`` , ``m12`` , ``m21`` , ``m22`` , ``dx`` and ``dy`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix.setMatrix` 

.. method:: PySide.QtGui.QMatrix.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QMatrix.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QMatrix.det()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the matrix's determinant.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.determinant` 


.. method:: PySide.QtGui.QMatrix.determinant()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the matrix's determinant.



.. method:: PySide.QtGui.QMatrix.dx()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the horizontal translation factor.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.translate`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.dy()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the vertical translation factor.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.translate`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.inverted()


    :rtype: PyTuple




    Returns an inverted copy of this matrix.

    If the matrix is singular (not invertible), the returned matrix is the identity matrix. If ``invertible`` is valid (i.e. not 0), its value is set to true if the matrix is invertible, otherwise it is set to false.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.isInvertible` 


.. method:: PySide.QtGui.QMatrix.isIdentity()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the matrix is the identity matrix, otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.reset` 


.. method:: PySide.QtGui.QMatrix.isInvertible()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the matrix is invertible, otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.inverted` 


.. method:: PySide.QtGui.QMatrix.m11()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the horizontal scaling factor.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.scale`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.m12()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the vertical shearing factor.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.shear`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.m21()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the horizontal shearing factor.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.shear`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.m22()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the vertical scaling factor.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.scale`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.map(a)


    :param a: :class:`PySide.QtGui.QPolygonF`
    :rtype: :class:`PySide.QtGui.QPolygonF`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtGui.QPolygonF` object that is a copy of the given ``polygon`` , mapped into the coordinate system defined by this matrix.



.. method:: PySide.QtGui.QMatrix.map(r)


    :param r: :class:`PySide.QtGui.QRegion`
    :rtype: :class:`PySide.QtGui.QRegion`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtGui.QRegion` object that is a copy of the given ``region`` , mapped into the coordinate system defined by this matrix.

    Calling this method can be rather expensive if rotations or shearing are used.



.. method:: PySide.QtGui.QMatrix.map(x, y)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`




    Maps the given coordinates ``x`` and ``y`` into the coordinate system defined by this matrix. The resulting values are put in \*``tx`` and \*``ty`` , respectively.

    The coordinates are transformed using the following formulas:

    ::

        x' = m11*x + m21*y + dx
        y' = m22*y + m12*x + dy


    The point (x, y) is the original point, and (x', y') is the transformed point.

    .. seealso::  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.map(a)


    :param a: :class:`PySide.QtGui.QPolygon`
    :rtype: :class:`PySide.QtGui.QPolygon`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtGui.QPolygon` object that is a copy of the given ``polygon`` , mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.



.. method:: PySide.QtGui.QMatrix.map(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Maps the given coordinates ``x`` and ``y`` into the coordinate system defined by this matrix. The resulting values are put in \*``tx`` and \*``ty`` , respectively. Note that the transformed coordinates are rounded to the nearest integer.



.. method:: PySide.QtGui.QMatrix.map(p)


    :param p: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtCore.QPointF`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtCore.QPointF` object that is a copy of the given ``point`` , mapped into the coordinate system defined by this matrix.



.. method:: PySide.QtGui.QMatrix.map(l)


    :param l: :class:`PySide.QtCore.QLine`
    :rtype: :class:`PySide.QtCore.QLine`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtCore.QLine` object that is a copy of the given ``line`` , mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.



.. method:: PySide.QtGui.QMatrix.map(l)


    :param l: :class:`PySide.QtCore.QLineF`
    :rtype: :class:`PySide.QtCore.QLineF`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtCore.QLineF` object that is a copy of the given ``line`` , mapped into the coordinate system defined by this matrix.



.. method:: PySide.QtGui.QMatrix.map(p)


    :param p: :class:`PySide.QtGui.QPainterPath`
    :rtype: :class:`PySide.QtGui.QPainterPath`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtGui.QPainterPath` object that is a copy of the given ``path`` , mapped into the coordinate system defined by this matrix.



.. method:: PySide.QtGui.QMatrix.map(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.QPoint`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtCore.QPoint` object that is a copy of the given ``point`` , mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.



.. method:: PySide.QtGui.QMatrix.mapRect(arg__1)


    :param arg__1: :class:`PySide.QtCore.QRectF`
    :rtype: :class:`PySide.QtCore.QRectF`




    Creates and returns a :class:`PySide.QtCore.QRectF` object that is a copy of the given ``rectangle`` , mapped into the coordinate system defined by this matrix.

    The rectangle's coordinates are transformed using the following formulas:

    ::

        x' = m11*x + m21*y + dx
        y' = m22*y + m12*x + dy


    If rotation or shearing has been specified, this function returns the *bounding* rectangle. To retrieve the exact region the given ``rectangle`` maps to, use the :meth:`PySide.QtGui.QMatrix.mapToPolygon` function instead.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.mapToPolygon`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.mapRect(arg__1)


    :param arg__1: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtCore.QRect`




    This is an overloaded function.

    Creates and returns a :class:`PySide.QtCore.QRect` object that is a copy of the given ``rectangle`` , mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.



.. method:: PySide.QtGui.QMatrix.mapToPolygon(r)


    :param r: :class:`PySide.QtCore.QRect`
    :rtype: :class:`PySide.QtGui.QPolygon`




    Creates and returns a :class:`PySide.QtGui.QPolygon` representation of the given ``rectangle`` , mapped into the coordinate system defined by this matrix.

    The rectangle's coordinates are transformed using the following formulas:

    ::

        x' = m11*x + m21*y + dx
        y' = m22*y + m12*x + dy


    Polygons and rectangles behave slightly differently when transformed (due to integer rounding), so ``matrix.map(QPolygon(rectangle))`` is not always the same as ``matrix.mapToPolygon(rectangle)`` .

    .. seealso::  :meth:`PySide.QtGui.QMatrix.mapRect`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.__ne__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this matrix is not equal to the given ``matrix`` , otherwise returns false.



.. method:: PySide.QtGui.QMatrix.__mul__(o)


    :param o: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtGui.QMatrix`




    Returns the result of multiplying this matrix by the given ``matrix`` .

    Note that matrix multiplication is not commutative, i.e. a\*b != b\*a.



.. method:: PySide.QtGui.QMatrix.__imul__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtGui.QMatrix`




    This is an overloaded function.

    Returns the result of multiplying this matrix by the given ``matrix`` .



.. method:: PySide.QtGui.QMatrix.__eq__(arg__1)


    :param arg__1: :class:`PySide.QtGui.QMatrix`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this matrix is equal to the given ``matrix`` , otherwise returns false.



.. method:: PySide.QtGui.QMatrix.reset()






    Resets the matrix to an identity matrix, i.e. all elements are set to zero, except ``m11`` and ``m22`` (specifying the scale) which are set to 1.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.QMatrix`  :meth:`PySide.QtGui.QMatrix.isIdentity`  :class:`Basic Matrix Operations<~PySide.QtGui.QMatrix#Basic Matrix Operations>` 


.. method:: PySide.QtGui.QMatrix.rotate(a)


    :param a: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix`




    Rotates the coordinate system the given ``degrees`` counterclockwise.

    Note that if you apply a :class:`PySide.QtGui.QMatrix` to a point defined in widget coordinates, the direction of the rotation will be clockwise because the y-axis points downwards.

    Returns a reference to the matrix.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.setMatrix` 


.. method:: PySide.QtGui.QMatrix.scale(sx, sy)


    :param sx: :class:`PySide.QtCore.qreal`
    :param sy: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix`




    Scales the coordinate system by ``sx`` horizontally and ``sy`` vertically, and returns a reference to the matrix.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.setMatrix` 


.. method:: PySide.QtGui.QMatrix.setMatrix(m11, m12, m21, m22, dx, dy)


    :param m11: :class:`PySide.QtCore.qreal`
    :param m12: :class:`PySide.QtCore.qreal`
    :param m21: :class:`PySide.QtCore.qreal`
    :param m22: :class:`PySide.QtCore.qreal`
    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`




    Sets the matrix elements to the specified values, ``m11`` , ``m12`` , ``m21`` , ``m22`` , ``dx`` and ``dy`` .

    Note that this function replaces the previous values. :class:`PySide.QtGui.QMatrix` provide the :meth:`PySide.QtGui.QMatrix.translate` , :meth:`PySide.QtGui.QMatrix.rotate` , :meth:`PySide.QtGui.QMatrix.scale` and :meth:`PySide.QtGui.QMatrix.shear` convenience functions to manipulate the various matrix elements based on the currently defined coordinate system.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.QMatrix` 


.. method:: PySide.QtGui.QMatrix.shear(sh, sv)


    :param sh: :class:`PySide.QtCore.qreal`
    :param sv: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix`




    Shears the coordinate system by ``sh`` horizontally and ``sv`` vertically, and returns a reference to the matrix.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.setMatrix` 


.. method:: PySide.QtGui.QMatrix.translate(dx, dy)


    :param dx: :class:`PySide.QtCore.qreal`
    :param dy: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QMatrix`




    Moves the coordinate system ``dx`` along the x axis and ``dy`` along the y axis, and returns a reference to the matrix.

    .. seealso::  :meth:`PySide.QtGui.QMatrix.setMatrix` 



