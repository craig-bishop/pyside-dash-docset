.. module:: PySide.QtGui
.. _QTabBar:

QTabBar
*******

.. inheritance-diagram:: QTabBar
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addTab<PySide.QtGui.QTabBar.addTab>` (icon, text)
*    def :meth:`addTab<PySide.QtGui.QTabBar.addTab>` (text)
*    def :meth:`count<PySide.QtGui.QTabBar.count>` ()
*    def :meth:`currentIndex<PySide.QtGui.QTabBar.currentIndex>` ()
*    def :meth:`documentMode<PySide.QtGui.QTabBar.documentMode>` ()
*    def :meth:`drawBase<PySide.QtGui.QTabBar.drawBase>` ()
*    def :meth:`elideMode<PySide.QtGui.QTabBar.elideMode>` ()
*    def :meth:`expanding<PySide.QtGui.QTabBar.expanding>` ()
*    def :meth:`iconSize<PySide.QtGui.QTabBar.iconSize>` ()
*    def :meth:`initStyleOption<PySide.QtGui.QTabBar.initStyleOption>` (option, tabIndex)
*    def :meth:`insertTab<PySide.QtGui.QTabBar.insertTab>` (index, icon, text)
*    def :meth:`insertTab<PySide.QtGui.QTabBar.insertTab>` (index, text)
*    def :meth:`isMovable<PySide.QtGui.QTabBar.isMovable>` ()
*    def :meth:`isTabEnabled<PySide.QtGui.QTabBar.isTabEnabled>` (index)
*    def :meth:`moveTab<PySide.QtGui.QTabBar.moveTab>` (from, to)
*    def :meth:`removeTab<PySide.QtGui.QTabBar.removeTab>` (index)
*    def :meth:`selectionBehaviorOnRemove<PySide.QtGui.QTabBar.selectionBehaviorOnRemove>` ()
*    def :meth:`setDocumentMode<PySide.QtGui.QTabBar.setDocumentMode>` (set)
*    def :meth:`setDrawBase<PySide.QtGui.QTabBar.setDrawBase>` (drawTheBase)
*    def :meth:`setElideMode<PySide.QtGui.QTabBar.setElideMode>` (arg__1)
*    def :meth:`setExpanding<PySide.QtGui.QTabBar.setExpanding>` (enabled)
*    def :meth:`setIconSize<PySide.QtGui.QTabBar.setIconSize>` (size)
*    def :meth:`setMovable<PySide.QtGui.QTabBar.setMovable>` (movable)
*    def :meth:`setSelectionBehaviorOnRemove<PySide.QtGui.QTabBar.setSelectionBehaviorOnRemove>` (behavior)
*    def :meth:`setShape<PySide.QtGui.QTabBar.setShape>` (shape)
*    def :meth:`setTabButton<PySide.QtGui.QTabBar.setTabButton>` (index, position, widget)
*    def :meth:`setTabData<PySide.QtGui.QTabBar.setTabData>` (index, data)
*    def :meth:`setTabEnabled<PySide.QtGui.QTabBar.setTabEnabled>` (index, arg__2)
*    def :meth:`setTabIcon<PySide.QtGui.QTabBar.setTabIcon>` (index, icon)
*    def :meth:`setTabText<PySide.QtGui.QTabBar.setTabText>` (index, text)
*    def :meth:`setTabTextColor<PySide.QtGui.QTabBar.setTabTextColor>` (index, color)
*    def :meth:`setTabToolTip<PySide.QtGui.QTabBar.setTabToolTip>` (index, tip)
*    def :meth:`setTabWhatsThis<PySide.QtGui.QTabBar.setTabWhatsThis>` (index, text)
*    def :meth:`setTabsClosable<PySide.QtGui.QTabBar.setTabsClosable>` (closable)
*    def :meth:`setUsesScrollButtons<PySide.QtGui.QTabBar.setUsesScrollButtons>` (useButtons)
*    def :meth:`shape<PySide.QtGui.QTabBar.shape>` ()
*    def :meth:`tabAt<PySide.QtGui.QTabBar.tabAt>` (pos)
*    def :meth:`tabButton<PySide.QtGui.QTabBar.tabButton>` (index, position)
*    def :meth:`tabData<PySide.QtGui.QTabBar.tabData>` (index)
*    def :meth:`tabIcon<PySide.QtGui.QTabBar.tabIcon>` (index)
*    def :meth:`tabRect<PySide.QtGui.QTabBar.tabRect>` (index)
*    def :meth:`tabText<PySide.QtGui.QTabBar.tabText>` (index)
*    def :meth:`tabTextColor<PySide.QtGui.QTabBar.tabTextColor>` (index)
*    def :meth:`tabToolTip<PySide.QtGui.QTabBar.tabToolTip>` (index)
*    def :meth:`tabWhatsThis<PySide.QtGui.QTabBar.tabWhatsThis>` (index)
*    def :meth:`tabsClosable<PySide.QtGui.QTabBar.tabsClosable>` ()
*    def :meth:`usesScrollButtons<PySide.QtGui.QTabBar.usesScrollButtons>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`tabInserted<PySide.QtGui.QTabBar.tabInserted>` (index)
*    def :meth:`tabLayoutChange<PySide.QtGui.QTabBar.tabLayoutChange>` ()
*    def :meth:`tabRemoved<PySide.QtGui.QTabBar.tabRemoved>` (index)
*    def :meth:`tabSizeHint<PySide.QtGui.QTabBar.tabSizeHint>` (index)


Slots
^^^^^
.. container:: function_list

*    def :meth:`setCurrentIndex<PySide.QtGui.QTabBar.setCurrentIndex>` (index)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`currentChanged<PySide.QtGui.QTabBar.currentChanged>` (index)
*    def :meth:`tabCloseRequested<PySide.QtGui.QTabBar.tabCloseRequested>` (index)
*    def :meth:`tabMoved<PySide.QtGui.QTabBar.tabMoved>` (from, to)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTabBar` class provides a tab bar, e.g. for use in tabbed dialogs.

    :class:`PySide.QtGui.QTabBar` is straightforward to use; it draws the tabs using one of the predefined :attr:`shapes<QTabBar.Shape>` , and emits a signal when a tab is selected. It can be subclassed to tailor the look and feel. Qt also provides a ready-made :class:`PySide.QtGui.QTabWidget` .

    Each tab has a :meth:`PySide.QtGui.QTabBar.tabText` , an optional :meth:`PySide.QtGui.QTabBar.tabIcon` , an optional :meth:`PySide.QtGui.QTabBar.tabToolTip` , optional :meth:`PySide.QtGui.QTabBar.tabWhatsThis` and optional :meth:`PySide.QtGui.QTabBar.tabData` . The tabs's attributes can be changed with :meth:`PySide.QtGui.QTabBar.setTabText` , :meth:`PySide.QtGui.QTabBar.setTabIcon` , :meth:`PySide.QtGui.QTabBar.setTabToolTip` , setTabWhatsThis and :meth:`PySide.QtGui.QTabBar.setTabData` . Each tabs can be enabled or disabled individually with :meth:`PySide.QtGui.QTabBar.setTabEnabled` .

    Each tab can display text in a distinct color. The current text color for a tab can be found with the :meth:`PySide.QtGui.QTabBar.tabTextColor` function. Set the text color for a particular tab with :meth:`PySide.QtGui.QTabBar.setTabTextColor` .

    Tabs are added using :meth:`PySide.QtGui.QTabBar.addTab` , or inserted at particular positions using :meth:`PySide.QtGui.QTabBar.insertTab` . The total number of tabs is given by :meth:`PySide.QtGui.QTabBar.count` . Tabs can be removed from the tab bar with :meth:`PySide.QtGui.QTabBar.removeTab` . Combining :meth:`PySide.QtGui.QTabBar.removeTab` and :meth:`PySide.QtGui.QTabBar.insertTab` allows you to move tabs to different positions.

    The :meth:`PySide.QtGui.QTabBar.shape` property defines the tabs' appearance. The choice of shape is a matter of taste, although tab dialogs (for preferences and similar) invariably use :attr:`RoundedNorth<QTabBar.Shape>` . Tab controls in windows other than dialogs almost always use either :attr:`RoundedSouth<QTabBar.Shape>` or :attr:`TriangularSouth<QTabBar.Shape>` . Many spreadsheets and other tab controls in which all the pages are essentially similar use :attr:`TriangularSouth<QTabBar.Shape>` , whereas :attr:`RoundedSouth<QTabBar.Shape>` is used mostly when the pages are different (e.g. a multi-page tool palette). The default in :class:`PySide.QtGui.QTabBar` is :attr:`RoundedNorth<QTabBar.Shape>` .

    The most important part of :class:`PySide.QtGui.QTabBar` 's API is the :meth:`PySide.QtGui.QTabBar.currentChanged` signal. This is emitted whenever the current tab changes (even at startup, when the current tab changes from 'none'). There is also a slot, :meth:`PySide.QtGui.QTabBar.setCurrentIndex` , which can be used to select a tab programmatically. The function :meth:`PySide.QtGui.QTabBar.currentIndex` returns the index of the current tab, :meth:`PySide.QtGui.QTabBar.count` holds the number of tabs.

    :class:`PySide.QtGui.QTabBar` creates automatic mnemonic keys in the manner of :class:`PySide.QtGui.QAbstractButton` ; e.g. if a tab's label is "&Graphics", Alt+G becomes a shortcut key for switching to that tab.

    The following virtual functions may need to be reimplemented in order to tailor the look and feel or store extra data with each tab:


    * :meth:`PySide.QtGui.QTabBar.tabSizeHint` calcuates the size of a tab.
    * :meth:`PySide.QtGui.QTabBar.tabInserted` notifies that a new tab was added.
    * :meth:`PySide.QtGui.QTabBar.tabRemoved` notifies that a tab was removed.
    * :meth:`PySide.QtGui.QTabBar.tabLayoutChange` notifies that the tabs have been re-laid out.
    * :meth:`PySide.QtGui.QTabBar.paintEvent` paints all tabs.

    For subclasses, you might also need the :meth:`PySide.QtGui.QTabBar.tabRect` functions which returns the visual geometry of a single tab.

    +--------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-tabbar.png          |A tab bar shown in the Plastique widget style.          |
    +--------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-tabbar-truncated.png|A truncated tab bar shown in the Plastique widget style.|
    +--------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QTabWidget` 

.. class:: QTabBar([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Creates a new tab bar with the given ``parent`` .


.. attribute:: PySide.QtGui.QTabBar.SelectionBehavior

    This enum type lists the behavior of :class:`PySide.QtGui.QTabBar` when a tab is removed and the tab being removed is also the current tab.

    +-------------------------+-----------------------------------------------------+
    |Constant                 |Description                                          |
    +=========================+=====================================================+
    |QTabBar.SelectLeftTab    |Select the tab to the left of the one being removed. |
    +-------------------------+-----------------------------------------------------+
    |QTabBar.SelectRightTab   |Select the tab to the right of the one being removed.|
    +-------------------------+-----------------------------------------------------+
    |QTabBar.SelectPreviousTab|Select the previously selected tab.                  |
    +-------------------------+-----------------------------------------------------+


.. attribute:: PySide.QtGui.QTabBar.ButtonPosition

    This enum type lists the location of the widget on a tab.

    +-----------------+----------------------+
    |Constant         |Description           |
    +=================+======================+
    |QTabBar.LeftSide |Left side of the tab. |
    +-----------------+----------------------+
    |QTabBar.RightSide|Right side of the tab.|
    +-----------------+----------------------+


.. attribute:: PySide.QtGui.QTabBar.Shape

    This enum type lists the built-in shapes supported by :class:`PySide.QtGui.QTabBar` . Treat these as hints as some styles may not render some of the shapes. However, position should be honored.

    +-----------------------+---------------------------------------------------------------------------+
    |Constant               |Description                                                                |
    +=======================+===========================================================================+
    |QTabBar.RoundedNorth   |The normal rounded look above the pages                                    |
    +-----------------------+---------------------------------------------------------------------------+
    |QTabBar.RoundedSouth   |The normal rounded look below the pages                                    |
    +-----------------------+---------------------------------------------------------------------------+
    |QTabBar.RoundedWest    |The normal rounded look on the left side of the pages                      |
    +-----------------------+---------------------------------------------------------------------------+
    |QTabBar.RoundedEast    |The normal rounded look on the right side the pages                        |
    +-----------------------+---------------------------------------------------------------------------+
    |QTabBar.TriangularNorth|Triangular tabs above the pages.                                           |
    +-----------------------+---------------------------------------------------------------------------+
    |QTabBar.TriangularSouth|Triangular tabs similar to those used in the Excel spreadsheet, for example|
    +-----------------------+---------------------------------------------------------------------------+
    |QTabBar.TriangularWest |Triangular tabs on the left of the pages.                                  |
    +-----------------------+---------------------------------------------------------------------------+
    |QTabBar.TriangularEast |Triangular tabs on the right of the pages.                                 |
    +-----------------------+---------------------------------------------------------------------------+


.. method:: PySide.QtGui.QTabBar.addTab(text)


    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    Adds a new tab with text ``text`` . Returns the new tab's index.



.. method:: PySide.QtGui.QTabBar.addTab(icon, text)


    :param icon: :class:`PySide.QtGui.QIcon`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Adds a new tab with icon ``icon`` and text ``text`` . Returns the new tab's index.



.. method:: PySide.QtGui.QTabBar.count()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of tabs in the tab bar.



.. method:: PySide.QtGui.QTabBar.currentChanged(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTabBar.currentIndex()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the index of the tab bar's visible tab.

    The current index is -1 if there is no current tab.



.. method:: PySide.QtGui.QTabBar.documentMode()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds Whether or not the tab bar is rendered in a mode suitable for the main window..

    This property is used as a hint for styles to draw the tabs in a different way then they would normally look in a tab widget. On Mac OS X this will look similar to the tabs in Safari or Leopard's Terminal.app.

    .. seealso::  :meth:`QTabWidget.documentMode<PySide.QtGui.QTabWidget.documentMode>` 


.. method:: PySide.QtGui.QTabBar.drawBase()


    :rtype: :class:`PySide.QtCore.bool`




    This property defines whether or not tab bar should draw its base..

    If true then :class:`PySide.QtGui.QTabBar` draws a base in relation to the styles overlab. Otherwise only the tabs are drawn.

    .. seealso::  :meth:`QStyle.pixelMetric()<PySide.QtGui.QStyle.pixelMetric>`  :attr:`QStyle.PM_TabBarBaseOverlap<QStyle.PixelMetric>`  :class:`PySide.QtGui.QStyleOptionTabBarBaseV2` 


.. method:: PySide.QtGui.QTabBar.elideMode()


    :rtype: :attr:`PySide.QtCore.Qt.TextElideMode`




    This property holds how to elide text in the tab bar.

    This property controls how items are elided when there is not enough space to show them for a given tab bar size.

    By default the value is style dependent.

    .. seealso::  :meth:`QTabWidget.elideMode<PySide.QtGui.QTabWidget.elideMode>`  :meth:`PySide.QtGui.QTabBar.usesScrollButtons`  :attr:`QStyle.SH_TabBar_ElideMode<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabBar.expanding()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds When expanding is true :class:`PySide.QtGui.QTabBar` will expand the tabs to use the empty space..

    By default the value is true.

    .. seealso::  :meth:`QTabWidget.documentMode<PySide.QtGui.QTabWidget.documentMode>` 


.. method:: PySide.QtGui.QTabBar.iconSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds The size for icons in the tab bar.

    The default value is style-dependent. ``iconSize`` is a maximum size; icons that are smaller are not scaled up.

    .. seealso::  :meth:`QTabWidget.iconSize<PySide.QtGui.QTabWidget.iconSize>` 


.. method:: PySide.QtGui.QTabBar.initStyleOption(option, tabIndex)


    :param option: :class:`PySide.QtGui.QStyleOptionTab`
    :param tabIndex: :class:`PySide.QtCore.int`




    Initialize ``option`` with the values from the tab at ``tabIndex`` . This method is useful for subclasses when they need a :class:`PySide.QtGui.QStyleOptionTab` , :class:`PySide.QtGui.QStyleOptionTabV2` , or :class:`PySide.QtGui.QStyleOptionTabV3` but don't want to fill in all the information themselves. This function will check the version of the :class:`PySide.QtGui.QStyleOptionTab` and fill in the additional values for a :class:`PySide.QtGui.QStyleOptionTabV2` and :class:`PySide.QtGui.QStyleOptionTabV3` .

    .. seealso::  :meth:`QStyleOption.initFrom()<PySide.QtGui.QStyleOption.initFrom>`  :meth:`QTabWidget.initStyleOption()<PySide.QtGui.QTabWidget.initStyleOption>` 


.. method:: PySide.QtGui.QTabBar.insertTab(index, text)


    :param index: :class:`PySide.QtCore.int`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    Inserts a new tab with text ``text`` at position ``index`` . If ``index`` is out of range, the new tab is appened. Returns the new tab's index.



.. method:: PySide.QtGui.QTabBar.insertTab(index, icon, text)


    :param index: :class:`PySide.QtCore.int`
    :param icon: :class:`PySide.QtGui.QIcon`
    :param text: unicode
    :rtype: :class:`PySide.QtCore.int`




    This is an overloaded function.

    Inserts a new tab with icon ``icon`` and text ``text`` at position ``index`` . If ``index`` is out of range, the new tab is appended. Returns the new tab's index.

    If the :class:`PySide.QtGui.QTabBar` was empty before this function is called, the inserted tab becomes the current tab.

    Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current tab.



.. method:: PySide.QtGui.QTabBar.isMovable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds This property holds whether the user can move the tabs within the tabbar area..

    By default, this property is false;



.. method:: PySide.QtGui.QTabBar.isTabEnabled(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the tab at position ``index`` is enabled; otherwise returns false.



.. method:: PySide.QtGui.QTabBar.moveTab(from, to)


    :param from: :class:`PySide.QtCore.int`
    :param to: :class:`PySide.QtCore.int`




    Moves the item at index position ``from`` to index position ``to`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabMoved`  :meth:`PySide.QtGui.QTabBar.tabLayoutChange` 


.. method:: PySide.QtGui.QTabBar.removeTab(index)


    :param index: :class:`PySide.QtCore.int`




    Removes the tab at position ``index`` .

    .. seealso::  :attr:`QTabBar.SelectionBehavior` 


.. method:: PySide.QtGui.QTabBar.selectionBehaviorOnRemove()


    :rtype: :attr:`PySide.QtGui.QTabBar.SelectionBehavior`




    This property holds What tab should be set as current when removeTab is called if the removed tab is also the current tab..

    By default the value is :attr:`SelectRightTab<QTabBar.SelectionBehavior>` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.removeTab` 


.. method:: PySide.QtGui.QTabBar.setCurrentIndex(index)


    :param index: :class:`PySide.QtCore.int`




    This property holds the index of the tab bar's visible tab.

    The current index is -1 if there is no current tab.



.. method:: PySide.QtGui.QTabBar.setDocumentMode(set)


    :param set: :class:`PySide.QtCore.bool`




    This property holds Whether or not the tab bar is rendered in a mode suitable for the main window..

    This property is used as a hint for styles to draw the tabs in a different way then they would normally look in a tab widget. On Mac OS X this will look similar to the tabs in Safari or Leopard's Terminal.app.

    .. seealso::  :meth:`QTabWidget.documentMode<PySide.QtGui.QTabWidget.documentMode>` 


.. method:: PySide.QtGui.QTabBar.setDrawBase(drawTheBase)


    :param drawTheBase: :class:`PySide.QtCore.bool`




    This property defines whether or not tab bar should draw its base..

    If true then :class:`PySide.QtGui.QTabBar` draws a base in relation to the styles overlab. Otherwise only the tabs are drawn.

    .. seealso::  :meth:`QStyle.pixelMetric()<PySide.QtGui.QStyle.pixelMetric>`  :attr:`QStyle.PM_TabBarBaseOverlap<QStyle.PixelMetric>`  :class:`PySide.QtGui.QStyleOptionTabBarBaseV2` 


.. method:: PySide.QtGui.QTabBar.setElideMode(arg__1)


    :param arg__1: :attr:`PySide.QtCore.Qt.TextElideMode`




    This property holds how to elide text in the tab bar.

    This property controls how items are elided when there is not enough space to show them for a given tab bar size.

    By default the value is style dependent.

    .. seealso::  :meth:`QTabWidget.elideMode<PySide.QtGui.QTabWidget.elideMode>`  :meth:`PySide.QtGui.QTabBar.usesScrollButtons`  :attr:`QStyle.SH_TabBar_ElideMode<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabBar.setExpanding(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds When expanding is true :class:`PySide.QtGui.QTabBar` will expand the tabs to use the empty space..

    By default the value is true.

    .. seealso::  :meth:`QTabWidget.documentMode<PySide.QtGui.QTabWidget.documentMode>` 


.. method:: PySide.QtGui.QTabBar.setIconSize(size)


    :param size: :class:`PySide.QtCore.QSize`




    This property holds The size for icons in the tab bar.

    The default value is style-dependent. ``iconSize`` is a maximum size; icons that are smaller are not scaled up.

    .. seealso::  :meth:`QTabWidget.iconSize<PySide.QtGui.QTabWidget.iconSize>` 


.. method:: PySide.QtGui.QTabBar.setMovable(movable)


    :param movable: :class:`PySide.QtCore.bool`




    This property holds This property holds whether the user can move the tabs within the tabbar area..

    By default, this property is false;



.. method:: PySide.QtGui.QTabBar.setSelectionBehaviorOnRemove(behavior)


    :param behavior: :attr:`PySide.QtGui.QTabBar.SelectionBehavior`




    This property holds What tab should be set as current when removeTab is called if the removed tab is also the current tab..

    By default the value is :attr:`SelectRightTab<QTabBar.SelectionBehavior>` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.removeTab` 


.. method:: PySide.QtGui.QTabBar.setShape(shape)


    :param shape: :attr:`PySide.QtGui.QTabBar.Shape`




    This property holds the shape of the tabs in the tab bar.

    Possible values for this property are described by the Shape enum.



.. method:: PySide.QtGui.QTabBar.setTabButton(index, position, widget)


    :param index: :class:`PySide.QtCore.int`
    :param position: :attr:`PySide.QtGui.QTabBar.ButtonPosition`
    :param widget: :class:`PySide.QtGui.QWidget`




    Sets ``widget`` on the tab ``index`` . The widget is placed on the left or right hand side depending upon the ``position`` .

    Any previously set widget in ``position`` is hidden.

    The tab bar will take ownership of the widget and so all widgets set here will be deleted by the tab bar when it is destroyed unless you separately reparent the widget after setting some other widget (or 0).

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabButton`  :meth:`PySide.QtGui.QTabBar.tabsClosable` 


.. method:: PySide.QtGui.QTabBar.setTabData(index, data)


    :param index: :class:`PySide.QtCore.int`
    :param data: object




    Sets the data of the tab at position ``index`` to ``data`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabData` 


.. method:: PySide.QtGui.QTabBar.setTabEnabled(index, arg__2)


    :param index: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.bool`




    If ``enabled`` is true then the tab at position ``index`` is enabled; otherwise the item at position ``index`` is disabled.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.isTabEnabled` 


.. method:: PySide.QtGui.QTabBar.setTabIcon(index, icon)


    :param index: :class:`PySide.QtCore.int`
    :param icon: :class:`PySide.QtGui.QIcon`




    Sets the icon of the tab at position ``index`` to ``icon`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabIcon` 


.. method:: PySide.QtGui.QTabBar.setTabText(index, text)


    :param index: :class:`PySide.QtCore.int`
    :param text: unicode




    Sets the text of the tab at position ``index`` to ``text`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabText` 


.. method:: PySide.QtGui.QTabBar.setTabTextColor(index, color)


    :param index: :class:`PySide.QtCore.int`
    :param color: :class:`PySide.QtGui.QColor`




    Sets the color of the text in the tab with the given ``index`` to the specified ``color`` .

    If an invalid color is specified, the tab will use the :class:`PySide.QtGui.QTabBar` foreground role instead.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabTextColor` 


.. method:: PySide.QtGui.QTabBar.setTabToolTip(index, tip)


    :param index: :class:`PySide.QtCore.int`
    :param tip: unicode




    Sets the tool tip of the tab at position ``index`` to ``tip`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabToolTip` 


.. method:: PySide.QtGui.QTabBar.setTabWhatsThis(index, text)


    :param index: :class:`PySide.QtCore.int`
    :param text: unicode




    Sets the What's This help text of the tab at position ``index`` to ``text`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabWhatsThis` 


.. method:: PySide.QtGui.QTabBar.setTabsClosable(closable)


    :param closable: :class:`PySide.QtCore.bool`




    This property holds Whether or not a tab bar should place close buttons on each tab.

    When :meth:`PySide.QtGui.QTabBar.tabsClosable` is set to true a close button will appear on the tab on either the left or right hand side depending upon the style. When the button is clicked the tab the signal tabCloseRequested will be emitted.

    By default the value is false.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabButton`  :meth:`PySide.QtGui.QTabBar.tabRemoved` 


.. method:: PySide.QtGui.QTabBar.setUsesScrollButtons(useButtons)


    :param useButtons: :class:`PySide.QtCore.bool`




    This property holds Whether or not a tab bar should use buttons to scroll tabs when it has many tabs..

    When there are too many tabs in a tab bar for its size, the tab bar can either choose to expand its size or to add buttons that allow you to scroll through the tabs.

    By default the value is style dependant.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.elideMode`  :meth:`QTabWidget.usesScrollButtons<PySide.QtGui.QTabWidget.usesScrollButtons>`  :attr:`QStyle.SH_TabBar_PreferNoArrows<QStyle.StyleHint>` 


.. method:: PySide.QtGui.QTabBar.shape()


    :rtype: :attr:`PySide.QtGui.QTabBar.Shape`




    This property holds the shape of the tabs in the tab bar.

    Possible values for this property are described by the Shape enum.



.. method:: PySide.QtGui.QTabBar.tabAt(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.int`




    Returns the index of the tab that covers ``position`` or -1 if no tab covers ``position`` ;



.. method:: PySide.QtGui.QTabBar.tabButton(index, position)


    :param index: :class:`PySide.QtCore.int`
    :param position: :attr:`PySide.QtGui.QTabBar.ButtonPosition`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget set a tab ``index`` and ``position`` or 0 if one is not set.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabButton` 


.. method:: PySide.QtGui.QTabBar.tabCloseRequested(index)


    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTabBar.tabData(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: object




    Returns the data of the tab at position ``index`` , or a null variant if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabData` 


.. method:: PySide.QtGui.QTabBar.tabIcon(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QIcon`




    Returns the icon of the tab at position ``index`` , or a null icon if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabIcon` 


.. method:: PySide.QtGui.QTabBar.tabInserted(index)


    :param index: :class:`PySide.QtCore.int`




    This virtual handler is called after a new tab was added or inserted at position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabRemoved` 


.. method:: PySide.QtGui.QTabBar.tabLayoutChange()






    This virtual handler is called whenever the tab layout changes.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabRect` 


.. method:: PySide.QtGui.QTabBar.tabMoved(from, to)


    :param from: :class:`PySide.QtCore.int`
    :param to: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTabBar.tabRect(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QRect`




    Returns the visual rectangle of the tab at position ``index`` , or a null rectangle if ``index`` is out of range.



.. method:: PySide.QtGui.QTabBar.tabRemoved(index)


    :param index: :class:`PySide.QtCore.int`




    This virtual handler is called after a tab was removed from position ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTabBar.tabInserted` 


.. method:: PySide.QtGui.QTabBar.tabSizeHint(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QSize`




    Returns the size hint for the tab at position ``index`` .



.. method:: PySide.QtGui.QTabBar.tabText(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the text of the tab at position ``index`` , or an empty string if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabText` 


.. method:: PySide.QtGui.QTabBar.tabTextColor(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QColor`




    Returns the text color of the tab with the given ``index`` , or a invalid color if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabTextColor` 


.. method:: PySide.QtGui.QTabBar.tabToolTip(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the tool tip of the tab at position ``index`` , or an empty string if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabToolTip` 


.. method:: PySide.QtGui.QTabBar.tabWhatsThis(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the What's This help text of the tab at position ``index`` , or an empty string if ``index`` is out of range.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabWhatsThis` 


.. method:: PySide.QtGui.QTabBar.tabsClosable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds Whether or not a tab bar should place close buttons on each tab.

    When :meth:`PySide.QtGui.QTabBar.tabsClosable` is set to true a close button will appear on the tab on either the left or right hand side depending upon the style. When the button is clicked the tab the signal tabCloseRequested will be emitted.

    By default the value is false.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.setTabButton`  :meth:`PySide.QtGui.QTabBar.tabRemoved` 


.. method:: PySide.QtGui.QTabBar.usesScrollButtons()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds Whether or not a tab bar should use buttons to scroll tabs when it has many tabs..

    When there are too many tabs in a tab bar for its size, the tab bar can either choose to expand its size or to add buttons that allow you to scroll through the tabs.

    By default the value is style dependant.

    .. seealso::  :meth:`PySide.QtGui.QTabBar.elideMode`  :meth:`QTabWidget.usesScrollButtons<PySide.QtGui.QTabWidget.usesScrollButtons>`  :attr:`QStyle.SH_TabBar_PreferNoArrows<QStyle.StyleHint>` 



