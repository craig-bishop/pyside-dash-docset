.. module:: PySide.QtGui
.. _QStandardItem:

QStandardItem
*************

.. inheritance-diagram:: QStandardItem
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`accessibleDescription<PySide.QtGui.QStandardItem.accessibleDescription>` ()
*    def :meth:`accessibleText<PySide.QtGui.QStandardItem.accessibleText>` ()
*    def :meth:`appendColumn<PySide.QtGui.QStandardItem.appendColumn>` (items)
*    def :meth:`appendRow<PySide.QtGui.QStandardItem.appendRow>` (item)
*    def :meth:`appendRow<PySide.QtGui.QStandardItem.appendRow>` (items)
*    def :meth:`appendRows<PySide.QtGui.QStandardItem.appendRows>` (items)
*    def :meth:`background<PySide.QtGui.QStandardItem.background>` ()
*    def :meth:`checkState<PySide.QtGui.QStandardItem.checkState>` ()
*    def :meth:`child<PySide.QtGui.QStandardItem.child>` (row[, column=0])
*    def :meth:`column<PySide.QtGui.QStandardItem.column>` ()
*    def :meth:`columnCount<PySide.QtGui.QStandardItem.columnCount>` ()
*    def :meth:`emitDataChanged<PySide.QtGui.QStandardItem.emitDataChanged>` ()
*    def :meth:`flags<PySide.QtGui.QStandardItem.flags>` ()
*    def :meth:`font<PySide.QtGui.QStandardItem.font>` ()
*    def :meth:`foreground<PySide.QtGui.QStandardItem.foreground>` ()
*    def :meth:`hasChildren<PySide.QtGui.QStandardItem.hasChildren>` ()
*    def :meth:`icon<PySide.QtGui.QStandardItem.icon>` ()
*    def :meth:`index<PySide.QtGui.QStandardItem.index>` ()
*    def :meth:`insertColumn<PySide.QtGui.QStandardItem.insertColumn>` (column, items)
*    def :meth:`insertColumns<PySide.QtGui.QStandardItem.insertColumns>` (column, count)
*    def :meth:`insertRow<PySide.QtGui.QStandardItem.insertRow>` (row, item)
*    def :meth:`insertRow<PySide.QtGui.QStandardItem.insertRow>` (row, items)
*    def :meth:`insertRows<PySide.QtGui.QStandardItem.insertRows>` (row, count)
*    def :meth:`insertRows<PySide.QtGui.QStandardItem.insertRows>` (row, items)
*    def :meth:`isCheckable<PySide.QtGui.QStandardItem.isCheckable>` ()
*    def :meth:`isDragEnabled<PySide.QtGui.QStandardItem.isDragEnabled>` ()
*    def :meth:`isDropEnabled<PySide.QtGui.QStandardItem.isDropEnabled>` ()
*    def :meth:`isEditable<PySide.QtGui.QStandardItem.isEditable>` ()
*    def :meth:`isEnabled<PySide.QtGui.QStandardItem.isEnabled>` ()
*    def :meth:`isSelectable<PySide.QtGui.QStandardItem.isSelectable>` ()
*    def :meth:`isTristate<PySide.QtGui.QStandardItem.isTristate>` ()
*    def :meth:`model<PySide.QtGui.QStandardItem.model>` ()
*    def :meth:`parent<PySide.QtGui.QStandardItem.parent>` ()
*    def :meth:`removeColumn<PySide.QtGui.QStandardItem.removeColumn>` (column)
*    def :meth:`removeColumns<PySide.QtGui.QStandardItem.removeColumns>` (column, count)
*    def :meth:`removeRow<PySide.QtGui.QStandardItem.removeRow>` (row)
*    def :meth:`removeRows<PySide.QtGui.QStandardItem.removeRows>` (row, count)
*    def :meth:`row<PySide.QtGui.QStandardItem.row>` ()
*    def :meth:`rowCount<PySide.QtGui.QStandardItem.rowCount>` ()
*    def :meth:`setAccessibleDescription<PySide.QtGui.QStandardItem.setAccessibleDescription>` (accessibleDescription)
*    def :meth:`setAccessibleText<PySide.QtGui.QStandardItem.setAccessibleText>` (accessibleText)
*    def :meth:`setBackground<PySide.QtGui.QStandardItem.setBackground>` (brush)
*    def :meth:`setCheckState<PySide.QtGui.QStandardItem.setCheckState>` (checkState)
*    def :meth:`setCheckable<PySide.QtGui.QStandardItem.setCheckable>` (checkable)
*    def :meth:`setChild<PySide.QtGui.QStandardItem.setChild>` (row, column, item)
*    def :meth:`setChild<PySide.QtGui.QStandardItem.setChild>` (row, item)
*    def :meth:`setColumnCount<PySide.QtGui.QStandardItem.setColumnCount>` (columns)
*    def :meth:`setDragEnabled<PySide.QtGui.QStandardItem.setDragEnabled>` (dragEnabled)
*    def :meth:`setDropEnabled<PySide.QtGui.QStandardItem.setDropEnabled>` (dropEnabled)
*    def :meth:`setEditable<PySide.QtGui.QStandardItem.setEditable>` (editable)
*    def :meth:`setEnabled<PySide.QtGui.QStandardItem.setEnabled>` (enabled)
*    def :meth:`setFlags<PySide.QtGui.QStandardItem.setFlags>` (flags)
*    def :meth:`setFont<PySide.QtGui.QStandardItem.setFont>` (font)
*    def :meth:`setForeground<PySide.QtGui.QStandardItem.setForeground>` (brush)
*    def :meth:`setIcon<PySide.QtGui.QStandardItem.setIcon>` (icon)
*    def :meth:`setRowCount<PySide.QtGui.QStandardItem.setRowCount>` (rows)
*    def :meth:`setSelectable<PySide.QtGui.QStandardItem.setSelectable>` (selectable)
*    def :meth:`setSizeHint<PySide.QtGui.QStandardItem.setSizeHint>` (sizeHint)
*    def :meth:`setStatusTip<PySide.QtGui.QStandardItem.setStatusTip>` (statusTip)
*    def :meth:`setText<PySide.QtGui.QStandardItem.setText>` (text)
*    def :meth:`setTextAlignment<PySide.QtGui.QStandardItem.setTextAlignment>` (textAlignment)
*    def :meth:`setToolTip<PySide.QtGui.QStandardItem.setToolTip>` (toolTip)
*    def :meth:`setTristate<PySide.QtGui.QStandardItem.setTristate>` (tristate)
*    def :meth:`setWhatsThis<PySide.QtGui.QStandardItem.setWhatsThis>` (whatsThis)
*    def :meth:`sizeHint<PySide.QtGui.QStandardItem.sizeHint>` ()
*    def :meth:`sortChildren<PySide.QtGui.QStandardItem.sortChildren>` (column[, order=Qt.AscendingOrder])
*    def :meth:`statusTip<PySide.QtGui.QStandardItem.statusTip>` ()
*    def :meth:`takeChild<PySide.QtGui.QStandardItem.takeChild>` (row[, column=0])
*    def :meth:`takeColumn<PySide.QtGui.QStandardItem.takeColumn>` (column)
*    def :meth:`takeRow<PySide.QtGui.QStandardItem.takeRow>` (row)
*    def :meth:`text<PySide.QtGui.QStandardItem.text>` ()
*    def :meth:`textAlignment<PySide.QtGui.QStandardItem.textAlignment>` ()
*    def :meth:`toolTip<PySide.QtGui.QStandardItem.toolTip>` ()
*    def :meth:`whatsThis<PySide.QtGui.QStandardItem.whatsThis>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`clone<PySide.QtGui.QStandardItem.clone>` ()
*    def :meth:`data<PySide.QtGui.QStandardItem.data>` ([role=Qt.UserRole + 1])
*    def :meth:`read<PySide.QtGui.QStandardItem.read>` (in)
*    def :meth:`setData<PySide.QtGui.QStandardItem.setData>` (value[, role=Qt.UserRole + 1])
*    def :meth:`type<PySide.QtGui.QStandardItem.type>` ()
*    def :meth:`write<PySide.QtGui.QStandardItem.write>` (out)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QStandardItem` class provides an item for use with the :class:`PySide.QtGui.QStandardItemModel` class.

    Items usually contain text, icons, or checkboxes.

    Each item can have its own background brush which is set with the :meth:`PySide.QtGui.QStandardItem.setBackground` function. The current background brush can be found with :meth:`PySide.QtGui.QStandardItem.background` . The text label for each item can be rendered with its own font and brush. These are specified with the :meth:`PySide.QtGui.QStandardItem.setFont` and :meth:`PySide.QtGui.QStandardItem.setForeground` functions, and read with :meth:`PySide.QtGui.QStandardItem.font` and :meth:`PySide.QtGui.QStandardItem.foreground` .

    By default, items are enabled, editable, selectable, checkable, and can be used both as the source of a drag and drop operation and as a drop target. Each item's flags can be changed by calling :meth:`PySide.QtGui.QStandardItem.setFlags` . Checkable items can be checked and unchecked with the :meth:`PySide.QtGui.QStandardItem.setCheckState` function. The corresponding :meth:`PySide.QtGui.QStandardItem.checkState` function indicates whether the item is currently checked.

    You can store application-specific data in an item by calling :meth:`PySide.QtGui.QStandardItem.setData` .

    Each item can have a two-dimensional table of child items. This makes it possible to build hierarchies of items. The typical hierarchy is the tree, in which case the child table is a table with a single column (a list).

    The dimensions of the child table can be set with :meth:`PySide.QtGui.QStandardItem.setRowCount` and :meth:`PySide.QtGui.QStandardItem.setColumnCount` . Items can be positioned in the child table with :meth:`PySide.QtGui.QStandardItem.setChild` . Get a pointer to a child item with :meth:`PySide.QtGui.QStandardItem.child` . New rows and columns of children can also be inserted with :meth:`PySide.QtGui.QStandardItem.insertRow` and :meth:`PySide.QtGui.QStandardItem.insertColumn` , or appended with :meth:`PySide.QtGui.QStandardItem.appendRow` and :meth:`PySide.QtGui.QStandardItem.appendColumn` . When using the append and insert functions, the dimensions of the child table will grow as needed.

    An existing row of children can be removed with :meth:`PySide.QtGui.QStandardItem.removeRow` or :meth:`PySide.QtGui.QStandardItem.takeRow` ; correspondingly, a column can be removed with :meth:`PySide.QtGui.QStandardItem.removeColumn` or :meth:`PySide.QtGui.QStandardItem.takeColumn` .

    An item's children can be sorted by calling :meth:`PySide.QtGui.QStandardItem.sortChildren` .

    .. _PySide.QtGui.QStandardItem_subclassing:



Subclassing
^^^^^^^^^^^

    When subclassing :class:`PySide.QtGui.QStandardItem` to provide custom items, it is possible to define new types for them so that they can be distinguished from the base class. The :meth:`PySide.QtGui.QStandardItem.type` function should be reimplemented to return a new type value equal to or greater than :attr:`UserType<QStandardItem.ItemType>` .

    Reimplement :meth:`PySide.QtGui.QStandardItem.data` and :meth:`PySide.QtGui.QStandardItem.setData` if you want to perform custom handling of data queries and/or control how an item's data is represented.

    Reimplement :meth:`PySide.QtGui.QStandardItem.clone` if you want :class:`PySide.QtGui.QStandardItemModel` to be able to create instances of your custom item class on demand (see :meth:`QStandardItemModel.setItemPrototype()<PySide.QtGui.QStandardItemModel.setItemPrototype>` ).

    Reimplement :meth:`PySide.QtGui.QStandardItem.read` and :meth:`PySide.QtGui.QStandardItem.write` if you want to control how items are represented in their serialized form.

    Reimplement :meth:`PySide.QtGui.QStandardItem.operator<` if you want to control the semantics of item comparison. :meth:`PySide.QtGui.QStandardItem.operator<` determines the sorted order when sorting items with :meth:`PySide.QtGui.QStandardItem.sortChildren` or with :meth:`QStandardItemModel.sort()<PySide.QtGui.QStandardItemModel.sort>` .

    .. seealso::  :class:`PySide.QtGui.QStandardItemModel`  :ref:`Item View Convenience Classes<model-view-programming.html>`  :ref:`Model/View Programming<model-view-programming.html>` 

.. class:: QStandardItem()
           QStandardItem(icon, text)
           QStandardItem(other)
           QStandardItem(text)
           QStandardItem(rows[, columns=1])

    :param icon: :class:`PySide.QtGui.QIcon`
    :param other: :class:`PySide.QtGui.QStandardItem`
    :param rows: :class:`PySide.QtCore.int`
    :param columns: :class:`PySide.QtCore.int`
    :param text: unicode

    Constructs an item.


    Constructs an item with the given ``icon`` and ``text`` .


    Constructs a copy of ``other`` . Note that :meth:`PySide.QtGui.QStandardItem.model` is not copied.

    This function is useful when reimplementing :meth:`PySide.QtGui.QStandardItem.clone` .


    Constructs an item with the given ``text`` .


    Constructs an item with ``rows`` rows and ``columns`` columns of child items.


.. attribute:: PySide.QtGui.QStandardItem.ItemType

    This enum describes the types that are used to describe standard items.

    +----------------------+-------------------------------------------------------------------------------------------------------------+
    |Constant              |Description                                                                                                  |
    +======================+=============================================================================================================+
    |QStandardItem.Type    |The default type for standard items.                                                                         |
    +----------------------+-------------------------------------------------------------------------------------------------------------+
    |QStandardItem.UserType|The minimum value for custom types. Values below :attr:`UserType<QStandardItem.ItemType>` are reserved by Qt.|
    +----------------------+-------------------------------------------------------------------------------------------------------------+

    You can define new user types in :class:`PySide.QtGui.QStandardItem` subclasses to ensure that custom items are treated specially; for example, when items are sorted.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.type` 

.. method:: PySide.QtGui.QStandardItem.accessibleDescription()


    :rtype: unicode




    Returns the item's accessible description.

    The accessible description is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setAccessibleDescription`  :meth:`PySide.QtGui.QStandardItem.accessibleText` 


.. method:: PySide.QtGui.QStandardItem.accessibleText()


    :rtype: unicode




    Returns the item's accessible text.

    The accessible text is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setAccessibleText`  :meth:`PySide.QtGui.QStandardItem.accessibleDescription` 


.. method:: PySide.QtGui.QStandardItem.appendColumn(items)


    :param items: 







.. method:: PySide.QtGui.QStandardItem.appendRow(item)


    :param item: :class:`PySide.QtGui.QStandardItem`




    This is an overloaded function.

    Appends a row containing ``item`` .

    When building a list or a tree that has only one column, this function provides a convenient way to append a single new item.



.. method:: PySide.QtGui.QStandardItem.appendRow(items)


    :param items: 







.. method:: PySide.QtGui.QStandardItem.appendRows(items)


    :param items: 







.. method:: PySide.QtGui.QStandardItem.background()


    :rtype: :class:`PySide.QtGui.QBrush`




    Returns the brush used to render the item's background.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.foreground`  :meth:`PySide.QtGui.QStandardItem.setBackground` 


.. method:: PySide.QtGui.QStandardItem.checkState()


    :rtype: :attr:`PySide.QtCore.Qt.CheckState`




    Returns the checked state of the item.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setCheckState`  :meth:`PySide.QtGui.QStandardItem.isCheckable` 


.. method:: PySide.QtGui.QStandardItem.child(row[, column=0])


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QStandardItem`




    Returns the child item at (``row`` , ``column`` ) if one has been set; otherwise returns 0.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setChild`  :meth:`PySide.QtGui.QStandardItem.takeChild`  :meth:`PySide.QtGui.QStandardItem.parent` 


.. method:: PySide.QtGui.QStandardItem.clone()


    :rtype: :class:`PySide.QtGui.QStandardItem`




    Returns a copy of this item. The item's children are not copied.

    When subclassing :class:`PySide.QtGui.QStandardItem` , you can reimplement this function to provide :class:`PySide.QtGui.QStandardItemModel` with a factory that it can use to create new items on demand.

    .. seealso::  :meth:`QStandardItemModel.setItemPrototype()<PySide.QtGui.QStandardItemModel.setItemPrototype>`  :meth:`PySide.QtGui.QStandardItem.operator=` 


.. method:: PySide.QtGui.QStandardItem.column()


    :rtype: :class:`PySide.QtCore.int`




    Returns the column where the item is located in its parent's child table, or -1 if the item has no parent.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.row`  :meth:`PySide.QtGui.QStandardItem.parent` 


.. method:: PySide.QtGui.QStandardItem.columnCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of child item columns that the item has.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setColumnCount`  :meth:`PySide.QtGui.QStandardItem.rowCount` 


.. method:: PySide.QtGui.QStandardItem.data([role=Qt.UserRole + 1])


    :param role: :class:`PySide.QtCore.int`
    :rtype: object




    Returns the item's data for the given ``role`` , or an invalid :class:`PySide.QtCore.QVariant` if there is no data for the role.

    .. note::  The default implementation treats :attr:`Qt.EditRole<Qt.ItemDataRole>` and :attr:`Qt.DisplayRole<Qt.ItemDataRole>` as referring to the same data.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setData` 


.. method:: PySide.QtGui.QStandardItem.emitDataChanged()






    Causes the model associated with this item to emit a :meth:`PySide.QtCore.QAbstractItemModel.dataChanged` () signal for this item.

    You normally only need to call this function if you have subclassed :class:`PySide.QtGui.QStandardItem` and reimplemented :meth:`PySide.QtGui.QStandardItem.data` and/or :meth:`PySide.QtGui.QStandardItem.setData` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setData` 


.. method:: PySide.QtGui.QStandardItem.flags()


    :rtype: :class:`PySide.QtCore.Qt.ItemFlags`




    Returns the item flags for the item.

    The item flags determine how the user can interact with the item.

    By default, items are enabled, editable, selectable, checkable, and can be used both as the source of a drag and drop operation and as a drop target.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setFlags` 


.. method:: PySide.QtGui.QStandardItem.font()


    :rtype: :class:`PySide.QtGui.QFont`




    Returns the font used to render the item's text.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setFont` 


.. method:: PySide.QtGui.QStandardItem.foreground()


    :rtype: :class:`PySide.QtGui.QBrush`




    Returns the brush used to render the item's foreground (e.g. text).

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setForeground`  :meth:`PySide.QtGui.QStandardItem.background` 


.. method:: PySide.QtGui.QStandardItem.hasChildren()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this item has any children; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.rowCount`  :meth:`PySide.QtGui.QStandardItem.columnCount`  :meth:`PySide.QtGui.QStandardItem.child` 


.. method:: PySide.QtGui.QStandardItem.icon()


    :rtype: :class:`PySide.QtGui.QIcon`




    Returns the item's icon.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setIcon`  :meth:`PySide.QtGui.QAbstractItemView.iconSize` 


.. method:: PySide.QtGui.QStandardItem.index()


    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the :class:`PySide.QtCore.QModelIndex` associated with this item.

    When you need to invoke item functionality in a :class:`PySide.QtCore.QModelIndex` -based API (e.g. :class:`PySide.QtGui.QAbstractItemView` ), you can call this function to obtain an index that corresponds to the item's location in the model.

    If the item is not associated with a model, an invalid :class:`PySide.QtCore.QModelIndex` is returned.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.model`  :meth:`QStandardItemModel.itemFromIndex()<PySide.QtGui.QStandardItemModel.itemFromIndex>` 


.. method:: PySide.QtGui.QStandardItem.insertColumn(column, items)


    :param column: :class:`PySide.QtCore.int`
    :param items: 







.. method:: PySide.QtGui.QStandardItem.insertColumns(column, count)


    :param column: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`




    Inserts ``count`` columns of child items at column ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.insertColumn`  :meth:`PySide.QtGui.QStandardItem.insertRows` 


.. method:: PySide.QtGui.QStandardItem.insertRow(row, items)


    :param row: :class:`PySide.QtCore.int`
    :param items: 







.. method:: PySide.QtGui.QStandardItem.insertRow(row, item)


    :param row: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QStandardItem`




    This is an overloaded function.

    Inserts a row at ``row`` containing ``item`` .

    When building a list or a tree that has only one column, this function provides a convenient way to insert a single new item.



.. method:: PySide.QtGui.QStandardItem.insertRows(row, items)


    :param row: :class:`PySide.QtCore.int`
    :param items: 







.. method:: PySide.QtGui.QStandardItem.insertRows(row, count)


    :param row: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`




    Inserts ``count`` rows of child items at row ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.insertRow`  :meth:`PySide.QtGui.QStandardItem.insertColumns` 


.. method:: PySide.QtGui.QStandardItem.isCheckable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the item is user-checkable.

    The default value is false.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setCheckable`  :meth:`PySide.QtGui.QStandardItem.checkState`  :meth:`PySide.QtGui.QStandardItem.isTristate` 


.. method:: PySide.QtGui.QStandardItem.isDragEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the item is drag enabled. An item that is drag enabled can be dragged by the user.

    The default value is true.

    Note that item dragging must be enabled in the view for dragging to work; see :meth:`QAbstractItemView.dragEnabled<PySide.QtGui.QAbstractItemView.dragEnabled>` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setDragEnabled`  :meth:`PySide.QtGui.QStandardItem.isDropEnabled`  :meth:`PySide.QtGui.QStandardItem.flags` 


.. method:: PySide.QtGui.QStandardItem.isDropEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the item is drop enabled. When an item is drop enabled, it can be used as a drop target.

    The default value is true.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setDropEnabled`  :meth:`PySide.QtGui.QStandardItem.isDragEnabled`  :meth:`PySide.QtGui.QStandardItem.flags` 


.. method:: PySide.QtGui.QStandardItem.isEditable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the item can be edited by the user.

    When an item is editable (and enabled), the user can edit the item by invoking one of the view's edit triggers; see :meth:`QAbstractItemView.editTriggers<PySide.QtGui.QAbstractItemView.editTriggers>` .

    The default value is true.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setEditable`  :meth:`PySide.QtGui.QStandardItem.flags` 


.. method:: PySide.QtGui.QStandardItem.isEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the item is enabled.

    When an item is enabled, the user can interact with it. The possible types of interaction are specified by the other item flags, such as :meth:`PySide.QtGui.QStandardItem.isEditable` and :meth:`PySide.QtGui.QStandardItem.isSelectable` .

    The default value is true.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setEnabled`  :meth:`PySide.QtGui.QStandardItem.flags` 


.. method:: PySide.QtGui.QStandardItem.isSelectable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the item is selectable by the user.

    The default value is true.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setSelectable`  :meth:`PySide.QtGui.QStandardItem.flags` 


.. method:: PySide.QtGui.QStandardItem.isTristate()


    :rtype: :class:`PySide.QtCore.bool`




    Returns whether the item is tristate; that is, if it's checkable with three separate states.

    The default value is false.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setTristate`  :meth:`PySide.QtGui.QStandardItem.isCheckable`  :meth:`PySide.QtGui.QStandardItem.checkState` 


.. method:: PySide.QtGui.QStandardItem.model()


    :rtype: :class:`PySide.QtGui.QStandardItemModel`




    Returns the :class:`PySide.QtGui.QStandardItemModel` that this item belongs to.

    If the item is not a child of another item that belongs to the model, this function returns 0.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.index` 


.. method:: PySide.QtGui.QStandardItem.parent()


    :rtype: :class:`PySide.QtGui.QStandardItem`




    Returns the item's parent item, or 0 if the item has no parent.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.child` 


.. method:: PySide.QtGui.QStandardItem.read(in)


    :param in: :class:`PySide.QtCore.QDataStream`




    Reads the item from stream ``in`` . Only the data and flags of the item are read, not the child items.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.write` 


.. method:: PySide.QtGui.QStandardItem.removeColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Removes the given ``column`` . The items that were in the column are deleted.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.takeColumn`  :meth:`PySide.QtGui.QStandardItem.removeColumns`  :meth:`PySide.QtGui.QStandardItem.removeRow` 


.. method:: PySide.QtGui.QStandardItem.removeColumns(column, count)


    :param column: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`




    Removes ``count`` columns at column ``column`` . The items that were in those columns are deleted.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.removeColumn`  :meth:`PySide.QtGui.QStandardItem.removeRows` 


.. method:: PySide.QtGui.QStandardItem.removeRow(row)


    :param row: :class:`PySide.QtCore.int`




    Removes the given ``row`` . The items that were in the row are deleted.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.takeRow`  :meth:`PySide.QtGui.QStandardItem.removeRows`  :meth:`PySide.QtGui.QStandardItem.removeColumn` 


.. method:: PySide.QtGui.QStandardItem.removeRows(row, count)


    :param row: :class:`PySide.QtCore.int`
    :param count: :class:`PySide.QtCore.int`




    Removes ``count`` rows at row ``row`` . The items that were in those rows are deleted.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.removeRow`  :meth:`PySide.QtGui.QStandardItem.removeColumn` 


.. method:: PySide.QtGui.QStandardItem.row()


    :rtype: :class:`PySide.QtCore.int`




    Returns the row where the item is located in its parent's child table, or -1 if the item has no parent.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.column`  :meth:`PySide.QtGui.QStandardItem.parent` 


.. method:: PySide.QtGui.QStandardItem.rowCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of child item rows that the item has.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setRowCount`  :meth:`PySide.QtGui.QStandardItem.columnCount` 


.. method:: PySide.QtGui.QStandardItem.setAccessibleDescription(accessibleDescription)


    :param accessibleDescription: unicode




    Sets the item's accessible description to the string specified by ``accessibleDescription`` .

    The accessible description is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.accessibleDescription`  :meth:`PySide.QtGui.QStandardItem.setAccessibleText` 


.. method:: PySide.QtGui.QStandardItem.setAccessibleText(accessibleText)


    :param accessibleText: unicode




    Sets the item's accessible text to the string specified by ``accessibleText`` .

    The accessible text is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.accessibleText`  :meth:`PySide.QtGui.QStandardItem.setAccessibleDescription` 


.. method:: PySide.QtGui.QStandardItem.setBackground(brush)


    :param brush: :class:`PySide.QtGui.QBrush`




    Sets the item's background brush to the specified ``brush`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.background`  :meth:`PySide.QtGui.QStandardItem.setForeground` 


.. method:: PySide.QtGui.QStandardItem.setCheckState(checkState)


    :param checkState: :attr:`PySide.QtCore.Qt.CheckState`







.. method:: PySide.QtGui.QStandardItem.setCheckable(checkable)


    :param checkable: :class:`PySide.QtCore.bool`




    Sets whether the item is user-checkable. If ``checkable`` is true, the item can be checked by the user; otherwise, the user cannot check the item.

    The item delegate will render a checkable item with a check box next to the item's text.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.isCheckable`  :meth:`PySide.QtGui.QStandardItem.setCheckState`  :meth:`PySide.QtGui.QStandardItem.setTristate` 


.. method:: PySide.QtGui.QStandardItem.setChild(row, column, item)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QStandardItem`




    Sets the child item at (``row`` , ``column`` ) to ``item`` . This item (the parent item) takes ownership of ``item`` . If necessary, the row count and column count are increased to fit the item.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.child` 


.. method:: PySide.QtGui.QStandardItem.setChild(row, item)


    :param row: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QStandardItem`




    This is an overloaded function.

    Sets the child at ``row`` to ``item`` .



.. method:: PySide.QtGui.QStandardItem.setColumnCount(columns)


    :param columns: :class:`PySide.QtCore.int`




    Sets the number of child item columns to ``columns`` . If this is less than :meth:`PySide.QtGui.QStandardItem.columnCount` , the data in the unwanted columns is discarded.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.columnCount`  :meth:`PySide.QtGui.QStandardItem.setRowCount` 


.. method:: PySide.QtGui.QStandardItem.setData(value[, role=Qt.UserRole + 1])


    :param value: object
    :param role: :class:`PySide.QtCore.int`




    Sets the item's data for the given ``role`` to the specified ``value`` .

    If you subclass :class:`PySide.QtGui.QStandardItem` and reimplement this function, your reimplementation should call :meth:`PySide.QtGui.QStandardItem.emitDataChanged` if you do not call the base implementation of :meth:`PySide.QtGui.QStandardItem.setData` . This will ensure that e.g. views using the model are notified of the changes.

    .. note::  The default implementation treats :attr:`Qt.EditRole<Qt.ItemDataRole>` and :attr:`Qt.DisplayRole<Qt.ItemDataRole>` as referring to the same data.

    .. seealso::  :attr:`Qt.ItemDataRole`  :meth:`PySide.QtGui.QStandardItem.data`  :meth:`PySide.QtGui.QStandardItem.setFlags` 


.. method:: PySide.QtGui.QStandardItem.setDragEnabled(dragEnabled)


    :param dragEnabled: :class:`PySide.QtCore.bool`




    Sets whether the item is drag enabled. If ``dragEnabled`` is true, the item can be dragged by the user; otherwise, the user cannot drag the item.

    Note that you also need to ensure that item dragging is enabled in the view; see :meth:`QAbstractItemView.dragEnabled<PySide.QtGui.QAbstractItemView.dragEnabled>` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.isDragEnabled`  :meth:`PySide.QtGui.QStandardItem.setDropEnabled`  :meth:`PySide.QtGui.QStandardItem.setFlags` 


.. method:: PySide.QtGui.QStandardItem.setDropEnabled(dropEnabled)


    :param dropEnabled: :class:`PySide.QtCore.bool`




    Sets whether the item is drop enabled. If ``dropEnabled`` is true, the item can be used as a drop target; otherwise, it cannot.

    Note that you also need to ensure that drops are enabled in the view; see :meth:`QWidget.acceptDrops()<PySide.QtGui.QWidget.acceptDrops>` ; and that the model supports the desired drop actions; see :meth:`QAbstractItemModel.supportedDropActions()<PySide.QtCore.QAbstractItemModel.supportedDropActions>` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.isDropEnabled`  :meth:`PySide.QtGui.QStandardItem.setDragEnabled`  :meth:`PySide.QtGui.QStandardItem.setFlags` 


.. method:: PySide.QtGui.QStandardItem.setEditable(editable)


    :param editable: :class:`PySide.QtCore.bool`




    Sets whether the item is editable. If ``editable`` is true, the item can be edited by the user; otherwise, the user cannot edit the item.

    How the user can edit items in a view is determined by the view's edit triggers; see :meth:`QAbstractItemView.editTriggers<PySide.QtGui.QAbstractItemView.editTriggers>` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.isEditable`  :meth:`PySide.QtGui.QStandardItem.setFlags` 


.. method:: PySide.QtGui.QStandardItem.setEnabled(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    Sets whether the item is enabled. If ``enabled`` is true, the item is enabled, meaning that the user can interact with the item; if ``enabled`` is false, the user cannot interact with the item.

    This flag takes precedence over the other item flags; e.g. if an item is not enabled, it cannot be selected by the user, even if the :attr:`Qt.ItemIsSelectable<Qt.ItemFlag>` flag has been set.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.isEnabled`  :attr:`Qt.ItemIsEnabled<Qt.ItemFlag>`  :meth:`PySide.QtGui.QStandardItem.setFlags` 


.. method:: PySide.QtGui.QStandardItem.setFlags(flags)


    :param flags: :class:`PySide.QtCore.Qt.ItemFlags`







.. method:: PySide.QtGui.QStandardItem.setFont(font)


    :param font: :class:`PySide.QtGui.QFont`




    Sets the font used to display the item's text to the given ``font`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.font`  :meth:`PySide.QtGui.QStandardItem.setText`  :meth:`PySide.QtGui.QStandardItem.setForeground` 


.. method:: PySide.QtGui.QStandardItem.setForeground(brush)


    :param brush: :class:`PySide.QtGui.QBrush`




    Sets the brush used to display the item's foreground (e.g. text) to the given ``brush`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.foreground`  :meth:`PySide.QtGui.QStandardItem.setBackground`  :meth:`PySide.QtGui.QStandardItem.setFont` 


.. method:: PySide.QtGui.QStandardItem.setIcon(icon)


    :param icon: :class:`PySide.QtGui.QIcon`




    Sets the item's icon to the ``icon`` specified.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.icon` 


.. method:: PySide.QtGui.QStandardItem.setRowCount(rows)


    :param rows: :class:`PySide.QtCore.int`




    Sets the number of child item rows to ``rows`` . If this is less than :meth:`PySide.QtGui.QStandardItem.rowCount` , the data in the unwanted rows is discarded.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.rowCount`  :meth:`PySide.QtGui.QStandardItem.setColumnCount` 


.. method:: PySide.QtGui.QStandardItem.setSelectable(selectable)


    :param selectable: :class:`PySide.QtCore.bool`




    Sets whether the item is selectable. If ``selectable`` is true, the item can be selected by the user; otherwise, the user cannot select the item.

    You can control the selection behavior and mode by manipulating their view properties; see :meth:`QAbstractItemView.selectionMode<PySide.QtGui.QAbstractItemView.selectionMode>` and :meth:`QAbstractItemView.selectionBehavior<PySide.QtGui.QAbstractItemView.selectionBehavior>` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.isSelectable`  :meth:`PySide.QtGui.QStandardItem.setFlags` 


.. method:: PySide.QtGui.QStandardItem.setSizeHint(sizeHint)


    :param sizeHint: :class:`PySide.QtCore.QSize`




    Sets the size hint for the item to be ``size`` . If no size hint is set, the item delegate will compute the size hint based on the item data.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.sizeHint` 


.. method:: PySide.QtGui.QStandardItem.setStatusTip(statusTip)


    :param statusTip: unicode




    Sets the item's status tip to the string specified by ``statusTip`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.statusTip`  :meth:`PySide.QtGui.QStandardItem.setToolTip`  :meth:`PySide.QtGui.QStandardItem.setWhatsThis` 


.. method:: PySide.QtGui.QStandardItem.setText(text)


    :param text: unicode




    Sets the item's text to the ``text`` specified.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.text`  :meth:`PySide.QtGui.QStandardItem.setFont`  :meth:`PySide.QtGui.QStandardItem.setForeground` 


.. method:: PySide.QtGui.QStandardItem.setTextAlignment(textAlignment)


    :param textAlignment: :class:`PySide.QtCore.Qt.Alignment`







.. method:: PySide.QtGui.QStandardItem.setToolTip(toolTip)


    :param toolTip: unicode




    Sets the item's tooltip to the string specified by ``toolTip`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.toolTip`  :meth:`PySide.QtGui.QStandardItem.setStatusTip`  :meth:`PySide.QtGui.QStandardItem.setWhatsThis` 


.. method:: PySide.QtGui.QStandardItem.setTristate(tristate)


    :param tristate: :class:`PySide.QtCore.bool`




    Sets whether the item is tristate. If ``tristate`` is true, the item is checkable with three separate states; otherwise, the item is checkable with two states. (Note that this also requires that the item is checkable; see :meth:`PySide.QtGui.QStandardItem.isCheckable` .)

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.isTristate`  :meth:`PySide.QtGui.QStandardItem.setCheckable`  :meth:`PySide.QtGui.QStandardItem.setCheckState` 


.. method:: PySide.QtGui.QStandardItem.setWhatsThis(whatsThis)


    :param whatsThis: unicode




    Sets the item's "What's This?" help to the string specified by ``whatsThis`` .

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.whatsThis`  :meth:`PySide.QtGui.QStandardItem.setStatusTip`  :meth:`PySide.QtGui.QStandardItem.setToolTip` 


.. method:: PySide.QtGui.QStandardItem.sizeHint()


    :rtype: :class:`PySide.QtCore.QSize`




    Returns the size hint set for the item, or an invalid :class:`PySide.QtCore.QSize` if no size hint has been set.

    If no size hint has been set, the item delegate will compute the size hint based on the item data.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setSizeHint` 


.. method:: PySide.QtGui.QStandardItem.sortChildren(column[, order=Qt.AscendingOrder])


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QStandardItem.statusTip()


    :rtype: unicode




    Returns the item's status tip.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setStatusTip`  :meth:`PySide.QtGui.QStandardItem.toolTip`  :meth:`PySide.QtGui.QStandardItem.whatsThis` 


.. method:: PySide.QtGui.QStandardItem.takeChild(row[, column=0])


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QStandardItem`




    Removes the child item at (``row`` , ``column`` ) without deleting it, and returns a pointer to the item. If there was no child at the given location, then this function returns 0.

    Note that this function, unlike :meth:`PySide.QtGui.QStandardItem.takeRow` and :meth:`PySide.QtGui.QStandardItem.takeColumn` , does not affect the dimensions of the child table.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.child`  :meth:`PySide.QtGui.QStandardItem.takeRow`  :meth:`PySide.QtGui.QStandardItem.takeColumn` 


.. method:: PySide.QtGui.QStandardItem.takeColumn(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: 




    Removes ``column`` without deleting the column items, and returns a list of pointers to the removed items. For items in the column that have not been set, the corresponding pointers in the list will be 0.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.removeColumn`  :meth:`PySide.QtGui.QStandardItem.insertColumn`  :meth:`PySide.QtGui.QStandardItem.takeRow` 


.. method:: PySide.QtGui.QStandardItem.takeRow(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: 




    Removes ``row`` without deleting the row items, and returns a list of pointers to the removed items. For items in the row that have not been set, the corresponding pointers in the list will be 0.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.removeRow`  :meth:`PySide.QtGui.QStandardItem.insertRow`  :meth:`PySide.QtGui.QStandardItem.takeColumn` 


.. method:: PySide.QtGui.QStandardItem.text()


    :rtype: unicode




    Returns the item's text. This is the text that's presented to the user in a view.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setText` 


.. method:: PySide.QtGui.QStandardItem.textAlignment()


    :rtype: :class:`PySide.QtCore.Qt.Alignment`




    Returns the text alignment for the item's text.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setTextAlignment` 


.. method:: PySide.QtGui.QStandardItem.toolTip()


    :rtype: unicode




    Returns the item's tooltip.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setToolTip`  :meth:`PySide.QtGui.QStandardItem.statusTip`  :meth:`PySide.QtGui.QStandardItem.whatsThis` 


.. method:: PySide.QtGui.QStandardItem.type()


    :rtype: :class:`PySide.QtCore.int`




    Returns the type of this item. The type is used to distinguish custom items from the base class. When subclassing :class:`PySide.QtGui.QStandardItem` , you should reimplement this function and return a new value greater than or equal to :attr:`UserType<QStandardItem.ItemType>` .

    .. seealso::  :attr:`QStandardItem.Type<QStandardItem.ItemType>` 


.. method:: PySide.QtGui.QStandardItem.whatsThis()


    :rtype: unicode




    Returns the item's "What's This?" help.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.setWhatsThis`  :meth:`PySide.QtGui.QStandardItem.toolTip`  :meth:`PySide.QtGui.QStandardItem.statusTip` 


.. method:: PySide.QtGui.QStandardItem.write(out)


    :param out: :class:`PySide.QtCore.QDataStream`




    Writes the item to stream ``out`` . Only the data and flags of the item are written, not the child items.

    .. seealso::  :meth:`PySide.QtGui.QStandardItem.read` 



