.. module:: PySide.QtGui
.. _QQuaternion:

QQuaternion
***********

.. inheritance-diagram:: QQuaternion
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QQuaternion.__add__>` (, q2)
*    def :meth:`__div__<PySide.QtGui.QQuaternion.__div__>` (, divisor)
*    def :meth:`__eq__<PySide.QtGui.QQuaternion.__eq__>` (, q2)
*    def :meth:`__iadd__<PySide.QtGui.QQuaternion.__iadd__>` (quaternion)
*    def :meth:`__idiv__<PySide.QtGui.QQuaternion.__idiv__>` (divisor)
*    def :meth:`__imul__<PySide.QtGui.QQuaternion.__imul__>` (factor)
*    def :meth:`__imul__<PySide.QtGui.QQuaternion.__imul__>` (quaternion)
*    def :meth:`__isub__<PySide.QtGui.QQuaternion.__isub__>` (quaternion)
*    def :meth:`__mul__<PySide.QtGui.QQuaternion.__mul__>` (, factor)
*    def :meth:`__mul__<PySide.QtGui.QQuaternion.__mul__>` (, q2)
*    def :meth:`__mul__<PySide.QtGui.QQuaternion.__mul__>` (factor)
*    def :meth:`__ne__<PySide.QtGui.QQuaternion.__ne__>` (, q2)
*    def :meth:`__reduce__<PySide.QtGui.QQuaternion.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtGui.QQuaternion.__repr__>` ()
*    def :meth:`__sub__<PySide.QtGui.QQuaternion.__sub__>` ()
*    def :meth:`__sub__<PySide.QtGui.QQuaternion.__sub__>` (, q2)
*    def :meth:`conjugate<PySide.QtGui.QQuaternion.conjugate>` ()
*    def :meth:`isIdentity<PySide.QtGui.QQuaternion.isIdentity>` ()
*    def :meth:`isNull<PySide.QtGui.QQuaternion.isNull>` ()
*    def :meth:`length<PySide.QtGui.QQuaternion.length>` ()
*    def :meth:`lengthSquared<PySide.QtGui.QQuaternion.lengthSquared>` ()
*    def :meth:`normalize<PySide.QtGui.QQuaternion.normalize>` ()
*    def :meth:`normalized<PySide.QtGui.QQuaternion.normalized>` ()
*    def :meth:`rotatedVector<PySide.QtGui.QQuaternion.rotatedVector>` (vector)
*    def :meth:`scalar<PySide.QtGui.QQuaternion.scalar>` ()
*    def :meth:`setScalar<PySide.QtGui.QQuaternion.setScalar>` (scalar)
*    def :meth:`setVector<PySide.QtGui.QQuaternion.setVector>` (vector)
*    def :meth:`setVector<PySide.QtGui.QQuaternion.setVector>` (x, y, z)
*    def :meth:`setX<PySide.QtGui.QQuaternion.setX>` (x)
*    def :meth:`setY<PySide.QtGui.QQuaternion.setY>` (y)
*    def :meth:`setZ<PySide.QtGui.QQuaternion.setZ>` (z)
*    def :meth:`toVector4D<PySide.QtGui.QQuaternion.toVector4D>` ()
*    def :meth:`vector<PySide.QtGui.QQuaternion.vector>` ()
*    def :meth:`x<PySide.QtGui.QQuaternion.x>` ()
*    def :meth:`y<PySide.QtGui.QQuaternion.y>` ()
*    def :meth:`z<PySide.QtGui.QQuaternion.z>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`fromAxisAndAngle<PySide.QtGui.QQuaternion.fromAxisAndAngle>` (axis, angle)
*    def :meth:`fromAxisAndAngle<PySide.QtGui.QQuaternion.fromAxisAndAngle>` (x, y, z, angle)
*    def :meth:`nlerp<PySide.QtGui.QQuaternion.nlerp>` (q1, q2, t)
*    def :meth:`slerp<PySide.QtGui.QQuaternion.slerp>` (q1, q2, t)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QQuaternion` class represents a quaternion consisting of a vector and scalar.

    Quaternions are used to represent rotations in 3D space, and consist of a 3D rotation axis specified by the x, y, and z coordinates, and a scalar representing the rotation angle.


.. class:: QQuaternion()
           QQuaternion(QQuaternion)
           QQuaternion(vector)
           QQuaternion(scalar, vector)
           QQuaternion(scalar, xpos, ypos, zpos)

    :param vector: :class:`PySide.QtGui.QVector4D`
    :param QQuaternion: :class:`PySide.QtGui.QQuaternion`
    :param zpos: :class:`PySide.QtCore.qreal`
    :param scalar: :class:`PySide.QtCore.qreal`
    :param ypos: :class:`PySide.QtCore.qreal`
    :param xpos: :class:`PySide.QtCore.qreal`

    Constructs an identity quaternion, i.e. with coordinates (1, 0, 0, 0).




    Constructs a quaternion from the components of ``vector`` .


    Constructs a quaternion vector from the specified ``vector`` and ``scalar`` .

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.vector`  :meth:`PySide.QtGui.QQuaternion.scalar` 

    Constructs a quaternion with the vector (``xpos`` , ``ypos`` , ``zpos`` ) and ``scalar`` .


.. method:: PySide.QtGui.QQuaternion.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QQuaternion.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QQuaternion.conjugate()


    :rtype: :class:`PySide.QtGui.QQuaternion`




    Returns the conjugate of this quaternion, which is (-x, -y, -z, scalar).



.. staticmethod:: PySide.QtGui.QQuaternion.fromAxisAndAngle(x, y, z, angle)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param z: :class:`PySide.QtCore.qreal`
    :param angle: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Creates a normalized quaternion that corresponds to rotating through ``angle`` degrees about the 3D axis (``x`` , ``y`` , ``z`` ).



.. staticmethod:: PySide.QtGui.QQuaternion.fromAxisAndAngle(axis, angle)


    :param axis: :class:`PySide.QtGui.QVector3D`
    :param angle: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Creates a normalized quaternion that corresponds to rotating through ``angle`` degrees about the specified 3D ``axis`` .



.. method:: PySide.QtGui.QQuaternion.isIdentity()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the x, y, and z components of this quaternion are set to 0.0, and the scalar component is set to 1.0; otherwise returns false.



.. method:: PySide.QtGui.QQuaternion.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the x, y, z, and scalar components of this quaternion are set to 0.0; otherwise returns false.



.. method:: PySide.QtGui.QQuaternion.length()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the length of the quaternion. This is also called the "norm".

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.lengthSquared`  :meth:`PySide.QtGui.QQuaternion.normalized` 


.. method:: PySide.QtGui.QQuaternion.lengthSquared()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the squared length of the quaternion.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.length` 


.. staticmethod:: PySide.QtGui.QQuaternion.nlerp(q1, q2, t)


    :param q1: :class:`PySide.QtGui.QQuaternion`
    :param q2: :class:`PySide.QtGui.QQuaternion`
    :param t: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Interpolates along the shortest linear path between the rotational positions ``q1`` and ``q2`` . The value ``t`` should be between 0 and 1, indicating the distance to travel between ``q1`` and ``q2`` . The result will be :meth:`PySide.QtGui.QQuaternion.normalized` .

    If ``t`` is less than or equal to 0, then ``q1`` will be returned. If ``t`` is greater than or equal to 1, then ``q2`` will be returned.

    The :meth:`PySide.QtGui.QQuaternion.nlerp` function is typically faster than :meth:`PySide.QtGui.QQuaternion.slerp` and will give approximate results to spherical interpolation that are good enough for some applications.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.slerp` 


.. method:: PySide.QtGui.QQuaternion.normalize()






    Normalizes the currect quaternion in place. Nothing happens if this is a null quaternion or the length of the quaternion is very close to 1.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.length`  :meth:`PySide.QtGui.QQuaternion.normalized` 


.. method:: PySide.QtGui.QQuaternion.normalized()


    :rtype: :class:`PySide.QtGui.QQuaternion`




    Returns the normalized unit form of this quaternion.

    If this quaternion is null, then a null quaternion is returned. If the length of the quaternion is very close to 1, then the quaternion will be returned as-is. Otherwise the normalized form of the quaternion of length 1 will be returned.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.length`  :meth:`PySide.QtGui.QQuaternion.normalize` 


.. method:: PySide.QtGui.QQuaternion.__ne__(, q2)


    :param q2: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QQuaternion.__mul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`







.. method:: PySide.QtGui.QQuaternion.__mul__(, factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`







.. method:: PySide.QtGui.QQuaternion.__mul__(, q2)


    :param q2: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtGui.QQuaternion`







.. method:: PySide.QtGui.QQuaternion.__imul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Multiplies this quaternion's components by the given ``factor`` , and returns a reference to this quaternion.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.operator/=` 


.. method:: PySide.QtGui.QQuaternion.__imul__(quaternion)


    :param quaternion: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Multiplies this quaternion by ``quaternion`` and returns a reference to this quaternion.



.. method:: PySide.QtGui.QQuaternion.__add__(, q2)


    :param q2: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtGui.QQuaternion`







.. method:: PySide.QtGui.QQuaternion.__iadd__(quaternion)


    :param quaternion: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Adds the given ``quaternion`` to this quaternion and returns a reference to this quaternion.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.operator-=` 


.. method:: PySide.QtGui.QQuaternion.__sub__()


    :rtype: :class:`PySide.QtGui.QQuaternion`







.. method:: PySide.QtGui.QQuaternion.__sub__(, q2)


    :param q2: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtGui.QQuaternion`







.. method:: PySide.QtGui.QQuaternion.__isub__(quaternion)


    :param quaternion: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Subtracts the given ``quaternion`` from this quaternion and returns a reference to this quaternion.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.operator+=` 


.. method:: PySide.QtGui.QQuaternion.__div__(, divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`







.. method:: PySide.QtGui.QQuaternion.__idiv__(divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Divides this quaternion's components by the given ``divisor`` , and returns a reference to this quaternion.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.operator\*=` 


.. method:: PySide.QtGui.QQuaternion.__eq__(, q2)


    :param q2: :class:`PySide.QtGui.QQuaternion`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QQuaternion.rotatedVector(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`
    :rtype: :class:`PySide.QtGui.QVector3D`




    Rotates ``vector`` with this quaternion to produce a new vector in 3D space. The following code:

    ::

                QVector3D result = q.rotatedVector(vector);


    is equivalent to the following:

    ::

                QVector3D result = (q * QQuaternion(0, vector) * q.conjugate()).vector();




.. method:: PySide.QtGui.QQuaternion.scalar()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the scalar component of this quaternion.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.setScalar`  :meth:`PySide.QtGui.QQuaternion.x`  :meth:`PySide.QtGui.QQuaternion.y`  :meth:`PySide.QtGui.QQuaternion.z` 


.. method:: PySide.QtGui.QQuaternion.setScalar(scalar)


    :param scalar: :class:`PySide.QtCore.qreal`




    Sets the scalar component of this quaternion to ``scalar`` .

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.scalar`  :meth:`PySide.QtGui.QQuaternion.setX`  :meth:`PySide.QtGui.QQuaternion.setY`  :meth:`PySide.QtGui.QQuaternion.setZ` 


.. method:: PySide.QtGui.QQuaternion.setVector(vector)


    :param vector: :class:`PySide.QtGui.QVector3D`




    Sets the vector component of this quaternion to ``vector`` .

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.vector`  :meth:`PySide.QtGui.QQuaternion.setScalar` 


.. method:: PySide.QtGui.QQuaternion.setVector(x, y, z)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param z: :class:`PySide.QtCore.qreal`




    Sets the vector component of this quaternion to (``x`` , ``y`` , ``z`` ).

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.vector`  :meth:`PySide.QtGui.QQuaternion.setScalar` 


.. method:: PySide.QtGui.QQuaternion.setX(x)


    :param x: :class:`PySide.QtCore.qreal`




    Sets the x coordinate of this quaternion's vector to the given ``x`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.x`  :meth:`PySide.QtGui.QQuaternion.setY`  :meth:`PySide.QtGui.QQuaternion.setZ`  :meth:`PySide.QtGui.QQuaternion.setScalar` 


.. method:: PySide.QtGui.QQuaternion.setY(y)


    :param y: :class:`PySide.QtCore.qreal`




    Sets the y coordinate of this quaternion's vector to the given ``y`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.y`  :meth:`PySide.QtGui.QQuaternion.setX`  :meth:`PySide.QtGui.QQuaternion.setZ`  :meth:`PySide.QtGui.QQuaternion.setScalar` 


.. method:: PySide.QtGui.QQuaternion.setZ(z)


    :param z: :class:`PySide.QtCore.qreal`




    Sets the z coordinate of this quaternion's vector to the given ``z`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.z`  :meth:`PySide.QtGui.QQuaternion.setX`  :meth:`PySide.QtGui.QQuaternion.setY`  :meth:`PySide.QtGui.QQuaternion.setScalar` 


.. staticmethod:: PySide.QtGui.QQuaternion.slerp(q1, q2, t)


    :param q1: :class:`PySide.QtGui.QQuaternion`
    :param q2: :class:`PySide.QtGui.QQuaternion`
    :param t: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QQuaternion`




    Interpolates along the shortest spherical path between the rotational positions ``q1`` and ``q2`` . The value ``t`` should be between 0 and 1, indicating the spherical distance to travel between ``q1`` and ``q2`` .

    If ``t`` is less than or equal to 0, then ``q1`` will be returned. If ``t`` is greater than or equal to 1, then ``q2`` will be returned.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.nlerp` 


.. method:: PySide.QtGui.QQuaternion.toVector4D()


    :rtype: :class:`PySide.QtGui.QVector4D`




    Returns this quaternion as a 4D vector.



.. method:: PySide.QtGui.QQuaternion.vector()


    :rtype: :class:`PySide.QtGui.QVector3D`




    Returns the vector component of this quaternion.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.setVector`  :meth:`PySide.QtGui.QQuaternion.scalar` 


.. method:: PySide.QtGui.QQuaternion.x()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x coordinate of this quaternion's vector.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.setX`  :meth:`PySide.QtGui.QQuaternion.y`  :meth:`PySide.QtGui.QQuaternion.z`  :meth:`PySide.QtGui.QQuaternion.scalar` 


.. method:: PySide.QtGui.QQuaternion.y()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y coordinate of this quaternion's vector.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.setY`  :meth:`PySide.QtGui.QQuaternion.x`  :meth:`PySide.QtGui.QQuaternion.z`  :meth:`PySide.QtGui.QQuaternion.scalar` 


.. method:: PySide.QtGui.QQuaternion.z()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the z coordinate of this quaternion's vector.

    .. seealso::  :meth:`PySide.QtGui.QQuaternion.setZ`  :meth:`PySide.QtGui.QQuaternion.x`  :meth:`PySide.QtGui.QQuaternion.y`  :meth:`PySide.QtGui.QQuaternion.scalar` 



