.. module:: PySide.QtGui
.. _QMainWindow:

QMainWindow
***********

.. inheritance-diagram:: QMainWindow
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addDockWidget<PySide.QtGui.QMainWindow.addDockWidget>` (area, dockwidget)
*    def :meth:`addDockWidget<PySide.QtGui.QMainWindow.addDockWidget>` (area, dockwidget, orientation)
*    def :meth:`addToolBar<PySide.QtGui.QMainWindow.addToolBar>` (area, toolbar)
*    def :meth:`addToolBar<PySide.QtGui.QMainWindow.addToolBar>` (title)
*    def :meth:`addToolBar<PySide.QtGui.QMainWindow.addToolBar>` (toolbar)
*    def :meth:`addToolBarBreak<PySide.QtGui.QMainWindow.addToolBarBreak>` ([area=Qt.TopToolBarArea])
*    def :meth:`centralWidget<PySide.QtGui.QMainWindow.centralWidget>` ()
*    def :meth:`corner<PySide.QtGui.QMainWindow.corner>` (corner)
*    def :meth:`dockOptions<PySide.QtGui.QMainWindow.dockOptions>` ()
*    def :meth:`dockWidgetArea<PySide.QtGui.QMainWindow.dockWidgetArea>` (dockwidget)
*    def :meth:`documentMode<PySide.QtGui.QMainWindow.documentMode>` ()
*    def :meth:`iconSize<PySide.QtGui.QMainWindow.iconSize>` ()
*    def :meth:`insertToolBar<PySide.QtGui.QMainWindow.insertToolBar>` (before, toolbar)
*    def :meth:`insertToolBarBreak<PySide.QtGui.QMainWindow.insertToolBarBreak>` (before)
*    def :meth:`isAnimated<PySide.QtGui.QMainWindow.isAnimated>` ()
*    def :meth:`isDockNestingEnabled<PySide.QtGui.QMainWindow.isDockNestingEnabled>` ()
*    def :meth:`isSeparator<PySide.QtGui.QMainWindow.isSeparator>` (pos)
*    def :meth:`menuBar<PySide.QtGui.QMainWindow.menuBar>` ()
*    def :meth:`menuWidget<PySide.QtGui.QMainWindow.menuWidget>` ()
*    def :meth:`removeDockWidget<PySide.QtGui.QMainWindow.removeDockWidget>` (dockwidget)
*    def :meth:`removeToolBar<PySide.QtGui.QMainWindow.removeToolBar>` (toolbar)
*    def :meth:`removeToolBarBreak<PySide.QtGui.QMainWindow.removeToolBarBreak>` (before)
*    def :meth:`restoreDockWidget<PySide.QtGui.QMainWindow.restoreDockWidget>` (dockwidget)
*    def :meth:`restoreState<PySide.QtGui.QMainWindow.restoreState>` (state[, version=0])
*    def :meth:`saveState<PySide.QtGui.QMainWindow.saveState>` ([version=0])
*    def :meth:`setCentralWidget<PySide.QtGui.QMainWindow.setCentralWidget>` (widget)
*    def :meth:`setCorner<PySide.QtGui.QMainWindow.setCorner>` (corner, area)
*    def :meth:`setDockOptions<PySide.QtGui.QMainWindow.setDockOptions>` (options)
*    def :meth:`setDocumentMode<PySide.QtGui.QMainWindow.setDocumentMode>` (enabled)
*    def :meth:`setIconSize<PySide.QtGui.QMainWindow.setIconSize>` (iconSize)
*    def :meth:`setMenuBar<PySide.QtGui.QMainWindow.setMenuBar>` (menubar)
*    def :meth:`setMenuWidget<PySide.QtGui.QMainWindow.setMenuWidget>` (menubar)
*    def :meth:`setStatusBar<PySide.QtGui.QMainWindow.setStatusBar>` (statusbar)
*    def :meth:`setTabPosition<PySide.QtGui.QMainWindow.setTabPosition>` (areas, tabPosition)
*    def :meth:`setTabShape<PySide.QtGui.QMainWindow.setTabShape>` (tabShape)
*    def :meth:`setToolButtonStyle<PySide.QtGui.QMainWindow.setToolButtonStyle>` (toolButtonStyle)
*    def :meth:`setUnifiedTitleAndToolBarOnMac<PySide.QtGui.QMainWindow.setUnifiedTitleAndToolBarOnMac>` (set)
*    def :meth:`splitDockWidget<PySide.QtGui.QMainWindow.splitDockWidget>` (after, dockwidget, orientation)
*    def :meth:`statusBar<PySide.QtGui.QMainWindow.statusBar>` ()
*    def :meth:`tabPosition<PySide.QtGui.QMainWindow.tabPosition>` (area)
*    def :meth:`tabShape<PySide.QtGui.QMainWindow.tabShape>` ()
*    def :meth:`tabifiedDockWidgets<PySide.QtGui.QMainWindow.tabifiedDockWidgets>` (dockwidget)
*    def :meth:`tabifyDockWidget<PySide.QtGui.QMainWindow.tabifyDockWidget>` (first, second)
*    def :meth:`toolBarArea<PySide.QtGui.QMainWindow.toolBarArea>` (toolbar)
*    def :meth:`toolBarBreak<PySide.QtGui.QMainWindow.toolBarBreak>` (toolbar)
*    def :meth:`toolButtonStyle<PySide.QtGui.QMainWindow.toolButtonStyle>` ()
*    def :meth:`unifiedTitleAndToolBarOnMac<PySide.QtGui.QMainWindow.unifiedTitleAndToolBarOnMac>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`createPopupMenu<PySide.QtGui.QMainWindow.createPopupMenu>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`setAnimated<PySide.QtGui.QMainWindow.setAnimated>` (enabled)
*    def :meth:`setDockNestingEnabled<PySide.QtGui.QMainWindow.setDockNestingEnabled>` (enabled)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`iconSizeChanged<PySide.QtGui.QMainWindow.iconSizeChanged>` (iconSize)
*    def :meth:`toolButtonStyleChanged<PySide.QtGui.QMainWindow.toolButtonStyleChanged>` (toolButtonStyle)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QMainWindow` class provides a main application window.

    .. _PySide.QtGui.QMainWindow_qt-main-window-framework:



Qt Main Window Framework
^^^^^^^^^^^^^^^^^^^^^^^^

    A main window provides a framework for building an application's user interface. Qt has :class:`PySide.QtGui.QMainWindow` and its :ref:`related classes<mainwindow-classes>` for main window management. :class:`PySide.QtGui.QMainWindow` has its own layout to which you can add :class:`PySide.QtGui.QToolBar` s, :class:`PySide.QtGui.QDockWidget` s, a :class:`PySide.QtGui.QMenuBar` , and a :class:`PySide.QtGui.QStatusBar` . The layout has a center area that can be occupied by any kind of widget. You can see an image of the layout below.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/mainwindowlayout.png

    .. note::  Creating a main window without a central widget is not supported. You must have a central widget even if it is just a placeholder.

    .. _PySide.QtGui.QMainWindow_creating-main-window-components:



Creating Main Window Components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    A central widget will typically be a standard Qt widget such as a :class:`PySide.QtGui.QTextEdit` or a :class:`PySide.QtGui.QGraphicsView` . Custom widgets can also be used for advanced applications. You set the central widget with ``setCentralWidget()`` .

    Main windows have either a single (SDI) or multiple (MDI) document interface. You create MDI applications in Qt by using a :class:`PySide.QtGui.QMdiArea` as the central widget.

    We will now examine each of the other widgets that can be added to a main window. We give examples on how to create and add them.

    .. _PySide.QtGui.QMainWindow_creating-menus:



Creating Menus
^^^^^^^^^^^^^^

    Qt implements menus in :class:`PySide.QtGui.QMenu` and :class:`PySide.QtGui.QMainWindow` keeps them in a :class:`PySide.QtGui.QMenuBar` . :class:`PySide.QtGui.QAction` s are added to the menus, which display them as menu items.

    You can add new menus to the main window's menu bar by calling ``menuBar()`` , which returns the :class:`PySide.QtGui.QMenuBar` for the window, and then add a menu with :meth:`QMenuBar.addMenu()<PySide.QtGui.QMenuBar.addMenu>` .

    :class:`PySide.QtGui.QMainWindow` comes with a default menu bar, but you can also set one yourself with ``setMenuBar()`` . If you wish to implement a custom menu bar (i.e., not use the :class:`PySide.QtGui.QMenuBar` widget), you can set it with ``setMenuWidget()`` .

    An example of how to create menus follows:

    ::

        def createMenus(self):

            fileMenu = menuBar().addMenu(tr("&File"))
            fileMenu.addAction(Act)

            fileMenu.addAction(openAct)

            fileMenu.addAction(saveAct)


    The ``createPopupMenu()`` function creates popup menus when the main window receives context menu events. The default implementation generates a menu with the checkable actions from the dock widgets and toolbars. You can reimplement ``createPopupMenu()`` for a custom menu.

    .. _PySide.QtGui.QMainWindow_creating-toolbars:



Creating Toolbars
^^^^^^^^^^^^^^^^^

    Toolbars are implemented in the :class:`PySide.QtGui.QToolBar` class. You add a toolbar to a main window with ``addToolBar()`` .

    You control the initial position of toolbars by assigning them to a specific :attr:`Qt.ToolBarArea` . You can split an area by inserting a toolbar break - think of this as a line break in text editing - with ``addToolBarBreak()`` or ``insertToolBarBreak()`` . You can also restrict placement by the user with :meth:`QToolBar.setAllowedAreas()<PySide.QtGui.QToolBar.setAllowedAreas>` and :meth:`QToolBar.setMovable()<PySide.QtGui.QToolBar.setMovable>` .

    The size of toolbar icons can be retrieved with ``iconSize()`` . The sizes are platform dependent; you can set a fixed size with ``setIconSize()`` . You can alter the appearance of all tool buttons in the toolbars with ``setToolButtonStyle()`` .

    An example of toolbar creation follows:

    ::

        def createToolBars(self):
            fileToolBar = addToolBar(tr("File"))
            fileToolBar.addAction(Act)


    .. _PySide.QtGui.QMainWindow_creating-dock-widgets:



Creating Dock Widgets
^^^^^^^^^^^^^^^^^^^^^

    Dock widgets are implemented in the :class:`PySide.QtGui.QDockWidget` class. A dock widget is a window that can be docked into the main window. You add dock widgets to a main window with ``addDockWidget()`` .

    There are four dock widget areas as given by the :attr:`Qt.DockWidgetArea` enum: left, right, top, and bottom. You can specify which dock widget area that should occupy the corners where the areas overlap with ``setCorner()`` . By default each area can only contain one row (vertical or horizontal) of dock widgets, but if you enable nesting with ``setDockNestingEnabled()`` , dock widgets can be added in either direction.

    Two dock widgets may also be stacked on top of each other. A :class:`PySide.QtGui.QTabBar` is then used to select which of the widgets that should be displayed.

    We give an example of how to create and add dock widgets to a main window:

    ::

            dockWidget = QDockWidget(tr("Dock Widget"), self)
            dockWidget.setAllowedAreas(Qt.LeftDockWidgetArea | 
                           			   Qt.RightDockWidgetArea)
            dockWidget.setWidget(dockWidgetContents)
            addDockWidget(Qt.LeftDockWidgetArea, dockWidget) 


    .. _PySide.QtGui.QMainWindow_the-status-bar:



The Status Bar
^^^^^^^^^^^^^^

    You can set a status bar with ``setStatusBar()`` , but one is created the first time ``statusBar()`` (which returns the main window's status bar) is called. See :class:`PySide.QtGui.QStatusBar` for information on how to use it.

    .. _PySide.QtGui.QMainWindow_storing-state:



Storing State
^^^^^^^^^^^^^

    :class:`PySide.QtGui.QMainWindow` can store the state of its layout with ``saveState()`` ; it can later be retrieved with ``restoreState()`` . It is the position and size (relative to the size of the main window) of the toolbars and dock widgets that are stored.

    .. seealso::  :class:`PySide.QtGui.QMenuBar`  :class:`PySide.QtGui.QToolBar`  :class:`PySide.QtGui.QStatusBar`  :class:`PySide.QtGui.QDockWidget`  :ref:`Application Example<mainwindows/application>`  :ref:`Dock Widgets Example<mainwindows/dockwidgets>`  :ref:`MDI Example<mainwindows/mdi>`  :ref:`SDI Example<mainwindows/sdi>`  :ref:`Menus Example<mainwindows/menus>` 

.. class:: QMainWindow([parent=None[, flags=0]])

    :param flags: :class:`PySide.QtCore.Qt.WindowFlags`
    :param parent: :class:`PySide.QtGui.QWidget`



.. attribute:: PySide.QtGui.QMainWindow.DockOption

    This enum contains flags that specify the docking behavior of :class:`PySide.QtGui.QMainWindow` .

    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                    |Description                                                                                                                                                                                                                                                                           |
    +============================+======================================================================================================================================================================================================================================================================================+
    |QMainWindow.AnimatedDocks   |Identical to the :meth:`~PySide.QtGui.QMainWindow.animated` property.                                                                                                                                                                                                                 |
    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QMainWindow.AllowNestedDocks|Identical to the :meth:`~PySide.QtGui.QMainWindow.dockNestingEnabled` property.                                                                                                                                                                                                       |
    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QMainWindow.AllowTabbedDocks|The user can drop one dock widget "on top" of another. The two widgets are stacked and a tab bar appears for selecting which one is visible.                                                                                                                                          |
    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QMainWindow.ForceTabbedDocks|Each dock area contains a single stack of tabbed dock widgets. In other words, dock widgets cannot be placed next to each other in a dock area. If this option is set, :attr:`AllowNestedDocks<QMainWindow.DockOption>` has no effect.                                                |
    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QMainWindow.VerticalTabs    |The two vertical dock areas on the sides of the main window show their tabs vertically. If this option is not set, all dock areas show their tabs at the bottom. Implies :attr:`AllowTabbedDocks<QMainWindow.DockOption>` . See also :meth:`PySide.QtGui.QMainWindow.setTabPosition` .|
    +----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    These options only control how dock widgets may be dropped in a :class:`PySide.QtGui.QMainWindow` . They do not re-arrange the dock widgets to conform with the specified options. For this reason they should be set before any dock widgets are added to the main window. Exceptions to this are the :attr:`AnimatedDocks<QMainWindow.DockOption>` and :attr:`VerticalTabs<QMainWindow.DockOption>` options, which may be set at any time.


.. method:: PySide.QtGui.QMainWindow.addDockWidget(area, dockwidget, orientation)


    :param area: :attr:`PySide.QtCore.Qt.DockWidgetArea`
    :param dockwidget: :class:`PySide.QtGui.QDockWidget`
    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`







.. method:: PySide.QtGui.QMainWindow.addDockWidget(area, dockwidget)


    :param area: :attr:`PySide.QtCore.Qt.DockWidgetArea`
    :param dockwidget: :class:`PySide.QtGui.QDockWidget`







.. method:: PySide.QtGui.QMainWindow.addToolBar(area, toolbar)


    :param area: :attr:`PySide.QtCore.Qt.ToolBarArea`
    :param toolbar: :class:`PySide.QtGui.QToolBar`







.. method:: PySide.QtGui.QMainWindow.addToolBar(title)


    :param title: unicode
    :rtype: :class:`PySide.QtGui.QToolBar`




    This is an overloaded function.

    Creates a :class:`PySide.QtGui.QToolBar` object, setting its window title to ``title`` , and inserts it into the top toolbar area.

    .. seealso::  :meth:`PySide.QtGui.QWidget.setWindowTitle` 


.. method:: PySide.QtGui.QMainWindow.addToolBar(toolbar)


    :param toolbar: :class:`PySide.QtGui.QToolBar`




    This is an overloaded function.

    Equivalent of calling addToolBar( :attr:`Qt.TopToolBarArea<Qt.ToolBarArea>` , ``toolbar`` )



.. method:: PySide.QtGui.QMainWindow.addToolBarBreak([area=Qt.TopToolBarArea])


    :param area: :attr:`PySide.QtCore.Qt.ToolBarArea`







.. method:: PySide.QtGui.QMainWindow.centralWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the central widget for the main window. This function returns zero if the central widget has not been set.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.setCentralWidget` 


.. method:: PySide.QtGui.QMainWindow.corner(corner)


    :param corner: :attr:`PySide.QtCore.Qt.Corner`
    :rtype: :attr:`PySide.QtCore.Qt.DockWidgetArea`







.. method:: PySide.QtGui.QMainWindow.createPopupMenu()


    :rtype: :class:`PySide.QtGui.QMenu`




    Returns a popup menu containing checkable entries for the toolbars and dock widgets present in the main window. If there are no toolbars and dock widgets present, this function returns a null pointer.

    By default, this function is called by the main window when the user activates a context menu, typically by right-clicking on a toolbar or a dock widget.

    If you want to create a custom popup menu, reimplement this function and return a newly-created popup menu. Ownership of the popup menu is transferred to the caller.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.addDockWidget`  :meth:`PySide.QtGui.QMainWindow.addToolBar`  :meth:`PySide.QtGui.QMainWindow.menuBar` 


.. method:: PySide.QtGui.QMainWindow.dockOptions()


    :rtype: :class:`PySide.QtGui.QMainWindow.DockOptions`




    This property holds the docking behavior of :class:`PySide.QtGui.QMainWindow` .

    The default value is :attr:`AnimatedDocks<QMainWindow.DockOption>` | :attr:`AllowTabbedDocks<QMainWindow.DockOption>` .



.. method:: PySide.QtGui.QMainWindow.dockWidgetArea(dockwidget)


    :param dockwidget: :class:`PySide.QtGui.QDockWidget`
    :rtype: :attr:`PySide.QtCore.Qt.DockWidgetArea`




    Returns the :attr:`Qt.DockWidgetArea` for ``dockwidget`` . If ``dockwidget`` has not been added to the main window, this function returns ``Qt::NoDockWidgetArea`` .

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.addDockWidget`  :meth:`PySide.QtGui.QMainWindow.splitDockWidget`  :attr:`Qt.DockWidgetArea` 


.. method:: PySide.QtGui.QMainWindow.documentMode()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the tab bar for tabbed dockwidgets is set to document mode..

    The default is false.

    .. seealso::  :meth:`QTabBar.documentMode<PySide.QtGui.QTabBar.documentMode>` 


.. method:: PySide.QtGui.QMainWindow.iconSize()


    :rtype: :class:`PySide.QtCore.QSize`




    This property holds size of toolbar icons in this mainwindow..

    The default is the default tool bar icon size of the GUI style. Note that the icons used must be at least of this size as the icons are only scaled down.



.. method:: PySide.QtGui.QMainWindow.iconSizeChanged(iconSize)


    :param iconSize: :class:`PySide.QtCore.QSize`






.. method:: PySide.QtGui.QMainWindow.insertToolBar(before, toolbar)


    :param before: :class:`PySide.QtGui.QToolBar`
    :param toolbar: :class:`PySide.QtGui.QToolBar`




    Inserts the ``toolbar`` into the area occupied by the ``before`` toolbar so that it appears before it. For example, in normal left-to-right layout operation, this means that ``toolbar`` will appear to the left of the toolbar specified by ``before`` in a horizontal toolbar area.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.insertToolBarBreak`  :meth:`PySide.QtGui.QMainWindow.addToolBar`  :meth:`PySide.QtGui.QMainWindow.addToolBarBreak` 


.. method:: PySide.QtGui.QMainWindow.insertToolBarBreak(before)


    :param before: :class:`PySide.QtGui.QToolBar`




    Inserts a toolbar break before the toolbar specified by ``before`` .



.. method:: PySide.QtGui.QMainWindow.isAnimated()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether manipulating dock widgets and tool bars is animated.

    When a dock widget or tool bar is dragged over the main window, the main window adjusts its contents to indicate where the dock widget or tool bar will be docked if it is dropped. Setting this property causes :class:`PySide.QtGui.QMainWindow` to move its contents in a smooth animation. Clearing this property causes the contents to snap into their new positions.

    By default, this property is set. It may be cleared if the main window contains widgets which are slow at resizing or repainting themselves.

    Setting this property is identical to setting the :attr:`AnimatedDocks<QMainWindow.DockOption>` option using :meth:`PySide.QtGui.QMainWindow.setDockOptions` .



.. method:: PySide.QtGui.QMainWindow.isDockNestingEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether docks can be nested.

    If this property is false, dock areas can only contain a single row (horizontal or vertical) of dock widgets. If this property is true, the area occupied by a dock widget can be split in either direction to contain more dock widgets.

    Dock nesting is only necessary in applications that contain a lot of dock widgets. It gives the user greater freedom in organizing their main window. However, dock nesting leads to more complex (and less intuitive) behavior when a dock widget is dragged over the main window, since there are more ways in which a dropped dock widget may be placed in the dock area.

    Setting this property is identical to setting the :attr:`AllowNestedDocks<QMainWindow.DockOption>` option using :meth:`PySide.QtGui.QMainWindow.setDockOptions` .



.. method:: PySide.QtGui.QMainWindow.isSeparator(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QMainWindow.menuBar()


    :rtype: :class:`PySide.QtGui.QMenuBar`




    Returns the menu bar for the main window. This function creates and returns an empty menu bar if the menu bar does not exist.

    If you want all windows in a Mac application to share one menu bar, don't use this function to create it, because the menu bar created here will have this :class:`PySide.QtGui.QMainWindow` as its parent. Instead, you must create a menu bar that does not have a parent, which you can then share among all the Mac windows. Create a parent-less menu bar this way:

    ::

        menuBar = QMenuBar()


    .. seealso::  :meth:`PySide.QtGui.QMainWindow.setMenuBar` 


.. method:: PySide.QtGui.QMainWindow.menuWidget()


    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the menu bar for the main window. This function returns null if a menu bar hasn't been constructed yet.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.setMenuWidget` 


.. method:: PySide.QtGui.QMainWindow.removeDockWidget(dockwidget)


    :param dockwidget: :class:`PySide.QtGui.QDockWidget`




    Removes the ``dockwidget`` from the main window layout and hides it. Note that the ``dockwidget`` is *not* deleted.



.. method:: PySide.QtGui.QMainWindow.removeToolBar(toolbar)


    :param toolbar: :class:`PySide.QtGui.QToolBar`




    Removes the ``toolbar`` from the main window layout and hides it. Note that the ``toolbar`` is *not* deleted.



.. method:: PySide.QtGui.QMainWindow.removeToolBarBreak(before)


    :param before: :class:`PySide.QtGui.QToolBar`




    Removes a toolbar break previously inserted before the toolbar specified by ``before`` .



.. method:: PySide.QtGui.QMainWindow.restoreDockWidget(dockwidget)


    :param dockwidget: :class:`PySide.QtGui.QDockWidget`
    :rtype: :class:`PySide.QtCore.bool`




    Restores the state of ``dockwidget`` if it is created after the call to :meth:`PySide.QtGui.QMainWindow.restoreState` . Returns true if the state was restored; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.restoreState`  :meth:`PySide.QtGui.QMainWindow.saveState` 


.. method:: PySide.QtGui.QMainWindow.restoreState(state[, version=0])


    :param state: :class:`PySide.QtCore.QByteArray`
    :param version: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Restores the ``state`` of this mainwindow's toolbars and dockwidgets. The ``version`` number is compared with that stored in ``state`` . If they do not match, the mainwindow's state is left unchanged, and this function returns ``false`` ; otherwise, the state is restored, and this function returns ``true`` .

    To restore geometry saved using :class:`PySide.QtCore.QSettings` , you can use code like this:

    ::

        def readSettings(self):
            settings = QSettings("MyCompany", "MyApp")
            restoreGeometry(settings.value("myWidget/geometry"))
            restoreState(settings.value("myWidget/windowState"))


    .. seealso::  :meth:`PySide.QtGui.QMainWindow.saveState`  :meth:`QWidget.saveGeometry()<PySide.QtGui.QWidget.saveGeometry>`  :meth:`QWidget.restoreGeometry()<PySide.QtGui.QWidget.restoreGeometry>`  :meth:`PySide.QtGui.QMainWindow.restoreDockWidget` 


.. method:: PySide.QtGui.QMainWindow.saveState([version=0])


    :param version: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QByteArray`




    Saves the current state of this mainwindow's toolbars and dockwidgets. The ``version`` number is stored as part of the data.

    The :meth:`PySide.QtCore.QObject.objectName` property is used to identify each :class:`PySide.QtGui.QToolBar` and :class:`PySide.QtGui.QDockWidget` . You should make sure that this property is unique for each :class:`PySide.QtGui.QToolBar` and :class:`PySide.QtGui.QDockWidget` you add to the :class:`PySide.QtGui.QMainWindow`

    To restore the saved state, pass the return value and ``version`` number to :meth:`PySide.QtGui.QMainWindow.restoreState` .

    To save the geometry when the window closes, you can implement a close event like this:

    ::

        def closeEvent(self, event):
            settings = QSettings("MyCompany", "MyApp")
            settings.setValue("geometry", self.saveGeometry())
            settings.setValue("windowState", self.saveState())
            QMainWindow.closeEvent(self, event)


    .. seealso::  :meth:`PySide.QtGui.QMainWindow.restoreState`  :meth:`QWidget.saveGeometry()<PySide.QtGui.QWidget.saveGeometry>`  :meth:`QWidget.restoreGeometry()<PySide.QtGui.QWidget.restoreGeometry>` 


.. method:: PySide.QtGui.QMainWindow.setAnimated(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether manipulating dock widgets and tool bars is animated.

    When a dock widget or tool bar is dragged over the main window, the main window adjusts its contents to indicate where the dock widget or tool bar will be docked if it is dropped. Setting this property causes :class:`PySide.QtGui.QMainWindow` to move its contents in a smooth animation. Clearing this property causes the contents to snap into their new positions.

    By default, this property is set. It may be cleared if the main window contains widgets which are slow at resizing or repainting themselves.

    Setting this property is identical to setting the :attr:`AnimatedDocks<QMainWindow.DockOption>` option using :meth:`PySide.QtGui.QMainWindow.setDockOptions` .



.. method:: PySide.QtGui.QMainWindow.setCentralWidget(widget)


    :param widget: :class:`PySide.QtGui.QWidget`




    Sets the given ``widget`` to be the main window's central widget.

    Note: :class:`PySide.QtGui.QMainWindow` takes ownership of the ``widget`` pointer and deletes it at the appropriate time.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.centralWidget` 


.. method:: PySide.QtGui.QMainWindow.setCorner(corner, area)


    :param corner: :attr:`PySide.QtCore.Qt.Corner`
    :param area: :attr:`PySide.QtCore.Qt.DockWidgetArea`







.. method:: PySide.QtGui.QMainWindow.setDockNestingEnabled(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether docks can be nested.

    If this property is false, dock areas can only contain a single row (horizontal or vertical) of dock widgets. If this property is true, the area occupied by a dock widget can be split in either direction to contain more dock widgets.

    Dock nesting is only necessary in applications that contain a lot of dock widgets. It gives the user greater freedom in organizing their main window. However, dock nesting leads to more complex (and less intuitive) behavior when a dock widget is dragged over the main window, since there are more ways in which a dropped dock widget may be placed in the dock area.

    Setting this property is identical to setting the :attr:`AllowNestedDocks<QMainWindow.DockOption>` option using :meth:`PySide.QtGui.QMainWindow.setDockOptions` .



.. method:: PySide.QtGui.QMainWindow.setDockOptions(options)


    :param options: :class:`PySide.QtGui.QMainWindow.DockOptions`




    This property holds the docking behavior of :class:`PySide.QtGui.QMainWindow` .

    The default value is :attr:`AnimatedDocks<QMainWindow.DockOption>` | :attr:`AllowTabbedDocks<QMainWindow.DockOption>` .



.. method:: PySide.QtGui.QMainWindow.setDocumentMode(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether the tab bar for tabbed dockwidgets is set to document mode..

    The default is false.

    .. seealso::  :meth:`QTabBar.documentMode<PySide.QtGui.QTabBar.documentMode>` 


.. method:: PySide.QtGui.QMainWindow.setIconSize(iconSize)


    :param iconSize: :class:`PySide.QtCore.QSize`




    This property holds size of toolbar icons in this mainwindow..

    The default is the default tool bar icon size of the GUI style. Note that the icons used must be at least of this size as the icons are only scaled down.



.. method:: PySide.QtGui.QMainWindow.setMenuBar(menubar)


    :param menubar: :class:`PySide.QtGui.QMenuBar`




    Sets the menu bar for the main window to ``menuBar`` .

    Note: :class:`PySide.QtGui.QMainWindow` takes ownership of the ``menuBar`` pointer and deletes it at the appropriate time.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.menuBar` 


.. method:: PySide.QtGui.QMainWindow.setMenuWidget(menubar)


    :param menubar: :class:`PySide.QtGui.QWidget`




    Sets the menu bar for the main window to ``menuBar`` .

    :class:`PySide.QtGui.QMainWindow` takes ownership of the ``menuBar`` pointer and deletes it at the appropriate time.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.menuWidget` 


.. method:: PySide.QtGui.QMainWindow.setStatusBar(statusbar)


    :param statusbar: :class:`PySide.QtGui.QStatusBar`




    Sets the status bar for the main window to ``statusbar`` .

    Setting the status bar to 0 will remove it from the main window. Note that :class:`PySide.QtGui.QMainWindow` takes ownership of the ``statusbar`` pointer and deletes it at the appropriate time.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.statusBar` 


.. method:: PySide.QtGui.QMainWindow.setTabPosition(areas, tabPosition)


    :param areas: :class:`PySide.QtCore.Qt.DockWidgetAreas`
    :param tabPosition: :attr:`PySide.QtGui.QTabWidget.TabPosition`







.. method:: PySide.QtGui.QMainWindow.setTabShape(tabShape)


    :param tabShape: :attr:`PySide.QtGui.QTabWidget.TabShape`




    This property holds the tab shape used for tabbed dock widgets..

    The default is :attr:`QTabWidget.Rounded<QTabWidget.TabShape>` .

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.setTabPosition` 


.. method:: PySide.QtGui.QMainWindow.setToolButtonStyle(toolButtonStyle)


    :param toolButtonStyle: :attr:`PySide.QtCore.Qt.ToolButtonStyle`




    This property holds style of toolbar buttons in this mainwindow..

    The default is :attr:`Qt.ToolButtonIconOnly<Qt.ToolButtonStyle>` .



.. method:: PySide.QtGui.QMainWindow.setUnifiedTitleAndToolBarOnMac(set)


    :param set: :class:`PySide.QtCore.bool`




    This property holds whether the window uses the unified title and toolbar look on Mac OS X.

    This property is false by default and only has any effect on Mac OS X 10.4 or higher.

    If set to true, then the top toolbar area is replaced with a Carbon HIToolbar or a Cocoa NSToolbar (depending on whether Qt was built with Carbon or Cocoa). All toolbars in the top toolbar area and any toolbars added afterwards are moved to that. This means a couple of things.


    * QToolBars in this toolbar area are not movable and you cannot drag other toolbars to it
    * Toolbar breaks are not respected or preserved
    * Any custom widgets in the toolbar will not be shown if the toolbar becomes too small (only actions will be shown)
    * Before Qt 4.5, if you called :meth:`PySide.QtGui.QWidget.showFullScreen` on the main window, the :ref:`QToolbar<porting4.html>` would disappear since it is considered to be part of the title bar. Qt 4.5 and up will now work around this by pulling the toolbars out and back into the regular toolbar and vice versa when you swap out.

    Setting this back to false will remove these restrictions.

    The :attr:`Qt.WA_MacBrushedMetal<Qt.WidgetAttribute>` attribute takes precedence over this property.



.. method:: PySide.QtGui.QMainWindow.splitDockWidget(after, dockwidget, orientation)


    :param after: :class:`PySide.QtGui.QDockWidget`
    :param dockwidget: :class:`PySide.QtGui.QDockWidget`
    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`







.. method:: PySide.QtGui.QMainWindow.statusBar()


    :rtype: :class:`PySide.QtGui.QStatusBar`




    Returns the status bar for the main window. This function creates and returns an empty status bar if the status bar does not exist.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.setStatusBar` 


.. method:: PySide.QtGui.QMainWindow.tabPosition(area)


    :param area: :attr:`PySide.QtCore.Qt.DockWidgetArea`
    :rtype: :attr:`PySide.QtGui.QTabWidget.TabPosition`







.. method:: PySide.QtGui.QMainWindow.tabShape()


    :rtype: :attr:`PySide.QtGui.QTabWidget.TabShape`




    This property holds the tab shape used for tabbed dock widgets..

    The default is :attr:`QTabWidget.Rounded<QTabWidget.TabShape>` .

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.setTabPosition` 


.. method:: PySide.QtGui.QMainWindow.tabifiedDockWidgets(dockwidget)


    :param dockwidget: :class:`PySide.QtGui.QDockWidget`
    :rtype: 




    Returns the dock widgets that are tabified together with ``dockwidget`` .

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.tabifyDockWidget` 


.. method:: PySide.QtGui.QMainWindow.tabifyDockWidget(first, second)


    :param first: :class:`PySide.QtGui.QDockWidget`
    :param second: :class:`PySide.QtGui.QDockWidget`




    Moves ``second`` dock widget on top of ``first`` dock widget, creating a tabbed docked area in the main window.

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.tabifiedDockWidgets` 


.. method:: PySide.QtGui.QMainWindow.toolBarArea(toolbar)


    :param toolbar: :class:`PySide.QtGui.QToolBar`
    :rtype: :attr:`PySide.QtCore.Qt.ToolBarArea`




    Returns the :attr:`Qt.ToolBarArea` for ``toolbar`` . If ``toolbar`` has not been added to the main window, this function returns ``Qt::NoToolBarArea`` .

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.addToolBar`  :meth:`PySide.QtGui.QMainWindow.addToolBarBreak`  :attr:`Qt.ToolBarArea` 


.. method:: PySide.QtGui.QMainWindow.toolBarBreak(toolbar)


    :param toolbar: :class:`PySide.QtGui.QToolBar`
    :rtype: :class:`PySide.QtCore.bool`




    Returns whether there is a toolbar break before the ``toolbar`` .

    .. seealso::  :meth:`PySide.QtGui.QMainWindow.addToolBarBreak`  :meth:`PySide.QtGui.QMainWindow.insertToolBarBreak` 


.. method:: PySide.QtGui.QMainWindow.toolButtonStyle()


    :rtype: :attr:`PySide.QtCore.Qt.ToolButtonStyle`




    This property holds style of toolbar buttons in this mainwindow..

    The default is :attr:`Qt.ToolButtonIconOnly<Qt.ToolButtonStyle>` .



.. method:: PySide.QtGui.QMainWindow.toolButtonStyleChanged(toolButtonStyle)


    :param toolButtonStyle: :attr:`PySide.QtCore.Qt.ToolButtonStyle`






.. method:: PySide.QtGui.QMainWindow.unifiedTitleAndToolBarOnMac()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the window uses the unified title and toolbar look on Mac OS X.

    This property is false by default and only has any effect on Mac OS X 10.4 or higher.

    If set to true, then the top toolbar area is replaced with a Carbon HIToolbar or a Cocoa NSToolbar (depending on whether Qt was built with Carbon or Cocoa). All toolbars in the top toolbar area and any toolbars added afterwards are moved to that. This means a couple of things.


    * QToolBars in this toolbar area are not movable and you cannot drag other toolbars to it
    * Toolbar breaks are not respected or preserved
    * Any custom widgets in the toolbar will not be shown if the toolbar becomes too small (only actions will be shown)
    * Before Qt 4.5, if you called :meth:`PySide.QtGui.QWidget.showFullScreen` on the main window, the :ref:`QToolbar<porting4.html>` would disappear since it is considered to be part of the title bar. Qt 4.5 and up will now work around this by pulling the toolbars out and back into the regular toolbar and vice versa when you swap out.

    Setting this back to false will remove these restrictions.

    The :attr:`Qt.WA_MacBrushedMetal<Qt.WidgetAttribute>` attribute takes precedence over this property.




