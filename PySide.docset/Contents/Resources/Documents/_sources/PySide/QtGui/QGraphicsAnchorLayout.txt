.. module:: PySide.QtGui
.. _QGraphicsAnchorLayout:

QGraphicsAnchorLayout
*********************

.. inheritance-diagram:: QGraphicsAnchorLayout
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addAnchor<PySide.QtGui.QGraphicsAnchorLayout.addAnchor>` (firstItem, firstEdge, secondItem, secondEdge)
*    def :meth:`addAnchors<PySide.QtGui.QGraphicsAnchorLayout.addAnchors>` (firstItem, secondItem[, orientations=Qt.Horizontal | Qt.Vertical])
*    def :meth:`addCornerAnchors<PySide.QtGui.QGraphicsAnchorLayout.addCornerAnchors>` (firstItem, firstCorner, secondItem, secondCorner)
*    def :meth:`anchor<PySide.QtGui.QGraphicsAnchorLayout.anchor>` (firstItem, firstEdge, secondItem, secondEdge)
*    def :meth:`horizontalSpacing<PySide.QtGui.QGraphicsAnchorLayout.horizontalSpacing>` ()
*    def :meth:`setHorizontalSpacing<PySide.QtGui.QGraphicsAnchorLayout.setHorizontalSpacing>` (spacing)
*    def :meth:`setSpacing<PySide.QtGui.QGraphicsAnchorLayout.setSpacing>` (spacing)
*    def :meth:`setVerticalSpacing<PySide.QtGui.QGraphicsAnchorLayout.setVerticalSpacing>` (spacing)
*    def :meth:`verticalSpacing<PySide.QtGui.QGraphicsAnchorLayout.verticalSpacing>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QGraphicsAnchorLayout` class provides a layout where one can anchor widgets together in Graphics View.

    The anchor layout allows developers to specify how widgets should be placed relative to each other, and to the layout itself. The specification is made by adding anchors to the layout by calling :meth:`PySide.QtGui.QGraphicsAnchorLayout.addAnchor` , :meth:`PySide.QtGui.QGraphicsAnchorLayout.addAnchors` or :meth:`PySide.QtGui.QGraphicsAnchorLayout.addCornerAnchors` .

    Existing anchors in the layout can be accessed with the :meth:`PySide.QtGui.QGraphicsAnchorLayout.anchor` function. Items that are anchored are automatically added to the layout, and if items are removed, all their anchors will be automatically removed.

    .. raw:: html

        <div style="float: left; margin-right: 2em">


    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/simpleanchorlayout-example.png .. raw:: html </div>

    Anchors are always set up between edges of an item, where the "center" is also considered to be an edge. Consider the following example:

    ::

        layout.addAnchor(b, Qt.AnchorLeft, a, Qt.AnchorRight)
        layout.addAnchor(b, Qt.AnchorTop, a, Qt.AnchorBottom)


    Here, the right edge of item ``a`` is anchored to the left edge of item ``b`` and the bottom edge of item ``a`` is anchored to the top edge of item ``b`` , with the result that item ``b`` will be placed diagonally to the right and below item ``b`` .

    The :meth:`PySide.QtGui.QGraphicsAnchorLayout.addCornerAnchors` function provides a simpler way of anchoring the corners of two widgets than the two individual calls to :meth:`PySide.QtGui.QGraphicsAnchorLayout.addAnchor` shown in the code above. Here, we see how a widget can be anchored to the top-left corner of the enclosing layout:

    ::

        layout.addCornerAnchors(a, Qt.TopLeftCorner, layout, Qt.TopLeftCorner)


    In cases where anchors are used to match the widths or heights of widgets, it is convenient to use the :meth:`PySide.QtGui.QGraphicsAnchorLayout.addAnchors` function. As with the other functions for specifying anchors, it can also be used to anchor a widget to a layout.

    .. raw:: html

        <br style="clear: both" />


    .. _PySide.QtGui.QGraphicsAnchorLayout_size-hints-and-size-policies-in-an-anchor-layout:



Size Hints and Size Policies in an Anchor Layout
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    :class:`PySide.QtGui.QGraphicsAnchorLayout` respects each item's size hints and size policies. Note that there are some properties of :class:`PySide.QtGui.QSizePolicy` that are :ref:`not respected<known-issues.html>` .

    .. _PySide.QtGui.QGraphicsAnchorLayout_spacing-within-an-anchor-layout:



Spacing within an Anchor Layout
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    The layout may distribute some space between the items. If the spacing has not been explicitly specified, the actual amount of space will usually be 0.

    However, if the first edge is the *opposite* of the second edge (e.g., the right edge of the first widget is anchored to the left edge of the second widget), the size of the anchor will be queried from the style through a pixel metric: :attr:`PM_LayoutHorizontalSpacing<QStyle.PixelMetric>` for horizontal anchors and :attr:`PM_LayoutVerticalSpacing<QStyle.PixelMetric>` for vertical anchors.

    If the spacing is negative, the items will overlap to some extent.

    .. _PySide.QtGui.QGraphicsAnchorLayout_known-issues:



Known issues
^^^^^^^^^^^^

    There are some features that :class:`PySide.QtGui.QGraphicsAnchorLayout` currently does not support. This might change in the future, so avoid using these features if you want to avoid any future regressions in behaviour:


    * Stretch factors are not respected.
    * :attr:`QSizePolicy.ExpandFlag<QSizePolicy.PolicyFlag>` is not respected.
    * Height for width is not respected.

    .. seealso::  :class:`PySide.QtGui.QGraphicsLinearLayout`  :class:`PySide.QtGui.QGraphicsGridLayout`  :class:`PySide.QtGui.QGraphicsLayout` 

.. class:: QGraphicsAnchorLayout([parent=None])

    :param parent: :class:`PySide.QtGui.QGraphicsLayoutItem`

    Constructs a :class:`PySide.QtGui.QGraphicsAnchorLayout` instance. ``parent`` is passed to :class:`PySide.QtGui.QGraphicsLayout` 's constructor.


.. method:: PySide.QtGui.QGraphicsAnchorLayout.addAnchor(firstItem, firstEdge, secondItem, secondEdge)


    :param firstItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param firstEdge: :attr:`PySide.QtCore.Qt.AnchorPoint`
    :param secondItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param secondEdge: :attr:`PySide.QtCore.Qt.AnchorPoint`
    :rtype: :class:`PySide.QtGui.QGraphicsAnchor`







.. method:: PySide.QtGui.QGraphicsAnchorLayout.addAnchors(firstItem, secondItem[, orientations=Qt.Horizontal | Qt.Vertical])


    :param firstItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param secondItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param orientations: :class:`PySide.QtCore.Qt.Orientations`







.. method:: PySide.QtGui.QGraphicsAnchorLayout.addCornerAnchors(firstItem, firstCorner, secondItem, secondCorner)


    :param firstItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param firstCorner: :attr:`PySide.QtCore.Qt.Corner`
    :param secondItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param secondCorner: :attr:`PySide.QtCore.Qt.Corner`







.. method:: PySide.QtGui.QGraphicsAnchorLayout.anchor(firstItem, firstEdge, secondItem, secondEdge)


    :param firstItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param firstEdge: :attr:`PySide.QtCore.Qt.AnchorPoint`
    :param secondItem: :class:`PySide.QtGui.QGraphicsLayoutItem`
    :param secondEdge: :attr:`PySide.QtCore.Qt.AnchorPoint`
    :rtype: :class:`PySide.QtGui.QGraphicsAnchor`







.. method:: PySide.QtGui.QGraphicsAnchorLayout.horizontalSpacing()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the default horizontal spacing for the anchor layout.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsAnchorLayout.verticalSpacing`  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setHorizontalSpacing` 


.. method:: PySide.QtGui.QGraphicsAnchorLayout.setHorizontalSpacing(spacing)


    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the default horizontal spacing for the anchor layout to ``spacing`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsAnchorLayout.horizontalSpacing`  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setVerticalSpacing`  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setSpacing` 


.. method:: PySide.QtGui.QGraphicsAnchorLayout.setSpacing(spacing)


    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the default horizontal and the default vertical spacing for the anchor layout to ``spacing`` .

    If an item is anchored with no spacing associated with the anchor, it will use the default spacing.

    :class:`PySide.QtGui.QGraphicsAnchorLayout` does not support negative spacings. Setting a negative value will unset the previous spacing and make the layout use the spacing provided by the current widget style.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setHorizontalSpacing`  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setVerticalSpacing` 


.. method:: PySide.QtGui.QGraphicsAnchorLayout.setVerticalSpacing(spacing)


    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the default vertical spacing for the anchor layout to ``spacing`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsAnchorLayout.verticalSpacing`  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setHorizontalSpacing`  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setSpacing` 


.. method:: PySide.QtGui.QGraphicsAnchorLayout.verticalSpacing()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the default vertical spacing for the anchor layout.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsAnchorLayout.horizontalSpacing`  :meth:`PySide.QtGui.QGraphicsAnchorLayout.setVerticalSpacing` 



