.. module:: PySide.QtGui
.. _QGraphicsScene:

QGraphicsScene
**************

.. inheritance-diagram:: QGraphicsScene
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`activePanel<PySide.QtGui.QGraphicsScene.activePanel>` ()
*    def :meth:`activeWindow<PySide.QtGui.QGraphicsScene.activeWindow>` ()
*    def :meth:`addEllipse<PySide.QtGui.QGraphicsScene.addEllipse>` (rect[, pen=QPen()[, brush=QBrush()]])
*    def :meth:`addEllipse<PySide.QtGui.QGraphicsScene.addEllipse>` (x, y, w, h[, pen=QPen()[, brush=QBrush()]])
*    def :meth:`addItem<PySide.QtGui.QGraphicsScene.addItem>` (item)
*    def :meth:`addLine<PySide.QtGui.QGraphicsScene.addLine>` (line[, pen=QPen()])
*    def :meth:`addLine<PySide.QtGui.QGraphicsScene.addLine>` (x1, y1, x2, y2[, pen=QPen()])
*    def :meth:`addPath<PySide.QtGui.QGraphicsScene.addPath>` (path[, pen=QPen()[, brush=QBrush()]])
*    def :meth:`addPixmap<PySide.QtGui.QGraphicsScene.addPixmap>` (pixmap)
*    def :meth:`addPolygon<PySide.QtGui.QGraphicsScene.addPolygon>` (polygon[, pen=QPen()[, brush=QBrush()]])
*    def :meth:`addRect<PySide.QtGui.QGraphicsScene.addRect>` (rect[, pen=QPen()[, brush=QBrush()]])
*    def :meth:`addRect<PySide.QtGui.QGraphicsScene.addRect>` (x, y, w, h[, pen=QPen()[, brush=QBrush()]])
*    def :meth:`addSimpleText<PySide.QtGui.QGraphicsScene.addSimpleText>` (text[, font=QFont()])
*    def :meth:`addText<PySide.QtGui.QGraphicsScene.addText>` (text[, font=QFont()])
*    def :meth:`addWidget<PySide.QtGui.QGraphicsScene.addWidget>` (widget[, wFlags=0])
*    def :meth:`backgroundBrush<PySide.QtGui.QGraphicsScene.backgroundBrush>` ()
*    def :meth:`bspTreeDepth<PySide.QtGui.QGraphicsScene.bspTreeDepth>` ()
*    def :meth:`clearFocus<PySide.QtGui.QGraphicsScene.clearFocus>` ()
*    def :meth:`collidingItems<PySide.QtGui.QGraphicsScene.collidingItems>` (item[, mode=Qt.IntersectsItemShape])
*    def :meth:`createItemGroup<PySide.QtGui.QGraphicsScene.createItemGroup>` (items)
*    def :meth:`destroyItemGroup<PySide.QtGui.QGraphicsScene.destroyItemGroup>` (group)
*    def :meth:`focusItem<PySide.QtGui.QGraphicsScene.focusItem>` ()
*    def :meth:`font<PySide.QtGui.QGraphicsScene.font>` ()
*    def :meth:`foregroundBrush<PySide.QtGui.QGraphicsScene.foregroundBrush>` ()
*    def :meth:`hasFocus<PySide.QtGui.QGraphicsScene.hasFocus>` ()
*    def :meth:`height<PySide.QtGui.QGraphicsScene.height>` ()
*    def :meth:`invalidate<PySide.QtGui.QGraphicsScene.invalidate>` (x, y, w, h[, layers=QGraphicsScene.AllLayers])
*    def :meth:`isActive<PySide.QtGui.QGraphicsScene.isActive>` ()
*    def :meth:`isSortCacheEnabled<PySide.QtGui.QGraphicsScene.isSortCacheEnabled>` ()
*    def :meth:`itemAt<PySide.QtGui.QGraphicsScene.itemAt>` (pos)
*    def :meth:`itemAt<PySide.QtGui.QGraphicsScene.itemAt>` (pos, deviceTransform)
*    def :meth:`itemAt<PySide.QtGui.QGraphicsScene.itemAt>` (x, y)
*    def :meth:`itemAt<PySide.QtGui.QGraphicsScene.itemAt>` (x, y, deviceTransform)
*    def :meth:`itemIndexMethod<PySide.QtGui.QGraphicsScene.itemIndexMethod>` ()
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` ()
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (order)
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (path, mode, order[, deviceTransform=QTransform()])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (path[, mode=Qt.IntersectsItemShape])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (polygon, mode, order[, deviceTransform=QTransform()])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (polygon[, mode=Qt.IntersectsItemShape])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (pos)
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (pos, mode, order[, deviceTransform=QTransform()])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (rect, mode, order[, deviceTransform=QTransform()])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (rect[, mode=Qt.IntersectsItemShape])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (x, y, w, h, mode, order[, deviceTransform=QTransform()])
*    def :meth:`items<PySide.QtGui.QGraphicsScene.items>` (x, y, w, h[, mode=Qt.IntersectsItemShape])
*    def :meth:`itemsBoundingRect<PySide.QtGui.QGraphicsScene.itemsBoundingRect>` ()
*    def :meth:`mouseGrabberItem<PySide.QtGui.QGraphicsScene.mouseGrabberItem>` ()
*    def :meth:`palette<PySide.QtGui.QGraphicsScene.palette>` ()
*    def :meth:`removeItem<PySide.QtGui.QGraphicsScene.removeItem>` (item)
*    def :meth:`render<PySide.QtGui.QGraphicsScene.render>` (painter[, target=QRectF()[, source=QRectF()[, aspectRatioMode=Qt.KeepAspectRatio]]])
*    def :meth:`sceneRect<PySide.QtGui.QGraphicsScene.sceneRect>` ()
*    def :meth:`selectedItems<PySide.QtGui.QGraphicsScene.selectedItems>` ()
*    def :meth:`selectionArea<PySide.QtGui.QGraphicsScene.selectionArea>` ()
*    def :meth:`sendEvent<PySide.QtGui.QGraphicsScene.sendEvent>` (item, event)
*    def :meth:`setActivePanel<PySide.QtGui.QGraphicsScene.setActivePanel>` (item)
*    def :meth:`setActiveWindow<PySide.QtGui.QGraphicsScene.setActiveWindow>` (widget)
*    def :meth:`setBackgroundBrush<PySide.QtGui.QGraphicsScene.setBackgroundBrush>` (brush)
*    def :meth:`setBspTreeDepth<PySide.QtGui.QGraphicsScene.setBspTreeDepth>` (depth)
*    def :meth:`setFocus<PySide.QtGui.QGraphicsScene.setFocus>` ([focusReason=Qt.OtherFocusReason])
*    def :meth:`setFocusItem<PySide.QtGui.QGraphicsScene.setFocusItem>` (item[, focusReason=Qt.OtherFocusReason])
*    def :meth:`setFont<PySide.QtGui.QGraphicsScene.setFont>` (font)
*    def :meth:`setForegroundBrush<PySide.QtGui.QGraphicsScene.setForegroundBrush>` (brush)
*    def :meth:`setItemIndexMethod<PySide.QtGui.QGraphicsScene.setItemIndexMethod>` (method)
*    def :meth:`setPalette<PySide.QtGui.QGraphicsScene.setPalette>` (palette)
*    def :meth:`setSceneRect<PySide.QtGui.QGraphicsScene.setSceneRect>` (rect)
*    def :meth:`setSceneRect<PySide.QtGui.QGraphicsScene.setSceneRect>` (x, y, w, h)
*    def :meth:`setSelectionArea<PySide.QtGui.QGraphicsScene.setSelectionArea>` (path)
*    def :meth:`setSelectionArea<PySide.QtGui.QGraphicsScene.setSelectionArea>` (path, deviceTransform)
*    def :meth:`setSelectionArea<PySide.QtGui.QGraphicsScene.setSelectionArea>` (path, mode)
*    def :meth:`setSelectionArea<PySide.QtGui.QGraphicsScene.setSelectionArea>` (path, mode, deviceTransform)
*    def :meth:`setSortCacheEnabled<PySide.QtGui.QGraphicsScene.setSortCacheEnabled>` (enabled)
*    def :meth:`setStickyFocus<PySide.QtGui.QGraphicsScene.setStickyFocus>` (enabled)
*    def :meth:`setStyle<PySide.QtGui.QGraphicsScene.setStyle>` (style)
*    def :meth:`stickyFocus<PySide.QtGui.QGraphicsScene.stickyFocus>` ()
*    def :meth:`style<PySide.QtGui.QGraphicsScene.style>` ()
*    def :meth:`update<PySide.QtGui.QGraphicsScene.update>` (x, y, w, h)
*    def :meth:`views<PySide.QtGui.QGraphicsScene.views>` ()
*    def :meth:`width<PySide.QtGui.QGraphicsScene.width>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`contextMenuEvent<PySide.QtGui.QGraphicsScene.contextMenuEvent>` (event)
*    def :meth:`dragEnterEvent<PySide.QtGui.QGraphicsScene.dragEnterEvent>` (event)
*    def :meth:`dragLeaveEvent<PySide.QtGui.QGraphicsScene.dragLeaveEvent>` (event)
*    def :meth:`dragMoveEvent<PySide.QtGui.QGraphicsScene.dragMoveEvent>` (event)
*    def :meth:`drawBackground<PySide.QtGui.QGraphicsScene.drawBackground>` (painter, rect)
*    def :meth:`drawForeground<PySide.QtGui.QGraphicsScene.drawForeground>` (painter, rect)
*    def :meth:`dropEvent<PySide.QtGui.QGraphicsScene.dropEvent>` (event)
*    def :meth:`focusInEvent<PySide.QtGui.QGraphicsScene.focusInEvent>` (event)
*    def :meth:`focusOutEvent<PySide.QtGui.QGraphicsScene.focusOutEvent>` (event)
*    def :meth:`helpEvent<PySide.QtGui.QGraphicsScene.helpEvent>` (event)
*    def :meth:`inputMethodEvent<PySide.QtGui.QGraphicsScene.inputMethodEvent>` (event)
*    def :meth:`inputMethodQuery<PySide.QtGui.QGraphicsScene.inputMethodQuery>` (query)
*    def :meth:`keyPressEvent<PySide.QtGui.QGraphicsScene.keyPressEvent>` (event)
*    def :meth:`keyReleaseEvent<PySide.QtGui.QGraphicsScene.keyReleaseEvent>` (event)
*    def :meth:`mouseDoubleClickEvent<PySide.QtGui.QGraphicsScene.mouseDoubleClickEvent>` (event)
*    def :meth:`mouseMoveEvent<PySide.QtGui.QGraphicsScene.mouseMoveEvent>` (event)
*    def :meth:`mousePressEvent<PySide.QtGui.QGraphicsScene.mousePressEvent>` (event)
*    def :meth:`mouseReleaseEvent<PySide.QtGui.QGraphicsScene.mouseReleaseEvent>` (event)
*    def :meth:`wheelEvent<PySide.QtGui.QGraphicsScene.wheelEvent>` (event)


Slots
^^^^^
.. container:: function_list

*    def :meth:`advance<PySide.QtGui.QGraphicsScene.advance>` ()
*    def :meth:`clear<PySide.QtGui.QGraphicsScene.clear>` ()
*    def :meth:`clearSelection<PySide.QtGui.QGraphicsScene.clearSelection>` ()
*    def :meth:`focusNextPrevChild<PySide.QtGui.QGraphicsScene.focusNextPrevChild>` (next)
*    def :meth:`invalidate<PySide.QtGui.QGraphicsScene.invalidate>` ([rect=QRectF()[, layers=QGraphicsScene.AllLayers]])
*    def :meth:`update<PySide.QtGui.QGraphicsScene.update>` ([rect=QRectF()])


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`changed<PySide.QtGui.QGraphicsScene.changed>` (region)
*    def :meth:`sceneRectChanged<PySide.QtGui.QGraphicsScene.sceneRectChanged>` (rect)
*    def :meth:`selectionChanged<PySide.QtGui.QGraphicsScene.selectionChanged>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QGraphicsScene` class provides a surface for managing a large number of 2D graphical items.

    The class serves as a container for QGraphicsItems. It is used together with :class:`PySide.QtGui.QGraphicsView` for visualizing graphical items, such as lines, rectangles, text, or even custom items, on a 2D surface. :class:`PySide.QtGui.QGraphicsScene` is part of the :ref:`Graphics View Framework<graphicsview.html>` .

    :class:`PySide.QtGui.QGraphicsScene` also provides functionality that lets you efficiently determine both the location of items, and for determining what items are visible within an arbitrary area on the scene. With the :class:`PySide.QtGui.QGraphicsView` widget, you can either visualize the whole scene, or zoom in and view only parts of the scene.

    Example:

    ::

        scene = QGraphicsScene()
        scene.addText("Hello, world!")

        view = QGraphicsView(&scene)
        view.show()


    Note that :class:`PySide.QtGui.QGraphicsScene` has no visual appearance of its own; it only manages the items. You need to create a :class:`PySide.QtGui.QGraphicsView` widget to visualize the scene.

    To add items to a scene, you start off by constructing a :class:`PySide.QtGui.QGraphicsScene` object. Then, you have two options: either add your existing :class:`PySide.QtGui.QGraphicsItem` objects by calling :meth:`PySide.QtGui.QGraphicsScene.addItem` , or you can call one of the convenience functions :meth:`PySide.QtGui.QGraphicsScene.addEllipse` , :meth:`PySide.QtGui.QGraphicsScene.addLine` , :meth:`PySide.QtGui.QGraphicsScene.addPath` , :meth:`PySide.QtGui.QGraphicsScene.addPixmap` , :meth:`PySide.QtGui.QGraphicsScene.addPolygon` , :meth:`PySide.QtGui.QGraphicsScene.addRect` , or :meth:`PySide.QtGui.QGraphicsScene.addText` , which all return a pointer to the newly added item. The dimensions of the items added with these functions are relative to the item's coordinate system, and the items position is initialized to (0, 0) in the scene.

    You can then visualize the scene using :class:`PySide.QtGui.QGraphicsView` . When the scene changes, (e.g., when an item moves or is transformed) :class:`PySide.QtGui.QGraphicsScene` emits the :meth:`PySide.QtGui.QGraphicsScene.changed` signal. To remove an item, call :meth:`PySide.QtGui.QGraphicsScene.removeItem` .

    :class:`PySide.QtGui.QGraphicsScene` uses an indexing algorithm to manage the location of items efficiently. By default, a BSP (Binary Space Partitioning) tree is used; an algorithm suitable for large scenes where most items remain static (i.e., do not move around). You can choose to disable this index by calling :meth:`PySide.QtGui.QGraphicsScene.setItemIndexMethod` . For more information about the available indexing algorithms, see the :meth:`PySide.QtGui.QGraphicsScene.itemIndexMethod` property.

    The scene's bounding rect is set by calling :meth:`PySide.QtGui.QGraphicsScene.setSceneRect` . Items can be placed at any position on the scene, and the size of the scene is by default unlimited. The scene rect is used only for internal bookkeeping, maintaining the scene's item index. If the scene rect is unset, :class:`PySide.QtGui.QGraphicsScene` will use the bounding area of all items, as returned by :meth:`PySide.QtGui.QGraphicsScene.itemsBoundingRect` , as the scene rect. However, :meth:`PySide.QtGui.QGraphicsScene.itemsBoundingRect` is a relatively time consuming function, as it operates by collecting positional information for every item on the scene. Because of this, you should always set the scene rect when operating on large scenes.

    One of :class:`PySide.QtGui.QGraphicsScene` 's greatest strengths is its ability to efficiently determine the location of items. Even with millions of items on the scene, the :meth:`PySide.QtGui.QGraphicsScene.items` functions can determine the location of an item within few milliseconds. There are several overloads to :meth:`PySide.QtGui.QGraphicsScene.items` : one that finds items at a certain position, one that finds items inside or intersecting with a polygon or a rectangle, and more. The list of returned items is sorted by stacking order, with the topmost item being the first item in the list. For convenience, there is also an :meth:`PySide.QtGui.QGraphicsScene.itemAt` function that returns the topmost item at a given position.

    :class:`PySide.QtGui.QGraphicsScene` maintains selection information for the scene. To select items, call :meth:`PySide.QtGui.QGraphicsScene.setSelectionArea` , and to clear the current selection, call :meth:`PySide.QtGui.QGraphicsScene.clearSelection` . Call :meth:`PySide.QtGui.QGraphicsScene.selectedItems` to get the list of all selected items.

    .. _PySide.QtGui.QGraphicsScene_event-handling-and-propagation:



Event Handling and Propagation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Another responsibility that :class:`PySide.QtGui.QGraphicsScene` has, is to propagate events from :class:`PySide.QtGui.QGraphicsView` . To send an event to a scene, you construct an event that inherits :class:`PySide.QtCore.QEvent` , and then send it using, for example, :meth:`QApplication.sendEvent()<PySide.QtGui.QApplication.sendEvent>` . :meth:`PySide.QtGui.QGraphicsScene.event` is responsible for dispatching the event to the individual items. Some common events are handled by convenience event handlers. For example, key press events are handled by :meth:`PySide.QtGui.QGraphicsScene.keyPressEvent` , and mouse press events are handled by :meth:`PySide.QtGui.QGraphicsScene.mousePressEvent` .

    Key events are delivered to the *focus item* . To set the focus item, you can either call :meth:`PySide.QtGui.QGraphicsScene.setFocusItem` , passing an item that accepts focus, or the item itself can call :meth:`QGraphicsItem.setFocus()<PySide.QtGui.QGraphicsItem.setFocus>` . Call :meth:`PySide.QtGui.QGraphicsScene.focusItem` to get the current focus item. For compatibility with widgets, the scene also maintains its own focus information. By default, the scene does not have focus, and all key events are discarded. If :meth:`PySide.QtGui.QGraphicsScene.setFocus` is called, or if an item on the scene gains focus, the scene automatically gains focus. If the scene has focus, :meth:`PySide.QtGui.QGraphicsScene.hasFocus` will return true, and key events will be forwarded to the focus item, if any. If the scene loses focus, (i.e., someone calls :meth:`PySide.QtGui.QGraphicsScene.clearFocus` ,) while an item has focus, the scene will maintain its item focus information, and once the scene regains focus, it will make sure the last focus item regains focus.

    For mouse-over effects, :class:`PySide.QtGui.QGraphicsScene` dispatches *hover events* . If an item accepts hover events (see :meth:`QGraphicsItem.acceptHoverEvents()<PySide.QtGui.QGraphicsItem.acceptHoverEvents>` ), it will receive a :attr:`GraphicsSceneHoverEnter<QEvent.Type>` event when the mouse enters its area. As the mouse continues moving inside the item's area, :class:`PySide.QtGui.QGraphicsScene` will send it :attr:`GraphicsSceneHoverMove<QEvent.Type>` events. When the mouse leaves the item's area, the item will receive a :attr:`GraphicsSceneHoverLeave<QEvent.Type>` event.

    All mouse events are delivered to the current *mouse grabber* item. An item becomes the scene's mouse grabber if it accepts mouse events (see :meth:`QGraphicsItem.acceptedMouseButtons()<PySide.QtGui.QGraphicsItem.acceptedMouseButtons>` ) and it receives a mouse press. It stays the mouse grabber until it receives a mouse release when no other mouse buttons are pressed. You can call :meth:`PySide.QtGui.QGraphicsScene.mouseGrabberItem` to determine what item is currently grabbing the mouse.

    .. seealso::  :class:`PySide.QtGui.QGraphicsItem`  :class:`PySide.QtGui.QGraphicsView` 

.. class:: QGraphicsScene([parent=None])
           QGraphicsScene(sceneRect[, parent=None])
           QGraphicsScene(x, y, width, height[, parent=None])

    :param width: :class:`PySide.QtCore.qreal`
    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param height: :class:`PySide.QtCore.qreal`
    :param parent: :class:`PySide.QtCore.QObject`
    :param sceneRect: :class:`PySide.QtCore.QRectF`

    Constructs a :class:`PySide.QtGui.QGraphicsScene` object. The ``parent`` parameter is passed to :class:`PySide.QtCore.QObject` 's constructor.


    Constructs a :class:`PySide.QtGui.QGraphicsScene` object, using ``sceneRect`` for its scene rectangle. The ``parent`` parameter is passed to :class:`PySide.QtCore.QObject` 's constructor.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.sceneRect` 

    Constructs a :class:`PySide.QtGui.QGraphicsScene` object, using the rectangle specified by (``x`` , ``y`` ), and the given ``width`` and ``height`` for its scene rectangle. The ``parent`` parameter is passed to :class:`PySide.QtCore.QObject` 's constructor.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.sceneRect` 

.. attribute:: PySide.QtGui.QGraphicsScene.SceneLayer

    This enum describes the rendering layers in a :class:`PySide.QtGui.QGraphicsScene` . When :class:`PySide.QtGui.QGraphicsScene` draws the scene contents, it renders each of these layers separately, in order.

    Each layer represents a flag that can be OR'ed together when calling functions such as :meth:`PySide.QtGui.QGraphicsScene.invalidate` or :meth:`QGraphicsView.invalidateScene()<PySide.QtGui.QGraphicsView.invalidateScene>` .

    +------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                      |Description                                                                                                                                                                                                                                                  |
    +==============================+=============================================================================================================================================================================================================================================================+
    |QGraphicsScene.ItemLayer      |The item layer. :class:`PySide.QtGui.QGraphicsScene` renders all items are in this layer by calling the virtual function :meth:`PySide.QtGui.QGraphicsScene.drawItems` . The item layer is drawn after the background layer, but before the foreground layer.|
    +------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGraphicsScene.BackgroundLayer|The background layer. :class:`PySide.QtGui.QGraphicsScene` renders the scene's background in this layer by calling the virtual function :meth:`PySide.QtGui.QGraphicsScene.drawBackground` . The background layer is drawn first of all layers.              |
    +------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGraphicsScene.ForegroundLayer|The foreground layer. :class:`PySide.QtGui.QGraphicsScene` renders the scene's foreground in this layer by calling the virtual function :meth:`PySide.QtGui.QGraphicsScene.drawForeground` . The foreground layer is drawn last of all layers.               |
    +------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGraphicsScene.AllLayers      |All layers; this value represents a combination of all three layers.                                                                                                                                                                                         |
    +------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.invalidate`  :meth:`QGraphicsView.invalidateScene()<PySide.QtGui.QGraphicsView.invalidateScene>` 

.. attribute:: PySide.QtGui.QGraphicsScene.ItemIndexMethod

    This enum describes the indexing algorithms :class:`PySide.QtGui.QGraphicsScene` provides for managing positional information about items on the scene.

    +---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                   |Description                                                                                                                                                                                                                                                                                                                              |
    +===========================+=========================================================================================================================================================================================================================================================================================================================================+
    |QGraphicsScene.BspTreeIndex|A Binary Space Partitioning tree is applied. All :class:`PySide.QtGui.QGraphicsScene` 's item location algorithms are of an order close to logarithmic complexity, by making use of binary search. Adding, moving and removing items is logarithmic. This approach is best for static scenes (i.e., scenes where most items do not move).|
    +---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QGraphicsScene.NoIndex     |No index is applied. Item location is of linear complexity, as all items on the scene are searched. Adding, moving and removing items, however, is done in constant time. This approach is ideal for dynamic scenes, where many items are added, moved or removed continuously.                                                          |
    +---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.setItemIndexMethod`  :meth:`PySide.QtGui.QGraphicsScene.bspTreeDepth` 

.. method:: PySide.QtGui.QGraphicsScene.activePanel()


    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    Returns the current active panel, or 0 if no panel is currently active.

    .. seealso::  :meth:`QGraphicsScene.setActivePanel()<PySide.QtGui.QGraphicsScene.setActivePanel>` 


.. method:: PySide.QtGui.QGraphicsScene.activeWindow()


    :rtype: :class:`PySide.QtGui.QGraphicsWidget`




    Returns the current active window, or 0 if no window is currently active.

    .. seealso::  :meth:`QGraphicsScene.setActiveWindow()<PySide.QtGui.QGraphicsScene.setActiveWindow>` 


.. method:: PySide.QtGui.QGraphicsScene.addEllipse(rect[, pen=QPen()[, brush=QBrush()]])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param pen: :class:`PySide.QtGui.QPen`
    :param brush: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtGui.QGraphicsEllipseItem`




    Creates and adds an ellipse item to the scene, and returns the item pointer. The geometry of the ellipse is defined by ``rect`` , and its pen and brush are initialized to ``pen`` and ``brush`` .

    Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPath`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addText`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addEllipse(x, y, w, h[, pen=QPen()[, brush=QBrush()]])


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`
    :param pen: :class:`PySide.QtGui.QPen`
    :param brush: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtGui.QGraphicsEllipseItem`




    This convenience function is equivalent to calling addEllipse( :class:`PySide.QtCore.QRectF` (``x`` , ``y`` , ``w`` , ``h`` ), ``pen`` , ``brush`` ).



.. method:: PySide.QtGui.QGraphicsScene.addItem(item)


    :param item: :class:`PySide.QtGui.QGraphicsItem`




    Adds or moves the ``item`` and all its childen to this scene. This scene takes ownership of the ``item`` .

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    If the item is already in a different scene, it will first be removed from its old scene, and then added to this scene as a top-level.

    :class:`PySide.QtGui.QGraphicsScene` will send ItemSceneChange notifications to ``item`` while it is added to the scene. If item does not currently belong to a scene, only one notification is sent. If it does belong to scene already (i.e., it is moved to this scene), :class:`PySide.QtGui.QGraphicsScene` will send an addition notification as the item is removed from its previous scene.

    If the item is a panel, the scene is active, and there is no active panel in the scene, then the item will be activated.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.removeItem`  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPath`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addText`  :meth:`PySide.QtGui.QGraphicsScene.addWidget`  :class:`Sorting<~PySide.QtGui.QGraphicsItem#Sorting>` 


.. method:: PySide.QtGui.QGraphicsScene.addLine(x1, y1, x2, y2[, pen=QPen()])


    :param x1: :class:`PySide.QtCore.qreal`
    :param y1: :class:`PySide.QtCore.qreal`
    :param x2: :class:`PySide.QtCore.qreal`
    :param y2: :class:`PySide.QtCore.qreal`
    :param pen: :class:`PySide.QtGui.QPen`
    :rtype: :class:`PySide.QtGui.QGraphicsLineItem`




    This convenience function is equivalent to calling addLine( :class:`PySide.QtCore.QLineF` (``x1`` , ``y1`` , ``x2`` , ``y2`` ), ``pen`` ).



.. method:: PySide.QtGui.QGraphicsScene.addLine(line[, pen=QPen()])


    :param line: :class:`PySide.QtCore.QLineF`
    :param pen: :class:`PySide.QtGui.QPen`
    :rtype: :class:`PySide.QtGui.QGraphicsLineItem`




    Creates and adds a line item to the scene, and returns the item pointer. The geometry of the line is defined by ``line`` , and its pen is initialized to ``pen`` .

    Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addPath`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addText`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addPath(path[, pen=QPen()[, brush=QBrush()]])


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param pen: :class:`PySide.QtGui.QPen`
    :param brush: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtGui.QGraphicsPathItem`




    Creates and adds a path item to the scene, and returns the item pointer. The geometry of the path is defined by ``path`` , and its pen and brush are initialized to ``pen`` and ``brush`` .

    Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addText`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addPixmap(pixmap)


    :param pixmap: :class:`PySide.QtGui.QPixmap`
    :rtype: :class:`PySide.QtGui.QGraphicsPixmapItem`




    Creates and adds a pixmap item to the scene, and returns the item pointer. The pixmap is defined by ``pixmap`` .

    Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPath`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addText`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addPolygon(polygon[, pen=QPen()[, brush=QBrush()]])


    :param polygon: :class:`PySide.QtGui.QPolygonF`
    :param pen: :class:`PySide.QtGui.QPen`
    :param brush: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtGui.QGraphicsPolygonItem`




    Creates and adds a polygon item to the scene, and returns the item pointer. The polygon is defined by ``polygon`` , and its pen and brush are initialized to ``pen`` and ``brush`` .

    Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPath`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addText`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addRect(x, y, w, h[, pen=QPen()[, brush=QBrush()]])


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`
    :param pen: :class:`PySide.QtGui.QPen`
    :param brush: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtGui.QGraphicsRectItem`




    This convenience function is equivalent to calling addRect( :class:`PySide.QtCore.QRectF` (``x`` , ``y`` , ``w`` , ``h`` ), ``pen`` , ``brush`` ).



.. method:: PySide.QtGui.QGraphicsScene.addRect(rect[, pen=QPen()[, brush=QBrush()]])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param pen: :class:`PySide.QtGui.QPen`
    :param brush: :class:`PySide.QtGui.QBrush`
    :rtype: :class:`PySide.QtGui.QGraphicsRectItem`




    Creates and adds a rectangle item to the scene, and returns the item pointer. The geometry of the rectangle is defined by ``rect`` , and its pen and brush are initialized to ``pen`` and ``brush`` .

    Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0). For example, if a :class:`PySide.QtCore.QRect` (50, 50, 100, 100) is added, its top-left corner will be at (50, 50) relative to the origin in the items coordinate system.

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addText`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addSimpleText(text[, font=QFont()])


    :param text: unicode
    :param font: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtGui.QGraphicsSimpleTextItem`




    Creates and adds a :class:`PySide.QtGui.QGraphicsSimpleTextItem` to the scene, and returns the item pointer. The text string is initialized to ``text`` , and its font is initialized to ``font`` .

    The item's position is initialized to (0, 0).

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addText(text[, font=QFont()])


    :param text: unicode
    :param font: :class:`PySide.QtGui.QFont`
    :rtype: :class:`PySide.QtGui.QGraphicsTextItem`




    Creates and adds a text item to the scene, and returns the item pointer. The text string is initialized to ``text`` , and its font is initialized to ``font`` .

    The item's position is initialized to (0, 0).

    If the item is visible (i.e., :meth:`QGraphicsItem.isVisible()<PySide.QtGui.QGraphicsItem.isVisible>` returns true), :class:`PySide.QtGui.QGraphicsScene` will emit :meth:`PySide.QtGui.QGraphicsScene.changed` once control goes back to the event loop.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addEllipse`  :meth:`PySide.QtGui.QGraphicsScene.addLine`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addPixmap`  :meth:`PySide.QtGui.QGraphicsScene.addRect`  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.addWidget` 


.. method:: PySide.QtGui.QGraphicsScene.addWidget(widget[, wFlags=0])


    :param widget: :class:`PySide.QtGui.QWidget`
    :param wFlags: :class:`PySide.QtCore.Qt.WindowFlags`
    :rtype: :class:`PySide.QtGui.QGraphicsProxyWidget`







.. method:: PySide.QtGui.QGraphicsScene.advance()






    This slot *advances* the scene by one step, by calling :meth:`QGraphicsItem.advance()<PySide.QtGui.QGraphicsItem.advance>` for all items on the scene. This is done in two phases: in the first phase, all items are notified that the scene is about to change, and in the second phase all items are notified that they can move. In the first phase, :meth:`QGraphicsItem.advance()<PySide.QtGui.QGraphicsItem.advance>` is called passing a value of 0 as an argument, and 1 is passed in the second phase.

    .. seealso::  :meth:`QGraphicsItem.advance()<PySide.QtGui.QGraphicsItem.advance>`  :class:`PySide.QtGui.QGraphicsItemAnimation`  :class:`PySide.QtCore.QTimeLine` 


.. method:: PySide.QtGui.QGraphicsScene.backgroundBrush()


    :rtype: :class:`PySide.QtGui.QBrush`




    This property holds the background brush of the scene..

    Set this property to changes the scene's background to a different color, gradient or texture. The default background brush is :attr:`Qt.NoBrush<Qt.BrushStyle>` . The background is drawn before (behind) the items.

    Example:

    ::

        scene = QGraphicsScene()
        view = QGraphicsView(scene)
        view.show()

        # a blue background
        scene.setBackgroundBrush(Qt.blue)

        # a gradient background
        gradient = QRadialGradient(0, 0, 10)
        gradient.setSpread(QGradient.RepeatSpread)
        scene.setBackgroundBrush(gradient)


    :meth:`QGraphicsScene.render()<PySide.QtGui.QGraphicsScene.render>` calls :meth:`PySide.QtGui.QGraphicsScene.drawBackground` to draw the scene background. For more detailed control over how the background is drawn, you can reimplement :meth:`PySide.QtGui.QGraphicsScene.drawBackground` in a subclass of :class:`PySide.QtGui.QGraphicsScene` .



.. method:: PySide.QtGui.QGraphicsScene.bspTreeDepth()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the depth of :class:`PySide.QtGui.QGraphicsScene` 's BSP index tree.

    This property has no effect when :attr:`NoIndex<QGraphicsScene.ItemIndexMethod>` is used.

    This value determines the depth of :class:`PySide.QtGui.QGraphicsScene` 's BSP tree. The depth directly affects :class:`PySide.QtGui.QGraphicsScene` 's performance and memory usage; the latter growing exponentially with the depth of the tree. With an optimal tree depth, :class:`PySide.QtGui.QGraphicsScene` can instantly determine the locality of items, even for scenes with thousands or millions of items. This also greatly improves rendering performance.

    By default, the value is 0, in which case Qt will guess a reasonable default depth based on the size, location and number of items in the scene. If these parameters change frequently, however, you may experience slowdowns as :class:`PySide.QtGui.QGraphicsScene` retunes the depth internally. You can avoid potential slowdowns by fixating the tree depth through setting this property.

    The depth of the tree and the size of the scene rectangle decide the granularity of the scene's partitioning. The size of each scene segment is determined by the following algorithm:

    ::

        segmentSize = sceneRect().size() / math.pow(2, depth - 1)


    The BSP tree has an optimal size when each segment contains between 0 and 10 items.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.itemIndexMethod` 


.. method:: PySide.QtGui.QGraphicsScene.changed(region)


    :param region: 






.. method:: PySide.QtGui.QGraphicsScene.clear()






    Removes and deletes all items from the scene, but otherwise leaves the state of the scene unchanged.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addItem` 


.. method:: PySide.QtGui.QGraphicsScene.clearFocus()






    Clears focus from the scene. If any item has focus when this function is called, it will lose focus, and regain focus again once the scene regains focus.

    A scene that does not have focus ignores key events.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.hasFocus`  :meth:`PySide.QtGui.QGraphicsScene.setFocus`  :meth:`PySide.QtGui.QGraphicsScene.setFocusItem` 


.. method:: PySide.QtGui.QGraphicsScene.clearSelection()






    Clears the current selection.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.setSelectionArea`  :meth:`PySide.QtGui.QGraphicsScene.selectedItems` 


.. method:: PySide.QtGui.QGraphicsScene.collidingItems(item[, mode=Qt.IntersectsItemShape])


    :param item: :class:`PySide.QtGui.QGraphicsItem`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.contextMenuEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneContextMenuEvent`




    This event handler, for event ``contextMenuEvent`` , can be reimplemented in a subclass to receive context menu events. The default implementation forwards the event to the topmost item that accepts context menu events at the position of the event. If no items accept context menu events at this position, the event is ignored.

    .. seealso::  :meth:`QGraphicsItem.contextMenuEvent()<PySide.QtGui.QGraphicsItem.contextMenuEvent>` 


.. method:: PySide.QtGui.QGraphicsScene.createItemGroup(items)


    :param items: 
    :rtype: :class:`PySide.QtGui.QGraphicsItemGroup`







.. method:: PySide.QtGui.QGraphicsScene.destroyItemGroup(group)


    :param group: :class:`PySide.QtGui.QGraphicsItemGroup`




    Reparents all items in ``group`` to ``group`` 's parent item, then removes ``group`` from the scene, and finally deletes it. The items' positions and transformations are mapped from the group to the group's parent.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.createItemGroup`  :meth:`QGraphicsItemGroup.removeFromGroup()<PySide.QtGui.QGraphicsItemGroup.removeFromGroup>` 


.. method:: PySide.QtGui.QGraphicsScene.dragEnterEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneDragDropEvent`




    This event handler, for event ``event`` , can be reimplemented in a subclass to receive drag enter events for the scene.

    The default implementation accepts the event and prepares the scene to accept drag move events.

    .. seealso::  :meth:`QGraphicsItem.dragEnterEvent()<PySide.QtGui.QGraphicsItem.dragEnterEvent>`  :meth:`PySide.QtGui.QGraphicsScene.dragMoveEvent`  :meth:`PySide.QtGui.QGraphicsScene.dragLeaveEvent`  :meth:`PySide.QtGui.QGraphicsScene.dropEvent` 


.. method:: PySide.QtGui.QGraphicsScene.dragLeaveEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneDragDropEvent`




    This event handler, for event ``event`` , can be reimplemented in a subclass to receive drag leave events for the scene.

    .. seealso::  :meth:`QGraphicsItem.dragLeaveEvent()<PySide.QtGui.QGraphicsItem.dragLeaveEvent>`  :meth:`PySide.QtGui.QGraphicsScene.dragEnterEvent`  :meth:`PySide.QtGui.QGraphicsScene.dragMoveEvent`  :meth:`PySide.QtGui.QGraphicsScene.dropEvent` 


.. method:: PySide.QtGui.QGraphicsScene.dragMoveEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneDragDropEvent`




    This event handler, for event ``event`` , can be reimplemented in a subclass to receive drag move events for the scene.

    .. seealso::  :meth:`QGraphicsItem.dragMoveEvent()<PySide.QtGui.QGraphicsItem.dragMoveEvent>`  :meth:`PySide.QtGui.QGraphicsScene.dragEnterEvent`  :meth:`PySide.QtGui.QGraphicsScene.dragLeaveEvent`  :meth:`PySide.QtGui.QGraphicsScene.dropEvent` 


.. method:: PySide.QtGui.QGraphicsScene.drawBackground(painter, rect)


    :param painter: :class:`PySide.QtGui.QPainter`
    :param rect: :class:`PySide.QtCore.QRectF`




    Draws the background of the scene using ``painter`` , before any items and the foreground are drawn. Reimplement this function to provide a custom background for the scene.

    All painting is done in *scene* coordinates. The ``rect`` parameter is the exposed rectangle.

    If all you want is to define a color, texture, or gradient for the background, you can call :meth:`PySide.QtGui.QGraphicsScene.setBackgroundBrush` instead.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.drawForeground`  :meth:`PySide.QtGui.QGraphicsScene.drawItems` 


.. method:: PySide.QtGui.QGraphicsScene.drawForeground(painter, rect)


    :param painter: :class:`PySide.QtGui.QPainter`
    :param rect: :class:`PySide.QtCore.QRectF`




    Draws the foreground of the scene using ``painter`` , after the background and all items have been drawn. Reimplement this function to provide a custom foreground for the scene.

    All painting is done in *scene* coordinates. The ``rect`` parameter is the exposed rectangle.

    If all you want is to define a color, texture or gradient for the foreground, you can call :meth:`PySide.QtGui.QGraphicsScene.setForegroundBrush` instead.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.drawBackground`  :meth:`PySide.QtGui.QGraphicsScene.drawItems` 


.. method:: PySide.QtGui.QGraphicsScene.dropEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneDragDropEvent`




    This event handler, for event ``event`` , can be reimplemented in a subclass to receive drop events for the scene.

    .. seealso::  :meth:`QGraphicsItem.dropEvent()<PySide.QtGui.QGraphicsItem.dropEvent>`  :meth:`PySide.QtGui.QGraphicsScene.dragEnterEvent`  :meth:`PySide.QtGui.QGraphicsScene.dragMoveEvent`  :meth:`PySide.QtGui.QGraphicsScene.dragLeaveEvent` 


.. method:: PySide.QtGui.QGraphicsScene.focusInEvent(event)


    :param event: :class:`PySide.QtGui.QFocusEvent`




    This event handler, for event ``focusEvent`` , can be reimplemented in a subclass to receive focus in events.

    The default implementation sets focus on the scene, and then on the last focus item.

    .. seealso::  :meth:`QGraphicsItem.focusOutEvent()<PySide.QtGui.QGraphicsItem.focusOutEvent>` 


.. method:: PySide.QtGui.QGraphicsScene.focusItem()


    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    When the scene is active, this functions returns the scene's current focus item, or 0 if no item currently has focus. When the scene is inactive, this functions returns the item that will gain input focus when the scene becomes active.

    The focus item receives keyboard input when the scene receives a key event.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.setFocusItem`  :meth:`QGraphicsItem.hasFocus()<PySide.QtGui.QGraphicsItem.hasFocus>`  :meth:`PySide.QtGui.QGraphicsScene.isActive` 


.. method:: PySide.QtGui.QGraphicsScene.focusNextPrevChild(next)


    :param next: :class:`PySide.QtCore.bool`
    :rtype: :class:`PySide.QtCore.bool`




    Finds a new widget to give the keyboard focus to, as appropriate for Tab and Shift+Tab, and returns true if it can find a new widget, or false if it cannot. If ``next`` is true, this function searches forward; if ``next`` is false, it searches backward.

    You can reimplement this function in a subclass of :class:`PySide.QtGui.QGraphicsScene` to provide fine-grained control over how tab focus passes inside your scene. The default implementation is based on the tab focus chain defined by :meth:`QGraphicsWidget.setTabOrder()<PySide.QtGui.QGraphicsWidget.setTabOrder>` .



.. method:: PySide.QtGui.QGraphicsScene.focusOutEvent(event)


    :param event: :class:`PySide.QtGui.QFocusEvent`




    This event handler, for event ``focusEvent`` , can be reimplemented in a subclass to receive focus out events.

    The default implementation removes focus from any focus item, then removes focus from the scene.

    .. seealso::  :meth:`QGraphicsItem.focusInEvent()<PySide.QtGui.QGraphicsItem.focusInEvent>` 


.. method:: PySide.QtGui.QGraphicsScene.font()


    :rtype: :class:`PySide.QtGui.QFont`




    This property holds the scene's default font.

    This property provides the scene's font. The scene font defaults to, and resolves all its entries from, QApplication::font.

    If the scene's font changes, either directly through :meth:`PySide.QtGui.QGraphicsScene.setFont` or indirectly when the application font changes, :class:`PySide.QtGui.QGraphicsScene` first sends itself a :attr:`FontChange<QEvent.Type>` event, and it then sends :attr:`FontChange<QEvent.Type>` events to all top-level widget items in the scene. These items respond by resolving their own fonts to the scene, and they then notify their children, who again notify their children, and so on, until all widget items have updated their fonts.

    Changing the scene font, (directly or indirectly through :meth:`QApplication.setFont()<PySide.QtGui.QApplication.setFont>` ,) automatically schedules a redraw the entire scene.

    .. seealso::  :meth:`QWidget.font<PySide.QtGui.QWidget.font>`  :meth:`QApplication.setFont()<PySide.QtGui.QApplication.setFont>`  :meth:`PySide.QtGui.QGraphicsScene.palette`  :meth:`PySide.QtGui.QGraphicsScene.style` 


.. method:: PySide.QtGui.QGraphicsScene.foregroundBrush()


    :rtype: :class:`PySide.QtGui.QBrush`




    This property holds the foreground brush of the scene..

    Change this property to set the scene's foreground to a different color, gradient or texture.

    The foreground is drawn after (on top of) the items. The default foreground brush is :attr:`Qt.NoBrush<Qt.BrushStyle>` ( i.e. the foreground is not drawn).

    Example:

    ::

        scene = QGraphicsScene()
        view = QGraphicsView(scene)
        view.show()

        # a white semi-transparent foreground
        scene.setForegroundBrush(QColor(255, 255, 255, 127))

        # a grid foreground
        scene.setForegroundBrush(QBrush(Qt.lightGray, Qt.CrossPattern))


    :meth:`QGraphicsScene.render()<PySide.QtGui.QGraphicsScene.render>` calls :meth:`PySide.QtGui.QGraphicsScene.drawForeground` to draw the scene foreground. For more detailed control over how the foreground is drawn, you can reimplement the :meth:`PySide.QtGui.QGraphicsScene.drawForeground` function in a :class:`PySide.QtGui.QGraphicsScene` subclass.



.. method:: PySide.QtGui.QGraphicsScene.hasFocus()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the scene has focus; otherwise returns false. If the scene has focus, it will will forward key events from :class:`PySide.QtGui.QKeyEvent` to any item that has focus.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.setFocus`  :meth:`PySide.QtGui.QGraphicsScene.setFocusItem` 


.. method:: PySide.QtGui.QGraphicsScene.height()


    :rtype: :class:`PySide.QtCore.qreal`




    This convenience function is equivalent to calling ``sceneRect().height()`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.width` 


.. method:: PySide.QtGui.QGraphicsScene.helpEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneHelpEvent`




    This event handler, for event ``helpEvent`` , can be reimplemented in a subclass to receive help events. The events are of type :attr:`QEvent.ToolTip<QEvent.Type>` , which are created when a tooltip is requested.

    The default implementation shows the tooltip of the topmost item, i.e., the item with the highest z-value, at the mouse cursor position. If no item has a tooltip set, this function does nothing.

    .. seealso::  :meth:`QGraphicsItem.toolTip()<PySide.QtGui.QGraphicsItem.toolTip>`  :class:`PySide.QtGui.QGraphicsSceneHelpEvent` 


.. method:: PySide.QtGui.QGraphicsScene.inputMethodEvent(event)


    :param event: :class:`PySide.QtGui.QInputMethodEvent`




    This event handler, for event ``event`` , can be reimplemented in a subclass to receive input method events for the scene.

    The default implementation forwards the event to the :meth:`PySide.QtGui.QGraphicsScene.focusItem` . If no item currently has focus or the current focus item does not accept input methods, this function does nothing.

    .. seealso::  :meth:`QGraphicsItem.inputMethodEvent()<PySide.QtGui.QGraphicsItem.inputMethodEvent>` 


.. method:: PySide.QtGui.QGraphicsScene.inputMethodQuery(query)


    :param query: :attr:`PySide.QtCore.Qt.InputMethodQuery`
    :rtype: object







.. method:: PySide.QtGui.QGraphicsScene.invalidate([rect=QRectF()[, layers=QGraphicsScene.AllLayers]])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param layers: :class:`PySide.QtGui.QGraphicsScene.SceneLayers`







.. method:: PySide.QtGui.QGraphicsScene.invalidate(x, y, w, h[, layers=QGraphicsScene.AllLayers])


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`
    :param layers: :class:`PySide.QtGui.QGraphicsScene.SceneLayers`







.. method:: PySide.QtGui.QGraphicsScene.isActive()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the scene is active (e.g., it's viewed by at least one :class:`PySide.QtGui.QGraphicsView` that is active); otherwise returns false.

    .. seealso::  :meth:`QGraphicsItem.isActive()<PySide.QtGui.QGraphicsItem.isActive>`  :meth:`QWidget.isActiveWindow()<PySide.QtGui.QWidget.isActiveWindow>` 


.. method:: PySide.QtGui.QGraphicsScene.isSortCacheEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether sort caching is enabled.

    Since Qt 4.6, this property has no effect.



.. method:: PySide.QtGui.QGraphicsScene.itemAt(x, y, deviceTransform)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    This is an overloaded function.

    Returns the topmost item at the position specified by (``x`` , ``y`` ), or 0 if there are no items at this position.

    ``deviceTransform`` is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.

    This convenience function is equivalent to calling ``itemAt(QPointF(x, y), deviceTransform)`` .



.. method:: PySide.QtGui.QGraphicsScene.itemAt(x, y)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    This is an overloaded function.

    Returns the topmost item at the position specified by (``x`` , ``y`` ), or 0 if there are no items at this position.

    This convenience function is equivalent to calling ``itemAt(QPointF(x, y))`` .

    This function is deprecated and returns incorrect results if the scene contains items that ignore transformations. Use the overload that takes a :class:`PySide.QtGui.QTransform` instead.



.. method:: PySide.QtGui.QGraphicsScene.itemAt(pos, deviceTransform)


    :param pos: :class:`PySide.QtCore.QPointF`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`
    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    Returns the topmost visible item at the specified ``position`` , or 0 if there are no items at this position.

    ``deviceTransform`` is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.items`  :meth:`PySide.QtGui.QGraphicsScene.collidingItems`  :class:`Sorting<~PySide.QtGui.QGraphicsItem#Sorting>` 


.. method:: PySide.QtGui.QGraphicsScene.itemAt(pos)


    :param pos: :class:`PySide.QtCore.QPointF`
    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    This is an overloaded function.

    Returns the topmost visible item at the specified ``position`` , or 0 if there are no items at this position.

    This function is deprecated and returns incorrect results if the scene contains items that ignore transformations. Use the overload that takes a :class:`PySide.QtGui.QTransform` instead.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.items`  :meth:`PySide.QtGui.QGraphicsScene.collidingItems`  :class:`Sorting<~PySide.QtGui.QGraphicsItem#Sorting>` 


.. method:: PySide.QtGui.QGraphicsScene.itemIndexMethod()


    :rtype: :attr:`PySide.QtGui.QGraphicsScene.ItemIndexMethod`




    This property holds the item indexing method..

    :class:`PySide.QtGui.QGraphicsScene` applies an indexing algorithm to the scene, to speed up item discovery functions like :meth:`PySide.QtGui.QGraphicsScene.items` and :meth:`PySide.QtGui.QGraphicsScene.itemAt` . Indexing is most efficient for static scenes (i.e., where items don't move around). For dynamic scenes, or scenes with many animated items, the index bookkeeping can outweight the fast lookup speeds.

    For the common case, the default index method :attr:`BspTreeIndex<QGraphicsScene.ItemIndexMethod>` works fine. If your scene uses many animations and you are experiencing slowness, you can disable indexing by calling ``setItemIndexMethod(NoIndex)`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.bspTreeDepth` 


.. method:: PySide.QtGui.QGraphicsScene.items(rect[, mode=Qt.IntersectsItemShape])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(rect, mode, order[, deviceTransform=QTransform()])


    :param rect: :class:`PySide.QtCore.QRectF`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(x, y, w, h[, mode=Qt.IntersectsItemShape])


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(x, y, w, h, mode, order[, deviceTransform=QTransform()])


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(polygon, mode, order[, deviceTransform=QTransform()])


    :param polygon: :class:`PySide.QtGui.QPolygonF`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(polygon[, mode=Qt.IntersectsItemShape])


    :param polygon: :class:`PySide.QtGui.QPolygonF`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(order)


    :param order: :attr:`PySide.QtCore.Qt.SortOrder`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(path[, mode=Qt.IntersectsItemShape])


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items()


    :rtype: 




    Returns a list of all items in the scene in descending stacking order.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addItem`  :meth:`PySide.QtGui.QGraphicsScene.removeItem`  :class:`Sorting<~PySide.QtGui.QGraphicsItem#Sorting>` 


.. method:: PySide.QtGui.QGraphicsScene.items(pos, mode, order[, deviceTransform=QTransform()])


    :param pos: :class:`PySide.QtCore.QPointF`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(path, mode, order[, deviceTransform=QTransform()])


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`
    :rtype: 







.. method:: PySide.QtGui.QGraphicsScene.items(pos)


    :param pos: :class:`PySide.QtCore.QPointF`
    :rtype: 




    Returns all visible items at position ``pos`` in the scene. The items are listed in descending stacking order (i.e., the first item in the list is the top-most item, and the last item is the bottom-most item).

    This function is deprecated and returns incorrect results if the scene contains items that ignore transformations. Use the overload that takes a :class:`PySide.QtGui.QTransform` instead.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.itemAt`  :class:`Sorting<~PySide.QtGui.QGraphicsItem#Sorting>` 


.. method:: PySide.QtGui.QGraphicsScene.itemsBoundingRect()


    :rtype: :class:`PySide.QtCore.QRectF`




    Calculates and returns the bounding rect of all items on the scene. This function works by iterating over all items, and because if this, it can be slow for large scenes.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.sceneRect` 


.. method:: PySide.QtGui.QGraphicsScene.keyPressEvent(event)


    :param event: :class:`PySide.QtGui.QKeyEvent`




    This event handler, for event ``keyEvent`` , can be reimplemented in a subclass to receive keypress events. The default implementation forwards the event to current focus item.

    .. seealso::  :meth:`QGraphicsItem.keyPressEvent()<PySide.QtGui.QGraphicsItem.keyPressEvent>`  :meth:`PySide.QtGui.QGraphicsScene.focusItem` 


.. method:: PySide.QtGui.QGraphicsScene.keyReleaseEvent(event)


    :param event: :class:`PySide.QtGui.QKeyEvent`




    This event handler, for event ``keyEvent`` , can be reimplemented in a subclass to receive key release events. The default implementation forwards the event to current focus item.

    .. seealso::  :meth:`QGraphicsItem.keyReleaseEvent()<PySide.QtGui.QGraphicsItem.keyReleaseEvent>`  :meth:`PySide.QtGui.QGraphicsScene.focusItem` 


.. method:: PySide.QtGui.QGraphicsScene.mouseDoubleClickEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneMouseEvent`




    This event handler, for event ``mouseEvent`` , can be reimplemented in a subclass to receive mouse doubleclick events for the scene.

    If someone doubleclicks on the scene, the scene will first receive a mouse press event, followed by a release event (i.e., a click), then a doubleclick event, and finally a release event. If the doubleclick event is delivered to a different item than the one that received the first press and release, it will be delivered as a press event. However, tripleclick events are not delivered as doubleclick events in this case.

    The default implementation is similar to :meth:`PySide.QtGui.QGraphicsScene.mousePressEvent` .

    .. seealso::  :meth:`QGraphicsItem.mousePressEvent()<PySide.QtGui.QGraphicsItem.mousePressEvent>`  :meth:`QGraphicsItem.mouseMoveEvent()<PySide.QtGui.QGraphicsItem.mouseMoveEvent>`  :meth:`QGraphicsItem.mouseReleaseEvent()<PySide.QtGui.QGraphicsItem.mouseReleaseEvent>`  :meth:`QGraphicsItem.setAcceptedMouseButtons()<PySide.QtGui.QGraphicsItem.setAcceptedMouseButtons>` 


.. method:: PySide.QtGui.QGraphicsScene.mouseGrabberItem()


    :rtype: :class:`PySide.QtGui.QGraphicsItem`




    Returns the current mouse grabber item, or 0 if no item is currently grabbing the mouse. The mouse grabber item is the item that receives all mouse events sent to the scene.

    An item becomes a mouse grabber when it receives and accepts a mouse press event, and it stays the mouse grabber until either of the following events occur:


    * If the item receives a mouse release event when there are no other buttons pressed, it loses the mouse grab.
    * If the item becomes invisible (i.e., someone calls ``item->setVisible(false))``, or if it becomes disabled (i.e., someone calls ``item->setEnabled(false))``, it loses the mouse grab.
    * If the item is removed from the scene, it loses the mouse grab.

    If the item loses its mouse grab, the scene will ignore all mouse events until a new item grabs the mouse (i.e., until a new item receives a mouse press event).



.. method:: PySide.QtGui.QGraphicsScene.mouseMoveEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneMouseEvent`




    This event handler, for event ``mouseEvent`` , can be reimplemented in a subclass to receive mouse move events for the scene.

    The default implementation depends on the mouse grabber state. If there is a mouse grabber item, the event is sent to the mouse grabber. If there are any items that accept hover events at the current position, the event is translated into a hover event and accepted; otherwise it's ignored.

    .. seealso::  :meth:`QGraphicsItem.mousePressEvent()<PySide.QtGui.QGraphicsItem.mousePressEvent>`  :meth:`QGraphicsItem.mouseReleaseEvent()<PySide.QtGui.QGraphicsItem.mouseReleaseEvent>`  :meth:`QGraphicsItem.mouseDoubleClickEvent()<PySide.QtGui.QGraphicsItem.mouseDoubleClickEvent>`  :meth:`QGraphicsItem.setAcceptedMouseButtons()<PySide.QtGui.QGraphicsItem.setAcceptedMouseButtons>` 


.. method:: PySide.QtGui.QGraphicsScene.mousePressEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneMouseEvent`




    This event handler, for event ``mouseEvent`` , can be reimplemented in a subclass to receive mouse press events for the scene.

    The default implementation depends on the state of the scene. If there is a mouse grabber item, then the event is sent to the mouse grabber. Otherwise, it is forwarded to the topmost item that accepts mouse events at the scene position from the event, and that item promptly becomes the mouse grabber item.

    If there is no item at the given position on the scene, the selection area is reset, any focus item loses its input focus, and the event is then ignored.

    .. seealso::  :meth:`QGraphicsItem.mousePressEvent()<PySide.QtGui.QGraphicsItem.mousePressEvent>`  :meth:`QGraphicsItem.setAcceptedMouseButtons()<PySide.QtGui.QGraphicsItem.setAcceptedMouseButtons>` 


.. method:: PySide.QtGui.QGraphicsScene.mouseReleaseEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneMouseEvent`




    This event handler, for event ``mouseEvent`` , can be reimplemented in a subclass to receive mouse release events for the scene.

    The default implementation depends on the mouse grabber state. If there is no mouse grabber, the event is ignored. Otherwise, if there is a mouse grabber item, the event is sent to the mouse grabber. If this mouse release represents the last pressed button on the mouse, the mouse grabber item then loses the mouse grab.

    .. seealso::  :meth:`QGraphicsItem.mousePressEvent()<PySide.QtGui.QGraphicsItem.mousePressEvent>`  :meth:`QGraphicsItem.mouseMoveEvent()<PySide.QtGui.QGraphicsItem.mouseMoveEvent>`  :meth:`QGraphicsItem.mouseDoubleClickEvent()<PySide.QtGui.QGraphicsItem.mouseDoubleClickEvent>`  :meth:`QGraphicsItem.setAcceptedMouseButtons()<PySide.QtGui.QGraphicsItem.setAcceptedMouseButtons>` 


.. method:: PySide.QtGui.QGraphicsScene.palette()


    :rtype: :class:`PySide.QtGui.QPalette`




    This property holds the scene's default palette.

    This property provides the scene's palette. The scene palette defaults to, and resolves all its entries from, QApplication::palette.

    If the scene's palette changes, either directly through :meth:`PySide.QtGui.QGraphicsScene.setPalette` or indirectly when the application palette changes, :class:`PySide.QtGui.QGraphicsScene` first sends itself a :attr:`PaletteChange<QEvent.Type>` event, and it then sends :attr:`PaletteChange<QEvent.Type>` events to all top-level widget items in the scene. These items respond by resolving their own palettes to the scene, and they then notify their children, who again notify their children, and so on, until all widget items have updated their palettes.

    Changing the scene palette, (directly or indirectly through :meth:`QApplication.setPalette()<PySide.QtGui.QApplication.setPalette>` ,) automatically schedules a redraw the entire scene.

    .. seealso::  :meth:`QWidget.palette<PySide.QtGui.QWidget.palette>`  :meth:`QApplication.setPalette()<PySide.QtGui.QApplication.setPalette>`  :meth:`PySide.QtGui.QGraphicsScene.font`  :meth:`PySide.QtGui.QGraphicsScene.style` 


.. method:: PySide.QtGui.QGraphicsScene.removeItem(item)


    :param item: :class:`PySide.QtGui.QGraphicsItem`




    Removes the item ``item`` and all its children from the scene. The ownership of ``item`` is passed on to the caller (i.e., :class:`PySide.QtGui.QGraphicsScene` will no longer delete ``item`` when destroyed).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.addItem` 


.. method:: PySide.QtGui.QGraphicsScene.render(painter[, target=QRectF()[, source=QRectF()[, aspectRatioMode=Qt.KeepAspectRatio]]])


    :param painter: :class:`PySide.QtGui.QPainter`
    :param target: :class:`PySide.QtCore.QRectF`
    :param source: :class:`PySide.QtCore.QRectF`
    :param aspectRatioMode: :attr:`PySide.QtCore.Qt.AspectRatioMode`







.. method:: PySide.QtGui.QGraphicsScene.sceneRect()


    :rtype: :class:`PySide.QtCore.QRectF`




    This property holds the scene rectangle; the bounding rectangle of the scene.

    The scene rectangle defines the extent of the scene. It is primarily used by :class:`PySide.QtGui.QGraphicsView` to determine the view's default scrollable area, and by :class:`PySide.QtGui.QGraphicsScene` to manage item indexing.

    If unset, or if set to a null :class:`PySide.QtCore.QRectF` , :meth:`PySide.QtGui.QGraphicsScene.sceneRect` will return the largest bounding rect of all items on the scene since the scene was created (i.e., a rectangle that grows when items are added to or moved in the scene, but never shrinks).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.width`  :meth:`PySide.QtGui.QGraphicsScene.height`  :meth:`QGraphicsView.sceneRect<PySide.QtGui.QGraphicsView.sceneRect>` 


.. method:: PySide.QtGui.QGraphicsScene.sceneRectChanged(rect)


    :param rect: :class:`PySide.QtCore.QRectF`






.. method:: PySide.QtGui.QGraphicsScene.selectedItems()


    :rtype: 




    Returns a list of all currently selected items. The items are returned in no particular order.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.setSelectionArea` 


.. method:: PySide.QtGui.QGraphicsScene.selectionArea()


    :rtype: :class:`PySide.QtGui.QPainterPath`




    Returns the selection area that was previously set with :meth:`PySide.QtGui.QGraphicsScene.setSelectionArea` , or an empty :class:`PySide.QtGui.QPainterPath` if no selection area has been set.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.setSelectionArea` 


.. method:: PySide.QtGui.QGraphicsScene.selectionChanged()








.. method:: PySide.QtGui.QGraphicsScene.sendEvent(item, event)


    :param item: :class:`PySide.QtGui.QGraphicsItem`
    :param event: :class:`PySide.QtCore.QEvent`
    :rtype: :class:`PySide.QtCore.bool`




    Sends event ``event`` to item ``item`` through possible event filters.

    The event is sent only if the item is enabled.

    Returns ``false`` if the event was filtered or if the item is disabled. Otherwise returns the value that was returned from the event handler.

    .. seealso::  :meth:`QGraphicsItem.sceneEvent()<PySide.QtGui.QGraphicsItem.sceneEvent>`  :meth:`QGraphicsItem.sceneEventFilter()<PySide.QtGui.QGraphicsItem.sceneEventFilter>` 


.. method:: PySide.QtGui.QGraphicsScene.setActivePanel(item)


    :param item: :class:`PySide.QtGui.QGraphicsItem`




    Activates ``item`` , which must be an item in this scene. You can also pass 0 for ``item`` , in which case :class:`PySide.QtGui.QGraphicsScene` will deactivate any currently active panel.

    If the scene is currently inactive, ``item`` remains inactive until the scene becomes active (or, ir ``item`` is 0, no item will be activated).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.activePanel`  :meth:`PySide.QtGui.QGraphicsScene.isActive`  :meth:`QGraphicsItem.isActive()<PySide.QtGui.QGraphicsItem.isActive>` 


.. method:: PySide.QtGui.QGraphicsScene.setActiveWindow(widget)


    :param widget: :class:`PySide.QtGui.QGraphicsWidget`




    Activates ``widget`` , which must be a widget in this scene. You can also pass 0 for ``widget`` , in which case :class:`PySide.QtGui.QGraphicsScene` will deactivate any currently active window.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.activeWindow`  :meth:`QGraphicsWidget.isActiveWindow()<PySide.QtGui.QGraphicsWidget.isActiveWindow>` 


.. method:: PySide.QtGui.QGraphicsScene.setBackgroundBrush(brush)


    :param brush: :class:`PySide.QtGui.QBrush`




    This property holds the background brush of the scene..

    Set this property to changes the scene's background to a different color, gradient or texture. The default background brush is :attr:`Qt.NoBrush<Qt.BrushStyle>` . The background is drawn before (behind) the items.

    Example:

    ::

        scene = QGraphicsScene()
        view = QGraphicsView(scene)
        view.show()

        # a blue background
        scene.setBackgroundBrush(Qt.blue)

        # a gradient background
        gradient = QRadialGradient(0, 0, 10)
        gradient.setSpread(QGradient.RepeatSpread)
        scene.setBackgroundBrush(gradient)


    :meth:`QGraphicsScene.render()<PySide.QtGui.QGraphicsScene.render>` calls :meth:`PySide.QtGui.QGraphicsScene.drawBackground` to draw the scene background. For more detailed control over how the background is drawn, you can reimplement :meth:`PySide.QtGui.QGraphicsScene.drawBackground` in a subclass of :class:`PySide.QtGui.QGraphicsScene` .



.. method:: PySide.QtGui.QGraphicsScene.setBspTreeDepth(depth)


    :param depth: :class:`PySide.QtCore.int`




    This property holds the depth of :class:`PySide.QtGui.QGraphicsScene` 's BSP index tree.

    This property has no effect when :attr:`NoIndex<QGraphicsScene.ItemIndexMethod>` is used.

    This value determines the depth of :class:`PySide.QtGui.QGraphicsScene` 's BSP tree. The depth directly affects :class:`PySide.QtGui.QGraphicsScene` 's performance and memory usage; the latter growing exponentially with the depth of the tree. With an optimal tree depth, :class:`PySide.QtGui.QGraphicsScene` can instantly determine the locality of items, even for scenes with thousands or millions of items. This also greatly improves rendering performance.

    By default, the value is 0, in which case Qt will guess a reasonable default depth based on the size, location and number of items in the scene. If these parameters change frequently, however, you may experience slowdowns as :class:`PySide.QtGui.QGraphicsScene` retunes the depth internally. You can avoid potential slowdowns by fixating the tree depth through setting this property.

    The depth of the tree and the size of the scene rectangle decide the granularity of the scene's partitioning. The size of each scene segment is determined by the following algorithm:

    ::

        segmentSize = sceneRect().size() / math.pow(2, depth - 1)


    The BSP tree has an optimal size when each segment contains between 0 and 10 items.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.itemIndexMethod` 


.. method:: PySide.QtGui.QGraphicsScene.setFocus([focusReason=Qt.OtherFocusReason])


    :param focusReason: :attr:`PySide.QtCore.Qt.FocusReason`







.. method:: PySide.QtGui.QGraphicsScene.setFocusItem(item[, focusReason=Qt.OtherFocusReason])


    :param item: :class:`PySide.QtGui.QGraphicsItem`
    :param focusReason: :attr:`PySide.QtCore.Qt.FocusReason`







.. method:: PySide.QtGui.QGraphicsScene.setFont(font)


    :param font: :class:`PySide.QtGui.QFont`




    This property holds the scene's default font.

    This property provides the scene's font. The scene font defaults to, and resolves all its entries from, QApplication::font.

    If the scene's font changes, either directly through :meth:`PySide.QtGui.QGraphicsScene.setFont` or indirectly when the application font changes, :class:`PySide.QtGui.QGraphicsScene` first sends itself a :attr:`FontChange<QEvent.Type>` event, and it then sends :attr:`FontChange<QEvent.Type>` events to all top-level widget items in the scene. These items respond by resolving their own fonts to the scene, and they then notify their children, who again notify their children, and so on, until all widget items have updated their fonts.

    Changing the scene font, (directly or indirectly through :meth:`QApplication.setFont()<PySide.QtGui.QApplication.setFont>` ,) automatically schedules a redraw the entire scene.

    .. seealso::  :meth:`QWidget.font<PySide.QtGui.QWidget.font>`  :meth:`QApplication.setFont()<PySide.QtGui.QApplication.setFont>`  :meth:`PySide.QtGui.QGraphicsScene.palette`  :meth:`PySide.QtGui.QGraphicsScene.style` 


.. method:: PySide.QtGui.QGraphicsScene.setForegroundBrush(brush)


    :param brush: :class:`PySide.QtGui.QBrush`




    This property holds the foreground brush of the scene..

    Change this property to set the scene's foreground to a different color, gradient or texture.

    The foreground is drawn after (on top of) the items. The default foreground brush is :attr:`Qt.NoBrush<Qt.BrushStyle>` ( i.e. the foreground is not drawn).

    Example:

    ::

        scene = QGraphicsScene()
        view = QGraphicsView(scene)
        view.show()

        # a white semi-transparent foreground
        scene.setForegroundBrush(QColor(255, 255, 255, 127))

        # a grid foreground
        scene.setForegroundBrush(QBrush(Qt.lightGray, Qt.CrossPattern))


    :meth:`QGraphicsScene.render()<PySide.QtGui.QGraphicsScene.render>` calls :meth:`PySide.QtGui.QGraphicsScene.drawForeground` to draw the scene foreground. For more detailed control over how the foreground is drawn, you can reimplement the :meth:`PySide.QtGui.QGraphicsScene.drawForeground` function in a :class:`PySide.QtGui.QGraphicsScene` subclass.



.. method:: PySide.QtGui.QGraphicsScene.setItemIndexMethod(method)


    :param method: :attr:`PySide.QtGui.QGraphicsScene.ItemIndexMethod`




    This property holds the item indexing method..

    :class:`PySide.QtGui.QGraphicsScene` applies an indexing algorithm to the scene, to speed up item discovery functions like :meth:`PySide.QtGui.QGraphicsScene.items` and :meth:`PySide.QtGui.QGraphicsScene.itemAt` . Indexing is most efficient for static scenes (i.e., where items don't move around). For dynamic scenes, or scenes with many animated items, the index bookkeeping can outweight the fast lookup speeds.

    For the common case, the default index method :attr:`BspTreeIndex<QGraphicsScene.ItemIndexMethod>` works fine. If your scene uses many animations and you are experiencing slowness, you can disable indexing by calling ``setItemIndexMethod(NoIndex)`` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.bspTreeDepth` 


.. method:: PySide.QtGui.QGraphicsScene.setPalette(palette)


    :param palette: :class:`PySide.QtGui.QPalette`




    This property holds the scene's default palette.

    This property provides the scene's palette. The scene palette defaults to, and resolves all its entries from, QApplication::palette.

    If the scene's palette changes, either directly through :meth:`PySide.QtGui.QGraphicsScene.setPalette` or indirectly when the application palette changes, :class:`PySide.QtGui.QGraphicsScene` first sends itself a :attr:`PaletteChange<QEvent.Type>` event, and it then sends :attr:`PaletteChange<QEvent.Type>` events to all top-level widget items in the scene. These items respond by resolving their own palettes to the scene, and they then notify their children, who again notify their children, and so on, until all widget items have updated their palettes.

    Changing the scene palette, (directly or indirectly through :meth:`QApplication.setPalette()<PySide.QtGui.QApplication.setPalette>` ,) automatically schedules a redraw the entire scene.

    .. seealso::  :meth:`QWidget.palette<PySide.QtGui.QWidget.palette>`  :meth:`QApplication.setPalette()<PySide.QtGui.QApplication.setPalette>`  :meth:`PySide.QtGui.QGraphicsScene.font`  :meth:`PySide.QtGui.QGraphicsScene.style` 


.. method:: PySide.QtGui.QGraphicsScene.setSceneRect(x, y, w, h)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`






.. method:: PySide.QtGui.QGraphicsScene.setSceneRect(rect)


    :param rect: :class:`PySide.QtCore.QRectF`




    This property holds the scene rectangle; the bounding rectangle of the scene.

    The scene rectangle defines the extent of the scene. It is primarily used by :class:`PySide.QtGui.QGraphicsView` to determine the view's default scrollable area, and by :class:`PySide.QtGui.QGraphicsScene` to manage item indexing.

    If unset, or if set to a null :class:`PySide.QtCore.QRectF` , :meth:`PySide.QtGui.QGraphicsScene.sceneRect` will return the largest bounding rect of all items on the scene since the scene was created (i.e., a rectangle that grows when items are added to or moved in the scene, but never shrinks).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.width`  :meth:`PySide.QtGui.QGraphicsScene.height`  :meth:`QGraphicsView.sceneRect<PySide.QtGui.QGraphicsView.sceneRect>` 


.. method:: PySide.QtGui.QGraphicsScene.setSelectionArea(path, mode, deviceTransform)


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`







.. method:: PySide.QtGui.QGraphicsScene.setSelectionArea(path, deviceTransform)


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param deviceTransform: :class:`PySide.QtGui.QTransform`




    Sets the selection area to ``path`` . All items within this area are immediately selected, and all items outside are unselected. You can get the list of all selected items by calling :meth:`PySide.QtGui.QGraphicsScene.selectedItems` .

    ``deviceTransform`` is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.

    For an item to be selected, it must be marked as *selectable* ( :attr:`QGraphicsItem.ItemIsSelectable<QGraphicsItem.GraphicsItemFlag>` ).

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.clearSelection`  :meth:`PySide.QtGui.QGraphicsScene.selectionArea` 


.. method:: PySide.QtGui.QGraphicsScene.setSelectionArea(path, mode)


    :param path: :class:`PySide.QtGui.QPainterPath`
    :param mode: :attr:`PySide.QtCore.Qt.ItemSelectionMode`







.. method:: PySide.QtGui.QGraphicsScene.setSelectionArea(path)


    :param path: :class:`PySide.QtGui.QPainterPath`




    This is an overloaded function.

    Sets the selection area to ``path`` .

    This function is deprecated and leads to incorrect results if the scene contains items that ignore transformations. Use the overload that takes a :class:`PySide.QtGui.QTransform` instead.



.. method:: PySide.QtGui.QGraphicsScene.setSortCacheEnabled(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether sort caching is enabled.

    Since Qt 4.6, this property has no effect.



.. method:: PySide.QtGui.QGraphicsScene.setStickyFocus(enabled)


    :param enabled: :class:`PySide.QtCore.bool`




    This property holds whether clicking into the scene background will clear focus.

    In a :class:`PySide.QtGui.QGraphicsScene` with :meth:`PySide.QtGui.QGraphicsScene.stickyFocus` set to true, focus will remain unchanged when the user clicks into the scene background or on an item that does not accept focus. Otherwise, focus will be cleared.

    By default, this property is false.

    Focus changes in response to a mouse press. You can reimplement :meth:`PySide.QtGui.QGraphicsScene.mousePressEvent` in a subclass of :class:`PySide.QtGui.QGraphicsScene` to toggle this property based on where the user has clicked.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.clearFocus`  :meth:`PySide.QtGui.QGraphicsScene.setFocusItem` 


.. method:: PySide.QtGui.QGraphicsScene.setStyle(style)


    :param style: :class:`PySide.QtGui.QStyle`




    Sets or replaces the style of the scene to ``style`` , and reparents the style to this scene. Any previously assigned style is deleted. The scene's style defaults to :meth:`QApplication.style()<PySide.QtGui.QApplication.style>` , and serves as the default for all :class:`PySide.QtGui.QGraphicsWidget` items in the scene.

    Changing the style, either directly by calling this function, or indirectly by calling :meth:`QApplication.setStyle()<PySide.QtGui.QApplication.setStyle>` , will automatically update the style for all widgets in the scene that do not have a style explicitly assigned to them.

    If ``style`` is 0, :class:`PySide.QtGui.QGraphicsScene` will revert to :meth:`QApplication.style()<PySide.QtGui.QApplication.style>` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.style` 


.. method:: PySide.QtGui.QGraphicsScene.stickyFocus()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether clicking into the scene background will clear focus.

    In a :class:`PySide.QtGui.QGraphicsScene` with :meth:`PySide.QtGui.QGraphicsScene.stickyFocus` set to true, focus will remain unchanged when the user clicks into the scene background or on an item that does not accept focus. Otherwise, focus will be cleared.

    By default, this property is false.

    Focus changes in response to a mouse press. You can reimplement :meth:`PySide.QtGui.QGraphicsScene.mousePressEvent` in a subclass of :class:`PySide.QtGui.QGraphicsScene` to toggle this property based on where the user has clicked.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.clearFocus`  :meth:`PySide.QtGui.QGraphicsScene.setFocusItem` 


.. method:: PySide.QtGui.QGraphicsScene.style()


    :rtype: :class:`PySide.QtGui.QStyle`




    Returns the scene's style, or the same as :meth:`QApplication.style()<PySide.QtGui.QApplication.style>` if the scene has not been explicitly assigned a style.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.setStyle` 


.. method:: PySide.QtGui.QGraphicsScene.update(x, y, w, h)


    :param x: :class:`PySide.QtCore.qreal`
    :param y: :class:`PySide.QtCore.qreal`
    :param w: :class:`PySide.QtCore.qreal`
    :param h: :class:`PySide.QtCore.qreal`




    This is an overloaded function.

    This function is equivalent to calling update( :class:`PySide.QtCore.QRectF` (``x`` , ``y`` , ``w`` , ``h`` ));



.. method:: PySide.QtGui.QGraphicsScene.update([rect=QRectF()])


    :param rect: :class:`PySide.QtCore.QRectF`




    Schedules a redraw of the area ``rect`` on the scene.

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.sceneRect`  :meth:`PySide.QtGui.QGraphicsScene.changed` 


.. method:: PySide.QtGui.QGraphicsScene.views()


    :rtype: 




    Returns a list of all the views that display this scene.

    .. seealso::  :meth:`QGraphicsView.scene()<PySide.QtGui.QGraphicsView.scene>` 


.. method:: PySide.QtGui.QGraphicsScene.wheelEvent(event)


    :param event: :class:`PySide.QtGui.QGraphicsSceneWheelEvent`




    This event handler, for event ``wheelEvent`` , can be reimplemented in a subclass to receive mouse wheel events for the scene.

    By default, the event is delivered to the topmost visible item under the cursor. If ignored, the event propagates to the item beneath, and again until the event is accepted, or it reaches the scene. If no items accept the event, it is ignored.

    .. seealso::  :meth:`QGraphicsItem.wheelEvent()<PySide.QtGui.QGraphicsItem.wheelEvent>` 


.. method:: PySide.QtGui.QGraphicsScene.width()


    :rtype: :class:`PySide.QtCore.qreal`




    This convenience function is equivalent to calling :meth:`PySide.QtGui.QGraphicsScene.sceneRect` . :meth:`PySide.QtGui.QGraphicsScene.width` .

    .. seealso::  :meth:`PySide.QtGui.QGraphicsScene.height` 



