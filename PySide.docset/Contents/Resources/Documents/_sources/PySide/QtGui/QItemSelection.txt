.. module:: PySide.QtGui
.. _QItemSelection:

QItemSelection
**************

.. inheritance-diagram:: QItemSelection
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QItemSelection.__add__>` (l)
*    def :meth:`__eq__<PySide.QtGui.QItemSelection.__eq__>` (l)
*    def :meth:`__iadd__<PySide.QtGui.QItemSelection.__iadd__>` (l)
*    def :meth:`__iadd__<PySide.QtGui.QItemSelection.__iadd__>` (t)
*    def :meth:`__lshift__<PySide.QtGui.QItemSelection.__lshift__>` (l)
*    def :meth:`__lshift__<PySide.QtGui.QItemSelection.__lshift__>` (t)
*    def :meth:`__ne__<PySide.QtGui.QItemSelection.__ne__>` (l)
*    def :meth:`append<PySide.QtGui.QItemSelection.append>` (t)
*    def :meth:`append<PySide.QtGui.QItemSelection.append>` (t)
*    def :meth:`at<PySide.QtGui.QItemSelection.at>` (i)
*    def :meth:`back<PySide.QtGui.QItemSelection.back>` ()
*    def :meth:`clear<PySide.QtGui.QItemSelection.clear>` ()
*    def :meth:`contains<PySide.QtGui.QItemSelection.contains>` (index)
*    def :meth:`count<PySide.QtGui.QItemSelection.count>` ()
*    def :meth:`count<PySide.QtGui.QItemSelection.count>` (t)
*    def :meth:`detachShared<PySide.QtGui.QItemSelection.detachShared>` ()
*    def :meth:`detach_helper<PySide.QtGui.QItemSelection.detach_helper>` ()
*    def :meth:`detach_helper<PySide.QtGui.QItemSelection.detach_helper>` (alloc)
*    def :meth:`empty<PySide.QtGui.QItemSelection.empty>` ()
*    def :meth:`endsWith<PySide.QtGui.QItemSelection.endsWith>` (t)
*    def :meth:`first<PySide.QtGui.QItemSelection.first>` ()
*    def :meth:`front<PySide.QtGui.QItemSelection.front>` ()
*    def :meth:`indexOf<PySide.QtGui.QItemSelection.indexOf>` (t[, from=0])
*    def :meth:`indexes<PySide.QtGui.QItemSelection.indexes>` ()
*    def :meth:`insert<PySide.QtGui.QItemSelection.insert>` (i, t)
*    def :meth:`isEmpty<PySide.QtGui.QItemSelection.isEmpty>` ()
*    def :meth:`isSharedWith<PySide.QtGui.QItemSelection.isSharedWith>` (other)
*    def :meth:`last<PySide.QtGui.QItemSelection.last>` ()
*    def :meth:`lastIndexOf<PySide.QtGui.QItemSelection.lastIndexOf>` (t[, from=-1])
*    def :meth:`length<PySide.QtGui.QItemSelection.length>` ()
*    def :meth:`merge<PySide.QtGui.QItemSelection.merge>` (other, command)
*    def :meth:`mid<PySide.QtGui.QItemSelection.mid>` (pos[, length=-1])
*    def :meth:`move<PySide.QtGui.QItemSelection.move>` (from, to)
*    def :meth:`operator[]<PySide.QtGui.QItemSelection.operator[]>` (i)
*    def :meth:`pop_back<PySide.QtGui.QItemSelection.pop_back>` ()
*    def :meth:`pop_front<PySide.QtGui.QItemSelection.pop_front>` ()
*    def :meth:`prepend<PySide.QtGui.QItemSelection.prepend>` (t)
*    def :meth:`push_back<PySide.QtGui.QItemSelection.push_back>` (t)
*    def :meth:`push_front<PySide.QtGui.QItemSelection.push_front>` (t)
*    def :meth:`removeAll<PySide.QtGui.QItemSelection.removeAll>` (t)
*    def :meth:`removeAt<PySide.QtGui.QItemSelection.removeAt>` (i)
*    def :meth:`removeFirst<PySide.QtGui.QItemSelection.removeFirst>` ()
*    def :meth:`removeLast<PySide.QtGui.QItemSelection.removeLast>` ()
*    def :meth:`removeOne<PySide.QtGui.QItemSelection.removeOne>` (t)
*    def :meth:`replace<PySide.QtGui.QItemSelection.replace>` (i, t)
*    def :meth:`reserve<PySide.QtGui.QItemSelection.reserve>` (size)
*    def :meth:`select<PySide.QtGui.QItemSelection.select>` (topLeft, bottomRight)
*    def :meth:`setSharable<PySide.QtGui.QItemSelection.setSharable>` (sharable)
*    def :meth:`size<PySide.QtGui.QItemSelection.size>` ()
*    def :meth:`startsWith<PySide.QtGui.QItemSelection.startsWith>` (t)
*    def :meth:`swap<PySide.QtGui.QItemSelection.swap>` (i, j)
*    def :meth:`takeAt<PySide.QtGui.QItemSelection.takeAt>` (i)
*    def :meth:`takeFirst<PySide.QtGui.QItemSelection.takeFirst>` ()
*    def :meth:`takeLast<PySide.QtGui.QItemSelection.takeLast>` ()
*    def :meth:`toSet<PySide.QtGui.QItemSelection.toSet>` ()
*    def :meth:`toVector<PySide.QtGui.QItemSelection.toVector>` ()
*    def :meth:`value<PySide.QtGui.QItemSelection.value>` (i)
*    def :meth:`value<PySide.QtGui.QItemSelection.value>` (i, defaultValue)


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`fromSet<PySide.QtGui.QItemSelection.fromSet>` (set)
*    def :meth:`fromVector<PySide.QtGui.QItemSelection.fromVector>` (vector)
*    def :meth:`split<PySide.QtGui.QItemSelection.split>` (range, other, result)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QItemSelection` class manages information about selected items in a model.

    A :class:`PySide.QtGui.QItemSelection` describes the items in a model that have been selected by the user. A :class:`PySide.QtGui.QItemSelection` is basically a list of selection ranges, see :class:`PySide.QtGui.QItemSelectionRange` . It provides functions for creating and manipulating selections, and selecting a range of items from a model.

    The :class:`PySide.QtGui.QItemSelection` class is one of the :ref:`Model/View Classes<model-view>` and is part of Qt's :ref:`model/view framework<model-view-programming.html>` .

    An item selection can be constructed and initialized to contain a range of items from an existing model. The following example constructs a selection that contains a range of items from the given ``model`` , beginning at the ``topLeft`` , and ending at the ``bottomRight`` .

    ::

        selection = QItemSelection(topLeft, bottomRight)


    An empty item selection can be constructed, and later populated as required. So, if the model is going to be unavailable when we construct the item selection, we can rewrite the above code in the following way:

    ::

        selection = QItemSelection()
        ...
        selection.select(topLeft, bottomRight)


    :class:`PySide.QtGui.QItemSelection` saves memory, and avoids unnecessary work, by working with selection ranges rather than recording the model item index for each item in the selection. Generally, an instance of this class will contain a list of non-overlapping selection ranges.

    Use :meth:`PySide.QtGui.QItemSelection.merge` to merge one item selection into another without making overlapping ranges. Use :meth:`PySide.QtGui.QItemSelection.split` to split one selection range into smaller ranges based on a another selection range.

    .. seealso::  :ref:`Model/View Programming<model-view-programming.html>`  :class:`PySide.QtGui.QItemSelectionModel` 

.. class:: QItemSelection()
           QItemSelection(QItemSelection)
           QItemSelection(topLeft, bottomRight)

    :param topLeft: :class:`PySide.QtCore.QModelIndex`
    :param bottomRight: :class:`PySide.QtCore.QModelIndex`
    :param QItemSelection: :class:`PySide.QtGui.QItemSelection`

    Constructs an empty selection.




    Constructs an item selection that extends from the top-left model item, specified by the ``topLeft`` index, to the bottom-right item, specified by ``bottomRight`` .


.. method:: PySide.QtGui.QItemSelection.append(t)


    :param t: 







.. method:: PySide.QtGui.QItemSelection.append(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.at(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.back()


    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.clear()









.. method:: PySide.QtGui.QItemSelection.contains(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the selection contains the given ``index`` ; otherwise returns false.



.. method:: PySide.QtGui.QItemSelection.count()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.count(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.detachShared()









.. method:: PySide.QtGui.QItemSelection.detach_helper(alloc)


    :param alloc: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QItemSelection.detach_helper()








.. method:: PySide.QtGui.QItemSelection.empty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.endsWith(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.first()


    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. staticmethod:: PySide.QtGui.QItemSelection.fromSet(set)


    :param set: 
    :rtype: 







.. staticmethod:: PySide.QtGui.QItemSelection.fromVector(vector)


    :param vector: 
    :rtype: 







.. method:: PySide.QtGui.QItemSelection.front()


    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.indexOf(t[, from=0])


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.indexes()


    :rtype: :class:`PySide.QtCore.QModelIndexList`




    Returns a list of model indexes that correspond to the selected items.



.. method:: PySide.QtGui.QItemSelection.insert(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.isSharedWith(other)


    :param other: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.last()


    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.lastIndexOf(t[, from=-1])


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :param from: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.length()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.merge(other, command)


    :param other: :class:`PySide.QtGui.QItemSelection`
    :param command: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`







.. method:: PySide.QtGui.QItemSelection.mid(pos[, length=-1])


    :param pos: :class:`PySide.QtCore.int`
    :param length: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtGui.QItemSelection.move(from, to)


    :param from: :class:`PySide.QtCore.int`
    :param to: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.__ne__(l)


    :param l: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.__add__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtGui.QItemSelection.__iadd__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtGui.QItemSelection.__iadd__(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: 







.. method:: PySide.QtGui.QItemSelection.__lshift__(l)


    :param l: 
    :rtype: 







.. method:: PySide.QtGui.QItemSelection.__lshift__(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: 







.. method:: PySide.QtGui.QItemSelection.__eq__(l)


    :param l: 
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.operator[](i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.pop_back()









.. method:: PySide.QtGui.QItemSelection.pop_front()









.. method:: PySide.QtGui.QItemSelection.prepend(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.push_back(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.push_front(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.removeAll(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.removeAt(i)


    :param i: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.removeFirst()









.. method:: PySide.QtGui.QItemSelection.removeLast()









.. method:: PySide.QtGui.QItemSelection.removeOne(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.replace(i, t)


    :param i: :class:`PySide.QtCore.int`
    :param t: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.reserve(size)


    :param size: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.select(topLeft, bottomRight)


    :param topLeft: :class:`PySide.QtCore.QModelIndex`
    :param bottomRight: :class:`PySide.QtCore.QModelIndex`




    Adds the items in the range that extends from the top-left model item, specified by the ``topLeft`` index, to the bottom-right item, specified by ``bottomRight`` to the list.

    .. note:: \ ``topLeft`` and ``bottomRight`` must have the same parent.



.. method:: PySide.QtGui.QItemSelection.setSharable(sharable)


    :param sharable: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.size()


    :rtype: :class:`PySide.QtCore.int`







.. staticmethod:: PySide.QtGui.QItemSelection.split(range, other, result)


    :param range: :class:`PySide.QtGui.QItemSelectionRange`
    :param other: :class:`PySide.QtGui.QItemSelectionRange`
    :param result: :class:`PySide.QtGui.QItemSelection`




    Splits the selection ``range`` using the selection ``other`` range. Removes all items in ``other`` from ``range`` and puts the result in ``result`` . This can be compared with the semantics of the *subtract* operation of a set.

    .. seealso::  :meth:`PySide.QtGui.QItemSelection.merge` 


.. method:: PySide.QtGui.QItemSelection.startsWith(t)


    :param t: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QItemSelection.swap(i, j)


    :param i: :class:`PySide.QtCore.int`
    :param j: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QItemSelection.takeAt(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.takeFirst()


    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.takeLast()


    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.toSet()


    :rtype: 







.. method:: PySide.QtGui.QItemSelection.toVector()


    :rtype: 







.. method:: PySide.QtGui.QItemSelection.value(i)


    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QItemSelectionRange`







.. method:: PySide.QtGui.QItemSelection.value(i, defaultValue)


    :param i: :class:`PySide.QtCore.int`
    :param defaultValue: :class:`PySide.QtGui.QItemSelectionRange`
    :rtype: :class:`PySide.QtGui.QItemSelectionRange`








