.. module:: PySide.QtGui
.. _QTextLine:

QTextLine
*********

.. inheritance-diagram:: QTextLine
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`ascent<PySide.QtGui.QTextLine.ascent>` ()
*    def :meth:`cursorToX<PySide.QtGui.QTextLine.cursorToX>` (cursorPos[, edge=Leading])
*    def :meth:`descent<PySide.QtGui.QTextLine.descent>` ()
*    def :meth:`draw<PySide.QtGui.QTextLine.draw>` (p, point[, selection=0])
*    def :meth:`height<PySide.QtGui.QTextLine.height>` ()
*    def :meth:`horizontalAdvance<PySide.QtGui.QTextLine.horizontalAdvance>` ()
*    def :meth:`isValid<PySide.QtGui.QTextLine.isValid>` ()
*    def :meth:`layout_helper<PySide.QtGui.QTextLine.layout_helper>` (numGlyphs)
*    def :meth:`leading<PySide.QtGui.QTextLine.leading>` ()
*    def :meth:`leadingIncluded<PySide.QtGui.QTextLine.leadingIncluded>` ()
*    def :meth:`lineNumber<PySide.QtGui.QTextLine.lineNumber>` ()
*    def :meth:`naturalTextRect<PySide.QtGui.QTextLine.naturalTextRect>` ()
*    def :meth:`naturalTextWidth<PySide.QtGui.QTextLine.naturalTextWidth>` ()
*    def :meth:`position<PySide.QtGui.QTextLine.position>` ()
*    def :meth:`rect<PySide.QtGui.QTextLine.rect>` ()
*    def :meth:`setLeadingIncluded<PySide.QtGui.QTextLine.setLeadingIncluded>` (included)
*    def :meth:`setLineWidth<PySide.QtGui.QTextLine.setLineWidth>` (width)
*    def :meth:`setNumColumns<PySide.QtGui.QTextLine.setNumColumns>` (columns)
*    def :meth:`setNumColumns<PySide.QtGui.QTextLine.setNumColumns>` (columns, alignmentWidth)
*    def :meth:`setPosition<PySide.QtGui.QTextLine.setPosition>` (pos)
*    def :meth:`textLength<PySide.QtGui.QTextLine.textLength>` ()
*    def :meth:`textStart<PySide.QtGui.QTextLine.textStart>` ()
*    def :meth:`width<PySide.QtGui.QTextLine.width>` ()
*    def :meth:`x<PySide.QtGui.QTextLine.x>` ()
*    def :meth:`xToCursor<PySide.QtGui.QTextLine.xToCursor>` (x[, edge=CursorBetweenCharacters])
*    def :meth:`y<PySide.QtGui.QTextLine.y>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTextLine` class represents a line of text inside a :class:`PySide.QtGui.QTextLayout` .

    A text line is usually created by :meth:`QTextLayout.createLine()<PySide.QtGui.QTextLayout.createLine>` .

    After being created, the line can be filled using the :meth:`PySide.QtGui.QTextLine.setLineWidth` or :meth:`PySide.QtGui.QTextLine.setNumColumns` functions. A line has a number of attributes including the rectangle it occupies, :meth:`PySide.QtGui.QTextLine.rect` , its coordinates, :meth:`PySide.QtGui.QTextLine.x` and :meth:`PySide.QtGui.QTextLine.y` , its :meth:`PySide.QtGui.QTextLine.textLength` , :meth:`PySide.QtGui.QTextLine.width` and :meth:`PySide.QtGui.QTextLine.naturalTextWidth` , and its :meth:`PySide.QtGui.QTextLine.ascent` and decent() relative to the text. The position of the cursor in terms of the line is available from :meth:`PySide.QtGui.QTextLine.cursorToX` and its inverse from :meth:`PySide.QtGui.QTextLine.xToCursor` . A line can be moved with :meth:`PySide.QtGui.QTextLine.setPosition` .


.. class:: QTextLine()
           QTextLine(QTextLine)

    :param QTextLine: :class:`PySide.QtGui.QTextLine`

    Creates an invalid line.




.. attribute:: PySide.QtGui.QTextLine.Edge

    +------------------+-----------+
    |Constant          |Description|
    +==================+===========+
    |QTextLine.Leading |           |
    +------------------+-----------+
    |QTextLine.Trailing|           |
    +------------------+-----------+


.. attribute:: PySide.QtGui.QTextLine.CursorPosition

    +---------------------------------+-----------+
    |Constant                         |Description|
    +=================================+===========+
    |QTextLine.CursorBetweenCharacters|           |
    +---------------------------------+-----------+
    |QTextLine.CursorOnCharacter      |           |
    +---------------------------------+-----------+


.. method:: PySide.QtGui.QTextLine.ascent()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the line's ascent.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.descent`  :meth:`PySide.QtGui.QTextLine.height` 


.. method:: PySide.QtGui.QTextLine.cursorToX(cursorPos[, edge=Leading])


    :param cursorPos: :class:`PySide.QtCore.int`
    :param edge: :attr:`PySide.QtGui.QTextLine.Edge`
    :rtype: PyObject




    This is an overloaded function.



.. method:: PySide.QtGui.QTextLine.descent()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the line's descent.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.ascent`  :meth:`PySide.QtGui.QTextLine.height` 


.. method:: PySide.QtGui.QTextLine.draw(p, point[, selection=0])


    :param p: :class:`PySide.QtGui.QPainter`
    :param point: :class:`PySide.QtCore.QPointF`
    :param selection: :class:`PySide.QtGui.QTextLayout::FormatRange`







.. method:: PySide.QtGui.QTextLine.height()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the line's height. This is equal to :meth:`PySide.QtGui.QTextLine.ascent` + :meth:`PySide.QtGui.QTextLine.descent` + 1 if leading is not included. If leading is included, this equals to :meth:`PySide.QtGui.QTextLine.ascent` + :meth:`PySide.QtGui.QTextLine.descent` + :meth:`PySide.QtGui.QTextLine.leading` + 1.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.ascent`  :meth:`PySide.QtGui.QTextLine.descent`  :meth:`PySide.QtGui.QTextLine.leading`  :meth:`PySide.QtGui.QTextLine.setLeadingIncluded` 


.. method:: PySide.QtGui.QTextLine.horizontalAdvance()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the horizontal advance of the text. The advance of the text is the distance from its position to the next position at which text would naturally be drawn.

    By adding the advance to the position of the text line and using this as the position of a second text line, you will be able to position the two lines side-by-side without gaps in-between.



.. method:: PySide.QtGui.QTextLine.isValid()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if this text line is valid; otherwise returns false.



.. method:: PySide.QtGui.QTextLine.layout_helper(numGlyphs)


    :param numGlyphs: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTextLine.leading()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the line's leading.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.ascent`  :meth:`PySide.QtGui.QTextLine.descent`  :meth:`PySide.QtGui.QTextLine.height` 


.. method:: PySide.QtGui.QTextLine.leadingIncluded()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if positive leading is included into the line's height; otherwise returns false.

    By default, leading is not included.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.setLeadingIncluded` 


.. method:: PySide.QtGui.QTextLine.lineNumber()


    :rtype: :class:`PySide.QtCore.int`




    Returns the position of the line in the text engine.



.. method:: PySide.QtGui.QTextLine.naturalTextRect()


    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the rectangle covered by the line.



.. method:: PySide.QtGui.QTextLine.naturalTextWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the width of the line that is occupied by text. This is always <= to :meth:`PySide.QtGui.QTextLine.width` , and is the minimum width that could be used by layout() without changing the line break position.



.. method:: PySide.QtGui.QTextLine.position()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the line's position relative to the text layout's position.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.setPosition` 


.. method:: PySide.QtGui.QTextLine.rect()


    :rtype: :class:`PySide.QtCore.QRectF`




    Returns the line's bounding rectangle.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.x`  :meth:`PySide.QtGui.QTextLine.y`  :meth:`PySide.QtGui.QTextLine.textLength`  :meth:`PySide.QtGui.QTextLine.width` 


.. method:: PySide.QtGui.QTextLine.setLeadingIncluded(included)


    :param included: :class:`PySide.QtCore.bool`




    Includes positive leading into the line's height if ``included`` is true; otherwise does not include leading.

    By default, leading is not included.

    Note that negative leading is ignored, it must be handled in the code using the text lines by letting the lines overlap.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.leadingIncluded` 


.. method:: PySide.QtGui.QTextLine.setLineWidth(width)


    :param width: :class:`PySide.QtCore.qreal`




    Lays out the line with the given ``width`` . The line is filled from its starting position with as many characters as will fit into the line. In case the text cannot be split at the end of the line, it will be filled with additional characters to the next whitespace or end of the text.



.. method:: PySide.QtGui.QTextLine.setNumColumns(columns)


    :param columns: :class:`PySide.QtCore.int`




    Lays out the line. The line is filled from its starting position with as many characters as are specified by ``numColumns`` . In case the text cannot be split until ``numColumns`` characters, the line will be filled with as many characters to the next whitespace or end of the text.



.. method:: PySide.QtGui.QTextLine.setNumColumns(columns, alignmentWidth)


    :param columns: :class:`PySide.QtCore.int`
    :param alignmentWidth: :class:`PySide.QtCore.qreal`




    Lays out the line. The line is filled from its starting position with as many characters as are specified by ``numColumns`` . In case the text cannot be split until ``numColumns`` characters, the line will be filled with as many characters to the next whitespace or end of the text. The provided ``alignmentWidth`` is used as reference width for alignment.



.. method:: PySide.QtGui.QTextLine.setPosition(pos)


    :param pos: :class:`PySide.QtCore.QPointF`




    Moves the line to position ``pos`` .

    .. seealso::  :meth:`PySide.QtGui.QTextLine.position` 


.. method:: PySide.QtGui.QTextLine.textLength()


    :rtype: :class:`PySide.QtCore.int`




    Returns the length of the text in the line.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.naturalTextWidth` 


.. method:: PySide.QtGui.QTextLine.textStart()


    :rtype: :class:`PySide.QtCore.int`




    Returns the start of the line from the beginning of the string passed to the :class:`PySide.QtGui.QTextLayout` .



.. method:: PySide.QtGui.QTextLine.width()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the line's width as specified by the layout() function.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.naturalTextWidth`  :meth:`PySide.QtGui.QTextLine.x`  :meth:`PySide.QtGui.QTextLine.y`  :meth:`PySide.QtGui.QTextLine.textLength`  :meth:`PySide.QtGui.QTextLine.rect` 


.. method:: PySide.QtGui.QTextLine.x()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the line's x position.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.rect`  :meth:`PySide.QtGui.QTextLine.y`  :meth:`PySide.QtGui.QTextLine.textLength`  :meth:`PySide.QtGui.QTextLine.width` 


.. method:: PySide.QtGui.QTextLine.xToCursor(x[, edge=CursorBetweenCharacters])


    :param x: :class:`PySide.QtCore.qreal`
    :param edge: :attr:`PySide.QtGui.QTextLine.CursorPosition`
    :rtype: :class:`PySide.QtCore.int`




    Converts the x-coordinate ``x`` , to the nearest matching cursor position, depending on the cursor position type, ``cpos`` .

    .. seealso::  :meth:`PySide.QtGui.QTextLine.cursorToX` 


.. method:: PySide.QtGui.QTextLine.y()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the line's y position.

    .. seealso::  :meth:`PySide.QtGui.QTextLine.x`  :meth:`PySide.QtGui.QTextLine.rect`  :meth:`PySide.QtGui.QTextLine.textLength`  :meth:`PySide.QtGui.QTextLine.width` 



