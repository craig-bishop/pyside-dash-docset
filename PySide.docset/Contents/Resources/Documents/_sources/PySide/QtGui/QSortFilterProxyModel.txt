.. module:: PySide.QtGui
.. _QSortFilterProxyModel:

QSortFilterProxyModel
*********************

.. inheritance-diagram:: QSortFilterProxyModel
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`dynamicSortFilter<PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter>` ()
*    def :meth:`filterCaseSensitivity<PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity>` ()
*    def :meth:`filterKeyColumn<PySide.QtGui.QSortFilterProxyModel.filterKeyColumn>` ()
*    def :meth:`filterRegExp<PySide.QtGui.QSortFilterProxyModel.filterRegExp>` ()
*    def :meth:`filterRole<PySide.QtGui.QSortFilterProxyModel.filterRole>` ()
*    def :meth:`invalidateFilter<PySide.QtGui.QSortFilterProxyModel.invalidateFilter>` ()
*    def :meth:`isSortLocaleAware<PySide.QtGui.QSortFilterProxyModel.isSortLocaleAware>` ()
*    def :meth:`setDynamicSortFilter<PySide.QtGui.QSortFilterProxyModel.setDynamicSortFilter>` (enable)
*    def :meth:`setFilterCaseSensitivity<PySide.QtGui.QSortFilterProxyModel.setFilterCaseSensitivity>` (cs)
*    def :meth:`setFilterKeyColumn<PySide.QtGui.QSortFilterProxyModel.setFilterKeyColumn>` (column)
*    def :meth:`setFilterRegExp<PySide.QtGui.QSortFilterProxyModel.setFilterRegExp>` (regExp)
*    def :meth:`setFilterRole<PySide.QtGui.QSortFilterProxyModel.setFilterRole>` (role)
*    def :meth:`setSortCaseSensitivity<PySide.QtGui.QSortFilterProxyModel.setSortCaseSensitivity>` (cs)
*    def :meth:`setSortLocaleAware<PySide.QtGui.QSortFilterProxyModel.setSortLocaleAware>` (on)
*    def :meth:`setSortRole<PySide.QtGui.QSortFilterProxyModel.setSortRole>` (role)
*    def :meth:`sortCaseSensitivity<PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity>` ()
*    def :meth:`sortColumn<PySide.QtGui.QSortFilterProxyModel.sortColumn>` ()
*    def :meth:`sortOrder<PySide.QtGui.QSortFilterProxyModel.sortOrder>` ()
*    def :meth:`sortRole<PySide.QtGui.QSortFilterProxyModel.sortRole>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`filterAcceptsColumn<PySide.QtGui.QSortFilterProxyModel.filterAcceptsColumn>` (source_column, source_parent)
*    def :meth:`filterAcceptsRow<PySide.QtGui.QSortFilterProxyModel.filterAcceptsRow>` (source_row, source_parent)
*    def :meth:`lessThan<PySide.QtGui.QSortFilterProxyModel.lessThan>` (left, right)


Slots
^^^^^
.. container:: function_list

*    def :meth:`invalidate<PySide.QtGui.QSortFilterProxyModel.invalidate>` ()
*    def :meth:`setFilterFixedString<PySide.QtGui.QSortFilterProxyModel.setFilterFixedString>` (pattern)
*    def :meth:`setFilterRegExp<PySide.QtGui.QSortFilterProxyModel.setFilterRegExp>` (pattern)
*    def :meth:`setFilterWildcard<PySide.QtGui.QSortFilterProxyModel.setFilterWildcard>` (pattern)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QSortFilterProxyModel` class provides support for sorting and filtering data passed between another model and a view.

    :class:`PySide.QtGui.QSortFilterProxyModel` can be used for sorting items, filtering out items, or both. The model transforms the structure of a source model by mapping the model indexes it supplies to new indexes, corresponding to different locations, for views to use. This approach allows a given source model to be restructured as far as views are concerned without requiring any transformations on the underlying data, and without duplicating the data in memory.

    Let's assume that we want to sort and filter the items provided by a custom model. The code to set up the model and the view, *without* sorting and filtering, would look like this:

    ::

                treeView =  QTreeView()

                model =  MyItemModel(self)

                treeView.setModel(model)


    To add sorting and filtering support to ``MyItemModel`` , we need to create a :class:`PySide.QtGui.QSortFilterProxyModel` , call :meth:`PySide.QtGui.QSortFilterProxyModel.setSourceModel` with the ``MyItemModel`` as argument, and install the :class:`PySide.QtGui.QSortFilterProxyModel` on the view:

    ::

                treeView =  QTreeView()
                sourceModel =  MyItemModel(self)
                proxyModel =  QSortFilterProxyModel(self)

                proxyModel.setSourceModel(sourceModel)
                treeView.setModel(proxyModel)


    At this point, neither sorting nor filtering is enabled; the original data is displayed in the view. Any changes made through the :class:`PySide.QtGui.QSortFilterProxyModel` are applied to the original model.

    The :class:`PySide.QtGui.QSortFilterProxyModel` acts as a wrapper for the original model. If you need to convert source :class:`PySide.QtCore.QModelIndex` es to sorted/filtered model indexes or vice versa, use :meth:`PySide.QtGui.QSortFilterProxyModel.mapToSource` , :meth:`PySide.QtGui.QSortFilterProxyModel.mapFromSource` , :meth:`PySide.QtGui.QSortFilterProxyModel.mapSelectionToSource` , and :meth:`PySide.QtGui.QSortFilterProxyModel.mapSelectionFromSource` .

    .. note::  By default, the model does not dynamically re-sort and re-filter data whenever the original model changes. This behavior can be changed by setting the :meth:`PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter` property.

    The :ref:`Basic Sort/Filter Model<itemviews/basicsortfiltermodel>` and :ref:`Custom Sort/Filter Model<itemviews/customsortfiltermodel>` examples illustrate how to use :class:`PySide.QtGui.QSortFilterProxyModel` to perform basic sorting and filtering and how to subclass it to implement custom behavior.

    .. _PySide.QtGui.QSortFilterProxyModel_sorting:



Sorting
^^^^^^^

    :class:`PySide.QtGui.QTableView` and :class:`PySide.QtGui.QTreeView` have a :meth:`PySide.QtGui.QTreeView.sortingEnabled` property that controls whether the user can sort the view by clicking the view's horizontal header. For example:

    ::

                treeView.setSortingEnabled(True)


    When this feature is on (the default is off), clicking on a header section sorts the items according to that column. By clicking repeatedly, the user can alternate between ascending and descending order.

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qsortfilterproxymodel-sorting.png

    Behind the scene, the view calls the :meth:`PySide.QtGui.QSortFilterProxyModel.sort` virtual function on the model to reorder the data in the model. To make your data sortable, you can either implement :meth:`PySide.QtGui.QSortFilterProxyModel.sort` in your model, or use a :class:`PySide.QtGui.QSortFilterProxyModel` to wrap your model -- :class:`PySide.QtGui.QSortFilterProxyModel` provides a generic :meth:`PySide.QtGui.QSortFilterProxyModel.sort` reimplementation that operates on the :meth:`PySide.QtGui.QSortFilterProxyModel.sortRole` ( :attr:`Qt.DisplayRole<Qt.ItemDataRole>` by default) of the items and that understands several data types, including ``int`` , :class:`PySide.QtCore.QString` , and :class:`PySide.QtCore.QDateTime` . For hierarchical models, sorting is applied recursively to all child items. String comparisons are case sensitive by default; this can be changed by setting the :meth:`PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity` property.

    Custom sorting behavior is achieved by subclassing :class:`PySide.QtGui.QSortFilterProxyModel` and reimplementing :meth:`PySide.QtGui.QSortFilterProxyModel.lessThan` , which is used to compare items. For example:

    ::

        def lessThan(self, left, right):
            leftData = sourceModel().data(left)
            rightData = sourceModel().data(right)



            if isinstance(leftData, QDateTime):
                return leftData < rightData
            else:
                emailPattern = QRegExp("([\\w\\.]*@[\\w\\.]*)")

                if left.column() == 1 && emailPattern.indexIn(leftData) != -1:
                    leftData = emailPattern.cap(1)

                if right.column() == 1 && emailPattern.indexIn(rightData) != -1:
                    rightData = emailPattern.cap(1)

                return leftString < rightString



    (This code snippet comes from the :ref:`Custom Sort/Filter Model<itemviews/customsortfiltermodel>` example.)

    An alternative approach to sorting is to disable sorting on the view and to impose a certain order to the user. This is done by explicitly calling :meth:`PySide.QtGui.QSortFilterProxyModel.sort` with the desired column and order as arguments on the :class:`PySide.QtGui.QSortFilterProxyModel` (or on the original model if it implements :meth:`PySide.QtGui.QSortFilterProxyModel.sort` ). For example:

    ::

                proxyModel.sort(2, Qt.AscendingOrder)


    :class:`PySide.QtGui.QSortFilterProxyModel` can be sorted by column -1, in which case it returns to the sort order of the underlying source model.

    .. _PySide.QtGui.QSortFilterProxyModel_filtering:



Filtering
^^^^^^^^^

    In addition to sorting, :class:`PySide.QtGui.QSortFilterProxyModel` can be used to hide items that do not match a certain filter. The filter is specified using a :class:`PySide.QtCore.QRegExp` object and is applied to the :meth:`PySide.QtGui.QSortFilterProxyModel.filterRole` ( :attr:`Qt.DisplayRole<Qt.ItemDataRole>` by default) of each item, for a given column. The :class:`PySide.QtCore.QRegExp` object can be used to match a regular expression, a wildcard pattern, or a fixed string. For example:

    ::

                proxyModel.setFilterRegExp(QRegExp(".png", Qt.CaseInsensitive,
                                                    QRegExp.FixedString))
                proxyModel.setFilterKeyColumn(1)


    For hierarchical models, the filter is applied recursively to all children. If a parent item doesn't match the filter, none of its children will be shown.

    A common use case is to let the user specify the filter regexp, wildcard pattern, or fixed string in a :class:`PySide.QtGui.QLineEdit` and to connect the :meth:`PySide.QtGui.QLineEdit.textChanged` signal to :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterRegExp` , :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterWildcard` , or :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterFixedString` to reapply the filter.

    Custom filtering behavior can be achieved by reimplementing the :meth:`PySide.QtGui.QSortFilterProxyModel.filterAcceptsRow` and :meth:`PySide.QtGui.QSortFilterProxyModel.filterAcceptsColumn` functions. For example (from the :ref:`Custom Sort/Filter Model<itemviews/customsortfiltermodel>` example), the following implementation ignores the :meth:`PySide.QtGui.QSortFilterProxyModel.filterKeyColumn` property and performs filtering on columns 0, 1, and 2:

    ::

        def filterAcceptsRow(self, sourceRow, sourceParent):
            index0 = sourceModel().index(sourceRow, 0, sourceParent)
            index1 = sourceModel().index(sourceRow, 1, sourceParent)
            index2 = sourceModel().index(sourceRow, 2, sourceParent)

            regex = filterRegExp()
            return (regex.indexIn(sourceModel().data(index0)) != -1
                    or regex.indexIn(sourceModel().data(index1)) != -1
                   and dateInRange(sourceModel().data(index2))


    (This code snippet comes from the :ref:`Custom Sort/Filter Model<itemviews/customsortfiltermodel>` example.)

    If you are working with large amounts of filtering and have to invoke :meth:`PySide.QtGui.QSortFilterProxyModel.invalidateFilter` repeatedly, using :meth:`PySide.QtCore.QAbstractItemModel.reset` may be more efficient, depending on the implementation of your model. However, :meth:`PySide.QtCore.QAbstractItemModel.reset` returns the proxy model to its original state, losing selection information, and will cause the proxy model to be repopulated.

    .. _PySide.QtGui.QSortFilterProxyModel_subclassing:



Subclassing
^^^^^^^^^^^

    Since :class:`PySide.QtGui.QAbstractProxyModel` and its subclasses are derived from :class:`PySide.QtCore.QAbstractItemModel` , much of the same advice about subclassing normal models also applies to proxy models. In addition, it is worth noting that many of the default implementations of functions in this class are written so that they call the equivalent functions in the relevant source model. This simple proxying mechanism may need to be overridden for source models with more complex behavior; for example, if the source model provides a custom :meth:`PySide.QtGui.QSortFilterProxyModel.hasChildren` implementation, you should also provide one in the proxy model.

    .. note::  Some general guidelines for subclassing models are available in the :ref:`Model Subclassing Reference<model-view-programming.html>` .

    .. seealso::  :class:`PySide.QtGui.QAbstractProxyModel`  :class:`PySide.QtCore.QAbstractItemModel`  :ref:`Model/View Programming<model-view-programming.html>`  :ref:`Basic Sort/Filter Model Example<itemviews/basicsortfiltermodel>`  :ref:`Custom Sort/Filter Model Example<itemviews/customsortfiltermodel>` 

.. class:: QSortFilterProxyModel([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a sorting filter model with the given ``parent`` .


.. method:: PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the proxy model is dynamically sorted and filtered whenever the contents of the source model change.

    Note that you should not update the source model through the proxy model when :meth:`PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter` is true. For instance, if you set the proxy model on a :class:`PySide.QtGui.QComboBox` , then using functions that update the model, e.g., :meth:`PySide.QtGui.QComboBox.addItem` , will not work as expected. An alternative is to set :meth:`PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter` to false and call :meth:`PySide.QtGui.QSortFilterProxyModel.sort` after adding items to the :class:`PySide.QtGui.QComboBox` .

    The default value is false.



.. method:: PySide.QtGui.QSortFilterProxyModel.filterAcceptsColumn(source_column, source_parent)


    :param source_column: :class:`PySide.QtCore.int`
    :param source_parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item in the column indicated by the given ``source_column`` and ``source_parent`` should be included in the model; otherwise returns false.

    The default implementation returns true if the value held by the relevant item matches the filter string, wildcard string or regular expression.

    .. note::  By default, the :attr:`Qt.DisplayRole<Qt.ItemDataRole>` is used to determine if the row should be accepted or not. This can be changed by setting the :meth:`PySide.QtGui.QSortFilterProxyModel.filterRole` property.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterAcceptsRow`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterFixedString`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterRegExp`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterWildcard` 


.. method:: PySide.QtGui.QSortFilterProxyModel.filterAcceptsRow(source_row, source_parent)


    :param source_row: :class:`PySide.QtCore.int`
    :param source_parent: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item in the row indicated by the given ``source_row`` and ``source_parent`` should be included in the model; otherwise returns false.

    The default implementation returns true if the value held by the relevant item matches the filter string, wildcard string or regular expression.

    .. note::  By default, the :attr:`Qt.DisplayRole<Qt.ItemDataRole>` is used to determine if the row should be accepted or not. This can be changed by setting the :meth:`PySide.QtGui.QSortFilterProxyModel.filterRole` property.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterAcceptsColumn`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterFixedString`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterRegExp`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterWildcard` 


.. method:: PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity()


    :rtype: :attr:`PySide.QtCore.Qt.CaseSensitivity`




    This property holds the case sensitivity of the :class:`PySide.QtCore.QRegExp` pattern used to filter the contents of the source model.

    By default, the filter is case sensitive.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterRegExp`  :meth:`PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity` 


.. method:: PySide.QtGui.QSortFilterProxyModel.filterKeyColumn()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the column where the key used to filter the contents of the source model is read from..

    The default value is 0. If the value is -1, the keys will be read from all columns.



.. method:: PySide.QtGui.QSortFilterProxyModel.filterRegExp()


    :rtype: :class:`PySide.QtCore.QRegExp`




    This property holds the :class:`PySide.QtCore.QRegExp` used to filter the contents of the source model.

    Setting this property overwrites the current :meth:`PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity` . By default, the :class:`PySide.QtCore.QRegExp` is an empty string matching all contents.

    If no :class:`PySide.QtCore.QRegExp` or an empty string is set, everything in the source model will be accepted.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterWildcard`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterFixedString` 


.. method:: PySide.QtGui.QSortFilterProxyModel.filterRole()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the item role that is used to query the source model's data when filtering items.

    The default value is :attr:`Qt.DisplayRole<Qt.ItemDataRole>` .

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterAcceptsRow` 


.. method:: PySide.QtGui.QSortFilterProxyModel.invalidate()






    Invalidates the current sorting and filtering.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.invalidateFilter` 


.. method:: PySide.QtGui.QSortFilterProxyModel.invalidateFilter()






    Invalidates the current filtering.

    This function should be called if you are implementing custom filtering (e.g. :meth:`PySide.QtGui.QSortFilterProxyModel.filterAcceptsRow` ), and your filter parameters have changed.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.invalidate` 


.. method:: PySide.QtGui.QSortFilterProxyModel.isSortLocaleAware()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds the local aware setting used for comparing strings when sorting.

    By default, sorting is not local aware.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.lessThan` 


.. method:: PySide.QtGui.QSortFilterProxyModel.lessThan(left, right)


    :param left: :class:`PySide.QtCore.QModelIndex`
    :param right: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the value of the item referred to by the given index ``left`` is less than the value of the item referred to by the given index ``right`` , otherwise returns false.

    This function is used as the < operator when sorting, and handles the following :class:`PySide.QtCore.QVariant` types:


    * :attr:`QVariant.Int<QVariant.Type>`
    * :attr:`QVariant.UInt<QVariant.Type>`
    * :attr:`QVariant.LongLong<QVariant.Type>`
    * :attr:`QVariant.ULongLong<QVariant.Type>`
    * :attr:`QVariant.Double<QVariant.Type>`
    * :attr:`QVariant.Char<QVariant.Type>`
    * :attr:`QVariant.Date<QVariant.Type>`
    * :attr:`QVariant.Time<QVariant.Type>`
    * :attr:`QVariant.DateTime<QVariant.Type>`
    * :attr:`QVariant.String<QVariant.Type>`

    Any other type will be converted to a :class:`PySide.QtCore.QString` using :meth:`QVariant.toString` .

    Comparison of :class:`PySide.QtCore.QString` s is case sensitive by default; this can be changed using the :meth:`PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity` property.

    By default, the :attr:`Qt.DisplayRole<Qt.ItemDataRole>` associated with the :class:`PySide.QtCore.QModelIndex` es is used for comparisons. This can be changed by setting the :meth:`PySide.QtGui.QSortFilterProxyModel.sortRole` property.

    .. note::  The indices passed in correspond to the source model.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.sortRole`  :meth:`PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setDynamicSortFilter(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether the proxy model is dynamically sorted and filtered whenever the contents of the source model change.

    Note that you should not update the source model through the proxy model when :meth:`PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter` is true. For instance, if you set the proxy model on a :class:`PySide.QtGui.QComboBox` , then using functions that update the model, e.g., :meth:`PySide.QtGui.QComboBox.addItem` , will not work as expected. An alternative is to set :meth:`PySide.QtGui.QSortFilterProxyModel.dynamicSortFilter` to false and call :meth:`PySide.QtGui.QSortFilterProxyModel.sort` after adding items to the :class:`PySide.QtGui.QComboBox` .

    The default value is false.



.. method:: PySide.QtGui.QSortFilterProxyModel.setFilterCaseSensitivity(cs)


    :param cs: :attr:`PySide.QtCore.Qt.CaseSensitivity`




    This property holds the case sensitivity of the :class:`PySide.QtCore.QRegExp` pattern used to filter the contents of the source model.

    By default, the filter is case sensitive.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterRegExp`  :meth:`PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setFilterFixedString(pattern)


    :param pattern: unicode




    Sets the fixed string used to filter the contents of the source model to the given ``pattern`` .

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterRegExp`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterWildcard`  :meth:`PySide.QtGui.QSortFilterProxyModel.filterRegExp` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setFilterKeyColumn(column)


    :param column: :class:`PySide.QtCore.int`




    This property holds the column where the key used to filter the contents of the source model is read from..

    The default value is 0. If the value is -1, the keys will be read from all columns.



.. method:: PySide.QtGui.QSortFilterProxyModel.setFilterRegExp(regExp)


    :param regExp: :class:`PySide.QtCore.QRegExp`




    This property holds the :class:`PySide.QtCore.QRegExp` used to filter the contents of the source model.

    Setting this property overwrites the current :meth:`PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity` . By default, the :class:`PySide.QtCore.QRegExp` is an empty string matching all contents.

    If no :class:`PySide.QtCore.QRegExp` or an empty string is set, everything in the source model will be accepted.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterWildcard`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterFixedString` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setFilterRegExp(pattern)


    :param pattern: unicode




    This is an overloaded function.

    Sets the regular expression used to filter the contents of the source model to ``pattern`` .

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterWildcard`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterFixedString`  :meth:`PySide.QtGui.QSortFilterProxyModel.filterRegExp` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setFilterRole(role)


    :param role: :class:`PySide.QtCore.int`




    This property holds the item role that is used to query the source model's data when filtering items.

    The default value is :attr:`Qt.DisplayRole<Qt.ItemDataRole>` .

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterAcceptsRow` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setFilterWildcard(pattern)


    :param pattern: unicode




    Sets the wildcard expression used to filter the contents of the source model to the given ``pattern`` .

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterRegExp`  :meth:`PySide.QtGui.QSortFilterProxyModel.setFilterFixedString`  :meth:`PySide.QtGui.QSortFilterProxyModel.filterRegExp` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setSortCaseSensitivity(cs)


    :param cs: :attr:`PySide.QtCore.Qt.CaseSensitivity`




    This property holds the case sensitivity setting used for comparing strings when sorting.

    By default, sorting is case sensitive.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.lessThan` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setSortLocaleAware(on)


    :param on: :class:`PySide.QtCore.bool`




    This property holds the local aware setting used for comparing strings when sorting.

    By default, sorting is not local aware.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.lessThan` 


.. method:: PySide.QtGui.QSortFilterProxyModel.setSortRole(role)


    :param role: :class:`PySide.QtCore.int`




    This property holds the item role that is used to query the source model's data when sorting items.

    The default value is :attr:`Qt.DisplayRole<Qt.ItemDataRole>` .

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.lessThan` 


.. method:: PySide.QtGui.QSortFilterProxyModel.sortCaseSensitivity()


    :rtype: :attr:`PySide.QtCore.Qt.CaseSensitivity`




    This property holds the case sensitivity setting used for comparing strings when sorting.

    By default, sorting is case sensitive.

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.filterCaseSensitivity`  :meth:`PySide.QtGui.QSortFilterProxyModel.lessThan` 


.. method:: PySide.QtGui.QSortFilterProxyModel.sortColumn()


    :rtype: :class:`PySide.QtCore.int`




    the column currently used for sorting

    This returns the most recently used sort column.



.. method:: PySide.QtGui.QSortFilterProxyModel.sortOrder()


    :rtype: :attr:`PySide.QtCore.Qt.SortOrder`




    the order currently used for sorting

    This returns the most recently used sort order.



.. method:: PySide.QtGui.QSortFilterProxyModel.sortRole()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the item role that is used to query the source model's data when sorting items.

    The default value is :attr:`Qt.DisplayRole<Qt.ItemDataRole>` .

    .. seealso::  :meth:`PySide.QtGui.QSortFilterProxyModel.lessThan` 



