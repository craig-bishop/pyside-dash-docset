.. module:: PySide.QtGui
.. _QPictureIO:

QPictureIO
**********

.. inheritance-diagram:: QPictureIO
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`description<PySide.QtGui.QPictureIO.description>` ()
*    def :meth:`fileName<PySide.QtGui.QPictureIO.fileName>` ()
*    def :meth:`format<PySide.QtGui.QPictureIO.format>` ()
*    def :meth:`gamma<PySide.QtGui.QPictureIO.gamma>` ()
*    def :meth:`init<PySide.QtGui.QPictureIO.init>` ()
*    def :meth:`ioDevice<PySide.QtGui.QPictureIO.ioDevice>` ()
*    def :meth:`parameters<PySide.QtGui.QPictureIO.parameters>` ()
*    def :meth:`picture<PySide.QtGui.QPictureIO.picture>` ()
*    def :meth:`quality<PySide.QtGui.QPictureIO.quality>` ()
*    def :meth:`read<PySide.QtGui.QPictureIO.read>` ()
*    def :meth:`setDescription<PySide.QtGui.QPictureIO.setDescription>` (arg__1)
*    def :meth:`setFileName<PySide.QtGui.QPictureIO.setFileName>` (arg__1)
*    def :meth:`setFormat<PySide.QtGui.QPictureIO.setFormat>` (arg__1)
*    def :meth:`setGamma<PySide.QtGui.QPictureIO.setGamma>` (arg__1)
*    def :meth:`setIODevice<PySide.QtGui.QPictureIO.setIODevice>` (arg__1)
*    def :meth:`setParameters<PySide.QtGui.QPictureIO.setParameters>` (arg__1)
*    def :meth:`setPicture<PySide.QtGui.QPictureIO.setPicture>` (arg__1)
*    def :meth:`setQuality<PySide.QtGui.QPictureIO.setQuality>` (arg__1)
*    def :meth:`setStatus<PySide.QtGui.QPictureIO.setStatus>` (arg__1)
*    def :meth:`status<PySide.QtGui.QPictureIO.status>` ()
*    def :meth:`write<PySide.QtGui.QPictureIO.write>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`inputFormats<PySide.QtGui.QPictureIO.inputFormats>` ()
*    def :meth:`outputFormats<PySide.QtGui.QPictureIO.outputFormats>` ()
*    def :meth:`pictureFormat<PySide.QtGui.QPictureIO.pictureFormat>` (arg__1)
*    def :meth:`pictureFormat<PySide.QtGui.QPictureIO.pictureFormat>` (fileName)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QPictureIO` class contains parameters for loading and saving pictures.

    :class:`PySide.QtGui.QPictureIO` contains a :class:`PySide.QtCore.QIODevice` object that is used for picture data I/O. The programmer can install new picture file formats in addition to those that Qt provides.

    You don't normally need to use this class; :meth:`QPicture.load()<PySide.QtGui.QPicture.load>` , :meth:`QPicture.save()<PySide.QtGui.QPicture.save>` .

    .. seealso::  :class:`PySide.QtGui.QPicture`  :class:`PySide.QtGui.QPixmap`  :class:`PySide.QtCore.QFile` 

.. class:: QPictureIO()
           QPictureIO(ioDevice, format)
           QPictureIO(fileName, format)

    :param format: str
    :param ioDevice: :class:`PySide.QtCore.QIODevice`
    :param fileName: unicode

    Constructs a :class:`PySide.QtGui.QPictureIO` object with all parameters set to zero.


    Constructs a :class:`PySide.QtGui.QPictureIO` object with the I/O device ``ioDevice`` and a ``format`` tag.


    Constructs a :class:`PySide.QtGui.QPictureIO` object with the file name ``fileName`` and a ``format`` tag.


.. method:: PySide.QtGui.QPictureIO.description()


    :rtype: unicode




    Returns the picture description string.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setDescription` 


.. method:: PySide.QtGui.QPictureIO.fileName()


    :rtype: unicode




    Returns the file name currently set.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setFileName` 


.. method:: PySide.QtGui.QPictureIO.format()


    :rtype: str




    Returns the picture format string or 0 if no format has been explicitly set.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setFormat` 


.. method:: PySide.QtGui.QPictureIO.gamma()


    :rtype: :class:`PySide.QtCore.float`




    Returns the gamma value at which the picture will be viewed.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setGamma` 


.. method:: PySide.QtGui.QPictureIO.init()








.. staticmethod:: PySide.QtGui.QPictureIO.inputFormats()


    :rtype: 




    Returns a sorted list of picture formats that are supported for picture input.



.. method:: PySide.QtGui.QPictureIO.ioDevice()


    :rtype: :class:`PySide.QtCore.QIODevice`




    Returns the IO device currently set.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setIODevice` 


.. staticmethod:: PySide.QtGui.QPictureIO.outputFormats()


    :rtype: 




    Returns a sorted list of picture formats that are supported for picture output.



.. method:: PySide.QtGui.QPictureIO.parameters()


    :rtype: str




    Returns the picture's parameters string.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setParameters` 


.. method:: PySide.QtGui.QPictureIO.picture()


    :rtype: :class:`PySide.QtGui.QPicture`




    Returns the picture currently set.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setPicture` 


.. staticmethod:: PySide.QtGui.QPictureIO.pictureFormat(fileName)


    :param fileName: unicode
    :rtype: :class:`PySide.QtCore.QByteArray`




    Returns a string that specifies the picture format of the file ``fileName`` , or null if the file cannot be read or if the format is not recognized.



.. staticmethod:: PySide.QtGui.QPictureIO.pictureFormat(arg__1)


    :param arg__1: :class:`PySide.QtCore.QIODevice`
    :rtype: :class:`PySide.QtCore.QByteArray`




    This is an overloaded function.

    Returns a string that specifies the picture format of the picture read from IO device ``d`` , or 0 if the device cannot be read or if the format is not recognized.

    Make sure that ``d`` is at the right position in the device (for example, at the beginning of the file).

    .. seealso::  :meth:`QIODevice.at()<PySide.QtCore.QIODevice.at>` 


.. method:: PySide.QtGui.QPictureIO.quality()


    :rtype: :class:`PySide.QtCore.int`




    Returns the quality of the written picture, related to the compression ratio.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setQuality`  :meth:`QPicture.save()<PySide.QtGui.QPicture.save>` 


.. method:: PySide.QtGui.QPictureIO.read()


    :rtype: :class:`PySide.QtCore.bool`




    Reads an picture into memory and returns true if the picture was successfully read; otherwise returns false.

    Before reading an picture you must set an IO device or a file name. If both an IO device and a file name have been set, the IO device will be used.

    Setting the picture file format string is optional.

    Note that this function does *not* set the :meth:`PySide.QtGui.QPictureIO.format` used to read the picture. If you need that information, use the :meth:`PySide.QtGui.QPictureIO.pictureFormat` static functions.

    Example:

    ::

                iio = QPictureIO()
                pixmap = QPixmap()
                iio.setFileName("vegeburger.pic")
                if iio.read():         # OK
                    picture = iio.picture()
                    painter = QPainter(pixmap)
                    painter.drawPicture(0, 0, picture)



    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setIODevice`  :meth:`PySide.QtGui.QPictureIO.setFileName`  :meth:`PySide.QtGui.QPictureIO.setFormat`  :meth:`PySide.QtGui.QPictureIO.write`  :meth:`QPixmap.load()<PySide.QtGui.QPixmap.load>` 


.. method:: PySide.QtGui.QPictureIO.setDescription(arg__1)


    :param arg__1: unicode




    Sets the picture description string for picture handlers that support picture descriptions to ``description`` .

    Currently, no picture format supported by Qt uses the description string.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.description` 


.. method:: PySide.QtGui.QPictureIO.setFileName(arg__1)


    :param arg__1: unicode




    Sets the name of the file to read or write an picture from to ``fileName`` .

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.fileName`  :meth:`PySide.QtGui.QPictureIO.setIODevice` 


.. method:: PySide.QtGui.QPictureIO.setFormat(arg__1)


    :param arg__1: str




    Sets the picture format to ``format`` for the picture to be read or written.

    It is necessary to specify a format before writing an picture, but it is not necessary to specify a format before reading an picture.

    If no format has been set, Qt guesses the picture format before reading it. If a format is set the picture will only be read if it has that format.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.read`  :meth:`PySide.QtGui.QPictureIO.write`  :meth:`PySide.QtGui.QPictureIO.format` 


.. method:: PySide.QtGui.QPictureIO.setGamma(arg__1)


    :param arg__1: :class:`PySide.QtCore.float`




    Sets the gamma value at which the picture will be viewed to ``gamma`` . If the picture format stores a gamma value for which the picture is intended to be used, then this setting will be used to modify the picture. Setting to 0.0 will disable gamma correction (i.e. any specification in the file will be ignored).

    The default value is 0.0.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.gamma` 


.. method:: PySide.QtGui.QPictureIO.setIODevice(arg__1)


    :param arg__1: :class:`PySide.QtCore.QIODevice`




    Sets the IO device to be used for reading or writing an picture.

    Setting the IO device allows pictures to be read/written to any block-oriented :class:`PySide.QtCore.QIODevice` .

    If ``ioDevice`` is not null, this IO device will override file name settings.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setFileName` 


.. method:: PySide.QtGui.QPictureIO.setParameters(arg__1)


    :param arg__1: str




    Sets the picture's parameter string to ``parameters`` . This is for picture handlers that require special parameters.

    Although the current picture formats supported by Qt ignore the parameters string, it may be used in future extensions or by contributions (for example, JPEG).

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.parameters` 


.. method:: PySide.QtGui.QPictureIO.setPicture(arg__1)


    :param arg__1: :class:`PySide.QtGui.QPicture`




    Sets the picture to ``picture`` .

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.picture` 


.. method:: PySide.QtGui.QPictureIO.setQuality(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the quality of the written picture to ``q`` , related to the compression ratio.

    ``q`` must be in the range -1..100. Specify 0 to obtain small compressed files, 100 for large uncompressed files. (-1 signifies the default compression.)

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.quality`  :meth:`QPicture.save()<PySide.QtGui.QPicture.save>` 


.. method:: PySide.QtGui.QPictureIO.setStatus(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    Sets the picture IO status to ``status`` . A non-zero value indicates an error, whereas 0 means that the IO operation was successful.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.status` 


.. method:: PySide.QtGui.QPictureIO.status()


    :rtype: :class:`PySide.QtCore.int`




    Returns the picture's IO status. A non-zero value indicates an error, whereas 0 means that the IO operation was successful.

    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setStatus` 


.. method:: PySide.QtGui.QPictureIO.write()


    :rtype: :class:`PySide.QtCore.bool`




    Writes an picture to an IO device and returns true if the picture was successfully written; otherwise returns false.

    Before writing an picture you must set an IO device or a file name. If both an IO device and a file name have been set, the IO device will be used.

    The picture will be written using the specified picture format.

    Example:

    ::

                iio = QPictureIO()
                picture = QPicture()
                painter = QPainter(picture)
                painter.drawPixmap(0, 0, pixmap)
                iio.setPicture(picture)
                iio.setFileName("vegeburger.pic")
                iio.setFormat("PIC")
                if iio.write():
                    return True # returned true if written successfully


    .. seealso::  :meth:`PySide.QtGui.QPictureIO.setIODevice`  :meth:`PySide.QtGui.QPictureIO.setFileName`  :meth:`PySide.QtGui.QPictureIO.setFormat`  :meth:`PySide.QtGui.QPictureIO.read`  :meth:`QPixmap.save()<PySide.QtGui.QPixmap.save>` 



