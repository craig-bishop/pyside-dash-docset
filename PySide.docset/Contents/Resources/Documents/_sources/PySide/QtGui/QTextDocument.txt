.. module:: PySide.QtGui
.. _QTextDocument:

QTextDocument
*************

.. inheritance-diagram:: QTextDocument
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addResource<PySide.QtGui.QTextDocument.addResource>` (type, name, resource)
*    def :meth:`adjustSize<PySide.QtGui.QTextDocument.adjustSize>` ()
*    def :meth:`allFormats<PySide.QtGui.QTextDocument.allFormats>` ()
*    def :meth:`availableRedoSteps<PySide.QtGui.QTextDocument.availableRedoSteps>` ()
*    def :meth:`availableUndoSteps<PySide.QtGui.QTextDocument.availableUndoSteps>` ()
*    def :meth:`begin<PySide.QtGui.QTextDocument.begin>` ()
*    def :meth:`blockCount<PySide.QtGui.QTextDocument.blockCount>` ()
*    def :meth:`characterAt<PySide.QtGui.QTextDocument.characterAt>` (pos)
*    def :meth:`characterCount<PySide.QtGui.QTextDocument.characterCount>` ()
*    def :meth:`clearUndoRedoStacks<PySide.QtGui.QTextDocument.clearUndoRedoStacks>` ([historyToClear=UndoAndRedoStacks])
*    def :meth:`clone<PySide.QtGui.QTextDocument.clone>` ([parent=None])
*    def :meth:`defaultFont<PySide.QtGui.QTextDocument.defaultFont>` ()
*    def :meth:`defaultStyleSheet<PySide.QtGui.QTextDocument.defaultStyleSheet>` ()
*    def :meth:`defaultTextOption<PySide.QtGui.QTextDocument.defaultTextOption>` ()
*    def :meth:`documentLayout<PySide.QtGui.QTextDocument.documentLayout>` ()
*    def :meth:`documentMargin<PySide.QtGui.QTextDocument.documentMargin>` ()
*    def :meth:`drawContents<PySide.QtGui.QTextDocument.drawContents>` (painter[, rect=QRectF()])
*    def :meth:`end<PySide.QtGui.QTextDocument.end>` ()
*    def :meth:`find<PySide.QtGui.QTextDocument.find>` (expr, from[, options=0])
*    def :meth:`find<PySide.QtGui.QTextDocument.find>` (expr[, from=0[, options=0]])
*    def :meth:`find<PySide.QtGui.QTextDocument.find>` (subString, from[, options=0])
*    def :meth:`find<PySide.QtGui.QTextDocument.find>` (subString[, from=0[, options=0]])
*    def :meth:`findBlock<PySide.QtGui.QTextDocument.findBlock>` (pos)
*    def :meth:`findBlockByLineNumber<PySide.QtGui.QTextDocument.findBlockByLineNumber>` (blockNumber)
*    def :meth:`findBlockByNumber<PySide.QtGui.QTextDocument.findBlockByNumber>` (blockNumber)
*    def :meth:`firstBlock<PySide.QtGui.QTextDocument.firstBlock>` ()
*    def :meth:`frameAt<PySide.QtGui.QTextDocument.frameAt>` (pos)
*    def :meth:`idealWidth<PySide.QtGui.QTextDocument.idealWidth>` ()
*    def :meth:`indentWidth<PySide.QtGui.QTextDocument.indentWidth>` ()
*    def :meth:`isEmpty<PySide.QtGui.QTextDocument.isEmpty>` ()
*    def :meth:`isModified<PySide.QtGui.QTextDocument.isModified>` ()
*    def :meth:`isRedoAvailable<PySide.QtGui.QTextDocument.isRedoAvailable>` ()
*    def :meth:`isUndoAvailable<PySide.QtGui.QTextDocument.isUndoAvailable>` ()
*    def :meth:`isUndoRedoEnabled<PySide.QtGui.QTextDocument.isUndoRedoEnabled>` ()
*    def :meth:`lastBlock<PySide.QtGui.QTextDocument.lastBlock>` ()
*    def :meth:`lineCount<PySide.QtGui.QTextDocument.lineCount>` ()
*    def :meth:`markContentsDirty<PySide.QtGui.QTextDocument.markContentsDirty>` (from, length)
*    def :meth:`maximumBlockCount<PySide.QtGui.QTextDocument.maximumBlockCount>` ()
*    def :meth:`metaInformation<PySide.QtGui.QTextDocument.metaInformation>` (info)
*    def :meth:`object<PySide.QtGui.QTextDocument.object>` (objectIndex)
*    def :meth:`objectForFormat<PySide.QtGui.QTextDocument.objectForFormat>` (arg__1)
*    def :meth:`pageCount<PySide.QtGui.QTextDocument.pageCount>` ()
*    def :meth:`pageSize<PySide.QtGui.QTextDocument.pageSize>` ()
*    def :meth:`print_<PySide.QtGui.QTextDocument.print_>` (printer)
*    def :meth:`redo<PySide.QtGui.QTextDocument.redo>` (cursor)
*    def :meth:`resource<PySide.QtGui.QTextDocument.resource>` (type, name)
*    def :meth:`revision<PySide.QtGui.QTextDocument.revision>` ()
*    def :meth:`rootFrame<PySide.QtGui.QTextDocument.rootFrame>` ()
*    def :meth:`setDefaultFont<PySide.QtGui.QTextDocument.setDefaultFont>` (font)
*    def :meth:`setDefaultStyleSheet<PySide.QtGui.QTextDocument.setDefaultStyleSheet>` (sheet)
*    def :meth:`setDefaultTextOption<PySide.QtGui.QTextDocument.setDefaultTextOption>` (option)
*    def :meth:`setDocumentLayout<PySide.QtGui.QTextDocument.setDocumentLayout>` (layout)
*    def :meth:`setDocumentMargin<PySide.QtGui.QTextDocument.setDocumentMargin>` (margin)
*    def :meth:`setHtml<PySide.QtGui.QTextDocument.setHtml>` (html)
*    def :meth:`setIndentWidth<PySide.QtGui.QTextDocument.setIndentWidth>` (width)
*    def :meth:`setMaximumBlockCount<PySide.QtGui.QTextDocument.setMaximumBlockCount>` (maximum)
*    def :meth:`setMetaInformation<PySide.QtGui.QTextDocument.setMetaInformation>` (info, arg__2)
*    def :meth:`setPageSize<PySide.QtGui.QTextDocument.setPageSize>` (size)
*    def :meth:`setPlainText<PySide.QtGui.QTextDocument.setPlainText>` (text)
*    def :meth:`setTextWidth<PySide.QtGui.QTextDocument.setTextWidth>` (width)
*    def :meth:`setUndoRedoEnabled<PySide.QtGui.QTextDocument.setUndoRedoEnabled>` (enable)
*    def :meth:`setUseDesignMetrics<PySide.QtGui.QTextDocument.setUseDesignMetrics>` (b)
*    def :meth:`size<PySide.QtGui.QTextDocument.size>` ()
*    def :meth:`textWidth<PySide.QtGui.QTextDocument.textWidth>` ()
*    def :meth:`toHtml<PySide.QtGui.QTextDocument.toHtml>` ([encoding=QByteArray()])
*    def :meth:`toPlainText<PySide.QtGui.QTextDocument.toPlainText>` ()
*    def :meth:`undo<PySide.QtGui.QTextDocument.undo>` (cursor)
*    def :meth:`useDesignMetrics<PySide.QtGui.QTextDocument.useDesignMetrics>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`clear<PySide.QtGui.QTextDocument.clear>` ()
*    def :meth:`createObject<PySide.QtGui.QTextDocument.createObject>` (f)
*    def :meth:`loadResource<PySide.QtGui.QTextDocument.loadResource>` (type, name)


Slots
^^^^^
.. container:: function_list

*    def :meth:`redo<PySide.QtGui.QTextDocument.redo>` ()
*    def :meth:`setModified<PySide.QtGui.QTextDocument.setModified>` ([m=true])
*    def :meth:`undo<PySide.QtGui.QTextDocument.undo>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`blockCountChanged<PySide.QtGui.QTextDocument.blockCountChanged>` (newBlockCount)
*    def :meth:`contentsChange<PySide.QtGui.QTextDocument.contentsChange>` (from, charsRemoves, charsAdded)
*    def :meth:`contentsChanged<PySide.QtGui.QTextDocument.contentsChanged>` ()
*    def :meth:`cursorPositionChanged<PySide.QtGui.QTextDocument.cursorPositionChanged>` (cursor)
*    def :meth:`documentLayoutChanged<PySide.QtGui.QTextDocument.documentLayoutChanged>` ()
*    def :meth:`modificationChanged<PySide.QtGui.QTextDocument.modificationChanged>` (m)
*    def :meth:`redoAvailable<PySide.QtGui.QTextDocument.redoAvailable>` (arg__1)
*    def :meth:`undoAvailable<PySide.QtGui.QTextDocument.undoAvailable>` (arg__1)
*    def :meth:`undoCommandAdded<PySide.QtGui.QTextDocument.undoCommandAdded>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTextDocument` class holds formatted text that can be viewed and edited using a :class:`PySide.QtGui.QTextEdit` .

    :class:`PySide.QtGui.QTextDocument` is a container for structured rich text documents, providing support for styled text and various types of document elements, such as lists, tables, frames, and images. They can be created for use in a :class:`PySide.QtGui.QTextEdit` , or used independently.

    Each document element is described by an associated format object. Each format object is treated as a unique object by QTextDocuments, and can be passed to :meth:`PySide.QtGui.QTextDocument.objectForFormat` to obtain the document element that it is applied to.

    A :class:`PySide.QtGui.QTextDocument` can be edited programmatically using a :class:`PySide.QtGui.QTextCursor` , and its contents can be examined by traversing the document structure. The entire document structure is stored as a hierarchy of document elements beneath the root frame, found with the :meth:`PySide.QtGui.QTextDocument.rootFrame` function. Alternatively, if you just want to iterate over the textual contents of the document you can use :meth:`PySide.QtGui.QTextDocument.begin` , :meth:`PySide.QtGui.QTextDocument.end` , and :meth:`PySide.QtGui.QTextDocument.findBlock` to retrieve text blocks that you can examine and iterate over.

    The layout of a document is determined by the :meth:`PySide.QtGui.QTextDocument.documentLayout` ; you can create your own :class:`PySide.QtGui.QAbstractTextDocumentLayout` subclass and set it using :meth:`PySide.QtGui.QTextDocument.setDocumentLayout` if you want to use your own layout logic. The document's title and other meta-information can be obtained by calling the :meth:`PySide.QtGui.QTextDocument.metaInformation` function. For documents that are exposed to users through the :class:`PySide.QtGui.QTextEdit` class, the document title is also available via the :meth:`QTextEdit.documentTitle()<PySide.QtGui.QTextEdit.documentTitle>` function.

    The :meth:`PySide.QtGui.QTextDocument.toPlainText` and :meth:`PySide.QtGui.QTextDocument.toHtml` convenience functions allow you to retrieve the contents of the document as plain text and HTML. The document's text can be searched using the :meth:`PySide.QtGui.QTextDocument.find` functions.

    Undo/redo of operations performed on the document can be controlled using the :meth:`PySide.QtGui.QTextDocument.setUndoRedoEnabled` function. The undo/redo system can be controlled by an editor widget through the :meth:`PySide.QtGui.QTextDocument.undo` and :meth:`PySide.QtGui.QTextDocument.redo` slots; the document also provides :meth:`PySide.QtGui.QTextDocument.contentsChanged` , :meth:`PySide.QtGui.QTextDocument.undoAvailable` , and :meth:`PySide.QtGui.QTextDocument.redoAvailable` signals that inform connected editor widgets about the state of the undo/redo system. The following are the undo/redo operations of a :class:`PySide.QtGui.QTextDocument` :


    * Insertion or removal of characters. A sequence of insertions or removals within the same text block are regarded as a single undo/redo operation.
    * Insertion or removal of text blocks. Sequences of insertion or removals in a single operation (e.g., by selecting and then deleting text) are regarded as a single undo/redo operation.
    * Text character format changes.
    * Text block format changes.
    * Text block group format changes.

    .. seealso::  :class:`PySide.QtGui.QTextCursor`  :class:`PySide.QtGui.QTextEdit`  :ref:`Rich Text Processing<richtext.html>`  :ref:`Text Object Example<richtext/textobject>` 

.. class:: QTextDocument([parent=None])
           QTextDocument(text[, parent=None])

    :param parent: :class:`PySide.QtCore.QObject`
    :param text: unicode

    Constructs an empty :class:`PySide.QtGui.QTextDocument` with the given ``parent`` .


    Constructs a :class:`PySide.QtGui.QTextDocument` containing the plain (unformatted) ``text`` specified, and with the given ``parent`` .


.. attribute:: PySide.QtGui.QTextDocument.ResourceType

    This enum describes the types of resources that can be loaded by :class:`PySide.QtGui.QTextDocument` 's :meth:`PySide.QtGui.QTextDocument.loadResource` function.


    |Constant                        |Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |

    |QTextDocument.HtmlResource      |The resource contains HTML.                                                                                                                                                                                                                                                                                                                                                                                                                                                   |

    |QTextDocument.ImageResource     |The resource contains image data. Currently supported data types are :attr:`QVariant.Pixmap<QVariant.Type>` and :attr:`QVariant.Image<QVariant.Type>` . If the corresponding variant is of type :attr:`QVariant.ByteArray<QVariant.Type>` then Qt attempts to load the image using QImage::loadFromData. :attr:`QVariant.Icon<QVariant.Type>` is currently not supported. The icon needs to be converted to one of the supported types first, for example using QIcon::pixmap.|

    |QTextDocument.StyleSheetResource|The resource contains CSS.                                                                                                                                                                                                                                                                                                                                                                                                                                                    |

    |QTextDocument.UserResource      |The first available value for user defined resource types.                                                                                                                                                                                                                                                                                                                                                                                                                    |


    .. seealso::  :meth:`PySide.QtGui.QTextDocument.loadResource` 

.. attribute:: PySide.QtGui.QTextDocument.Stacks

    +-------------------------------+------------------------------+
    |Constant                       |Description                   |
    +===============================+==============================+
    |QTextDocument.UndoStack        |The undo stack.               |
    +-------------------------------+------------------------------+
    |QTextDocument.RedoStack        |The redo stack.               |
    +-------------------------------+------------------------------+
    |QTextDocument.UndoAndRedoStacks|Both the undo and redo stacks.|
    +-------------------------------+------------------------------+


.. note:: This enum was introduced or modified in Qt 4.7
.. attribute:: PySide.QtGui.QTextDocument.FindFlag

    This enum describes the options available to :class:`PySide.QtGui.QTextDocument` 's find function. The options can be OR-ed together from the following list:

    +---------------------------------+------------------------------------------------------------------------------------------------------------------------+
    |Constant                         |Description                                                                                                             |
    +=================================+========================================================================================================================+
    |QTextDocument.FindBackward       |Search backwards instead of forwards.                                                                                   |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------+
    |QTextDocument.FindCaseSensitively|By default find works case insensitive. Specifying this option changes the behaviour to a case sensitive find operation.|
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------+
    |QTextDocument.FindWholeWords     |Makes find match only complete words.                                                                                   |
    +---------------------------------+------------------------------------------------------------------------------------------------------------------------+


.. attribute:: PySide.QtGui.QTextDocument.MetaInformation

    This enum describes the different types of meta information that can be added to a document.

    +---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                   |Description                                                                                                                                     |
    +===========================+================================================================================================================================================+
    |QTextDocument.DocumentTitle|The title of the document.                                                                                                                      |
    +---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTextDocument.DocumentUrl  |The url of the document. The :meth:`PySide.QtGui.QTextDocument.loadResource` function uses this url as the base when loading relative resources.|
    +---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.metaInformation`  :meth:`PySide.QtGui.QTextDocument.setMetaInformation` 

.. method:: PySide.QtGui.QTextDocument.addResource(type, name, resource)


    :param type: :class:`PySide.QtCore.int`
    :param name: :class:`PySide.QtCore.QUrl`
    :param resource: object




    Adds the resource ``resource`` to the resource cache, using ``type`` and ``name`` as identifiers. ``type`` should be a value from :attr:`QTextDocument.ResourceType` .

    For example, you can add an image as a resource in order to reference it from within the document:

    ::

            document.addResource(QTextDocument.ImageResource,
                QUrl("mydata://image.png"), image)


    The image can be inserted into the document using the :class:`PySide.QtGui.QTextCursor` API:

    ::

            imageFormat = QTextImageFormat()
            imageFormat.setName("mydata://image.png")
            cursor.insertImage(imageFormat)


    Alternatively, you can insert images using the HTML ``img`` tag:

    ::

            editor.append("<img src=\"mydata://image.png\" />")




.. method:: PySide.QtGui.QTextDocument.adjustSize()






    Adjusts the document to a reasonable size.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.idealWidth`  :meth:`PySide.QtGui.QTextDocument.textWidth`  :meth:`PySide.QtGui.QTextDocument.size` 


.. method:: PySide.QtGui.QTextDocument.allFormats()


    :rtype: 




    Returns a vector of text formats for all the formats used in the document.



.. method:: PySide.QtGui.QTextDocument.availableRedoSteps()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of available redo steps.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.isRedoAvailable` 


.. method:: PySide.QtGui.QTextDocument.availableUndoSteps()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of available undo steps.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.isUndoAvailable` 


.. method:: PySide.QtGui.QTextDocument.begin()


    :rtype: :class:`PySide.QtGui.QTextBlock`




    Returns the document's first text block.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.firstBlock` 


.. method:: PySide.QtGui.QTextDocument.blockCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of text blocks in the document.

    The value of this property is undefined in documents with tables or frames.

    By default, if defined, this property contains a value of 1.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.lineCount`  :meth:`PySide.QtGui.QTextDocument.characterCount` 


.. method:: PySide.QtGui.QTextDocument.blockCountChanged(newBlockCount)


    :param newBlockCount: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTextDocument.characterAt(pos)


    :param pos: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QChar`




    Returns the character at position ``pos`` , or a null character if the position is out of range.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.characterCount` 


.. method:: PySide.QtGui.QTextDocument.characterCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of characters of this document.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.blockCount`  :meth:`PySide.QtGui.QTextDocument.characterAt` 


.. method:: PySide.QtGui.QTextDocument.clear()






    Clears the document.



.. method:: PySide.QtGui.QTextDocument.clearUndoRedoStacks([historyToClear=UndoAndRedoStacks])


    :param historyToClear: :attr:`PySide.QtGui.QTextDocument.Stacks`




    Clears the stacks specified by ``stacksToClear`` .

    This method clears any commands on the undo stack, the redo stack, or both (the default). If commands are cleared, the appropriate signals are emitted, :meth:`QTextDocument.undoAvailable()<PySide.QtGui.QTextDocument.undoAvailable>` or :meth:`QTextDocument.redoAvailable()<PySide.QtGui.QTextDocument.redoAvailable>` .

    .. seealso::  :meth:`QTextDocument.undoAvailable()<PySide.QtGui.QTextDocument.undoAvailable>`  :meth:`QTextDocument.redoAvailable()<PySide.QtGui.QTextDocument.redoAvailable>` 


.. method:: PySide.QtGui.QTextDocument.clone([parent=None])


    :param parent: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.QtGui.QTextDocument`




    Creates a new :class:`PySide.QtGui.QTextDocument` that is a copy of this text document. ``parent`` is the parent of the returned text document.



.. method:: PySide.QtGui.QTextDocument.contentsChange(from, charsRemoves, charsAdded)


    :param from: :class:`PySide.QtCore.int`
    :param charsRemoves: :class:`PySide.QtCore.int`
    :param charsAdded: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTextDocument.contentsChanged()








.. method:: PySide.QtGui.QTextDocument.createObject(f)


    :param f: :class:`PySide.QtGui.QTextFormat`
    :rtype: :class:`PySide.QtGui.QTextObject`




    Creates and returns a new document object (a :class:`PySide.QtGui.QTextObject` ), based on the given ``format`` .

    QTextObjects will always get created through this method, so you must reimplement it if you use custom text objects inside your document.



.. method:: PySide.QtGui.QTextDocument.cursorPositionChanged(cursor)


    :param cursor: :class:`PySide.QtGui.QTextCursor`






.. method:: PySide.QtGui.QTextDocument.defaultFont()


    :rtype: :class:`PySide.QtGui.QFont`




    This property holds the default font used to display the document's text.



.. method:: PySide.QtGui.QTextDocument.defaultStyleSheet()


    :rtype: unicode




    The default style sheet is applied to all newly HTML formatted text that is inserted into the document, for example using :meth:`PySide.QtGui.QTextDocument.setHtml` or :meth:`QTextCursor.insertHtml()<PySide.QtGui.QTextCursor.insertHtml>` .

    The style sheet needs to be compliant to CSS 2.1 syntax.

    .. note::  Changing the default style sheet does not have any effect to the existing content of the document.

    .. seealso::  :ref:`Supported HTML Subset<richtext-html-subset.html>` 


.. method:: PySide.QtGui.QTextDocument.defaultTextOption()


    :rtype: :class:`PySide.QtGui.QTextOption`




    The default text option is used on all :class:`PySide.QtGui.QTextLayout` objects in the document. This allows setting global properties for the document such as the default word wrap mode.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.setDefaultTextOption` 


.. method:: PySide.QtGui.QTextDocument.documentLayout()


    :rtype: :class:`PySide.QtGui.QAbstractTextDocumentLayout`




    Returns the document layout for this document.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.setDocumentLayout` 


.. method:: PySide.QtGui.QTextDocument.documentLayoutChanged()








.. method:: PySide.QtGui.QTextDocument.documentMargin()


    :rtype: :class:`PySide.QtCore.qreal`




    The margin around the document. The default is 4.



.. method:: PySide.QtGui.QTextDocument.drawContents(painter[, rect=QRectF()])


    :param painter: :class:`PySide.QtGui.QPainter`
    :param rect: :class:`PySide.QtCore.QRectF`




    Draws the content of the document with painter ``p`` , clipped to ``rect`` . If ``rect`` is a null rectangle (default) then the document is painted unclipped.



.. method:: PySide.QtGui.QTextDocument.end()


    :rtype: :class:`PySide.QtGui.QTextBlock`




    This function returns a block to test for the end of the document while iterating over it.

    ::

            it = doc.begin()
            while it != doc.end():
                print it.text()
                it = it.next()


    The block returned is invalid and represents the block after the last block in the document. You can use :meth:`PySide.QtGui.QTextDocument.lastBlock` to retrieve the last valid block of the document.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.lastBlock` 


.. method:: PySide.QtGui.QTextDocument.find(subString[, from=0[, options=0]])


    :param subString: unicode
    :param from: :class:`PySide.QtCore.int`
    :param options: :class:`PySide.QtGui.QTextDocument.FindFlags`
    :rtype: :class:`PySide.QtGui.QTextCursor`







.. method:: PySide.QtGui.QTextDocument.find(subString, from[, options=0])


    :param subString: unicode
    :param from: :class:`PySide.QtGui.QTextCursor`
    :param options: :class:`PySide.QtGui.QTextDocument.FindFlags`
    :rtype: :class:`PySide.QtGui.QTextCursor`







.. method:: PySide.QtGui.QTextDocument.find(expr[, from=0[, options=0]])


    :param expr: :class:`PySide.QtCore.QRegExp`
    :param from: :class:`PySide.QtCore.int`
    :param options: :class:`PySide.QtGui.QTextDocument.FindFlags`
    :rtype: :class:`PySide.QtGui.QTextCursor`







.. method:: PySide.QtGui.QTextDocument.find(expr, from[, options=0])


    :param expr: :class:`PySide.QtCore.QRegExp`
    :param from: :class:`PySide.QtGui.QTextCursor`
    :param options: :class:`PySide.QtGui.QTextDocument.FindFlags`
    :rtype: :class:`PySide.QtGui.QTextCursor`







.. method:: PySide.QtGui.QTextDocument.findBlock(pos)


    :param pos: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextBlock`




    Returns the text block that contains the ``pos`` -th character.



.. method:: PySide.QtGui.QTextDocument.findBlockByLineNumber(blockNumber)


    :param blockNumber: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextBlock`




    Returns the text block that contains the specified ``lineNumber`` .

    .. seealso::  :meth:`QTextBlock.firstLineNumber()<PySide.QtGui.QTextBlock.firstLineNumber>` 


.. method:: PySide.QtGui.QTextDocument.findBlockByNumber(blockNumber)


    :param blockNumber: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextBlock`




    Returns the text block with the specified ``blockNumber`` .

    .. seealso::  :meth:`QTextBlock.blockNumber()<PySide.QtGui.QTextBlock.blockNumber>` 


.. method:: PySide.QtGui.QTextDocument.firstBlock()


    :rtype: :class:`PySide.QtGui.QTextBlock`




    Returns the document's first text block.



.. method:: PySide.QtGui.QTextDocument.frameAt(pos)


    :param pos: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextFrame`




    Returns the frame that contains the text cursor position ``pos`` .



.. method:: PySide.QtGui.QTextDocument.idealWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the ideal width of the text document. The ideal width is the actually used width of the document without optional alignments taken into account. It is always <= :meth:`PySide.QtGui.QTextDocument.size` . :meth:`~PySide.QtGui.QTextDocument.width` .

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.adjustSize`  :meth:`PySide.QtGui.QTextDocument.textWidth` 


.. method:: PySide.QtGui.QTextDocument.indentWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the width used for text list and text block indenting.

    The indent properties of :class:`PySide.QtGui.QTextListFormat` and :class:`PySide.QtGui.QTextBlockFormat` specify multiples of this value. The default indent width is 40.



.. method:: PySide.QtGui.QTextDocument.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the document is empty; otherwise returns false.



.. method:: PySide.QtGui.QTextDocument.isModified()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the document has been modified by the user.

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.modificationChanged` 


.. method:: PySide.QtGui.QTextDocument.isRedoAvailable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if redo is available; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.isUndoAvailable`  :meth:`PySide.QtGui.QTextDocument.availableRedoSteps` 


.. method:: PySide.QtGui.QTextDocument.isUndoAvailable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if undo is available; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.isRedoAvailable`  :meth:`PySide.QtGui.QTextDocument.availableUndoSteps` 


.. method:: PySide.QtGui.QTextDocument.isUndoRedoEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether undo/redo are enabled for this document.

    This defaults to true. If disabled, the undo stack is cleared and no items will be added to it.



.. method:: PySide.QtGui.QTextDocument.lastBlock()


    :rtype: :class:`PySide.QtGui.QTextBlock`




    Returns the document's last (valid) text block.



.. method:: PySide.QtGui.QTextDocument.lineCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of lines of this document (if the layout supports this). Otherwise, this is identical to the number of blocks.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.blockCount`  :meth:`PySide.QtGui.QTextDocument.characterCount` 


.. method:: PySide.QtGui.QTextDocument.loadResource(type, name)


    :param type: :class:`PySide.QtCore.int`
    :param name: :class:`PySide.QtCore.QUrl`
    :rtype: object




    Loads data of the specified ``type`` from the resource with the given ``name`` .

    This function is called by the rich text engine to request data that isn't directly stored by :class:`PySide.QtGui.QTextDocument` , but still associated with it. For example, images are referenced indirectly by the name attribute of a :class:`PySide.QtGui.QTextImageFormat` object.

    When called by Qt, ``type`` is one of the values of :attr:`QTextDocument.ResourceType` .

    If the :class:`PySide.QtGui.QTextDocument` is a child object of a :class:`PySide.QtGui.QTextEdit` , :class:`PySide.QtGui.QTextBrowser` , or a :class:`PySide.QtGui.QTextDocument` itself then the default implementation tries to retrieve the data from the parent.



.. method:: PySide.QtGui.QTextDocument.markContentsDirty(from, length)


    :param from: :class:`PySide.QtCore.int`
    :param length: :class:`PySide.QtCore.int`




    Marks the contents specified by the given ``position`` and ``length`` as "dirty", informing the document that it needs to be laid out again.



.. method:: PySide.QtGui.QTextDocument.maximumBlockCount()


    :rtype: :class:`PySide.QtCore.int`




    This property Specifies the limit for blocks in the document..

    Specifies the maximum number of blocks the document may have. If there are more blocks in the document that specified with this property blocks are removed from the beginning of the document.

    A negative or zero value specifies that the document may contain an unlimited amount of blocks.

    The default value is 0.

    Note that setting this property will apply the limit immediately to the document contents.

    Setting this property also disables the undo redo history.

    This property is undefined in documents with tables or frames.



.. method:: PySide.QtGui.QTextDocument.metaInformation(info)


    :param info: :attr:`PySide.QtGui.QTextDocument.MetaInformation`
    :rtype: unicode




    Returns meta information about the document of the type specified by ``info`` .

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.setMetaInformation` 


.. method:: PySide.QtGui.QTextDocument.modificationChanged(m)


    :param m: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTextDocument.object(objectIndex)


    :param objectIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTextObject`




    Returns the text object associated with the given ``objectIndex`` .



.. method:: PySide.QtGui.QTextDocument.objectForFormat(arg__1)


    :param arg__1: :class:`PySide.QtGui.QTextFormat`
    :rtype: :class:`PySide.QtGui.QTextObject`




    Returns the text object associated with the format ``f`` .



.. method:: PySide.QtGui.QTextDocument.pageCount()


    :rtype: :class:`PySide.QtCore.int`




    returns the number of pages in this document.



.. method:: PySide.QtGui.QTextDocument.pageSize()


    :rtype: :class:`PySide.QtCore.QSizeF`




    This property holds the page size that should be used for laying out the document.

    By default, for a newly-created, empty document, this property contains an undefined size.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.modificationChanged` 


.. method:: PySide.QtGui.QTextDocument.print_(printer)


    :param printer: :class:`PySide.QtGui.QPrinter`




    Prints the document to the given ``printer`` . The :class:`PySide.QtGui.QPrinter` must be set up before being used with this function.

    This is only a convenience method to print the whole document to the printer.

    If the document is already paginated through a specified height in the :meth:`PySide.QtGui.QTextDocument.pageSize` property it is printed as-is.

    If the document is not paginated, like for example a document used in a :class:`PySide.QtGui.QTextEdit` , then a temporary copy of the document is created and the copy is broken into multiple pages according to the size of the :class:`PySide.QtGui.QPrinter` 's paperRect(). By default a 2 cm margin is set around the document contents. In addition the current page number is printed at the bottom of each page.

    Note that :attr:`QPrinter.Selection<QPrinter.PrintRange>` is not supported as print range with this function since the selection is a property of :class:`PySide.QtGui.QTextCursor` . If you have a :class:`PySide.QtGui.QTextEdit` associated with your :class:`PySide.QtGui.QTextDocument` then you can use :class:`PySide.QtGui.QTextEdit` 's :meth:`~PySide.QtGui.QTextDocument.print` function because :class:`PySide.QtGui.QTextEdit` has access to the user's selection.

    .. seealso::  :meth:`QTextEdit.print()<PySide.QtGui.QTextEdit.print>` 


.. method:: PySide.QtGui.QTextDocument.redo(cursor)


    :param cursor: :class:`PySide.QtGui.QTextCursor`




    Redoes the last editing operation on the document if :meth:`redo is available<PySide.QtGui.QTextDocument.isRedoAvailable>` .

    The provided ``cursor`` is positioned at the end of the location where the edition operation was redone.



.. method:: PySide.QtGui.QTextDocument.redo()






    This is an overloaded function.

    Redoes the last editing operation on the document if :meth:`redo is available<PySide.QtGui.QTextDocument.isRedoAvailable>` .



.. method:: PySide.QtGui.QTextDocument.redoAvailable(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTextDocument.resource(type, name)


    :param type: :class:`PySide.QtCore.int`
    :param name: :class:`PySide.QtCore.QUrl`
    :rtype: object




    Returns data of the specified ``type`` from the resource with the given ``name`` .

    This function is called by the rich text engine to request data that isn't directly stored by :class:`PySide.QtGui.QTextDocument` , but still associated with it. For example, images are referenced indirectly by the name attribute of a :class:`PySide.QtGui.QTextImageFormat` object.

    Resources are cached internally in the document. If a resource can not be found in the cache, loadResource is called to try to load the resource. loadResource should then use addResource to add the resource to the cache.

    .. seealso::  :attr:`QTextDocument.ResourceType` 


.. method:: PySide.QtGui.QTextDocument.revision()


    :rtype: :class:`PySide.QtCore.int`




    Returns the document's revision (if undo is enabled).

    The revision is guaranteed to increase when a document that is not modified is edited.

    .. seealso::  :meth:`QTextBlock.revision()<PySide.QtGui.QTextBlock.revision>`  :meth:`PySide.QtGui.QTextDocument.isModified` 


.. method:: PySide.QtGui.QTextDocument.rootFrame()


    :rtype: :class:`PySide.QtGui.QTextFrame`




    Returns the document's root frame.



.. method:: PySide.QtGui.QTextDocument.setDefaultFont(font)


    :param font: :class:`PySide.QtGui.QFont`




    This property holds the default font used to display the document's text.



.. method:: PySide.QtGui.QTextDocument.setDefaultStyleSheet(sheet)


    :param sheet: unicode




    The default style sheet is applied to all newly HTML formatted text that is inserted into the document, for example using :meth:`PySide.QtGui.QTextDocument.setHtml` or :meth:`QTextCursor.insertHtml()<PySide.QtGui.QTextCursor.insertHtml>` .

    The style sheet needs to be compliant to CSS 2.1 syntax.

    .. note::  Changing the default style sheet does not have any effect to the existing content of the document.

    .. seealso::  :ref:`Supported HTML Subset<richtext-html-subset.html>` 


.. method:: PySide.QtGui.QTextDocument.setDefaultTextOption(option)


    :param option: :class:`PySide.QtGui.QTextOption`




    Sets the default text option.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.defaultTextOption` 


.. method:: PySide.QtGui.QTextDocument.setDocumentLayout(layout)


    :param layout: :class:`PySide.QtGui.QAbstractTextDocumentLayout`




    Sets the document to use the given ``layout`` . The previous layout is deleted.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.documentLayoutChanged` 


.. method:: PySide.QtGui.QTextDocument.setDocumentMargin(margin)


    :param margin: :class:`PySide.QtCore.qreal`




    The margin around the document. The default is 4.



.. method:: PySide.QtGui.QTextDocument.setHtml(html)


    :param html: unicode




    Replaces the entire contents of the document with the given HTML-formatted text in the ``html`` string.

    The HTML formatting is respected as much as possible; for example, "<b>bold</b> text" will produce text where the first word has a font weight that gives it a bold appearance: "**bold** text".

    .. note::  It is the responsibility of the caller to make sure that the text is correctly decoded when a :class:`PySide.QtCore.QString` containing HTML is created and passed to :meth:`PySide.QtGui.QTextDocument.setHtml` .

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.setPlainText`  :ref:`Supported HTML Subset<richtext-html-subset.html>` 


.. method:: PySide.QtGui.QTextDocument.setIndentWidth(width)


    :param width: :class:`PySide.QtCore.qreal`




    Returns the width used for text list and text block indenting.

    The indent properties of :class:`PySide.QtGui.QTextListFormat` and :class:`PySide.QtGui.QTextBlockFormat` specify multiples of this value. The default indent width is 40.



.. method:: PySide.QtGui.QTextDocument.setMaximumBlockCount(maximum)


    :param maximum: :class:`PySide.QtCore.int`




    This property Specifies the limit for blocks in the document..

    Specifies the maximum number of blocks the document may have. If there are more blocks in the document that specified with this property blocks are removed from the beginning of the document.

    A negative or zero value specifies that the document may contain an unlimited amount of blocks.

    The default value is 0.

    Note that setting this property will apply the limit immediately to the document contents.

    Setting this property also disables the undo redo history.

    This property is undefined in documents with tables or frames.



.. method:: PySide.QtGui.QTextDocument.setMetaInformation(info, arg__2)


    :param info: :attr:`PySide.QtGui.QTextDocument.MetaInformation`
    :param arg__2: unicode




    Sets the document's meta information of the type specified by ``info`` to the given ``string`` .

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.metaInformation` 


.. method:: PySide.QtGui.QTextDocument.setModified([m=true])


    :param m: :class:`PySide.QtCore.bool`




    This property holds whether the document has been modified by the user.

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.modificationChanged` 


.. method:: PySide.QtGui.QTextDocument.setPageSize(size)


    :param size: :class:`PySide.QtCore.QSizeF`




    This property holds the page size that should be used for laying out the document.

    By default, for a newly-created, empty document, this property contains an undefined size.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.modificationChanged` 


.. method:: PySide.QtGui.QTextDocument.setPlainText(text)


    :param text: unicode




    Replaces the entire contents of the document with the given plain ``text`` .

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.setHtml` 


.. method:: PySide.QtGui.QTextDocument.setTextWidth(width)


    :param width: :class:`PySide.QtCore.qreal`




    The text width specifies the preferred width for text in the document. If the text (or content in general) is wider than the specified with it is broken into multiple lines and grows vertically. If the text cannot be broken into multiple lines to fit into the specified text width it will be larger and the :meth:`PySide.QtGui.QTextDocument.size` and the :meth:`PySide.QtGui.QTextDocument.idealWidth` property will reflect that.

    If the text width is set to -1 then the text will not be broken into multiple lines unless it is enforced through an explicit line break or a new paragraph.

    The default value is -1.

    Setting the text width will also set the page height to -1, causing the document to grow or shrink vertically in a continuous way. If you want the document layout to break the text into multiple pages then you have to set the :meth:`PySide.QtGui.QTextDocument.pageSize` property instead.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.size`  :meth:`PySide.QtGui.QTextDocument.idealWidth`  :meth:`PySide.QtGui.QTextDocument.pageSize` 


.. method:: PySide.QtGui.QTextDocument.setUndoRedoEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether undo/redo are enabled for this document.

    This defaults to true. If disabled, the undo stack is cleared and no items will be added to it.



.. method:: PySide.QtGui.QTextDocument.setUseDesignMetrics(b)


    :param b: :class:`PySide.QtCore.bool`




    This property holds whether the document uses design metrics of fonts to improve the accuracy of text layout.

    If this property is set to true, the layout will use design metrics. Otherwise, the metrics of the paint device as set on :meth:`QAbstractTextDocumentLayout.setPaintDevice()<PySide.QtGui.QAbstractTextDocumentLayout.setPaintDevice>` will be used.

    Using design metrics makes a layout have a width that is no longer dependent on hinting and pixel-rounding. This means that WYSIWYG text layout becomes possible because the width scales much more linearly based on paintdevice metrics than it would otherwise.

    By default, this property is false.



.. method:: PySide.QtGui.QTextDocument.size()


    :rtype: :class:`PySide.QtCore.QSizeF`




    Returns the actual size of the document. This is equivalent to :meth:`PySide.QtGui.QTextDocument.documentLayout` ->documentSize();

    The size of the document can be changed either by setting a text width or setting an entire page size.

    Note that the width is always >= :meth:`PySide.QtGui.QTextDocument.pageSize` . :meth:`~PySide.QtGui.QTextDocument.width` .

    By default, for a newly-created, empty document, this property contains a configuration-dependent size.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.setTextWidth`  :meth:`PySide.QtGui.QTextDocument.setPageSize`  :meth:`PySide.QtGui.QTextDocument.idealWidth` 


.. method:: PySide.QtGui.QTextDocument.textWidth()


    :rtype: :class:`PySide.QtCore.qreal`




    The text width specifies the preferred width for text in the document. If the text (or content in general) is wider than the specified with it is broken into multiple lines and grows vertically. If the text cannot be broken into multiple lines to fit into the specified text width it will be larger and the :meth:`PySide.QtGui.QTextDocument.size` and the :meth:`PySide.QtGui.QTextDocument.idealWidth` property will reflect that.

    If the text width is set to -1 then the text will not be broken into multiple lines unless it is enforced through an explicit line break or a new paragraph.

    The default value is -1.

    Setting the text width will also set the page height to -1, causing the document to grow or shrink vertically in a continuous way. If you want the document layout to break the text into multiple pages then you have to set the :meth:`PySide.QtGui.QTextDocument.pageSize` property instead.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.size`  :meth:`PySide.QtGui.QTextDocument.idealWidth`  :meth:`PySide.QtGui.QTextDocument.pageSize` 


.. method:: PySide.QtGui.QTextDocument.toHtml([encoding=QByteArray()])


    :param encoding: :class:`PySide.QtCore.QByteArray`
    :rtype: unicode




    Returns a string containing an HTML representation of the document.

    The ``encoding`` parameter specifies the value for the charset attribute in the html header. For example if 'utf-8' is specified then the beginning of the generated html will look like this:

    ::

        <html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>...


    If no encoding is specified then no such meta information is generated.

    If you later on convert the returned html string into a byte array for transmission over a network or when saving to disk you should specify the encoding you're going to use for the conversion to a byte array here.

    .. seealso::  :ref:`Supported HTML Subset<richtext-html-subset.html>` 


.. method:: PySide.QtGui.QTextDocument.toPlainText()


    :rtype: unicode




    Returns the plain text contained in the document. If you want formatting information use a :class:`PySide.QtGui.QTextCursor` instead.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.toHtml` 


.. method:: PySide.QtGui.QTextDocument.undo()






    This is an overloaded function.



.. method:: PySide.QtGui.QTextDocument.undo(cursor)


    :param cursor: :class:`PySide.QtGui.QTextCursor`




    Undoes the last editing operation on the document if undo is available. The provided ``cursor`` is positioned at the end of the location where the edition operation was undone.

    See the :ref:`Qt Undo Framework<qundo.html>` documentation for details.

    .. seealso::  :meth:`PySide.QtGui.QTextDocument.undoAvailable`  :meth:`PySide.QtGui.QTextDocument.isUndoRedoEnabled` 


.. method:: PySide.QtGui.QTextDocument.undoAvailable(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTextDocument.undoCommandAdded()








.. method:: PySide.QtGui.QTextDocument.useDesignMetrics()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the document uses design metrics of fonts to improve the accuracy of text layout.

    If this property is set to true, the layout will use design metrics. Otherwise, the metrics of the paint device as set on :meth:`QAbstractTextDocumentLayout.setPaintDevice()<PySide.QtGui.QAbstractTextDocumentLayout.setPaintDevice>` will be used.

    Using design metrics makes a layout have a width that is no longer dependent on hinting and pixel-rounding. This means that WYSIWYG text layout becomes possible because the width scales much more linearly based on paintdevice metrics than it would otherwise.

    By default, this property is false.




