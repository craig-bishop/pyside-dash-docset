.. module:: PySide.QtGui
.. _QTableWidget:

QTableWidget
************

.. inheritance-diagram:: QTableWidget
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`cellWidget<PySide.QtGui.QTableWidget.cellWidget>` (row, column)
*    def :meth:`closePersistentEditor<PySide.QtGui.QTableWidget.closePersistentEditor>` (item)
*    def :meth:`column<PySide.QtGui.QTableWidget.column>` (item)
*    def :meth:`columnCount<PySide.QtGui.QTableWidget.columnCount>` ()
*    def :meth:`currentColumn<PySide.QtGui.QTableWidget.currentColumn>` ()
*    def :meth:`currentItem<PySide.QtGui.QTableWidget.currentItem>` ()
*    def :meth:`currentRow<PySide.QtGui.QTableWidget.currentRow>` ()
*    def :meth:`editItem<PySide.QtGui.QTableWidget.editItem>` (item)
*    def :meth:`findItems<PySide.QtGui.QTableWidget.findItems>` (text, flags)
*    def :meth:`horizontalHeaderItem<PySide.QtGui.QTableWidget.horizontalHeaderItem>` (column)
*    def :meth:`indexFromItem<PySide.QtGui.QTableWidget.indexFromItem>` (item)
*    def :meth:`item<PySide.QtGui.QTableWidget.item>` (row, column)
*    def :meth:`itemAt<PySide.QtGui.QTableWidget.itemAt>` (p)
*    def :meth:`itemAt<PySide.QtGui.QTableWidget.itemAt>` (x, y)
*    def :meth:`itemFromIndex<PySide.QtGui.QTableWidget.itemFromIndex>` (index)
*    def :meth:`itemPrototype<PySide.QtGui.QTableWidget.itemPrototype>` ()
*    def :meth:`items<PySide.QtGui.QTableWidget.items>` (data)
*    def :meth:`openPersistentEditor<PySide.QtGui.QTableWidget.openPersistentEditor>` (item)
*    def :meth:`removeCellWidget<PySide.QtGui.QTableWidget.removeCellWidget>` (row, column)
*    def :meth:`row<PySide.QtGui.QTableWidget.row>` (item)
*    def :meth:`rowCount<PySide.QtGui.QTableWidget.rowCount>` ()
*    def :meth:`selectedItems<PySide.QtGui.QTableWidget.selectedItems>` ()
*    def :meth:`selectedRanges<PySide.QtGui.QTableWidget.selectedRanges>` ()
*    def :meth:`setCellWidget<PySide.QtGui.QTableWidget.setCellWidget>` (row, column, widget)
*    def :meth:`setColumnCount<PySide.QtGui.QTableWidget.setColumnCount>` (columns)
*    def :meth:`setCurrentCell<PySide.QtGui.QTableWidget.setCurrentCell>` (row, column)
*    def :meth:`setCurrentCell<PySide.QtGui.QTableWidget.setCurrentCell>` (row, column, command)
*    def :meth:`setCurrentItem<PySide.QtGui.QTableWidget.setCurrentItem>` (item)
*    def :meth:`setCurrentItem<PySide.QtGui.QTableWidget.setCurrentItem>` (item, command)
*    def :meth:`setHorizontalHeaderItem<PySide.QtGui.QTableWidget.setHorizontalHeaderItem>` (column, item)
*    def :meth:`setHorizontalHeaderLabels<PySide.QtGui.QTableWidget.setHorizontalHeaderLabels>` (labels)
*    def :meth:`setItem<PySide.QtGui.QTableWidget.setItem>` (row, column, item)
*    def :meth:`setItemPrototype<PySide.QtGui.QTableWidget.setItemPrototype>` (item)
*    def :meth:`setRangeSelected<PySide.QtGui.QTableWidget.setRangeSelected>` (range, select)
*    def :meth:`setRowCount<PySide.QtGui.QTableWidget.setRowCount>` (rows)
*    def :meth:`setVerticalHeaderItem<PySide.QtGui.QTableWidget.setVerticalHeaderItem>` (row, item)
*    def :meth:`setVerticalHeaderLabels<PySide.QtGui.QTableWidget.setVerticalHeaderLabels>` (labels)
*    def :meth:`sortItems<PySide.QtGui.QTableWidget.sortItems>` (column[, order=Qt.AscendingOrder])
*    def :meth:`takeHorizontalHeaderItem<PySide.QtGui.QTableWidget.takeHorizontalHeaderItem>` (column)
*    def :meth:`takeItem<PySide.QtGui.QTableWidget.takeItem>` (row, column)
*    def :meth:`takeVerticalHeaderItem<PySide.QtGui.QTableWidget.takeVerticalHeaderItem>` (row)
*    def :meth:`verticalHeaderItem<PySide.QtGui.QTableWidget.verticalHeaderItem>` (row)
*    def :meth:`visualColumn<PySide.QtGui.QTableWidget.visualColumn>` (logicalColumn)
*    def :meth:`visualItemRect<PySide.QtGui.QTableWidget.visualItemRect>` (item)
*    def :meth:`visualRow<PySide.QtGui.QTableWidget.visualRow>` (logicalRow)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`dropMimeData<PySide.QtGui.QTableWidget.dropMimeData>` (row, column, data, action)
*    def :meth:`mimeData<PySide.QtGui.QTableWidget.mimeData>` (items)
*    def :meth:`mimeTypes<PySide.QtGui.QTableWidget.mimeTypes>` ()
*    def :meth:`supportedDropActions<PySide.QtGui.QTableWidget.supportedDropActions>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`clear<PySide.QtGui.QTableWidget.clear>` ()
*    def :meth:`clearContents<PySide.QtGui.QTableWidget.clearContents>` ()
*    def :meth:`insertColumn<PySide.QtGui.QTableWidget.insertColumn>` (column)
*    def :meth:`insertRow<PySide.QtGui.QTableWidget.insertRow>` (row)
*    def :meth:`removeColumn<PySide.QtGui.QTableWidget.removeColumn>` (column)
*    def :meth:`removeRow<PySide.QtGui.QTableWidget.removeRow>` (row)
*    def :meth:`scrollToItem<PySide.QtGui.QTableWidget.scrollToItem>` (item[, hint=EnsureVisible])


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`cellActivated<PySide.QtGui.QTableWidget.cellActivated>` (row, column)
*    def :meth:`cellChanged<PySide.QtGui.QTableWidget.cellChanged>` (row, column)
*    def :meth:`cellClicked<PySide.QtGui.QTableWidget.cellClicked>` (row, column)
*    def :meth:`cellDoubleClicked<PySide.QtGui.QTableWidget.cellDoubleClicked>` (row, column)
*    def :meth:`cellEntered<PySide.QtGui.QTableWidget.cellEntered>` (row, column)
*    def :meth:`cellPressed<PySide.QtGui.QTableWidget.cellPressed>` (row, column)
*    def :meth:`currentCellChanged<PySide.QtGui.QTableWidget.currentCellChanged>` (currentRow, currentColumn, previousRow, previousColumn)
*    def :meth:`currentItemChanged<PySide.QtGui.QTableWidget.currentItemChanged>` (current, previous)
*    def :meth:`itemActivated<PySide.QtGui.QTableWidget.itemActivated>` (item)
*    def :meth:`itemChanged<PySide.QtGui.QTableWidget.itemChanged>` (item)
*    def :meth:`itemClicked<PySide.QtGui.QTableWidget.itemClicked>` (item)
*    def :meth:`itemDoubleClicked<PySide.QtGui.QTableWidget.itemDoubleClicked>` (item)
*    def :meth:`itemEntered<PySide.QtGui.QTableWidget.itemEntered>` (item)
*    def :meth:`itemPressed<PySide.QtGui.QTableWidget.itemPressed>` (item)
*    def :meth:`itemSelectionChanged<PySide.QtGui.QTableWidget.itemSelectionChanged>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTableWidget` class provides an item-based table view with a default model.

    Table widgets provide standard table display facilities for applications. The items in a :class:`PySide.QtGui.QTableWidget` are provided by :class:`PySide.QtGui.QTableWidgetItem` .

    If you want a table that uses your own data model you should use :class:`PySide.QtGui.QTableView` rather than this class.

    Table widgets can be constructed with the required numbers of rows and columns:

    ::

            tableWidget = QTableWidget(12, 3, self)


    Alternatively, tables can be constructed without a given size and resized later:

    ::

            tableWidget = QTableWidget()
            tableWidget.setRowCount(10)
            tableWidget.setColumnCount(5)


    Items are created ouside the table (with no parent widget) and inserted into the table with :meth:`PySide.QtGui.QTableWidget.setItem` :

    ::

            newItem = QTableWidgetItem(tr("%s" % ((row+1)*(column+1))))
            tableWidget.setItem(row, column, newItem)


    If you want to enable sorting in your table widget, do so after you have populated it with items, otherwise sorting may interfere with the insertion order (see :meth:`PySide.QtGui.QTableWidget.setItem` for details).

    Tables can be given both horizontal and vertical headers. The simplest way to create the headers is to supply a list of strings to the :meth:`PySide.QtGui.QTableWidget.setHorizontalHeaderLabels` and :meth:`PySide.QtGui.QTableWidget.setVerticalHeaderLabels` functions. These will provide simple textual headers for the table's columns and rows. More sophisticated headers can be created from existing table items that are usually constructed outside the table. For example, we can construct a table item with an icon and aligned text, and use it as the header for a particular column:

    ::

            cubesHeaderItem = QTableWidgetItem(tr("Cubes"))
            cubesHeaderItem.setIcon(QIcon(QPixmap(":/Images/cubed.png")))
            cubesHeaderItem.setTextAlignment(Qt::AlignVCenter)


    The number of rows in the table can be found with :meth:`PySide.QtGui.QTableWidget.rowCount` , and the number of columns with :meth:`PySide.QtGui.QTableWidget.columnCount` . The table can be cleared with the :meth:`PySide.QtGui.QTableWidget.clear` function.

    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/windowsxp-tableview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/macintosh-tableview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-tableview.png|
    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+
    |A :ref:`Windows XP style<gallery-windowsxp.html>` table widget.                                              |A :ref:`Macintosh style<gallery-macintosh.html>` table widget.                                               |A :ref:`Plastique style<gallery-plastique.html>` table widget.                                               |
    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QTableWidgetItem`  :class:`PySide.QtGui.QTableView`  :ref:`Model/View Programming<model-view-programming.html>` 

.. class:: QTableWidget([parent=None])
           QTableWidget(rows, columns[, parent=None])

    :param rows: :class:`PySide.QtCore.int`
    :param columns: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtGui.QWidget`

    Creates a new table view with the given ``parent`` .


    Creates a new table view with the given ``rows`` and ``columns`` , and with the given ``parent`` .


.. method:: PySide.QtGui.QTableWidget.cellActivated(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableWidget.cellChanged(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableWidget.cellClicked(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableWidget.cellDoubleClicked(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableWidget.cellEntered(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableWidget.cellPressed(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableWidget.cellWidget(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget displayed in the cell in the given ``row`` and ``column`` .

    .. note::  The table takes ownership of the widget.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.setCellWidget` 


.. method:: PySide.QtGui.QTableWidget.clear()






    Removes all items in the view. This will also remove all selections. The table dimensions stay the same.



.. method:: PySide.QtGui.QTableWidget.clearContents()






    Removes all items not in the headers from the view. This will also remove all selections. The table dimensions stay the same.



.. method:: PySide.QtGui.QTableWidget.closePersistentEditor(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Closes the persistent editor for ``item`` .

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.openPersistentEditor` 


.. method:: PySide.QtGui.QTableWidget.column(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :rtype: :class:`PySide.QtCore.int`




    Returns the column for the ``item`` .



.. method:: PySide.QtGui.QTableWidget.columnCount()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of columns in the table.

    By default, for a table constructed without row and column counts, this property contains a value of 0.



.. method:: PySide.QtGui.QTableWidget.currentCellChanged(currentRow, currentColumn, previousRow, previousColumn)


    :param currentRow: :class:`PySide.QtCore.int`
    :param currentColumn: :class:`PySide.QtCore.int`
    :param previousRow: :class:`PySide.QtCore.int`
    :param previousColumn: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableWidget.currentColumn()


    :rtype: :class:`PySide.QtCore.int`




    Returns the column of the current item.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.currentRow`  :meth:`PySide.QtGui.QTableWidget.setCurrentCell` 


.. method:: PySide.QtGui.QTableWidget.currentItem()


    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns the current item.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.setCurrentItem` 


.. method:: PySide.QtGui.QTableWidget.currentItemChanged(current, previous)


    :param current: :class:`PySide.QtGui.QTableWidgetItem`
    :param previous: :class:`PySide.QtGui.QTableWidgetItem`






.. method:: PySide.QtGui.QTableWidget.currentRow()


    :rtype: :class:`PySide.QtCore.int`




    Returns the row of the current item.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.currentColumn`  :meth:`PySide.QtGui.QTableWidget.setCurrentCell` 


.. method:: PySide.QtGui.QTableWidget.dropMimeData(row, column, data, action)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param data: :class:`PySide.QtCore.QMimeData`
    :param action: :attr:`PySide.QtCore.Qt.DropAction`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QTableWidget.editItem(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Starts editing the ``item`` if it is editable.



.. method:: PySide.QtGui.QTableWidget.findItems(text, flags)


    :param text: unicode
    :param flags: :class:`PySide.QtCore.Qt.MatchFlags`
    :rtype: 







.. method:: PySide.QtGui.QTableWidget.horizontalHeaderItem(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns the horizontal header item for column, ``column`` , if one has been set; otherwise returns 0.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.setHorizontalHeaderItem` 


.. method:: PySide.QtGui.QTableWidget.indexFromItem(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the :class:`PySide.QtCore.QModelIndex` assocated with the given ``item`` .



.. method:: PySide.QtGui.QTableWidget.insertColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Inserts an empty column into the table at ``column`` .



.. method:: PySide.QtGui.QTableWidget.insertRow(row)


    :param row: :class:`PySide.QtCore.int`




    Inserts an empty row into the table at ``row`` .



.. method:: PySide.QtGui.QTableWidget.item(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns the item for the given ``row`` and ``column`` if one has been set; otherwise returns 0.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.setItem` 


.. method:: PySide.QtGui.QTableWidget.itemActivated(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`






.. method:: PySide.QtGui.QTableWidget.itemAt(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns the item at the position equivalent to :class:`PySide.QtCore.QPoint` (``ax`` , ``ay`` ) in the table widget's coordinate system, or returns 0 if the specified point is not covered by an item in the table widget.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.item` 


.. method:: PySide.QtGui.QTableWidget.itemAt(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns a pointer to the item at the given ``point`` , or returns 0 if ``point`` is not covered by an item in the table widget.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.item` 


.. method:: PySide.QtGui.QTableWidget.itemChanged(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`






.. method:: PySide.QtGui.QTableWidget.itemClicked(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`






.. method:: PySide.QtGui.QTableWidget.itemDoubleClicked(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`






.. method:: PySide.QtGui.QTableWidget.itemEntered(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`






.. method:: PySide.QtGui.QTableWidget.itemFromIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns a pointer to the :class:`PySide.QtGui.QTableWidgetItem` assocated with the given ``index`` .



.. method:: PySide.QtGui.QTableWidget.itemPressed(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`






.. method:: PySide.QtGui.QTableWidget.itemPrototype()


    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns the item prototype used by the table.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.setItemPrototype` 


.. method:: PySide.QtGui.QTableWidget.itemSelectionChanged()








.. method:: PySide.QtGui.QTableWidget.items(data)


    :param data: :class:`PySide.QtCore.QMimeData`
    :rtype: 




    Returns a list of pointers to the items contained in the ``data`` object. If the object was not created by a :class:`PySide.QtGui.QTreeWidget` in the same process, the list is empty.



.. method:: PySide.QtGui.QTableWidget.mimeData(items)


    :param items: 
    :rtype: :class:`PySide.QtCore.QMimeData`







.. method:: PySide.QtGui.QTableWidget.mimeTypes()


    :rtype: list of strings




    Returns a list of MIME types that can be used to describe a list of tablewidget items.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.mimeData` 


.. method:: PySide.QtGui.QTableWidget.openPersistentEditor(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Opens an editor for the give ``item`` . The editor remains open after editing.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.closePersistentEditor` 


.. method:: PySide.QtGui.QTableWidget.removeCellWidget(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`




    Removes the widget set on the cell indicated by ``row`` and ``column`` .



.. method:: PySide.QtGui.QTableWidget.removeColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Removes the column ``column`` and all its items from the table.



.. method:: PySide.QtGui.QTableWidget.removeRow(row)


    :param row: :class:`PySide.QtCore.int`




    Removes the row ``row`` and all its items from the table.



.. method:: PySide.QtGui.QTableWidget.row(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :rtype: :class:`PySide.QtCore.int`




    Returns the row for the ``item`` .



.. method:: PySide.QtGui.QTableWidget.rowCount()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of rows in the table.

    By default, for a table constructed without row and column counts, this property contains a value of 0.



.. method:: PySide.QtGui.QTableWidget.scrollToItem(item[, hint=EnsureVisible])


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :param hint: :attr:`PySide.QtGui.QAbstractItemView.ScrollHint`







.. method:: PySide.QtGui.QTableWidget.selectedItems()


    :rtype: 




    Returns a list of all selected items.

    This function returns a list of pointers to the contents of the selected cells. Use the :meth:`PySide.QtGui.QTableView.selectedIndexes` function to retrieve the complete selection *including* empty cells.

    .. seealso::  :meth:`PySide.QtGui.QTableView.selectedIndexes` 


.. method:: PySide.QtGui.QTableWidget.selectedRanges()


    :rtype: 




    Returns a list of all selected ranges.

    .. seealso::  :class:`PySide.QtGui.QTableWidgetSelectionRange` 


.. method:: PySide.QtGui.QTableWidget.setCellWidget(row, column, widget)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param widget: :class:`PySide.QtGui.QWidget`




    Sets the given ``widget`` to be displayed in the cell in the given ``row`` and ``column`` , passing the ownership of the widget to the table.

    If cell widget A is replaced with cell widget B, cell widget A will be deleted. For example, in the code snippet below, the :class:`PySide.QtGui.QLineEdit` object will be deleted.

    ::

        setCellWidget(index, QLineEdit())
        ...
        setCellWidget(index, QTextEdit())


    .. seealso::  :meth:`PySide.QtGui.QTableWidget.cellWidget` 


.. method:: PySide.QtGui.QTableWidget.setColumnCount(columns)


    :param columns: :class:`PySide.QtCore.int`




    This property holds the number of columns in the table.

    By default, for a table constructed without row and column counts, this property contains a value of 0.



.. method:: PySide.QtGui.QTableWidget.setCurrentCell(row, column, command)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param command: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`







.. method:: PySide.QtGui.QTableWidget.setCurrentCell(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`




    Sets the current cell to be the cell at position (``row`` , ``column`` ).

    Depending on the current :attr:`selection mode<QAbstractItemView.SelectionMode>` , the cell may also be selected.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.setCurrentItem`  :meth:`PySide.QtGui.QTableWidget.currentRow`  :meth:`PySide.QtGui.QTableWidget.currentColumn` 


.. method:: PySide.QtGui.QTableWidget.setCurrentItem(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Sets the current item to ``item`` .

    Unless the selection mode is :attr:`NoSelection<QAbstractItemView.SelectionMode>` , the item is also be selected.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.currentItem`  :meth:`PySide.QtGui.QTableWidget.setCurrentCell` 


.. method:: PySide.QtGui.QTableWidget.setCurrentItem(item, command)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :param command: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`







.. method:: PySide.QtGui.QTableWidget.setHorizontalHeaderItem(column, item)


    :param column: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Sets the horizontal header item for column ``column`` to ``item`` .

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.horizontalHeaderItem` 


.. method:: PySide.QtGui.QTableWidget.setHorizontalHeaderLabels(labels)


    :param labels: list of strings




    Sets the horizontal header labels using ``labels`` .



.. method:: PySide.QtGui.QTableWidget.setItem(row, column, item)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Sets the item for the given ``row`` and ``column`` to ``item`` .

    The table takes ownership of the item.

    Note that if sorting is enabled (see :meth:`PySide.QtGui.QTableView.sortingEnabled` ) and ``column`` is the current sort column, the ``row`` will be moved to the sorted position determined by ``item`` .

    If you want to set several items of a particular row (say, by calling :meth:`PySide.QtGui.QTableWidget.setItem` in a loop), you may want to turn off sorting before doing so, and turn it back on afterwards; this will allow you to use the same ``row`` argument for all items in the same row (i.e. :meth:`PySide.QtGui.QTableWidget.setItem` will not move the row).

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.item`  :meth:`PySide.QtGui.QTableWidget.takeItem` 


.. method:: PySide.QtGui.QTableWidget.setItemPrototype(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Sets the item prototype for the table to the specified ``item`` .

    The table widget will use the item prototype clone function when it needs to create a new table item. For example when the user is editing in an empty cell. This is useful when you have a :class:`PySide.QtGui.QTableWidgetItem` subclass and want to make sure that :class:`PySide.QtGui.QTableWidget` creates instances of your subclass.

    The table takes ownership of the prototype.

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.itemPrototype` 


.. method:: PySide.QtGui.QTableWidget.setRangeSelected(range, select)


    :param range: :class:`PySide.QtGui.QTableWidgetSelectionRange`
    :param select: :class:`PySide.QtCore.bool`




    Selects or deselects the ``range`` depending on ``select`` .



.. method:: PySide.QtGui.QTableWidget.setRowCount(rows)


    :param rows: :class:`PySide.QtCore.int`




    This property holds the number of rows in the table.

    By default, for a table constructed without row and column counts, this property contains a value of 0.



.. method:: PySide.QtGui.QTableWidget.setVerticalHeaderItem(row, item)


    :param row: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QTableWidgetItem`




    Sets the vertical header item for row ``row`` to ``item`` .

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.verticalHeaderItem` 


.. method:: PySide.QtGui.QTableWidget.setVerticalHeaderLabels(labels)


    :param labels: list of strings




    Sets the vertical header labels using ``labels`` .



.. method:: PySide.QtGui.QTableWidget.sortItems(column[, order=Qt.AscendingOrder])


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QTableWidget.supportedDropActions()


    :rtype: :class:`PySide.QtCore.Qt.DropActions`




    Returns the drop actions supported by this view.

    .. seealso::  :class:`Qt.DropActions` 


.. method:: PySide.QtGui.QTableWidget.takeHorizontalHeaderItem(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Removes the horizontal header item at ``column`` from the header without deleting it.



.. method:: PySide.QtGui.QTableWidget.takeItem(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Removes the item at ``row`` and ``column`` from the table without deleting it.



.. method:: PySide.QtGui.QTableWidget.takeVerticalHeaderItem(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Removes the vertical header item at ``row`` from the header without deleting it.



.. method:: PySide.QtGui.QTableWidget.verticalHeaderItem(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTableWidgetItem`




    Returns the vertical header item for row ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QTableWidget.setVerticalHeaderItem` 


.. method:: PySide.QtGui.QTableWidget.visualColumn(logicalColumn)


    :param logicalColumn: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the visual column of the given ``logicalColumn`` .



.. method:: PySide.QtGui.QTableWidget.visualItemRect(item)


    :param item: :class:`PySide.QtGui.QTableWidgetItem`
    :rtype: :class:`PySide.QtCore.QRect`




    Returns the rectangle on the viewport occupied by the item at ``item`` .



.. method:: PySide.QtGui.QTableWidget.visualRow(logicalRow)


    :param logicalRow: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the visual row of the given ``logicalRow`` .




