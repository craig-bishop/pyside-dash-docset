.. module:: PySide.QtGui
.. _QTableView:

QTableView
**********

.. inheritance-diagram:: QTableView
    :parts: 2

**Inherited by:** :ref:`QTableWidget`

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`clearSpans<PySide.QtGui.QTableView.clearSpans>` ()
*    def :meth:`columnAt<PySide.QtGui.QTableView.columnAt>` (x)
*    def :meth:`columnSpan<PySide.QtGui.QTableView.columnSpan>` (row, column)
*    def :meth:`columnViewportPosition<PySide.QtGui.QTableView.columnViewportPosition>` (column)
*    def :meth:`columnWidth<PySide.QtGui.QTableView.columnWidth>` (column)
*    def :meth:`gridStyle<PySide.QtGui.QTableView.gridStyle>` ()
*    def :meth:`horizontalHeader<PySide.QtGui.QTableView.horizontalHeader>` ()
*    def :meth:`isColumnHidden<PySide.QtGui.QTableView.isColumnHidden>` (column)
*    def :meth:`isCornerButtonEnabled<PySide.QtGui.QTableView.isCornerButtonEnabled>` ()
*    def :meth:`isRowHidden<PySide.QtGui.QTableView.isRowHidden>` (row)
*    def :meth:`isSortingEnabled<PySide.QtGui.QTableView.isSortingEnabled>` ()
*    def :meth:`rowAt<PySide.QtGui.QTableView.rowAt>` (y)
*    def :meth:`rowHeight<PySide.QtGui.QTableView.rowHeight>` (row)
*    def :meth:`rowSpan<PySide.QtGui.QTableView.rowSpan>` (row, column)
*    def :meth:`rowViewportPosition<PySide.QtGui.QTableView.rowViewportPosition>` (row)
*    def :meth:`setColumnHidden<PySide.QtGui.QTableView.setColumnHidden>` (column, hide)
*    def :meth:`setColumnWidth<PySide.QtGui.QTableView.setColumnWidth>` (column, width)
*    def :meth:`setCornerButtonEnabled<PySide.QtGui.QTableView.setCornerButtonEnabled>` (enable)
*    def :meth:`setGridStyle<PySide.QtGui.QTableView.setGridStyle>` (style)
*    def :meth:`setHorizontalHeader<PySide.QtGui.QTableView.setHorizontalHeader>` (header)
*    def :meth:`setRowHeight<PySide.QtGui.QTableView.setRowHeight>` (row, height)
*    def :meth:`setRowHidden<PySide.QtGui.QTableView.setRowHidden>` (row, hide)
*    def :meth:`setSortingEnabled<PySide.QtGui.QTableView.setSortingEnabled>` (enable)
*    def :meth:`setSpan<PySide.QtGui.QTableView.setSpan>` (row, column, rowSpan, columnSpan)
*    def :meth:`setVerticalHeader<PySide.QtGui.QTableView.setVerticalHeader>` (header)
*    def :meth:`setWordWrap<PySide.QtGui.QTableView.setWordWrap>` (on)
*    def :meth:`showGrid<PySide.QtGui.QTableView.showGrid>` ()
*    def :meth:`sortByColumn<PySide.QtGui.QTableView.sortByColumn>` (column, order)
*    def :meth:`verticalHeader<PySide.QtGui.QTableView.verticalHeader>` ()
*    def :meth:`visualIndex<PySide.QtGui.QTableView.visualIndex>` (index)
*    def :meth:`wordWrap<PySide.QtGui.QTableView.wordWrap>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`columnCountChanged<PySide.QtGui.QTableView.columnCountChanged>` (oldCount, newCount)
*    def :meth:`columnMoved<PySide.QtGui.QTableView.columnMoved>` (column, oldIndex, newIndex)
*    def :meth:`columnResized<PySide.QtGui.QTableView.columnResized>` (column, oldWidth, newWidth)
*    def :meth:`hideColumn<PySide.QtGui.QTableView.hideColumn>` (column)
*    def :meth:`hideRow<PySide.QtGui.QTableView.hideRow>` (row)
*    def :meth:`resizeColumnToContents<PySide.QtGui.QTableView.resizeColumnToContents>` (column)
*    def :meth:`resizeColumnsToContents<PySide.QtGui.QTableView.resizeColumnsToContents>` ()
*    def :meth:`resizeRowToContents<PySide.QtGui.QTableView.resizeRowToContents>` (row)
*    def :meth:`resizeRowsToContents<PySide.QtGui.QTableView.resizeRowsToContents>` ()
*    def :meth:`rowCountChanged<PySide.QtGui.QTableView.rowCountChanged>` (oldCount, newCount)
*    def :meth:`rowMoved<PySide.QtGui.QTableView.rowMoved>` (row, oldIndex, newIndex)
*    def :meth:`rowResized<PySide.QtGui.QTableView.rowResized>` (row, oldHeight, newHeight)
*    def :meth:`selectColumn<PySide.QtGui.QTableView.selectColumn>` (column)
*    def :meth:`selectRow<PySide.QtGui.QTableView.selectRow>` (row)
*    def :meth:`setShowGrid<PySide.QtGui.QTableView.setShowGrid>` (show)
*    def :meth:`showColumn<PySide.QtGui.QTableView.showColumn>` (column)
*    def :meth:`showRow<PySide.QtGui.QTableView.showRow>` (row)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTableView` class provides a default model/view implementation of a table view.

    A :class:`PySide.QtGui.QTableView` implements a table view that displays items from a model. This class is used to provide standard tables that were previously provided by the :ref:`QTable<porting4.html>` class, but using the more flexible approach provided by Qt's model/view architecture.

    The :class:`PySide.QtGui.QTableView` class is one of the :ref:`Model/View Classes<model-view>` and is part of Qt's :ref:`model/view framework<model-view-programming.html>` .

    :class:`PySide.QtGui.QTableView` implements the interfaces defined by the :class:`PySide.QtGui.QAbstractItemView` class to allow it to display data provided by models derived from the :class:`PySide.QtCore.QAbstractItemModel` class.

    .. _PySide.QtGui.QTableView_navigation:



Navigation
^^^^^^^^^^

    You can navigate the cells in the table by clicking on a cell with the mouse, or by using the arrow keys. Because :class:`PySide.QtGui.QTableView` enables :meth:`PySide.QtGui.QAbstractItemView.tabKeyNavigation` by default, you can also hit Tab and Backtab to move from cell to cell.

    .. _PySide.QtGui.QTableView_visual-appearance:



Visual Appearance
^^^^^^^^^^^^^^^^^

    The table has a vertical header that can be obtained using the :meth:`PySide.QtGui.QTableView.verticalHeader` function, and a horizontal header that is available through the :meth:`PySide.QtGui.QTableView.horizontalHeader` function. The height of each row in the table can be found by using :meth:`PySide.QtGui.QTableView.rowHeight` ; similarly, the width of columns can be found using :meth:`PySide.QtGui.QTableView.columnWidth` . Since both of these are plain widgets, you can hide either of them using their :meth:`PySide.QtGui.QWidget.hide` functions.

    Rows and columns can be hidden and shown with :meth:`PySide.QtGui.QTableView.hideRow` , :meth:`PySide.QtGui.QTableView.hideColumn` , :meth:`PySide.QtGui.QTableView.showRow` , and :meth:`PySide.QtGui.QTableView.showColumn` . They can be selected with :meth:`PySide.QtGui.QTableView.selectRow` and :meth:`PySide.QtGui.QTableView.selectColumn` . The table will show a grid depending on the :meth:`PySide.QtGui.QTableView.showGrid` property.

    The items shown in a table view, like those in the other item views, are rendered and edited using standard :class:`delegates<PySide.QtGui.QItemDelegate>` . However, for some tasks it is sometimes useful to be able to insert widgets in a table instead. Widgets are set for particular indexes with the :meth:`PySide.QtGui.QAbstractItemView.setIndexWidget` function, and later retrieved with :meth:`PySide.QtGui.QAbstractItemView.indexWidget` .

    +------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qtableview-resized.png|By default, the cells in a table do not expand to fill the available space.                                                                                                                                                                                                                                      |
    |                                                                                                            |                                                                                                                                                                                                                                                                                                                 |
    |                                                                                                            |    You can make the cells fill the available space by stretching the last header section. Access the relevant header using :meth:`PySide.QtGui.QTableView.horizontalHeader` or :meth:`PySide.QtGui.QTableView.verticalHeader` and set the header's :meth:`PySide.QtGui.QHeaderView.stretchLastSection` property.|
    |                                                                                                            |                                                                                                                                                                                                                                                                                                                 |
    |                                                                                                            |    To distribute the available space according to the space requirement of each column or row, call the view's :meth:`PySide.QtGui.QTableView.resizeColumnsToContents` or :meth:`PySide.QtGui.QTableView.resizeRowsToContents` functions.                                                                       |
    +------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    .. _PySide.QtGui.QTableView_coordinate-systems:



Coordinate Systems
^^^^^^^^^^^^^^^^^^

    For some specialized forms of tables it is useful to be able to convert between row and column indexes and widget coordinates. The :meth:`PySide.QtGui.QTableView.rowAt` function provides the y-coordinate within the view of the specified row; the row index can be used to obtain a corresponding y-coordinate with :meth:`PySide.QtGui.QTableView.rowViewportPosition` . The :meth:`PySide.QtGui.QTableView.columnAt` and :meth:`PySide.QtGui.QTableView.columnViewportPosition` functions provide the equivalent conversion operations between x-coordinates and column indexes.

    .. _PySide.QtGui.QTableView_styles:



Styles
^^^^^^

    :class:`PySide.QtGui.QTableView` is styled appropriately for each platform. The following images show how it looks on three different platforms. Go to the :ref:`Qt Widget Gallery<gallery>` to see its appearance in other styles.

    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/windowsxp-tableview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/macintosh-tableview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-tableview.png|
    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+
    |A :ref:`Windows XP style<gallery-windowsxp.html>` table view.                                                |A :ref:`Macintosh style<gallery-macintosh.html>` table view.                                                 |A :ref:`Plastique style<gallery-plastique.html>` table view.                                                 |
    +-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QTableWidget`  :ref:`View Classes<model-view-programming.html>`  :class:`PySide.QtCore.QAbstractItemModel`  :class:`PySide.QtGui.QAbstractItemView`  :ref:`Chart Example<itemviews/chart>`  :ref:`Pixelator Example<itemviews/pixelator>`  :ref:`Table Model Example<sql/tablemodel>` 

.. class:: QTableView([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Constructs a table view with a ``parent`` to represent the data.

    .. seealso::  :class:`PySide.QtCore.QAbstractItemModel` 

.. method:: PySide.QtGui.QTableView.clearSpans()






    Removes all row and column spans in the table view.

    .. seealso::  :meth:`PySide.QtGui.QTableView.setSpan` 


.. method:: PySide.QtGui.QTableView.columnAt(x)


    :param x: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the column in which the given x-coordinate, ``x`` , in contents coordinates is located.

    .. note::  This function returns -1 if the given coordinate is not valid (has no column).

    .. seealso::  :meth:`PySide.QtGui.QTableView.rowAt` 


.. method:: PySide.QtGui.QTableView.columnCountChanged(oldCount, newCount)


    :param oldCount: :class:`PySide.QtCore.int`
    :param newCount: :class:`PySide.QtCore.int`




    This slot is called whenever columns are added or deleted. The previous number of columns is specified by ``oldCount`` , and the new number of columns is specified by ``newCount`` .



.. method:: PySide.QtGui.QTableView.columnMoved(column, oldIndex, newIndex)


    :param column: :class:`PySide.QtCore.int`
    :param oldIndex: :class:`PySide.QtCore.int`
    :param newIndex: :class:`PySide.QtCore.int`




    This slot is called to change the index of the given ``column`` in the table view. The old index is specified by ``oldIndex`` , and the new index by ``newIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.rowMoved` 


.. method:: PySide.QtGui.QTableView.columnResized(column, oldWidth, newWidth)


    :param column: :class:`PySide.QtCore.int`
    :param oldWidth: :class:`PySide.QtCore.int`
    :param newWidth: :class:`PySide.QtCore.int`




    This slot is called to change the width of the given ``column`` . The old width is specified by ``oldWidth`` , and the new width by ``newWidth`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.rowResized` 


.. method:: PySide.QtGui.QTableView.columnSpan(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the column span of the table element at (``row`` , ``column`` ). The default is 1.

    .. seealso::  :meth:`PySide.QtGui.QTableView.setSpan`  :meth:`PySide.QtGui.QTableView.rowSpan` 


.. method:: PySide.QtGui.QTableView.columnViewportPosition(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the x-coordinate in contents coordinates of the given ``column`` .



.. method:: PySide.QtGui.QTableView.columnWidth(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the width of the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.setColumnWidth`  :meth:`PySide.QtGui.QTableView.resizeColumnToContents`  :meth:`PySide.QtGui.QTableView.rowHeight` 


.. method:: PySide.QtGui.QTableView.gridStyle()


    :rtype: :attr:`PySide.QtCore.Qt.PenStyle`




    This property holds the pen style used to draw the grid..

    This property holds the style used when drawing the grid (see :meth:`PySide.QtGui.QTableView.showGrid` ).



.. method:: PySide.QtGui.QTableView.hideColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Hide the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.showColumn`  :meth:`PySide.QtGui.QTableView.hideRow` 


.. method:: PySide.QtGui.QTableView.hideRow(row)


    :param row: :class:`PySide.QtCore.int`




    Hide the given ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.showRow`  :meth:`PySide.QtGui.QTableView.hideColumn` 


.. method:: PySide.QtGui.QTableView.horizontalHeader()


    :rtype: :class:`PySide.QtGui.QHeaderView`




    Returns the table view's horizontal header.

    .. seealso::  :meth:`PySide.QtGui.QTableView.setHorizontalHeader`  :meth:`PySide.QtGui.QTableView.verticalHeader`  :meth:`QAbstractItemModel.headerData()<PySide.QtCore.QAbstractItemModel.headerData>` 


.. method:: PySide.QtGui.QTableView.isColumnHidden(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``column`` is hidden; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTableView.isRowHidden` 


.. method:: PySide.QtGui.QTableView.isCornerButtonEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the button in the top-left corner is enabled.

    If this property is true then button in the top-left corner of the table view is enabled. Clicking on this button will select all the cells in the table view.

    This property is true by default.



.. method:: PySide.QtGui.QTableView.isRowHidden(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``row`` is hidden; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTableView.isColumnHidden` 


.. method:: PySide.QtGui.QTableView.isSortingEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether sorting is enabled.

    If this property is true, sorting is enabled for the table. If this property is false, sorting is not enabled. The default value is false.

    .. note::  . Setting the property to true with :meth:`PySide.QtGui.QTableView.setSortingEnabled` immediately triggers a call to :meth:`PySide.QtGui.QTableView.sortByColumn` with the current sort section and order.

    .. seealso::  :meth:`PySide.QtGui.QTableView.sortByColumn` 


.. method:: PySide.QtGui.QTableView.resizeColumnToContents(column)


    :param column: :class:`PySide.QtCore.int`




    Resizes the given ``column`` based on the size hints of the delegate used to render each item in the column.

    .. note::  Only visible columns will be resized. Reimplement :meth:`PySide.QtGui.QTableView.sizeHintForColumn` to resize hidden columns as well.



.. method:: PySide.QtGui.QTableView.resizeColumnsToContents()






    Resizes all columns based on the size hints of the delegate used to render each item in the columns.



.. method:: PySide.QtGui.QTableView.resizeRowToContents(row)


    :param row: :class:`PySide.QtCore.int`




    Resizes the given ``row`` based on the size hints of the delegate used to render each item in the row.



.. method:: PySide.QtGui.QTableView.resizeRowsToContents()






    Resizes all rows based on the size hints of the delegate used to render each item in the rows.



.. method:: PySide.QtGui.QTableView.rowAt(y)


    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the row in which the given y-coordinate, ``y`` , in contents coordinates is located.

    .. note::  This function returns -1 if the given coordinate is not valid (has no row).

    .. seealso::  :meth:`PySide.QtGui.QTableView.columnAt` 


.. method:: PySide.QtGui.QTableView.rowCountChanged(oldCount, newCount)


    :param oldCount: :class:`PySide.QtCore.int`
    :param newCount: :class:`PySide.QtCore.int`




    This slot is called whenever rows are added or deleted. The previous number of rows is specified by ``oldCount`` , and the new number of rows is specified by ``newCount`` .



.. method:: PySide.QtGui.QTableView.rowHeight(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the height of the given ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.setRowHeight`  :meth:`PySide.QtGui.QTableView.resizeRowToContents`  :meth:`PySide.QtGui.QTableView.columnWidth` 


.. method:: PySide.QtGui.QTableView.rowMoved(row, oldIndex, newIndex)


    :param row: :class:`PySide.QtCore.int`
    :param oldIndex: :class:`PySide.QtCore.int`
    :param newIndex: :class:`PySide.QtCore.int`




    This slot is called to change the index of the given ``row`` in the table view. The old index is specified by ``oldIndex`` , and the new index by ``newIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.columnMoved` 


.. method:: PySide.QtGui.QTableView.rowResized(row, oldHeight, newHeight)


    :param row: :class:`PySide.QtCore.int`
    :param oldHeight: :class:`PySide.QtCore.int`
    :param newHeight: :class:`PySide.QtCore.int`




    This slot is called to change the height of the given ``row`` . The old height is specified by ``oldHeight`` , and the new height by ``newHeight`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.columnResized` 


.. method:: PySide.QtGui.QTableView.rowSpan(row, column)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the row span of the table element at (``row`` , ``column`` ). The default is 1.

    .. seealso::  :meth:`PySide.QtGui.QTableView.setSpan`  :meth:`PySide.QtGui.QTableView.columnSpan` 


.. method:: PySide.QtGui.QTableView.rowViewportPosition(row)


    :param row: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the y-coordinate in contents coordinates of the given ``row`` .



.. method:: PySide.QtGui.QTableView.selectColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Selects the given ``column`` in the table view if the current :attr:`QAbstractItemView.SelectionMode` and :attr:`QAbstractItemView.SelectionBehavior` allows columns to be selected.

    .. seealso::  :meth:`PySide.QtGui.QTableView.selectRow` 


.. method:: PySide.QtGui.QTableView.selectRow(row)


    :param row: :class:`PySide.QtCore.int`




    Selects the given ``row`` in the table view if the current :attr:`QAbstractItemView.SelectionMode` and :attr:`QAbstractItemView.SelectionBehavior` allows rows to be selected.

    .. seealso::  :meth:`PySide.QtGui.QTableView.selectColumn` 


.. method:: PySide.QtGui.QTableView.setColumnHidden(column, hide)


    :param column: :class:`PySide.QtCore.int`
    :param hide: :class:`PySide.QtCore.bool`




    If ``hide`` is true the given ``column`` will be hidden; otherwise it will be shown.

    .. seealso::  :meth:`PySide.QtGui.QTableView.isColumnHidden`  :meth:`PySide.QtGui.QTableView.setRowHidden` 


.. method:: PySide.QtGui.QTableView.setColumnWidth(column, width)


    :param column: :class:`PySide.QtCore.int`
    :param width: :class:`PySide.QtCore.int`




    Sets the width of the given ``column`` to be ``width`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.columnWidth` 


.. method:: PySide.QtGui.QTableView.setCornerButtonEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether the button in the top-left corner is enabled.

    If this property is true then button in the top-left corner of the table view is enabled. Clicking on this button will select all the cells in the table view.

    This property is true by default.



.. method:: PySide.QtGui.QTableView.setGridStyle(style)


    :param style: :attr:`PySide.QtCore.Qt.PenStyle`




    This property holds the pen style used to draw the grid..

    This property holds the style used when drawing the grid (see :meth:`PySide.QtGui.QTableView.showGrid` ).



.. method:: PySide.QtGui.QTableView.setHorizontalHeader(header)


    :param header: :class:`PySide.QtGui.QHeaderView`




    Sets the widget to use for the horizontal header to ``header`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.horizontalHeader`  :meth:`PySide.QtGui.QTableView.setVerticalHeader` 


.. method:: PySide.QtGui.QTableView.setRowHeight(row, height)


    :param row: :class:`PySide.QtCore.int`
    :param height: :class:`PySide.QtCore.int`




    Sets the height of the given ``row`` to be ``height`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.rowHeight` 


.. method:: PySide.QtGui.QTableView.setRowHidden(row, hide)


    :param row: :class:`PySide.QtCore.int`
    :param hide: :class:`PySide.QtCore.bool`




    If ``hide`` is true ``row`` will be hidden, otherwise it will be shown.

    .. seealso::  :meth:`PySide.QtGui.QTableView.isRowHidden`  :meth:`PySide.QtGui.QTableView.setColumnHidden` 


.. method:: PySide.QtGui.QTableView.setShowGrid(show)


    :param show: :class:`PySide.QtCore.bool`




    This property holds whether the grid is shown.

    If this property is true a grid is drawn for the table; if the property is false, no grid is drawn. The default value is true.



.. method:: PySide.QtGui.QTableView.setSortingEnabled(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether sorting is enabled.

    If this property is true, sorting is enabled for the table. If this property is false, sorting is not enabled. The default value is false.

    .. note::  . Setting the property to true with :meth:`PySide.QtGui.QTableView.setSortingEnabled` immediately triggers a call to :meth:`PySide.QtGui.QTableView.sortByColumn` with the current sort section and order.

    .. seealso::  :meth:`PySide.QtGui.QTableView.sortByColumn` 


.. method:: PySide.QtGui.QTableView.setSpan(row, column, rowSpan, columnSpan)


    :param row: :class:`PySide.QtCore.int`
    :param column: :class:`PySide.QtCore.int`
    :param rowSpan: :class:`PySide.QtCore.int`
    :param columnSpan: :class:`PySide.QtCore.int`




    Sets the span of the table element at (``row`` , ``column`` ) to the number of rows and columns specified by (``rowSpanCount`` , ``columnSpanCount`` ).

    .. seealso::  :meth:`PySide.QtGui.QTableView.rowSpan`  :meth:`PySide.QtGui.QTableView.columnSpan` 


.. method:: PySide.QtGui.QTableView.setVerticalHeader(header)


    :param header: :class:`PySide.QtGui.QHeaderView`




    Sets the widget to use for the vertical header to ``header`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.verticalHeader`  :meth:`PySide.QtGui.QTableView.setHorizontalHeader` 


.. method:: PySide.QtGui.QTableView.setWordWrap(on)


    :param on: :class:`PySide.QtCore.bool`




    This property holds the item text word-wrapping policy.

    If this property is true then the item text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all. This property is true by default.

    Note that even of wrapping is enabled, the cell will not be expanded to fit all text. Ellipsis will be inserted according to the current :meth:`PySide.QtGui.QAbstractItemView.textElideMode` .



.. method:: PySide.QtGui.QTableView.showColumn(column)


    :param column: :class:`PySide.QtCore.int`




    Show the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.hideColumn`  :meth:`PySide.QtGui.QTableView.showRow` 


.. method:: PySide.QtGui.QTableView.showGrid()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the grid is shown.

    If this property is true a grid is drawn for the table; if the property is false, no grid is drawn. The default value is true.



.. method:: PySide.QtGui.QTableView.showRow(row)


    :param row: :class:`PySide.QtCore.int`




    Show the given ``row`` .

    .. seealso::  :meth:`PySide.QtGui.QTableView.hideRow`  :meth:`PySide.QtGui.QTableView.showColumn` 


.. method:: PySide.QtGui.QTableView.sortByColumn(column, order)


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QTableView.verticalHeader()


    :rtype: :class:`PySide.QtGui.QHeaderView`




    Returns the table view's vertical header.

    .. seealso::  :meth:`PySide.QtGui.QTableView.setVerticalHeader`  :meth:`PySide.QtGui.QTableView.horizontalHeader`  :meth:`QAbstractItemModel.headerData()<PySide.QtCore.QAbstractItemModel.headerData>` 


.. method:: PySide.QtGui.QTableView.visualIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTableView.wordWrap()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds the item text word-wrapping policy.

    If this property is true then the item text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all. This property is true by default.

    Note that even of wrapping is enabled, the cell will not be expanded to fit all text. Ellipsis will be inserted according to the current :meth:`PySide.QtGui.QAbstractItemView.textElideMode` .




