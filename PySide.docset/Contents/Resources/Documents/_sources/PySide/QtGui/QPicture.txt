.. module:: PySide.QtGui
.. _QPicture:

QPicture
********

.. inheritance-diagram:: QPicture
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`boundingRect<PySide.QtGui.QPicture.boundingRect>` ()
*    def :meth:`data<PySide.QtGui.QPicture.data>` ()
*    def :meth:`detach_helper<PySide.QtGui.QPicture.detach_helper>` ()
*    def :meth:`exec<PySide.QtGui.QPicture.exec>` (p, ds, i)
*    def :meth:`isNull<PySide.QtGui.QPicture.isNull>` ()
*    def :meth:`load<PySide.QtGui.QPicture.load>` (dev[, format=0])
*    def :meth:`load<PySide.QtGui.QPicture.load>` (fileName[, format=0])
*    def :meth:`play<PySide.QtGui.QPicture.play>` (p)
*    def :meth:`save<PySide.QtGui.QPicture.save>` (dev[, format=0])
*    def :meth:`save<PySide.QtGui.QPicture.save>` (fileName[, format=0])
*    def :meth:`setBoundingRect<PySide.QtGui.QPicture.setBoundingRect>` (r)
*    def :meth:`size<PySide.QtGui.QPicture.size>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`setData<PySide.QtGui.QPicture.setData>` (data)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QPicture` class is a paint device that records and replays :class:`PySide.QtGui.QPainter` commands.

    A picture serializes painter commands to an IO device in a platform-independent format. They are sometimes referred to as meta-files.

    Qt pictures use a proprietary binary format. Unlike native picture (meta-file) formats on many window systems, Qt pictures have no limitations regarding their contents. Everything that can be painted on a widget or pixmap (e.g., fonts, pixmaps, regions, transformed graphics, etc.) can also be stored in a picture.

    :class:`PySide.QtGui.QPicture` is resolution independent, i.e. a :class:`PySide.QtGui.QPicture` can be displayed on different devices (for example svg, pdf, ps, printer and screen) looking the same. This is, for instance, needed for WYSIWYG print preview. :class:`PySide.QtGui.QPicture` runs in the default system dpi, and scales the painter to match differences in resolution depending on the window system.

    Example of how to record a picture:

    ::

                picture = QPicture()
                painter = QPainter()
                painter.begin(picture)            # paint in picture
                painter.drawEllipse(10,20, 80,70) # draw an ellipse
                painter.end()                     # painting done
                picture.save("drawing.pic")       # save picture


    Note that the list of painter commands is reset on each call to the :meth:`QPainter.begin()<PySide.QtGui.QPainter.begin>` function.

    Example of how to replay a picture:

    ::

                picture = QPicture()
                picture.load("drawing.pic")           # load picture
                painter = QPainter()
                painter.begin(myImage)                # paint in myImage
                painter.drawPicture(0, 0, picture)    # draw the picture at (0,0)
                painter.end()                         # painting done


    Pictures can also be drawn using :meth:`PySide.QtGui.QPicture.play` . Some basic data about a picture is available, for example, :meth:`PySide.QtGui.QPicture.size` , :meth:`PySide.QtGui.QPicture.isNull` and :meth:`PySide.QtGui.QPicture.boundingRect` .

    .. seealso::  :class:`PySide.QtGui.QMovie` 

.. class:: QPicture(arg__1)
           QPicture([formatVersion=-1])

    :param formatVersion: :class:`PySide.QtCore.int`
    :param arg__1: :class:`PySide.QtGui.QPicture`

    Constructs a copy of ``pic`` .

    This constructor is fast thanks to :ref:`implicit sharing<implicit-sharing.html>` .


    Constructs an empty picture.

    The ``formatVersion`` parameter may be used to *create* a :class:`PySide.QtGui.QPicture` that can be read by applications that are compiled with earlier versions of Qt.

    Note that the default formatVersion is -1 which signifies the current release, i.e. for Qt 4.0 a formatVersion of 7 is the same as the default formatVersion of -1.

    Reading pictures generated by earlier versions of Qt is not supported in Qt 4.0.


.. method:: PySide.QtGui.QPicture.boundingRect()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns the picture's bounding rectangle or an invalid rectangle if the picture contains no data.

    .. seealso::  :meth:`PySide.QtGui.QPicture.setBoundingRect` 


.. method:: PySide.QtGui.QPicture.data()


    :rtype: PyObject




    Returns a pointer to the picture data. The pointer is only valid until the next non-const function is called on this picture. The returned pointer is 0 if the picture contains no data.

    .. seealso::  :meth:`PySide.QtGui.QPicture.setData`  :meth:`PySide.QtGui.QPicture.size`  :meth:`PySide.QtGui.QPicture.isNull` 


.. method:: PySide.QtGui.QPicture.detach_helper()








.. method:: PySide.QtGui.QPicture.exec(p, ds, i)


    :param p: :class:`PySide.QtGui.QPainter`
    :param ds: :class:`PySide.QtCore.QDataStream`
    :param i: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QPicture.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the picture contains no data; otherwise returns false.



.. method:: PySide.QtGui.QPicture.load(fileName[, format=0])


    :param fileName: unicode
    :param format: str
    :rtype: :class:`PySide.QtCore.bool`




    Loads a picture from the file specified by ``fileName`` and returns true if successful; otherwise returns false.

    Please note that the ``format`` parameter has been deprecated and will have no effect.

    .. seealso::  :meth:`PySide.QtGui.QPicture.save` 


.. method:: PySide.QtGui.QPicture.load(dev[, format=0])


    :param dev: :class:`PySide.QtCore.QIODevice`
    :param format: str
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    ``dev`` is the device to use for loading.



.. method:: PySide.QtGui.QPicture.play(p)


    :param p: :class:`PySide.QtGui.QPainter`
    :rtype: :class:`PySide.QtCore.bool`




    Replays the picture using ``painter`` , and returns true if successful; otherwise returns false.

    This function does exactly the same as :meth:`QPainter.drawPicture()<PySide.QtGui.QPainter.drawPicture>` with (x, y) = (0, 0).



.. method:: PySide.QtGui.QPicture.save(fileName[, format=0])


    :param fileName: unicode
    :param format: str
    :rtype: :class:`PySide.QtCore.bool`




    Saves a picture to the file specified by ``fileName`` and returns true if successful; otherwise returns false.

    Please note that the ``format`` parameter has been deprecated and will have no effect.

    .. seealso::  :meth:`PySide.QtGui.QPicture.load` 


.. method:: PySide.QtGui.QPicture.save(dev[, format=0])


    :param dev: :class:`PySide.QtCore.QIODevice`
    :param format: str
    :rtype: :class:`PySide.QtCore.bool`




    This is an overloaded function.

    ``dev`` is the device to use for saving.



.. method:: PySide.QtGui.QPicture.setBoundingRect(r)


    :param r: :class:`PySide.QtCore.QRect`




    Sets the picture's bounding rectangle to ``r`` . The automatically calculated value is overridden.

    .. seealso::  :meth:`PySide.QtGui.QPicture.boundingRect` 


.. method:: PySide.QtGui.QPicture.setData(data)


    :param data: str




    Sets the picture data directly from ``data`` and ``size`` . This function copies the input data.

    .. seealso::  :meth:`PySide.QtGui.QPicture.data`  :meth:`PySide.QtGui.QPicture.size` 


.. method:: PySide.QtGui.QPicture.size()


    :rtype: :class:`PySide.QtCore.uint`




    Returns the size of the picture data.

    .. seealso::  :meth:`PySide.QtGui.QPicture.data` 



