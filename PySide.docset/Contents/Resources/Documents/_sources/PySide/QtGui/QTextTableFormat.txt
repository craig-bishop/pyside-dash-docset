.. module:: PySide.QtGui
.. _QTextTableFormat:

QTextTableFormat
****************

.. inheritance-diagram:: QTextTableFormat
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`alignment<PySide.QtGui.QTextTableFormat.alignment>` ()
*    def :meth:`cellPadding<PySide.QtGui.QTextTableFormat.cellPadding>` ()
*    def :meth:`cellSpacing<PySide.QtGui.QTextTableFormat.cellSpacing>` ()
*    def :meth:`clearColumnWidthConstraints<PySide.QtGui.QTextTableFormat.clearColumnWidthConstraints>` ()
*    def :meth:`columnWidthConstraints<PySide.QtGui.QTextTableFormat.columnWidthConstraints>` ()
*    def :meth:`columns<PySide.QtGui.QTextTableFormat.columns>` ()
*    def :meth:`headerRowCount<PySide.QtGui.QTextTableFormat.headerRowCount>` ()
*    def :meth:`setAlignment<PySide.QtGui.QTextTableFormat.setAlignment>` (alignment)
*    def :meth:`setCellPadding<PySide.QtGui.QTextTableFormat.setCellPadding>` (padding)
*    def :meth:`setCellSpacing<PySide.QtGui.QTextTableFormat.setCellSpacing>` (spacing)
*    def :meth:`setColumnWidthConstraints<PySide.QtGui.QTextTableFormat.setColumnWidthConstraints>` (constraints)
*    def :meth:`setColumns<PySide.QtGui.QTextTableFormat.setColumns>` (columns)
*    def :meth:`setHeaderRowCount<PySide.QtGui.QTextTableFormat.setHeaderRowCount>` (count)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTextTableFormat` class provides formatting information for tables in a :class:`PySide.QtGui.QTextDocument` .

    A table is a group of cells ordered into rows and columns. Each table contains at least one row and one column. Each cell contains a block. Tables in rich text documents are formatted using the properties defined in this class.

    Tables are horizontally justified within their parent frame according to the table's alignment. This can be read with the :meth:`PySide.QtGui.QTextTableFormat.alignment` function and set with :meth:`PySide.QtGui.QTextTableFormat.setAlignment` .

    Cells within the table are separated by cell spacing. The number of pixels between cells is set with :meth:`PySide.QtGui.QTextTableFormat.setCellSpacing` and read with :meth:`PySide.QtGui.QTextTableFormat.cellSpacing` . The contents of each cell is surrounded by cell padding. The number of pixels between each cell edge and its contents is set with :meth:`PySide.QtGui.QTextTableFormat.setCellPadding` and read with :meth:`PySide.QtGui.QTextTableFormat.cellPadding` .

    .. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/qtexttableformat-cell.png

    The table's background color can be read with the :meth:`PySide.QtGui.QTextFormat.background` function, and can be specified with :meth:`PySide.QtGui.QTextFormat.setBackground` . The background color of each cell can be set independently, and will control the color of the cell within the padded area.

    The table format also provides a way to constrain the widths of the columns in the table. Columns can be assigned a fixed width, a variable width, or a percentage of the available width (see :class:`PySide.QtGui.QTextLength` ). The :meth:`PySide.QtGui.QTextTableFormat.columns` function returns the number of columns with constraints, and the :meth:`PySide.QtGui.QTextTableFormat.columnWidthConstraints` function returns the constraints defined for the table. These quantities can also be set by calling :meth:`PySide.QtGui.QTextTableFormat.setColumnWidthConstraints` with a vector containing new constraints. If no constraints are required, :meth:`PySide.QtGui.QTextTableFormat.clearColumnWidthConstraints` can be used to remove them.

    .. seealso::  :class:`PySide.QtGui.QTextTable`  :class:`PySide.QtGui.QTextTableCell`  :class:`PySide.QtGui.QTextLength` 

.. class:: QTextTableFormat()
           QTextTableFormat(fmt)
           QTextTableFormat(QTextTableFormat)

    :param QTextTableFormat: :class:`PySide.QtGui.QTextTableFormat`
    :param fmt: :class:`PySide.QtGui.QTextFormat`

    Constructs a new table format object.


    Creates a new table format with the same attributes as the ``given`` text format.




.. method:: PySide.QtGui.QTextTableFormat.alignment()


    :rtype: :class:`PySide.QtCore.Qt.Alignment`




    Returns the table's alignment.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.setAlignment` 


.. method:: PySide.QtGui.QTextTableFormat.cellPadding()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the table's cell padding. This describes the distance between the border of a cell and its contents.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.setCellPadding` 


.. method:: PySide.QtGui.QTextTableFormat.cellSpacing()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the table's cell spacing. This describes the distance between adjacent cells.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.setCellSpacing` 


.. method:: PySide.QtGui.QTextTableFormat.clearColumnWidthConstraints()






    Clears the column width constraints for the table.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.columnWidthConstraints`  :meth:`PySide.QtGui.QTextTableFormat.setColumnWidthConstraints` 


.. method:: PySide.QtGui.QTextTableFormat.columnWidthConstraints()


    :rtype: 




    Returns a list of constraints used by this table format to control the appearance of columns in a table.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.setColumnWidthConstraints` 


.. method:: PySide.QtGui.QTextTableFormat.columns()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of columns specified by the table format.



.. method:: PySide.QtGui.QTextTableFormat.headerRowCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of rows in the table that define the header.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.setHeaderRowCount` 


.. method:: PySide.QtGui.QTextTableFormat.setAlignment(alignment)


    :param alignment: :class:`PySide.QtCore.Qt.Alignment`







.. method:: PySide.QtGui.QTextTableFormat.setCellPadding(padding)


    :param padding: :class:`PySide.QtCore.qreal`




    Sets the cell ``padding`` for the table. This determines the distance between the border of a cell and its contents.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.cellPadding` 


.. method:: PySide.QtGui.QTextTableFormat.setCellSpacing(spacing)


    :param spacing: :class:`PySide.QtCore.qreal`




    Sets the cell ``spacing`` for the table. This determines the distance between adjacent cells.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.cellSpacing` 


.. method:: PySide.QtGui.QTextTableFormat.setColumnWidthConstraints(constraints)


    :param constraints: 







.. method:: PySide.QtGui.QTextTableFormat.setColumns(columns)


    :param columns: :class:`PySide.QtCore.int`




    Sets the number of ``columns`` required by the table format.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.columns` 


.. method:: PySide.QtGui.QTextTableFormat.setHeaderRowCount(count)


    :param count: :class:`PySide.QtCore.int`




    Declares the first ``count`` rows of the table as table header. The table header rows get repeated when a table is broken across a page boundary.

    .. seealso::  :meth:`PySide.QtGui.QTextTableFormat.headerRowCount` 



