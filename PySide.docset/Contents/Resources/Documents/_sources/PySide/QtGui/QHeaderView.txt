.. module:: PySide.QtGui
.. _QHeaderView:

QHeaderView
***********

.. inheritance-diagram:: QHeaderView
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`cascadingSectionResizes<PySide.QtGui.QHeaderView.cascadingSectionResizes>` ()
*    def :meth:`count<PySide.QtGui.QHeaderView.count>` ()
*    def :meth:`defaultAlignment<PySide.QtGui.QHeaderView.defaultAlignment>` ()
*    def :meth:`defaultSectionSize<PySide.QtGui.QHeaderView.defaultSectionSize>` ()
*    def :meth:`hiddenSectionCount<PySide.QtGui.QHeaderView.hiddenSectionCount>` ()
*    def :meth:`hideSection<PySide.QtGui.QHeaderView.hideSection>` (logicalIndex)
*    def :meth:`highlightSections<PySide.QtGui.QHeaderView.highlightSections>` ()
*    def :meth:`initStyleOption<PySide.QtGui.QHeaderView.initStyleOption>` (option)
*    def :meth:`initialize<PySide.QtGui.QHeaderView.initialize>` ()
*    def :meth:`initializeSections<PySide.QtGui.QHeaderView.initializeSections>` ()
*    def :meth:`initializeSections<PySide.QtGui.QHeaderView.initializeSections>` (start, end)
*    def :meth:`isClickable<PySide.QtGui.QHeaderView.isClickable>` ()
*    def :meth:`isMovable<PySide.QtGui.QHeaderView.isMovable>` ()
*    def :meth:`isSectionHidden<PySide.QtGui.QHeaderView.isSectionHidden>` (logicalIndex)
*    def :meth:`isSortIndicatorShown<PySide.QtGui.QHeaderView.isSortIndicatorShown>` ()
*    def :meth:`length<PySide.QtGui.QHeaderView.length>` ()
*    def :meth:`logicalIndex<PySide.QtGui.QHeaderView.logicalIndex>` (visualIndex)
*    def :meth:`logicalIndexAt<PySide.QtGui.QHeaderView.logicalIndexAt>` (pos)
*    def :meth:`logicalIndexAt<PySide.QtGui.QHeaderView.logicalIndexAt>` (position)
*    def :meth:`logicalIndexAt<PySide.QtGui.QHeaderView.logicalIndexAt>` (x, y)
*    def :meth:`minimumSectionSize<PySide.QtGui.QHeaderView.minimumSectionSize>` ()
*    def :meth:`moveSection<PySide.QtGui.QHeaderView.moveSection>` (from, to)
*    def :meth:`offset<PySide.QtGui.QHeaderView.offset>` ()
*    def :meth:`orientation<PySide.QtGui.QHeaderView.orientation>` ()
*    def :meth:`resizeMode<PySide.QtGui.QHeaderView.resizeMode>` (logicalIndex)
*    def :meth:`resizeSection<PySide.QtGui.QHeaderView.resizeSection>` (logicalIndex, size)
*    def :meth:`resizeSections<PySide.QtGui.QHeaderView.resizeSections>` (mode)
*    def :meth:`restoreState<PySide.QtGui.QHeaderView.restoreState>` (state)
*    def :meth:`saveState<PySide.QtGui.QHeaderView.saveState>` ()
*    def :meth:`sectionPosition<PySide.QtGui.QHeaderView.sectionPosition>` (logicalIndex)
*    def :meth:`sectionSize<PySide.QtGui.QHeaderView.sectionSize>` (logicalIndex)
*    def :meth:`sectionSizeHint<PySide.QtGui.QHeaderView.sectionSizeHint>` (logicalIndex)
*    def :meth:`sectionViewportPosition<PySide.QtGui.QHeaderView.sectionViewportPosition>` (logicalIndex)
*    def :meth:`sectionsHidden<PySide.QtGui.QHeaderView.sectionsHidden>` ()
*    def :meth:`sectionsMoved<PySide.QtGui.QHeaderView.sectionsMoved>` ()
*    def :meth:`setCascadingSectionResizes<PySide.QtGui.QHeaderView.setCascadingSectionResizes>` (enable)
*    def :meth:`setClickable<PySide.QtGui.QHeaderView.setClickable>` (clickable)
*    def :meth:`setDefaultAlignment<PySide.QtGui.QHeaderView.setDefaultAlignment>` (alignment)
*    def :meth:`setDefaultSectionSize<PySide.QtGui.QHeaderView.setDefaultSectionSize>` (size)
*    def :meth:`setHighlightSections<PySide.QtGui.QHeaderView.setHighlightSections>` (highlight)
*    def :meth:`setMinimumSectionSize<PySide.QtGui.QHeaderView.setMinimumSectionSize>` (size)
*    def :meth:`setMovable<PySide.QtGui.QHeaderView.setMovable>` (movable)
*    def :meth:`setResizeMode<PySide.QtGui.QHeaderView.setResizeMode>` (logicalIndex, mode)
*    def :meth:`setResizeMode<PySide.QtGui.QHeaderView.setResizeMode>` (mode)
*    def :meth:`setSectionHidden<PySide.QtGui.QHeaderView.setSectionHidden>` (logicalIndex, hide)
*    def :meth:`setSortIndicator<PySide.QtGui.QHeaderView.setSortIndicator>` (logicalIndex, order)
*    def :meth:`setSortIndicatorShown<PySide.QtGui.QHeaderView.setSortIndicatorShown>` (show)
*    def :meth:`setStretchLastSection<PySide.QtGui.QHeaderView.setStretchLastSection>` (stretch)
*    def :meth:`showSection<PySide.QtGui.QHeaderView.showSection>` (logicalIndex)
*    def :meth:`sortIndicatorOrder<PySide.QtGui.QHeaderView.sortIndicatorOrder>` ()
*    def :meth:`sortIndicatorSection<PySide.QtGui.QHeaderView.sortIndicatorSection>` ()
*    def :meth:`stretchLastSection<PySide.QtGui.QHeaderView.stretchLastSection>` ()
*    def :meth:`stretchSectionCount<PySide.QtGui.QHeaderView.stretchSectionCount>` ()
*    def :meth:`swapSections<PySide.QtGui.QHeaderView.swapSections>` (first, second)
*    def :meth:`visualIndex<PySide.QtGui.QHeaderView.visualIndex>` (logicalIndex)
*    def :meth:`visualIndexAt<PySide.QtGui.QHeaderView.visualIndexAt>` (position)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`paintSection<PySide.QtGui.QHeaderView.paintSection>` (painter, rect, logicalIndex)
*    def :meth:`sectionSizeFromContents<PySide.QtGui.QHeaderView.sectionSizeFromContents>` (logicalIndex)


Slots
^^^^^
.. container:: function_list

*    def :meth:`headerDataChanged<PySide.QtGui.QHeaderView.headerDataChanged>` (orientation, logicalFirst, logicalLast)
*    def :meth:`resizeSections<PySide.QtGui.QHeaderView.resizeSections>` ()
*    def :meth:`sectionsAboutToBeRemoved<PySide.QtGui.QHeaderView.sectionsAboutToBeRemoved>` (parent, logicalFirst, logicalLast)
*    def :meth:`sectionsInserted<PySide.QtGui.QHeaderView.sectionsInserted>` (parent, logicalFirst, logicalLast)
*    def :meth:`setOffset<PySide.QtGui.QHeaderView.setOffset>` (offset)
*    def :meth:`setOffsetToLastSection<PySide.QtGui.QHeaderView.setOffsetToLastSection>` ()
*    def :meth:`setOffsetToSectionPosition<PySide.QtGui.QHeaderView.setOffsetToSectionPosition>` (visualIndex)
*    def :meth:`updateSection<PySide.QtGui.QHeaderView.updateSection>` (logicalIndex)


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`geometriesChanged<PySide.QtGui.QHeaderView.geometriesChanged>` ()
*    def :meth:`sectionAutoResize<PySide.QtGui.QHeaderView.sectionAutoResize>` (logicalIndex, mode)
*    def :meth:`sectionClicked<PySide.QtGui.QHeaderView.sectionClicked>` (logicalIndex)
*    def :meth:`sectionCountChanged<PySide.QtGui.QHeaderView.sectionCountChanged>` (oldCount, newCount)
*    def :meth:`sectionDoubleClicked<PySide.QtGui.QHeaderView.sectionDoubleClicked>` (logicalIndex)
*    def :meth:`sectionEntered<PySide.QtGui.QHeaderView.sectionEntered>` (logicalIndex)
*    def :meth:`sectionHandleDoubleClicked<PySide.QtGui.QHeaderView.sectionHandleDoubleClicked>` (logicalIndex)
*    def :meth:`sectionMoved<PySide.QtGui.QHeaderView.sectionMoved>` (logicalIndex, oldVisualIndex, newVisualIndex)
*    def :meth:`sectionPressed<PySide.QtGui.QHeaderView.sectionPressed>` (logicalIndex)
*    def :meth:`sectionResized<PySide.QtGui.QHeaderView.sectionResized>` (logicalIndex, oldSize, newSize)
*    def :meth:`sortIndicatorChanged<PySide.QtGui.QHeaderView.sortIndicatorChanged>` (logicalIndex, order)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QHeaderView` class provides a header row or header column for item views.

    A :class:`PySide.QtGui.QHeaderView` displays the headers used in item views such as the :class:`PySide.QtGui.QTableView` and :class:`PySide.QtGui.QTreeView` classes. It takes the place of Qt3's ``QHeader`` class previously used for the same purpose, but uses the Qt's model/view architecture for consistency with the item view classes.

    The :class:`PySide.QtGui.QHeaderView` class is one of the :ref:`Model/View Classes<model-view>` and is part of Qt's :ref:`model/view framework<model-view-programming.html>` .

    The header gets the data for each section from the model using the :meth:`QAbstractItemModel.headerData()<PySide.QtCore.QAbstractItemModel.headerData>` function. You can set the data by using :meth:`QAbstractItemModel.setHeaderData()<PySide.QtCore.QAbstractItemModel.setHeaderData>` .

    Each header has an :meth:`PySide.QtGui.QHeaderView.orientation` and a number of sections, given by the :meth:`PySide.QtGui.QHeaderView.count` function. A section refers to a part of the header - either a row or a column, depending on the orientation.

    Sections can be moved and resized using :meth:`PySide.QtGui.QHeaderView.moveSection` and :meth:`PySide.QtGui.QHeaderView.resizeSection` ; they can also be hidden and shown with :meth:`PySide.QtGui.QHeaderView.hideSection` and :meth:`PySide.QtGui.QHeaderView.showSection` .

    Each section of a header is described by a section ID, specified by its :meth:`~PySide.QtGui.QHeaderView.section` , and can be located at a particular :meth:`PySide.QtGui.QHeaderView.visualIndex` in the header. A section can have a sort indicator set with :meth:`PySide.QtGui.QHeaderView.setSortIndicator` ; this indicates whether the items in the associated item view will be sorted in the order given by the section.

    For a horizontal header the section is equivalent to a column in the model, and for a vertical header the section is equivalent to a row in the model.

    .. _PySide.QtGui.QHeaderView_moving-header-sections:



Moving Header Sections
^^^^^^^^^^^^^^^^^^^^^^

    A header can be fixed in place, or made movable with :meth:`PySide.QtGui.QHeaderView.setMovable` . It can be made clickable with :meth:`PySide.QtGui.QHeaderView.setClickable` , and has resizing behavior in accordance with :meth:`PySide.QtGui.QHeaderView.setResizeMode` .

    .. note::  Double-clicking on a header to resize a section only applies for visible rows.

    A header will emit :meth:`PySide.QtGui.QHeaderView.sectionMoved` if the user moves a section, :meth:`PySide.QtGui.QHeaderView.sectionResized` if the user resizes a section, and :meth:`PySide.QtGui.QHeaderView.sectionClicked` as well as :meth:`PySide.QtGui.QHeaderView.sectionHandleDoubleClicked` in response to mouse clicks. A header will also emit :meth:`PySide.QtGui.QHeaderView.sectionCountChanged` and :meth:`PySide.QtGui.QHeaderView.sectionAutoResize` .

    You can identify a section using the :meth:`PySide.QtGui.QHeaderView.logicalIndex` and :meth:`PySide.QtGui.QHeaderView.logicalIndexAt` functions, or by its index position, using the :meth:`PySide.QtGui.QHeaderView.visualIndex` and :meth:`PySide.QtGui.QHeaderView.visualIndexAt` functions. The visual index will change if a section is moved, but the logical index will not change.

    .. _PySide.QtGui.QHeaderView_appearance:



Appearance
^^^^^^^^^^

    :class:`PySide.QtGui.QTableWidget` and :class:`PySide.QtGui.QTableView` create default headers. If you want the headers to be visible, you can use :meth:`PySide.QtGui.QFrame.setVisible` .

    Not all :attr:`Qt.ItemDataRole` s will have an effect on a :class:`PySide.QtGui.QHeaderView` . If you need to draw other roles, you can subclass :class:`PySide.QtGui.QHeaderView` and reimplement :meth:`PySide.QtGui.QHeaderView.paintEvent` . :class:`PySide.QtGui.QHeaderView` respects the following item data roles: :attr:`TextAlignmentRole<Qt.ItemDataRole>` , :attr:`DisplayRole<Qt.ItemDataRole>` , :attr:`FontRole<Qt.ItemDataRole>` , :attr:`DecorationRole<Qt.ItemDataRole>` , :attr:`ForegroundRole<Qt.ItemDataRole>` , and :attr:`BackgroundRole<Qt.ItemDataRole>` .

    .. note::  Each header renders the data for each section itself, and does not rely on a delegate. As a result, calling a header's :meth:`PySide.QtGui.QAbstractItemView.setItemDelegate` function will have no effect.

    .. seealso::  :ref:`Model/View Programming<model-view-programming.html>`  :class:`PySide.QtGui.QListView`  :class:`PySide.QtGui.QTableView`  :class:`PySide.QtGui.QTreeView` 

.. class:: QHeaderView(orientation[, parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`
    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`



.. attribute:: PySide.QtGui.QHeaderView.ResizeMode

    The resize mode specifies the behavior of the header sections. It can be set on the entire header view or on individual sections using :meth:`PySide.QtGui.QHeaderView.setResizeMode` .

    +----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                    |Description                                                                                                                                                                                                                                                                                      |
    +============================+=================================================================================================================================================================================================================================================================================================+
    |QHeaderView.Interactive     |The user can resize the section. The section can also be resized programmatically using :meth:`PySide.QtGui.QHeaderView.resizeSection` . The section size defaults to :meth:`PySide.QtGui.QHeaderView.defaultSectionSize` . (See also :meth:`PySide.QtGui.QHeaderView.cascadingSectionResizes` .)|
    +----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QHeaderView.Fixed           |The user cannot resize the section. The section can only be resized programmatically using :meth:`PySide.QtGui.QHeaderView.resizeSection` . The section size defaults to :meth:`PySide.QtGui.QHeaderView.defaultSectionSize` .                                                                   |
    +----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QHeaderView.Stretch         |:class:`PySide.QtGui.QHeaderView` will automatically resize the section to fill the available space. The size cannot be changed by the user or programmatically.                                                                                                                                 |
    +----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QHeaderView.ResizeToContents|:class:`PySide.QtGui.QHeaderView` will automatically resize the section to its optimal size based on the contents of the entire column or row. The size cannot be changed by the user or programmatically. (This value was introduced in 4.2)                                                    |
    +----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

    The following values are obsolete:

    +------------------+------------------+
    |Constant          |Description       |
    +==================+==================+
    |QHeaderView.Custom|Use Fixed instead.|
    +------------------+------------------+

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode`  :meth:`PySide.QtGui.QHeaderView.stretchLastSection`  :meth:`PySide.QtGui.QHeaderView.minimumSectionSize` 

.. method:: PySide.QtGui.QHeaderView.cascadingSectionResizes()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether interactive resizing will be cascaded to the following sections once the section being resized by the user has reached its minimum size.

    This property only affects sections that have :attr:`Interactive<QHeaderView.ResizeMode>` as their resize mode.

    The default value is false.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode` 


.. method:: PySide.QtGui.QHeaderView.count()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of sections in the header.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sectionCountChanged`  :meth:`PySide.QtGui.QHeaderView.length` 


.. method:: PySide.QtGui.QHeaderView.defaultAlignment()


    :rtype: :class:`PySide.QtCore.Qt.Alignment`




    This property holds the default alignment of the text in each header section.



.. method:: PySide.QtGui.QHeaderView.defaultSectionSize()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the default size of the header sections before resizing..

    This property only affects sections that have :attr:`Interactive<QHeaderView.ResizeMode>` or :attr:`Fixed<QHeaderView.ResizeMode>` as their resize mode.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode`  :meth:`PySide.QtGui.QHeaderView.minimumSectionSize` 


.. method:: PySide.QtGui.QHeaderView.geometriesChanged()








.. method:: PySide.QtGui.QHeaderView.headerDataChanged(orientation, logicalFirst, logicalLast)


    :param orientation: :attr:`PySide.QtCore.Qt.Orientation`
    :param logicalFirst: :class:`PySide.QtCore.int`
    :param logicalLast: :class:`PySide.QtCore.int`







.. method:: PySide.QtGui.QHeaderView.hiddenSectionCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of sections in the header that has been hidden.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setSectionHidden`  :meth:`PySide.QtGui.QHeaderView.isSectionHidden` 


.. method:: PySide.QtGui.QHeaderView.hideSection(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`




    Hides the section specified by ``logicalIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.showSection`  :meth:`PySide.QtGui.QHeaderView.isSectionHidden`  :meth:`PySide.QtGui.QHeaderView.hiddenSectionCount`  :meth:`PySide.QtGui.QHeaderView.setSectionHidden` 


.. method:: PySide.QtGui.QHeaderView.highlightSections()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the sections containing selected items are highlighted.

    By default, this property is false.



.. method:: PySide.QtGui.QHeaderView.initStyleOption(option)


    :param option: :class:`PySide.QtGui.QStyleOptionHeader`




    Initialize ``option`` with the values from this :class:`PySide.QtGui.QHeaderView` . This method is useful for subclasses when they need a :class:`PySide.QtGui.QStyleOptionHeader` , but do not want to fill in all the information themselves.

    .. seealso::  :meth:`QStyleOption.initFrom()<PySide.QtGui.QStyleOption.initFrom>` 


.. method:: PySide.QtGui.QHeaderView.initialize()








.. method:: PySide.QtGui.QHeaderView.initializeSections()








.. method:: PySide.QtGui.QHeaderView.initializeSections(start, end)


    :param start: :class:`PySide.QtCore.int`
    :param end: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.isClickable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the header is clickable; otherwise returns false. A clickable header could be set up to allow the user to change the representation of the data in the view related to the header.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setClickable` 


.. method:: PySide.QtGui.QHeaderView.isMovable()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the header can be moved by the user; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setMovable` 


.. method:: PySide.QtGui.QHeaderView.isSectionHidden(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the section specified by ``logicalIndex`` is explicitly hidden from the user; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.hideSection`  :meth:`PySide.QtGui.QHeaderView.showSection`  :meth:`PySide.QtGui.QHeaderView.setSectionHidden`  :meth:`PySide.QtGui.QHeaderView.hiddenSectionCount` 


.. method:: PySide.QtGui.QHeaderView.isSortIndicatorShown()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the sort indicator is shown.

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setClickable` 


.. method:: PySide.QtGui.QHeaderView.length()


    :rtype: :class:`PySide.QtCore.int`




    Returns the length along the orientation of the header.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sizeHint`  :meth:`PySide.QtGui.QHeaderView.setResizeMode`  :meth:`PySide.QtGui.QHeaderView.offset` 


.. method:: PySide.QtGui.QHeaderView.logicalIndex(visualIndex)


    :param visualIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the logicalIndex for the section at the given ``visualIndex`` position, or -1 if visualIndex < 0 or visualIndex >= :meth:`QHeaderView.count()<PySide.QtGui.QHeaderView.count>` .

    Note that the visualIndex is not affected by hidden sections.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.visualIndex`  :meth:`PySide.QtGui.QHeaderView.sectionPosition` 


.. method:: PySide.QtGui.QHeaderView.logicalIndexAt(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the logical index of the section at the given coordinate. If the header is horizontal ``x`` will be used, otherwise ``y`` will be used to find the logical index.



.. method:: PySide.QtGui.QHeaderView.logicalIndexAt(position)


    :param position: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the section that covers the given ``position`` in the viewport.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.visualIndexAt`  :meth:`PySide.QtGui.QHeaderView.isSectionHidden` 


.. method:: PySide.QtGui.QHeaderView.logicalIndexAt(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.int`




    Returns the logical index of the section at the position given in ``pos`` . If the header is horizontal the x-coordinate will be used, otherwise the y-coordinate will be used to find the logical index.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sectionPosition` 


.. method:: PySide.QtGui.QHeaderView.minimumSectionSize()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the minimum size of the header sections..

    The minimum section size is the smallest section size allowed. If the minimum section size is set to -1, :class:`PySide.QtGui.QHeaderView` will use the maximum of the :meth:`global strut<PySide.QtGui.QApplication.globalStrut>` or the :meth:`font metrics<PySide.QtGui.QWidget.fontMetrics>` size.

    This property is honored by all :attr:`resize modes<QHeaderView.ResizeMode>` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode`  :meth:`PySide.QtGui.QHeaderView.defaultSectionSize` 


.. method:: PySide.QtGui.QHeaderView.moveSection(from, to)


    :param from: :class:`PySide.QtCore.int`
    :param to: :class:`PySide.QtCore.int`




    Moves the section at visual index ``from`` to occupy visual index ``to`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sectionsMoved` 


.. method:: PySide.QtGui.QHeaderView.offset()


    :rtype: :class:`PySide.QtCore.int`




    Returns the offset of the header: this is the header's left-most (or top-most for vertical headers) visible pixel.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setOffset` 


.. method:: PySide.QtGui.QHeaderView.orientation()


    :rtype: :attr:`PySide.QtCore.Qt.Orientation`




    Returns the orientation of the header.

    .. seealso::  :attr:`Qt.Orientation` 


.. method:: PySide.QtGui.QHeaderView.paintSection(painter, rect, logicalIndex)


    :param painter: :class:`PySide.QtGui.QPainter`
    :param rect: :class:`PySide.QtCore.QRect`
    :param logicalIndex: :class:`PySide.QtCore.int`




    Paints the section specified by the given ``logicalIndex`` , using the given ``painter`` and ``rect`` .

    Normally, you do not have to call this function.



.. method:: PySide.QtGui.QHeaderView.resizeMode(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :attr:`PySide.QtGui.QHeaderView.ResizeMode`




    Returns the resize mode that applies to the section specified by the given ``logicalIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode` 


.. method:: PySide.QtGui.QHeaderView.resizeSection(logicalIndex, size)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param size: :class:`PySide.QtCore.int`




    Resizes the section specified by ``logicalIndex`` to ``size`` measured in pixels.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sectionResized`  :meth:`PySide.QtGui.QHeaderView.resizeMode`  :meth:`PySide.QtGui.QHeaderView.sectionSize` 


.. method:: PySide.QtGui.QHeaderView.resizeSections()






    Resizes the sections according to their size hints. Normally, you do not have to call this function.



.. method:: PySide.QtGui.QHeaderView.resizeSections(mode)


    :param mode: :attr:`PySide.QtGui.QHeaderView.ResizeMode`







.. method:: PySide.QtGui.QHeaderView.restoreState(state)


    :param state: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.bool`




    Restores the ``state`` of this header view. This function returns ``true`` if the state was restored; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.saveState` 


.. method:: PySide.QtGui.QHeaderView.saveState()


    :rtype: :class:`PySide.QtCore.QByteArray`




    Saves the current state of this header view.

    To restore the saved state, pass the return value to :meth:`PySide.QtGui.QHeaderView.restoreState` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.restoreState` 


.. method:: PySide.QtGui.QHeaderView.sectionAutoResize(logicalIndex, mode)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param mode: :attr:`PySide.QtGui.QHeaderView.ResizeMode`






.. method:: PySide.QtGui.QHeaderView.sectionClicked(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionCountChanged(oldCount, newCount)


    :param oldCount: :class:`PySide.QtCore.int`
    :param newCount: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionDoubleClicked(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionEntered(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionHandleDoubleClicked(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionMoved(logicalIndex, oldVisualIndex, newVisualIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param oldVisualIndex: :class:`PySide.QtCore.int`
    :param newVisualIndex: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionPosition(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the section position of the given ``logicalIndex`` , or -1 if the section is hidden.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sectionViewportPosition` 


.. method:: PySide.QtGui.QHeaderView.sectionPressed(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionResized(logicalIndex, oldSize, newSize)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param oldSize: :class:`PySide.QtCore.int`
    :param newSize: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QHeaderView.sectionSize(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the width (or height for vertical headers) of the given ``logicalIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.length`  :meth:`PySide.QtGui.QHeaderView.setResizeMode`  :meth:`PySide.QtGui.QHeaderView.defaultSectionSize` 


.. method:: PySide.QtGui.QHeaderView.sectionSizeFromContents(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QSize`




    Returns the size of the contents of the section specified by the given ``logicalIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.defaultSectionSize` 


.. method:: PySide.QtGui.QHeaderView.sectionSizeHint(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns a suitable size hint for the section specified by ``logicalIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sizeHint`  :meth:`PySide.QtGui.QHeaderView.defaultSectionSize`  :meth:`PySide.QtGui.QHeaderView.minimumSectionSize`  :attr:`Qt.SizeHintRole<Qt.ItemDataRole>` 


.. method:: PySide.QtGui.QHeaderView.sectionViewportPosition(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the section viewport position of the given ``logicalIndex`` .

    If the section is hidden, the return value is undefined.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.sectionPosition`  :meth:`PySide.QtGui.QHeaderView.isSectionHidden` 


.. method:: PySide.QtGui.QHeaderView.sectionsAboutToBeRemoved(parent, logicalFirst, logicalLast)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param logicalFirst: :class:`PySide.QtCore.int`
    :param logicalLast: :class:`PySide.QtCore.int`




    This slot is called when sections are removed from the ``parent`` . ``logicalFirst`` and ``logicalLast`` signify where the sections were removed.

    If only one section is removed, ``logicalFirst`` and ``logicalLast`` will be the same.



.. method:: PySide.QtGui.QHeaderView.sectionsHidden()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if sections in the header has been hidden; otherwise returns false;

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setSectionHidden` 


.. method:: PySide.QtGui.QHeaderView.sectionsInserted(parent, logicalFirst, logicalLast)


    :param parent: :class:`PySide.QtCore.QModelIndex`
    :param logicalFirst: :class:`PySide.QtCore.int`
    :param logicalLast: :class:`PySide.QtCore.int`




    This slot is called when sections are inserted into the ``parent`` . ``logicalFirst`` and ``logicalLast`` indices signify where the new sections were inserted.

    If only one section is inserted, ``logicalFirst`` and ``logicalLast`` will be the same.



.. method:: PySide.QtGui.QHeaderView.sectionsMoved()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if sections in the header has been moved; otherwise returns false;

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.moveSection` 


.. method:: PySide.QtGui.QHeaderView.setCascadingSectionResizes(enable)


    :param enable: :class:`PySide.QtCore.bool`




    This property holds whether interactive resizing will be cascaded to the following sections once the section being resized by the user has reached its minimum size.

    This property only affects sections that have :attr:`Interactive<QHeaderView.ResizeMode>` as their resize mode.

    The default value is false.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode` 


.. method:: PySide.QtGui.QHeaderView.setClickable(clickable)


    :param clickable: :class:`PySide.QtCore.bool`




    If ``clickable`` is true, the header will respond to single clicks.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.isClickable`  :meth:`PySide.QtGui.QHeaderView.sectionClicked`  :meth:`PySide.QtGui.QHeaderView.sectionPressed`  :meth:`PySide.QtGui.QHeaderView.setSortIndicatorShown` 


.. method:: PySide.QtGui.QHeaderView.setDefaultAlignment(alignment)


    :param alignment: :class:`PySide.QtCore.Qt.Alignment`




    This property holds the default alignment of the text in each header section.



.. method:: PySide.QtGui.QHeaderView.setDefaultSectionSize(size)


    :param size: :class:`PySide.QtCore.int`




    This property holds the default size of the header sections before resizing..

    This property only affects sections that have :attr:`Interactive<QHeaderView.ResizeMode>` or :attr:`Fixed<QHeaderView.ResizeMode>` as their resize mode.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode`  :meth:`PySide.QtGui.QHeaderView.minimumSectionSize` 


.. method:: PySide.QtGui.QHeaderView.setHighlightSections(highlight)


    :param highlight: :class:`PySide.QtCore.bool`




    This property holds whether the sections containing selected items are highlighted.

    By default, this property is false.



.. method:: PySide.QtGui.QHeaderView.setMinimumSectionSize(size)


    :param size: :class:`PySide.QtCore.int`




    This property holds the minimum size of the header sections..

    The minimum section size is the smallest section size allowed. If the minimum section size is set to -1, :class:`PySide.QtGui.QHeaderView` will use the maximum of the :meth:`global strut<PySide.QtGui.QApplication.globalStrut>` or the :meth:`font metrics<PySide.QtGui.QWidget.fontMetrics>` size.

    This property is honored by all :attr:`resize modes<QHeaderView.ResizeMode>` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode`  :meth:`PySide.QtGui.QHeaderView.defaultSectionSize` 


.. method:: PySide.QtGui.QHeaderView.setMovable(movable)


    :param movable: :class:`PySide.QtCore.bool`




    If ``movable`` is true, the header may be moved by the user; otherwise it is fixed in place.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.isMovable`  :meth:`PySide.QtGui.QHeaderView.sectionMoved` 


.. method:: PySide.QtGui.QHeaderView.setOffset(offset)


    :param offset: :class:`PySide.QtCore.int`




    Sets the header's offset to ``offset`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.offset`  :meth:`PySide.QtGui.QHeaderView.length` 


.. method:: PySide.QtGui.QHeaderView.setOffsetToLastSection()






    Sets the offset to make the last section visible.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setOffset`  :meth:`PySide.QtGui.QHeaderView.sectionPosition`  :meth:`PySide.QtGui.QHeaderView.setOffsetToSectionPosition` 


.. method:: PySide.QtGui.QHeaderView.setOffsetToSectionPosition(visualIndex)


    :param visualIndex: :class:`PySide.QtCore.int`




    Sets the offset to the start of the section at the given ``visualIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setOffset`  :meth:`PySide.QtGui.QHeaderView.sectionPosition` 


.. method:: PySide.QtGui.QHeaderView.setResizeMode(logicalIndex, mode)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param mode: :attr:`PySide.QtGui.QHeaderView.ResizeMode`




    This is an overloaded function.

    Sets the constraints on how the section specified by ``logicalIndex`` in the header can be resized to those described by the given ``mode`` . The logical index should exist at the time this function is called.

    .. note::  This setting will be ignored for the last section if the :meth:`PySide.QtGui.QHeaderView.stretchLastSection` property is set to true. This is the default for the horizontal headers provided by :class:`PySide.QtGui.QTreeView` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setStretchLastSection` 


.. method:: PySide.QtGui.QHeaderView.setResizeMode(mode)


    :param mode: :attr:`PySide.QtGui.QHeaderView.ResizeMode`




    Sets the constraints on how the header can be resized to those described by the given ``mode`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.resizeMode`  :meth:`PySide.QtGui.QHeaderView.length`  :meth:`PySide.QtGui.QHeaderView.sectionResized`  :meth:`PySide.QtGui.QHeaderView.sectionAutoResize` 


.. method:: PySide.QtGui.QHeaderView.setSectionHidden(logicalIndex, hide)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param hide: :class:`PySide.QtCore.bool`




    If ``hide`` is true the section specified by ``logicalIndex`` is hidden; otherwise the section is shown.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.isSectionHidden`  :meth:`PySide.QtGui.QHeaderView.hiddenSectionCount` 


.. method:: PySide.QtGui.QHeaderView.setSortIndicator(logicalIndex, order)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QHeaderView.setSortIndicatorShown(show)


    :param show: :class:`PySide.QtCore.bool`




    This property holds whether the sort indicator is shown.

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setClickable` 


.. method:: PySide.QtGui.QHeaderView.setStretchLastSection(stretch)


    :param stretch: :class:`PySide.QtCore.bool`




    This property holds whether the last visible section in the header takes up all the available space.

    The default value is false.

    .. note::  The horizontal headers provided by :class:`PySide.QtGui.QTreeView` are configured with this property set to true, ensuring that the view does not waste any of the space assigned to it for its header. If this value is set to true, this property will override the resize mode set on the last section in the header.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode` 


.. method:: PySide.QtGui.QHeaderView.showSection(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`




    Shows the section specified by ``logicalIndex`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.hideSection`  :meth:`PySide.QtGui.QHeaderView.isSectionHidden`  :meth:`PySide.QtGui.QHeaderView.hiddenSectionCount`  :meth:`PySide.QtGui.QHeaderView.setSectionHidden` 


.. method:: PySide.QtGui.QHeaderView.sortIndicatorChanged(logicalIndex, order)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`






.. method:: PySide.QtGui.QHeaderView.sortIndicatorOrder()


    :rtype: :attr:`PySide.QtCore.Qt.SortOrder`




    Returns the order for the sort indicator. If no section has a sort indicator the return value of this function is undefined.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setSortIndicator`  :meth:`PySide.QtGui.QHeaderView.sortIndicatorSection` 


.. method:: PySide.QtGui.QHeaderView.sortIndicatorSection()


    :rtype: :class:`PySide.QtCore.int`




    Returns the logical index of the section that has a sort indicator. By default this is section 0.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setSortIndicator`  :meth:`PySide.QtGui.QHeaderView.sortIndicatorOrder`  :meth:`PySide.QtGui.QHeaderView.setSortIndicatorShown` 


.. method:: PySide.QtGui.QHeaderView.stretchLastSection()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the last visible section in the header takes up all the available space.

    The default value is false.

    .. note::  The horizontal headers provided by :class:`PySide.QtGui.QTreeView` are configured with this property set to true, ensuring that the view does not waste any of the space assigned to it for its header. If this value is set to true, this property will override the resize mode set on the last section in the header.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.setResizeMode` 


.. method:: PySide.QtGui.QHeaderView.stretchSectionCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of sections that are set to resize mode stretch. In views, this can be used to see if the headerview needs to resize the sections when the view's geometry changes.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.stretchLastSection`  :meth:`PySide.QtGui.QHeaderView.resizeMode` 


.. method:: PySide.QtGui.QHeaderView.swapSections(first, second)


    :param first: :class:`PySide.QtCore.int`
    :param second: :class:`PySide.QtCore.int`




    Swaps the section at visual index ``first`` with the section at visual index ``second`` .

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.moveSection` 


.. method:: PySide.QtGui.QHeaderView.updateSection(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`




    Updates the section specified by the given ``logicalIndex`` .



.. method:: PySide.QtGui.QHeaderView.visualIndex(logicalIndex)


    :param logicalIndex: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the visual index position of the section specified by the given ``logicalIndex`` , or -1 otherwise.

    Hidden sections still have valid visual indexes.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.logicalIndex` 


.. method:: PySide.QtGui.QHeaderView.visualIndexAt(position)


    :param position: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the visual index of the section that covers the given ``position`` in the viewport.

    .. seealso::  :meth:`PySide.QtGui.QHeaderView.logicalIndexAt` 



