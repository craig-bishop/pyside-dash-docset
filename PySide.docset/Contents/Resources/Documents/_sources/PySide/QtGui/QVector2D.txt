.. module:: PySide.QtGui
.. _QVector2D:

QVector2D
*********

.. inheritance-diagram:: QVector2D
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__add__<PySide.QtGui.QVector2D.__add__>` (, v2)
*    def :meth:`__div__<PySide.QtGui.QVector2D.__div__>` (, divisor)
*    def :meth:`__eq__<PySide.QtGui.QVector2D.__eq__>` (, v2)
*    def :meth:`__iadd__<PySide.QtGui.QVector2D.__iadd__>` (vector)
*    def :meth:`__idiv__<PySide.QtGui.QVector2D.__idiv__>` (divisor)
*    def :meth:`__imul__<PySide.QtGui.QVector2D.__imul__>` (factor)
*    def :meth:`__imul__<PySide.QtGui.QVector2D.__imul__>` (vector)
*    def :meth:`__isub__<PySide.QtGui.QVector2D.__isub__>` (vector)
*    def :meth:`__mul__<PySide.QtGui.QVector2D.__mul__>` (, factor)
*    def :meth:`__mul__<PySide.QtGui.QVector2D.__mul__>` (, v2)
*    def :meth:`__mul__<PySide.QtGui.QVector2D.__mul__>` (factor)
*    def :meth:`__ne__<PySide.QtGui.QVector2D.__ne__>` (, v2)
*    def :meth:`__reduce__<PySide.QtGui.QVector2D.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtGui.QVector2D.__repr__>` ()
*    def :meth:`__sub__<PySide.QtGui.QVector2D.__sub__>` ()
*    def :meth:`__sub__<PySide.QtGui.QVector2D.__sub__>` (, v2)
*    def :meth:`isNull<PySide.QtGui.QVector2D.isNull>` ()
*    def :meth:`length<PySide.QtGui.QVector2D.length>` ()
*    def :meth:`lengthSquared<PySide.QtGui.QVector2D.lengthSquared>` ()
*    def :meth:`normalize<PySide.QtGui.QVector2D.normalize>` ()
*    def :meth:`normalized<PySide.QtGui.QVector2D.normalized>` ()
*    def :meth:`setX<PySide.QtGui.QVector2D.setX>` (x)
*    def :meth:`setY<PySide.QtGui.QVector2D.setY>` (y)
*    def :meth:`toPoint<PySide.QtGui.QVector2D.toPoint>` ()
*    def :meth:`toPointF<PySide.QtGui.QVector2D.toPointF>` ()
*    def :meth:`toTuple<PySide.QtGui.QVector2D.toTuple>` ()
*    def :meth:`toVector3D<PySide.QtGui.QVector2D.toVector3D>` ()
*    def :meth:`toVector4D<PySide.QtGui.QVector2D.toVector4D>` ()
*    def :meth:`x<PySide.QtGui.QVector2D.x>` ()
*    def :meth:`y<PySide.QtGui.QVector2D.y>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`dotProduct<PySide.QtGui.QVector2D.dotProduct>` (v1, v2)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QVector2D` class represents a vector or vertex in 2D space.

    The :class:`PySide.QtGui.QVector2D` class can also be used to represent vertices in 2D space. We therefore do not need to provide a separate vertex class.

    .. seealso::  :class:`PySide.QtGui.QVector3D`  :class:`PySide.QtGui.QVector4D`  :class:`PySide.QtGui.QQuaternion` 

.. class:: QVector2D()
           QVector2D(point)
           QVector2D(point)
           QVector2D(QVector2D)
           QVector2D(vector)
           QVector2D(vector)
           QVector2D(xpos, ypos)

    :param vector: :class:`PySide.QtGui.QVector3D`
    :param point: :class:`PySide.QtCore.QPoint`
    :param ypos: :class:`PySide.QtCore.qreal`
    :param xpos: :class:`PySide.QtCore.qreal`
    :param QVector2D: :class:`PySide.QtGui.QVector2D`

    Constructs a null vector, i.e. with coordinates (0, 0, 0).


    Constructs a vector with x and y coordinates from a 2D ``point`` .


    Constructs a vector with x and y coordinates from a 2D ``point`` .




    Constructs a vector with x and y coordinates from a 3D ``vector`` . The z coordinate of ``vector`` is dropped.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.toVector3D` 

    Constructs a vector with x and y coordinates from a 3D ``vector`` . The z and w coordinates of ``vector`` are dropped.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.toVector4D` 

    Constructs a vector with coordinates (``xpos`` , ``ypos`` ).


.. method:: PySide.QtGui.QVector2D.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QVector2D.__repr__()


    :rtype: :class:`PyObject`







.. staticmethod:: PySide.QtGui.QVector2D.dotProduct(v1, v2)


    :param v1: :class:`PySide.QtGui.QVector2D`
    :param v2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtCore.qreal`




    Returns the dot product of ``v1`` and ``v2`` .



.. method:: PySide.QtGui.QVector2D.isNull()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the x and y coordinates are set to 0.0, otherwise returns false.



.. method:: PySide.QtGui.QVector2D.length()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the length of the vector from the origin.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.lengthSquared`  :meth:`PySide.QtGui.QVector2D.normalized` 


.. method:: PySide.QtGui.QVector2D.lengthSquared()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the squared length of the vector from the origin. This is equivalent to the dot product of the vector with itself.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.length`  :meth:`PySide.QtGui.QVector2D.dotProduct` 


.. method:: PySide.QtGui.QVector2D.normalize()






    Normalizes the currect vector in place. Nothing happens if this vector is a null vector or the length of the vector is very close to 1.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.length`  :meth:`PySide.QtGui.QVector2D.normalized` 


.. method:: PySide.QtGui.QVector2D.normalized()


    :rtype: :class:`PySide.QtGui.QVector2D`




    Returns the normalized unit vector form of this vector.

    If this vector is null, then a null vector is returned. If the length of the vector is very close to 1, then the vector will be returned as-is. Otherwise the normalized form of the vector of length 1 will be returned.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.length`  :meth:`PySide.QtGui.QVector2D.normalize` 


.. method:: PySide.QtGui.QVector2D.__ne__(, v2)


    :param v2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QVector2D.__mul__(, factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector2D`







.. method:: PySide.QtGui.QVector2D.__mul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector2D`







.. method:: PySide.QtGui.QVector2D.__mul__(, v2)


    :param v2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtGui.QVector2D`







.. method:: PySide.QtGui.QVector2D.__imul__(vector)


    :param vector: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtGui.QVector2D`




    Multiplies the components of this vector by the corresponding components in ``vector`` .



.. method:: PySide.QtGui.QVector2D.__imul__(factor)


    :param factor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector2D`




    Multiplies this vector's coordinates by the given ``factor`` , and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.operator/=` 


.. method:: PySide.QtGui.QVector2D.__add__(, v2)


    :param v2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtGui.QVector2D`







.. method:: PySide.QtGui.QVector2D.__iadd__(vector)


    :param vector: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtGui.QVector2D`




    Adds the given ``vector`` to this vector and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.operator-=` 


.. method:: PySide.QtGui.QVector2D.__sub__(, v2)


    :param v2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtGui.QVector2D`







.. method:: PySide.QtGui.QVector2D.__sub__()


    :rtype: :class:`PySide.QtGui.QVector2D`







.. method:: PySide.QtGui.QVector2D.__isub__(vector)


    :param vector: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtGui.QVector2D`




    Subtracts the given ``vector`` from this vector and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.operator+=` 


.. method:: PySide.QtGui.QVector2D.__div__(, divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector2D`







.. method:: PySide.QtGui.QVector2D.__idiv__(divisor)


    :param divisor: :class:`PySide.QtCore.qreal`
    :rtype: :class:`PySide.QtGui.QVector2D`




    Divides this vector's coordinates by the given ``divisor`` , and returns a reference to this vector.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.operator\*=` 


.. method:: PySide.QtGui.QVector2D.__eq__(, v2)


    :param v2: :class:`PySide.QtGui.QVector2D`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QVector2D.setX(x)


    :param x: :class:`PySide.QtCore.qreal`




    Sets the x coordinate of this point to the given ``x`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.x`  :meth:`PySide.QtGui.QVector2D.setY` 


.. method:: PySide.QtGui.QVector2D.setY(y)


    :param y: :class:`PySide.QtCore.qreal`




    Sets the y coordinate of this point to the given ``y`` coordinate.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.y`  :meth:`PySide.QtGui.QVector2D.setX` 


.. method:: PySide.QtGui.QVector2D.toPoint()


    :rtype: :class:`PySide.QtCore.QPoint`




    Returns the :class:`PySide.QtCore.QPoint` form of this 2D vector.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.toPointF`  :meth:`PySide.QtGui.QVector2D.toVector3D` 


.. method:: PySide.QtGui.QVector2D.toPointF()


    :rtype: :class:`PySide.QtCore.QPointF`




    Returns the :class:`PySide.QtCore.QPointF` form of this 2D vector.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.toPoint`  :meth:`PySide.QtGui.QVector2D.toVector3D` 


.. method:: PySide.QtGui.QVector2D.toTuple()


    :rtype: :class:`PyObject`







.. method:: PySide.QtGui.QVector2D.toVector3D()


    :rtype: :class:`PySide.QtGui.QVector3D`




    Returns the 3D form of this 2D vector, with the z coordinate set to zero.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.toVector4D`  :meth:`PySide.QtGui.QVector2D.toPoint` 


.. method:: PySide.QtGui.QVector2D.toVector4D()


    :rtype: :class:`PySide.QtGui.QVector4D`




    Returns the 4D form of this 2D vector, with the z and w coordinates set to zero.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.toVector3D`  :meth:`PySide.QtGui.QVector2D.toPoint` 


.. method:: PySide.QtGui.QVector2D.x()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the x coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.setX`  :meth:`PySide.QtGui.QVector2D.y` 


.. method:: PySide.QtGui.QVector2D.y()


    :rtype: :class:`PySide.QtCore.qreal`




    Returns the y coordinate of this point.

    .. seealso::  :meth:`PySide.QtGui.QVector2D.setY`  :meth:`PySide.QtGui.QVector2D.x` 



