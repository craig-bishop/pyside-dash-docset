.. module:: PySide.QtGui
.. _QLineEdit:

QLineEdit
*********

.. inheritance-diagram:: QLineEdit
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`alignment<PySide.QtGui.QLineEdit.alignment>` ()
*    def :meth:`backspace<PySide.QtGui.QLineEdit.backspace>` ()
*    def :meth:`completer<PySide.QtGui.QLineEdit.completer>` ()
*    def :meth:`createStandardContextMenu<PySide.QtGui.QLineEdit.createStandardContextMenu>` ()
*    def :meth:`cursorBackward<PySide.QtGui.QLineEdit.cursorBackward>` (mark[, steps=1])
*    def :meth:`cursorForward<PySide.QtGui.QLineEdit.cursorForward>` (mark[, steps=1])
*    def :meth:`cursorPosition<PySide.QtGui.QLineEdit.cursorPosition>` ()
*    def :meth:`cursorPositionAt<PySide.QtGui.QLineEdit.cursorPositionAt>` (pos)
*    def :meth:`cursorRect<PySide.QtGui.QLineEdit.cursorRect>` ()
*    def :meth:`cursorWordBackward<PySide.QtGui.QLineEdit.cursorWordBackward>` (mark)
*    def :meth:`cursorWordForward<PySide.QtGui.QLineEdit.cursorWordForward>` (mark)
*    def :meth:`del_<PySide.QtGui.QLineEdit.del_>` ()
*    def :meth:`deselect<PySide.QtGui.QLineEdit.deselect>` ()
*    def :meth:`displayText<PySide.QtGui.QLineEdit.displayText>` ()
*    def :meth:`dragEnabled<PySide.QtGui.QLineEdit.dragEnabled>` ()
*    def :meth:`echoMode<PySide.QtGui.QLineEdit.echoMode>` ()
*    def :meth:`end<PySide.QtGui.QLineEdit.end>` (mark)
*    def :meth:`getTextMargins<PySide.QtGui.QLineEdit.getTextMargins>` ()
*    def :meth:`hasAcceptableInput<PySide.QtGui.QLineEdit.hasAcceptableInput>` ()
*    def :meth:`hasFrame<PySide.QtGui.QLineEdit.hasFrame>` ()
*    def :meth:`hasSelectedText<PySide.QtGui.QLineEdit.hasSelectedText>` ()
*    def :meth:`home<PySide.QtGui.QLineEdit.home>` (mark)
*    def :meth:`initStyleOption<PySide.QtGui.QLineEdit.initStyleOption>` (option)
*    def :meth:`inputMask<PySide.QtGui.QLineEdit.inputMask>` ()
*    def :meth:`insert<PySide.QtGui.QLineEdit.insert>` (arg__1)
*    def :meth:`isModified<PySide.QtGui.QLineEdit.isModified>` ()
*    def :meth:`isReadOnly<PySide.QtGui.QLineEdit.isReadOnly>` ()
*    def :meth:`isRedoAvailable<PySide.QtGui.QLineEdit.isRedoAvailable>` ()
*    def :meth:`isUndoAvailable<PySide.QtGui.QLineEdit.isUndoAvailable>` ()
*    def :meth:`maxLength<PySide.QtGui.QLineEdit.maxLength>` ()
*    def :meth:`placeholderText<PySide.QtGui.QLineEdit.placeholderText>` ()
*    def :meth:`selectedText<PySide.QtGui.QLineEdit.selectedText>` ()
*    def :meth:`selectionStart<PySide.QtGui.QLineEdit.selectionStart>` ()
*    def :meth:`setAlignment<PySide.QtGui.QLineEdit.setAlignment>` (flag)
*    def :meth:`setCompleter<PySide.QtGui.QLineEdit.setCompleter>` (completer)
*    def :meth:`setCursorPosition<PySide.QtGui.QLineEdit.setCursorPosition>` (arg__1)
*    def :meth:`setDragEnabled<PySide.QtGui.QLineEdit.setDragEnabled>` (b)
*    def :meth:`setEchoMode<PySide.QtGui.QLineEdit.setEchoMode>` (arg__1)
*    def :meth:`setFrame<PySide.QtGui.QLineEdit.setFrame>` (arg__1)
*    def :meth:`setInputMask<PySide.QtGui.QLineEdit.setInputMask>` (inputMask)
*    def :meth:`setMaxLength<PySide.QtGui.QLineEdit.setMaxLength>` (arg__1)
*    def :meth:`setModified<PySide.QtGui.QLineEdit.setModified>` (arg__1)
*    def :meth:`setPlaceholderText<PySide.QtGui.QLineEdit.setPlaceholderText>` (arg__1)
*    def :meth:`setReadOnly<PySide.QtGui.QLineEdit.setReadOnly>` (arg__1)
*    def :meth:`setSelection<PySide.QtGui.QLineEdit.setSelection>` (arg__1, arg__2)
*    def :meth:`setTextMargins<PySide.QtGui.QLineEdit.setTextMargins>` (left, top, right, bottom)
*    def :meth:`setTextMargins<PySide.QtGui.QLineEdit.setTextMargins>` (margins)
*    def :meth:`setValidator<PySide.QtGui.QLineEdit.setValidator>` (arg__1)
*    def :meth:`text<PySide.QtGui.QLineEdit.text>` ()
*    def :meth:`textMargins<PySide.QtGui.QLineEdit.textMargins>` ()
*    def :meth:`validator<PySide.QtGui.QLineEdit.validator>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`clear<PySide.QtGui.QLineEdit.clear>` ()
*    def :meth:`copy<PySide.QtGui.QLineEdit.copy>` ()
*    def :meth:`cut<PySide.QtGui.QLineEdit.cut>` ()
*    def :meth:`paste<PySide.QtGui.QLineEdit.paste>` ()
*    def :meth:`redo<PySide.QtGui.QLineEdit.redo>` ()
*    def :meth:`selectAll<PySide.QtGui.QLineEdit.selectAll>` ()
*    def :meth:`setText<PySide.QtGui.QLineEdit.setText>` (arg__1)
*    def :meth:`undo<PySide.QtGui.QLineEdit.undo>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`cursorPositionChanged<PySide.QtGui.QLineEdit.cursorPositionChanged>` (arg__1, arg__2)
*    def :meth:`editingFinished<PySide.QtGui.QLineEdit.editingFinished>` ()
*    def :meth:`returnPressed<PySide.QtGui.QLineEdit.returnPressed>` ()
*    def :meth:`selectionChanged<PySide.QtGui.QLineEdit.selectionChanged>` ()
*    def :meth:`textChanged<PySide.QtGui.QLineEdit.textChanged>` (arg__1)
*    def :meth:`textEdited<PySide.QtGui.QLineEdit.textEdited>` (arg__1)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QLineEdit` widget is a one-line text editor.

    A line edit allows the user to enter and edit a single line of plain text with a useful collection of editing functions, including undo and redo, cut and paste, and drag and drop.

    By changing the :meth:`PySide.QtGui.QLineEdit.echoMode` of a line edit, it can also be used as a "write-only" field, for inputs such as passwords.

    The length of the text can be constrained to :meth:`PySide.QtGui.QLineEdit.maxLength` . The text can be arbitrarily constrained using a :meth:`PySide.QtGui.QLineEdit.validator` or an :meth:`PySide.QtGui.QLineEdit.inputMask` , or both. When switching between a validator and an input mask on the same line edit, it is best to clear the validator or input mask to prevent undefined behavior.

    A related class is :class:`PySide.QtGui.QTextEdit` which allows multi-line, rich text editing.

    You can change the text with :meth:`PySide.QtGui.QLineEdit.setText` or :meth:`PySide.QtGui.QLineEdit.insert` . The text is retrieved with :meth:`PySide.QtGui.QLineEdit.text` ; the displayed text (which may be different, see :attr:`QLineEdit.EchoMode` ) is retrieved with :meth:`PySide.QtGui.QLineEdit.displayText` . Text can be selected with :meth:`PySide.QtGui.QLineEdit.setSelection` or :meth:`PySide.QtGui.QLineEdit.selectAll` , and the selection can be :meth:`PySide.QtGui.QLineEdit.cut` , :meth:`PySide.QtGui.QLineEdit.copy` ied and :meth:`PySide.QtGui.QLineEdit.paste` d. The text can be aligned with :meth:`PySide.QtGui.QLineEdit.setAlignment` .

    When the text changes the :meth:`PySide.QtGui.QLineEdit.textChanged` signal is emitted; when the text changes other than by calling :meth:`PySide.QtGui.QLineEdit.setText` the :meth:`PySide.QtGui.QLineEdit.textEdited` signal is emitted; when the cursor is moved the :meth:`PySide.QtGui.QLineEdit.cursorPositionChanged` signal is emitted; and when the Return or Enter key is pressed the :meth:`PySide.QtGui.QLineEdit.returnPressed` signal is emitted.

    When editing is finished, either because the line edit lost focus or Return/Enter is pressed the :meth:`PySide.QtGui.QLineEdit.editingFinished` signal is emitted.

    Note that if there is a validator set on the line edit, the :meth:`PySide.QtGui.QLineEdit.returnPressed` / :meth:`PySide.QtGui.QLineEdit.editingFinished` signals will only be emitted if the validator returns :attr:`QValidator.Acceptable<QValidator.State>` .

    By default, QLineEdits have a frame as specified by the Windows and Motif style guides; you can turn it off by calling setFrame(false).

    The default key bindings are described below. The line edit also provides a context menu (usually invoked by a right mouse click) that presents some of these editing options.

    +-----------------+---------------------------------------------------------+
    |Keypress         |Action                                                   |
    +-----------------+---------------------------------------------------------+
    |Left Arrow       |Moves the cursor one character to the left.              |
    +-----------------+---------------------------------------------------------+
    |Shift+Left Arrow |Moves and selects text one character to the left.        |
    +-----------------+---------------------------------------------------------+
    |Right Arrow      |Moves the cursor one character to the right.             |
    +-----------------+---------------------------------------------------------+
    |Shift+Right Arrow|Moves and selects text one character to the right.       |
    +-----------------+---------------------------------------------------------+
    |Home             |Moves the cursor to the beginning of the line.           |
    +-----------------+---------------------------------------------------------+
    |End              |Moves the cursor to the end of the line.                 |
    +-----------------+---------------------------------------------------------+
    |Backspace        |Deletes the character to the left of the cursor.         |
    +-----------------+---------------------------------------------------------+
    |Ctrl+Backspace   |Deletes the word to the left of the cursor.              |
    +-----------------+---------------------------------------------------------+
    |Delete           |Deletes the character to the right of the cursor.        |
    +-----------------+---------------------------------------------------------+
    |Ctrl+Delete      |Deletes the word to the right of the cursor.             |
    +-----------------+---------------------------------------------------------+
    |Ctrl+A           |Select all.                                              |
    +-----------------+---------------------------------------------------------+
    |Ctrl+C           |Copies the selected text to the clipboard.               |
    +-----------------+---------------------------------------------------------+
    |Ctrl+Insert      |Copies the selected text to the clipboard.               |
    +-----------------+---------------------------------------------------------+
    |Ctrl+K           |Deletes to the end of the line.                          |
    +-----------------+---------------------------------------------------------+
    |Ctrl+V           |Pastes the clipboard text into line edit.                |
    +-----------------+---------------------------------------------------------+
    |Shift+Insert     |Pastes the clipboard text into line edit.                |
    +-----------------+---------------------------------------------------------+
    |Ctrl+X           |Deletes the selected text and copies it to the clipboard.|
    +-----------------+---------------------------------------------------------+
    |Shift+Delete     |Deletes the selected text and copies it to the clipboard.|
    +-----------------+---------------------------------------------------------+
    |Ctrl+Z           |Undoes the last operation.                               |
    +-----------------+---------------------------------------------------------+
    |Ctrl+Y           |Redoes the last undone operation.                        |
    +-----------------+---------------------------------------------------------+

    Any other key sequence that represents a valid character, will cause the character to be inserted into the line edit.

    +------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/macintosh-lineedit.png|A line edit shown in the :ref:`Macintosh widget style<gallery-macintosh.html>` . |
    +------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/windows-lineedit.png  |A line edit shown in the :ref:`Windows XP widget style<gallery-windowsxp.html>` .|
    +------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-lineedit.png|A line edit shown in the :ref:`Plastique widget style<gallery-plastique.html>` . |
    +------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QTextEdit`  :class:`PySide.QtGui.QLabel`  :class:`PySide.QtGui.QComboBox`  :ref:`GUI Design Handbook: Field, Entry<guibooks.html>`  :ref:`Line Edits Example<widgets/lineedits>` 

.. class:: QLineEdit([parent=None])
           QLineEdit(arg__1[, parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`
    :param arg__1: unicode

    Constructs a line edit with no text.

    The maximum text length is set to 32767 characters.

    The ``parent`` argument is sent to the :class:`PySide.QtGui.QWidget` constructor.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setText`  :meth:`PySide.QtGui.QLineEdit.setMaxLength` 

    Constructs a line edit containing the text ``contents`` .

    The cursor position is set to the end of the line and the maximum text length to 32767 characters.

    The ``parent`` and argument is sent to the :class:`PySide.QtGui.QWidget` constructor.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.text`  :meth:`PySide.QtGui.QLineEdit.setMaxLength` 

.. attribute:: PySide.QtGui.QLineEdit.EchoMode

    This enum type describes how a line edit should display its contents.

    +----------------------------+---------------------------------------------------------------------------------------------------------------------------+
    |Constant                    |Description                                                                                                                |
    +============================+===========================================================================================================================+
    |QLineEdit.Normal            |Display characters as they are entered. This is the default.                                                               |
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------+
    |QLineEdit.NoEcho            |Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.|
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------+
    |QLineEdit.Password          |Display asterisks instead of the characters actually entered.                                                              |
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------+
    |QLineEdit.PasswordEchoOnEdit|Display characters as they are entered while editing otherwise display asterisks.                                          |
    +----------------------------+---------------------------------------------------------------------------------------------------------------------------+

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setEchoMode`  :meth:`PySide.QtGui.QLineEdit.echoMode` 

.. method:: PySide.QtGui.QLineEdit.alignment()


    :rtype: :class:`PySide.QtCore.Qt.Alignment`




    This property holds the alignment of the line edit.

    Both horizontal and vertical alignment is allowed here, :attr:`Qt.AlignJustify<Qt.AlignmentFlag>` will map to :attr:`Qt.AlignLeft<Qt.AlignmentFlag>` .

    By default, this property contains a combination of :attr:`Qt.AlignLeft<Qt.AlignmentFlag>` and :attr:`Qt.AlignVCenter<Qt.AlignmentFlag>` .

    .. seealso::  :class:`Qt.Alignment` 


.. method:: PySide.QtGui.QLineEdit.backspace()






    If no text is selected, deletes the character to the left of the text cursor and moves the cursor one position to the left. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.

    .. seealso::  :meth:`~PySide.QtGui.QLineEdit.del` 


.. method:: PySide.QtGui.QLineEdit.clear()






    Clears the contents of the line edit.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setText`  :meth:`PySide.QtGui.QLineEdit.insert` 


.. method:: PySide.QtGui.QLineEdit.completer()


    :rtype: :class:`PySide.QtGui.QCompleter`




    Returns the current :class:`PySide.QtGui.QCompleter` that provides completions.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setCompleter` 


.. method:: PySide.QtGui.QLineEdit.copy()






    Copies the selected text to the clipboard, if there is any, and if :meth:`PySide.QtGui.QLineEdit.echoMode` is :attr:`Normal<QLineEdit.EchoMode>` .

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.cut`  :meth:`PySide.QtGui.QLineEdit.paste` 


.. method:: PySide.QtGui.QLineEdit.createStandardContextMenu()


    :rtype: :class:`PySide.QtGui.QMenu`




    This function creates the standard context menu which is shown when the user clicks on the line edit with the right mouse button. It is called from the default :meth:`PySide.QtGui.QLineEdit.contextMenuEvent` handler. The popup menu's ownership is transferred to the caller.



.. method:: PySide.QtGui.QLineEdit.cursorBackward(mark[, steps=1])


    :param mark: :class:`PySide.QtCore.bool`
    :param steps: :class:`PySide.QtCore.int`




    Moves the cursor back ``steps`` characters. If ``mark`` is true each character moved over is added to the selection; if ``mark`` is false the selection is cleared.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.cursorForward` 


.. method:: PySide.QtGui.QLineEdit.cursorForward(mark[, steps=1])


    :param mark: :class:`PySide.QtCore.bool`
    :param steps: :class:`PySide.QtCore.int`




    Moves the cursor forward ``steps`` characters. If ``mark`` is true each character moved over is added to the selection; if ``mark`` is false the selection is cleared.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.cursorBackward` 


.. method:: PySide.QtGui.QLineEdit.cursorPosition()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the current cursor position for this line edit.

    Setting the cursor position causes a repaint when appropriate.

    By default, this property contains a value of 0.



.. method:: PySide.QtGui.QLineEdit.cursorPositionAt(pos)


    :param pos: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtCore.int`




    Returns the cursor position under the point ``pos`` .



.. method:: PySide.QtGui.QLineEdit.cursorPositionChanged(arg__1, arg__2)


    :param arg__1: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QLineEdit.cursorRect()


    :rtype: :class:`PySide.QtCore.QRect`




    Returns a rectangle that includes the lineedit cursor.



.. method:: PySide.QtGui.QLineEdit.cursorWordBackward(mark)


    :param mark: :class:`PySide.QtCore.bool`




    Moves the cursor one word backward. If ``mark`` is true, the word is also selected.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.cursorWordForward` 


.. method:: PySide.QtGui.QLineEdit.cursorWordForward(mark)


    :param mark: :class:`PySide.QtCore.bool`




    Moves the cursor one word forward. If ``mark`` is true, the word is also selected.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.cursorWordBackward` 


.. method:: PySide.QtGui.QLineEdit.cut()






    Copies the selected text to the clipboard and deletes it, if there is any, and if :meth:`PySide.QtGui.QLineEdit.echoMode` is :attr:`Normal<QLineEdit.EchoMode>` .

    If the current validator disallows deleting the selected text, :meth:`PySide.QtGui.QLineEdit.cut` will copy without deleting.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.copy`  :meth:`PySide.QtGui.QLineEdit.paste`  :meth:`PySide.QtGui.QLineEdit.setValidator` 


.. method:: PySide.QtGui.QLineEdit.del_()






    If no text is selected, deletes the character to the right of the text cursor. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.backspace` 


.. method:: PySide.QtGui.QLineEdit.deselect()






    Deselects any selected text.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setSelection`  :meth:`PySide.QtGui.QLineEdit.selectAll` 


.. method:: PySide.QtGui.QLineEdit.displayText()


    :rtype: unicode




    This property holds the displayed text.

    If :meth:`PySide.QtGui.QLineEdit.echoMode` is :attr:`Normal<QLineEdit.EchoMode>` this returns the same as :meth:`PySide.QtGui.QLineEdit.text` ; if :attr:`QLineEdit.EchoMode` is :attr:`Password<QLineEdit.EchoMode>` or :attr:`PasswordEchoOnEdit<QLineEdit.EchoMode>` it returns a string of asterisks :meth:`PySide.QtGui.QLineEdit.text` . :meth:`~PySide.QtGui.QLineEdit.length` characters long, e.g. "\*\*\*\*\*\*"; if :attr:`QLineEdit.EchoMode` is :attr:`NoEcho<QLineEdit.EchoMode>` returns an empty string, "".

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setEchoMode`  :meth:`PySide.QtGui.QLineEdit.text`  :attr:`QLineEdit.EchoMode` 


.. method:: PySide.QtGui.QLineEdit.dragEnabled()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the lineedit starts a drag if the user presses and moves the mouse on some selected text.

    Dragging is disabled by default.



.. method:: PySide.QtGui.QLineEdit.echoMode()


    :rtype: :attr:`PySide.QtGui.QLineEdit.EchoMode`




    This property holds the line edit's echo mode.

    The echo mode determines how the text entered in the line edit is displayed (or echoed) to the user.

    The most common setting is :attr:`Normal<QLineEdit.EchoMode>` , in which the text entered by the user is displayed verbatim, but :class:`PySide.QtGui.QLineEdit` also supports modes that allow the entered text to be suppressed or obscured: these include :attr:`NoEcho<QLineEdit.EchoMode>` , :attr:`Password<QLineEdit.EchoMode>` and :attr:`PasswordEchoOnEdit<QLineEdit.EchoMode>` .

    The widget's display and the ability to copy or drag the text is affected by this setting.

    By default, this property is set to :attr:`Normal<QLineEdit.EchoMode>` .

    .. seealso::  :attr:`QLineEdit.EchoMode`  :meth:`PySide.QtGui.QLineEdit.displayText` 


.. method:: PySide.QtGui.QLineEdit.editingFinished()








.. method:: PySide.QtGui.QLineEdit.end(mark)


    :param mark: :class:`PySide.QtCore.bool`




    Moves the text cursor to the end of the line unless it is already there. If ``mark`` is true, text is selected towards the last position; otherwise, any selected text is unselected if the cursor is moved.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.home` 


.. method:: PySide.QtGui.QLineEdit.getTextMargins()






    Returns the widget's text margins for ``left`` , ``top`` , ``right`` , and ``bottom`` .

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setTextMargins` 


.. method:: PySide.QtGui.QLineEdit.hasAcceptableInput()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the input satisfies the :meth:`PySide.QtGui.QLineEdit.inputMask` and the validator..

    By default, this property is true.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setInputMask`  :meth:`PySide.QtGui.QLineEdit.setValidator` 


.. method:: PySide.QtGui.QLineEdit.hasFrame()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the line edit draws itself with a frame.

    If enabled (the default) the line edit draws itself inside a frame, otherwise the line edit draws itself without any frame.



.. method:: PySide.QtGui.QLineEdit.hasSelectedText()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether there is any text selected.

    :meth:`PySide.QtGui.QLineEdit.hasSelectedText` returns true if some or all of the text has been selected by the user; otherwise returns false.

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.selectedText` 


.. method:: PySide.QtGui.QLineEdit.home(mark)


    :param mark: :class:`PySide.QtCore.bool`




    Moves the text cursor to the beginning of the line unless it is already there. If ``mark`` is true, text is selected towards the first position; otherwise, any selected text is unselected if the cursor is moved.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.end` 


.. method:: PySide.QtGui.QLineEdit.initStyleOption(option)


    :param option: :class:`PySide.QtGui.QStyleOptionFrame`




    Initialize ``option`` with the values from this :class:`PySide.QtGui.QLineEdit` . This method is useful for subclasses when they need a :class:`PySide.QtGui.QStyleOptionFrame` or :class:`PySide.QtGui.QStyleOptionFrameV2` , but don't want to fill in all the information themselves. This function will check the version of the :class:`PySide.QtGui.QStyleOptionFrame` and fill in the additional values for a :class:`PySide.QtGui.QStyleOptionFrameV2` .

    .. seealso::  :meth:`QStyleOption.initFrom()<PySide.QtGui.QStyleOption.initFrom>` 


.. method:: PySide.QtGui.QLineEdit.inputMask()


    :rtype: unicode




    This property holds The validation input mask.

    If no mask is set, :meth:`PySide.QtGui.QLineEdit.inputMask` returns an empty string.

    Sets the :class:`PySide.QtGui.QLineEdit` 's validation mask. Validators can be used instead of, or in conjunction with masks; see :meth:`PySide.QtGui.QLineEdit.setValidator` .

    Unset the mask and return to normal :class:`PySide.QtGui.QLineEdit` operation by passing an empty string ("") or just calling :meth:`PySide.QtGui.QLineEdit.setInputMask` with no arguments.

    The table below shows the characters that can be used in an input mask. A space character, the default character for a blank, is needed for cases where a character is *permitted but not required* .

    +---------+----------------------------------------------------------------------------------+
    |Character|Meaning                                                                           |
    +---------+----------------------------------------------------------------------------------+
    |``A``\   |ASCII alphabetic character required. A-Z, a-z.                                    |
    +---------+----------------------------------------------------------------------------------+
    |``a``\   |ASCII alphabetic character permitted but not required.                            |
    +---------+----------------------------------------------------------------------------------+
    |``N``\   |ASCII alphanumeric character required. A-Z, a-z, 0-9.                             |
    +---------+----------------------------------------------------------------------------------+
    |``n``\   |ASCII alphanumeric character permitted but not required.                          |
    +---------+----------------------------------------------------------------------------------+
    |``X``\   |Any character required.                                                           |
    +---------+----------------------------------------------------------------------------------+
    |``x``\   |Any character permitted but not required.                                         |
    +---------+----------------------------------------------------------------------------------+
    |``9``\   |ASCII digit required. 0-9.                                                        |
    +---------+----------------------------------------------------------------------------------+
    |``0``\   |ASCII digit permitted but not required.                                           |
    +---------+----------------------------------------------------------------------------------+
    |``D``\   |ASCII digit required. 1-9.                                                        |
    +---------+----------------------------------------------------------------------------------+
    |``d``\   |ASCII digit permitted but not required (1-9).                                     |
    +---------+----------------------------------------------------------------------------------+
    |``#``\   |ASCII digit or plus/minus sign permitted but not required.                        |
    +---------+----------------------------------------------------------------------------------+
    |``H``\   |Hexadecimal character required. A-F, a-f, 0-9.                                    |
    +---------+----------------------------------------------------------------------------------+
    |``h``\   |Hexadecimal character permitted but not required.                                 |
    +---------+----------------------------------------------------------------------------------+
    |``B``\   |Binary character required. 0-1.                                                   |
    +---------+----------------------------------------------------------------------------------+
    |``b``\   |Binary character permitted but not required.                                      |
    +---------+----------------------------------------------------------------------------------+
    |``>``\   |All following alphabetic characters are uppercased.                               |
    +---------+----------------------------------------------------------------------------------+
    |``<``\   |All following alphabetic characters are lowercased.                               |
    +---------+----------------------------------------------------------------------------------+
    |``!``\   |Switch off case conversion.                                                       |
    +---------+----------------------------------------------------------------------------------+
    |``\``\   |Use ``\`` to escape the special characters listed above to use them as separators.|
    +---------+----------------------------------------------------------------------------------+

    The mask consists of a string of mask characters and separators, optionally followed by a semicolon and the character used for blanks. The blank characters are always removed from the text after editing.

    Examples:

    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |Mask                                 |Notes                                                                                       |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``000.000.000.000;_``\               |IP address; blanks are ``_`` .                                                              |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``HH:HH:HH:HH:HH:HH;_``\             |MAC address                                                                                 |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``0000-00-00``\                      |ISO Date; blanks are ``space``\                                                             |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``>AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#``\|License number; blanks are ``-`` and all (alphabetic) characters are converted to uppercase.|
    +-------------------------------------+--------------------------------------------------------------------------------------------+

    To get range control (e.g., for an IP address) use masks together with :meth:`validators<PySide.QtGui.QLineEdit.setValidator>` .

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.maxLength` 


.. method:: PySide.QtGui.QLineEdit.insert(arg__1)


    :param arg__1: unicode




    Deletes any selected text, inserts ``newText`` , and validates the result. If it is valid, it sets it as the new contents of the line edit.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setText`  :meth:`PySide.QtGui.QLineEdit.clear` 


.. method:: PySide.QtGui.QLineEdit.isModified()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the line edit's contents has been modified by the user.

    The modified flag is never read by :class:`PySide.QtGui.QLineEdit` ; it has a default value of false and is changed to true whenever the user changes the line edit's contents.

    This is useful for things that need to provide a default value but do not start out knowing what the default should be (perhaps it depends on other fields on the form). Start the line edit without the best default, and when the default is known, if modified() returns false (the user hasn't entered any text), insert the default value.

    Calling :meth:`PySide.QtGui.QLineEdit.setText` resets the modified flag to false.



.. method:: PySide.QtGui.QLineEdit.isReadOnly()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether the line edit is read only..

    In read-only mode, the user can still copy the text to the clipboard, or drag and drop the text (if :meth:`PySide.QtGui.QLineEdit.echoMode` is :attr:`Normal<QLineEdit.EchoMode>` ), but cannot edit it.

    :class:`PySide.QtGui.QLineEdit` does not show a cursor in read-only mode.

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtGui.QWidget.setEnabled` 


.. method:: PySide.QtGui.QLineEdit.isRedoAvailable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether redo is available.

    Redo becomes available once the user has performed one or more undo operations on text in the line edit.

    By default, this property is false.



.. method:: PySide.QtGui.QLineEdit.isUndoAvailable()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether undo is available.

    Undo becomes available once the user has modified the text in the line edit.

    By default, this property is false.



.. method:: PySide.QtGui.QLineEdit.maxLength()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the maximum permitted length of the text.

    If the text is too long, it is truncated at the limit.

    If truncation occurs any selected text will be unselected, the cursor position is set to 0 and the first part of the string is shown.

    If the line edit has an input mask, the mask defines the maximum string length.

    By default, this property contains a value of 32767.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.inputMask` 


.. method:: PySide.QtGui.QLineEdit.paste()






    Inserts the clipboard's text at the cursor position, deleting any selected text, providing the line edit is not :meth:`read-only<PySide.QtGui.QLineEdit.readOnly>` .

    If the end result would not be acceptable to the current :meth:`validator<PySide.QtGui.QLineEdit.setValidator>` , nothing happens.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.copy`  :meth:`PySide.QtGui.QLineEdit.cut` 


.. method:: PySide.QtGui.QLineEdit.placeholderText()


    :rtype: unicode




    This property holds the line edit's placeholder text.

    Setting this property makes the line edit display a grayed-out placeholder text as long as the :meth:`PySide.QtGui.QLineEdit.text` is empty and the widget doesn't have focus.

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.text` 


.. method:: PySide.QtGui.QLineEdit.redo()






    Redoes the last operation if redo is :meth:`available<PySide.QtGui.QLineEdit.redoAvailable>` .



.. method:: PySide.QtGui.QLineEdit.returnPressed()








.. method:: PySide.QtGui.QLineEdit.selectAll()






    Selects all the text (i.e. highlights it) and moves the cursor to the end. This is useful when a default value has been inserted because if the user types before clicking on the widget, the selected text will be deleted.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setSelection`  :meth:`PySide.QtGui.QLineEdit.deselect` 


.. method:: PySide.QtGui.QLineEdit.selectedText()


    :rtype: unicode




    This property holds the selected text.

    If there is no selected text this property's value is an empty string.

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.hasSelectedText` 


.. method:: PySide.QtGui.QLineEdit.selectionChanged()








.. method:: PySide.QtGui.QLineEdit.selectionStart()


    :rtype: :class:`PySide.QtCore.int`




    :meth:`PySide.QtGui.QLineEdit.selectionStart` returns the index of the first selected character in the line edit or -1 if no text is selected.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.selectedText` 


.. method:: PySide.QtGui.QLineEdit.setAlignment(flag)


    :param flag: :class:`PySide.QtCore.Qt.Alignment`




    This property holds the alignment of the line edit.

    Both horizontal and vertical alignment is allowed here, :attr:`Qt.AlignJustify<Qt.AlignmentFlag>` will map to :attr:`Qt.AlignLeft<Qt.AlignmentFlag>` .

    By default, this property contains a combination of :attr:`Qt.AlignLeft<Qt.AlignmentFlag>` and :attr:`Qt.AlignVCenter<Qt.AlignmentFlag>` .

    .. seealso::  :class:`Qt.Alignment` 


.. method:: PySide.QtGui.QLineEdit.setCompleter(completer)


    :param completer: :class:`PySide.QtGui.QCompleter`




    Sets this line edit to provide auto completions from the completer, ``c`` . The completion mode is set using :meth:`QCompleter.setCompletionMode()<PySide.QtGui.QCompleter.setCompletionMode>` .

    To use a :class:`PySide.QtGui.QCompleter` with a :class:`PySide.QtGui.QValidator` or :meth:`QLineEdit.inputMask<PySide.QtGui.QLineEdit.inputMask>` , you need to ensure that the model provided to :class:`PySide.QtGui.QCompleter` contains valid entries. You can use the :class:`PySide.QtGui.QSortFilterProxyModel` to ensure that the :class:`PySide.QtGui.QCompleter` 's model contains only valid entries.

    If ``c`` == 0, :meth:`PySide.QtGui.QLineEdit.setCompleter` removes the current completer, effectively disabling auto completion.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.completer`  :class:`PySide.QtGui.QCompleter` 


.. method:: PySide.QtGui.QLineEdit.setCursorPosition(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the current cursor position for this line edit.

    Setting the cursor position causes a repaint when appropriate.

    By default, this property contains a value of 0.



.. method:: PySide.QtGui.QLineEdit.setDragEnabled(b)


    :param b: :class:`PySide.QtCore.bool`




    This property holds whether the lineedit starts a drag if the user presses and moves the mouse on some selected text.

    Dragging is disabled by default.



.. method:: PySide.QtGui.QLineEdit.setEchoMode(arg__1)


    :param arg__1: :attr:`PySide.QtGui.QLineEdit.EchoMode`




    This property holds the line edit's echo mode.

    The echo mode determines how the text entered in the line edit is displayed (or echoed) to the user.

    The most common setting is :attr:`Normal<QLineEdit.EchoMode>` , in which the text entered by the user is displayed verbatim, but :class:`PySide.QtGui.QLineEdit` also supports modes that allow the entered text to be suppressed or obscured: these include :attr:`NoEcho<QLineEdit.EchoMode>` , :attr:`Password<QLineEdit.EchoMode>` and :attr:`PasswordEchoOnEdit<QLineEdit.EchoMode>` .

    The widget's display and the ability to copy or drag the text is affected by this setting.

    By default, this property is set to :attr:`Normal<QLineEdit.EchoMode>` .

    .. seealso::  :attr:`QLineEdit.EchoMode`  :meth:`PySide.QtGui.QLineEdit.displayText` 


.. method:: PySide.QtGui.QLineEdit.setFrame(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    This property holds whether the line edit draws itself with a frame.

    If enabled (the default) the line edit draws itself inside a frame, otherwise the line edit draws itself without any frame.



.. method:: PySide.QtGui.QLineEdit.setInputMask(inputMask)


    :param inputMask: unicode




    This property holds The validation input mask.

    If no mask is set, :meth:`PySide.QtGui.QLineEdit.inputMask` returns an empty string.

    Sets the :class:`PySide.QtGui.QLineEdit` 's validation mask. Validators can be used instead of, or in conjunction with masks; see :meth:`PySide.QtGui.QLineEdit.setValidator` .

    Unset the mask and return to normal :class:`PySide.QtGui.QLineEdit` operation by passing an empty string ("") or just calling :meth:`PySide.QtGui.QLineEdit.setInputMask` with no arguments.

    The table below shows the characters that can be used in an input mask. A space character, the default character for a blank, is needed for cases where a character is *permitted but not required* .

    +---------+----------------------------------------------------------------------------------+
    |Character|Meaning                                                                           |
    +---------+----------------------------------------------------------------------------------+
    |``A``\   |ASCII alphabetic character required. A-Z, a-z.                                    |
    +---------+----------------------------------------------------------------------------------+
    |``a``\   |ASCII alphabetic character permitted but not required.                            |
    +---------+----------------------------------------------------------------------------------+
    |``N``\   |ASCII alphanumeric character required. A-Z, a-z, 0-9.                             |
    +---------+----------------------------------------------------------------------------------+
    |``n``\   |ASCII alphanumeric character permitted but not required.                          |
    +---------+----------------------------------------------------------------------------------+
    |``X``\   |Any character required.                                                           |
    +---------+----------------------------------------------------------------------------------+
    |``x``\   |Any character permitted but not required.                                         |
    +---------+----------------------------------------------------------------------------------+
    |``9``\   |ASCII digit required. 0-9.                                                        |
    +---------+----------------------------------------------------------------------------------+
    |``0``\   |ASCII digit permitted but not required.                                           |
    +---------+----------------------------------------------------------------------------------+
    |``D``\   |ASCII digit required. 1-9.                                                        |
    +---------+----------------------------------------------------------------------------------+
    |``d``\   |ASCII digit permitted but not required (1-9).                                     |
    +---------+----------------------------------------------------------------------------------+
    |``#``\   |ASCII digit or plus/minus sign permitted but not required.                        |
    +---------+----------------------------------------------------------------------------------+
    |``H``\   |Hexadecimal character required. A-F, a-f, 0-9.                                    |
    +---------+----------------------------------------------------------------------------------+
    |``h``\   |Hexadecimal character permitted but not required.                                 |
    +---------+----------------------------------------------------------------------------------+
    |``B``\   |Binary character required. 0-1.                                                   |
    +---------+----------------------------------------------------------------------------------+
    |``b``\   |Binary character permitted but not required.                                      |
    +---------+----------------------------------------------------------------------------------+
    |``>``\   |All following alphabetic characters are uppercased.                               |
    +---------+----------------------------------------------------------------------------------+
    |``<``\   |All following alphabetic characters are lowercased.                               |
    +---------+----------------------------------------------------------------------------------+
    |``!``\   |Switch off case conversion.                                                       |
    +---------+----------------------------------------------------------------------------------+
    |``\``\   |Use ``\`` to escape the special characters listed above to use them as separators.|
    +---------+----------------------------------------------------------------------------------+

    The mask consists of a string of mask characters and separators, optionally followed by a semicolon and the character used for blanks. The blank characters are always removed from the text after editing.

    Examples:

    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |Mask                                 |Notes                                                                                       |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``000.000.000.000;_``\               |IP address; blanks are ``_`` .                                                              |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``HH:HH:HH:HH:HH:HH;_``\             |MAC address                                                                                 |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``0000-00-00``\                      |ISO Date; blanks are ``space``\                                                             |
    +-------------------------------------+--------------------------------------------------------------------------------------------+
    |``>AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#``\|License number; blanks are ``-`` and all (alphabetic) characters are converted to uppercase.|
    +-------------------------------------+--------------------------------------------------------------------------------------------+

    To get range control (e.g., for an IP address) use masks together with :meth:`validators<PySide.QtGui.QLineEdit.setValidator>` .

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.maxLength` 


.. method:: PySide.QtGui.QLineEdit.setMaxLength(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the maximum permitted length of the text.

    If the text is too long, it is truncated at the limit.

    If truncation occurs any selected text will be unselected, the cursor position is set to 0 and the first part of the string is shown.

    If the line edit has an input mask, the mask defines the maximum string length.

    By default, this property contains a value of 32767.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.inputMask` 


.. method:: PySide.QtGui.QLineEdit.setModified(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    This property holds whether the line edit's contents has been modified by the user.

    The modified flag is never read by :class:`PySide.QtGui.QLineEdit` ; it has a default value of false and is changed to true whenever the user changes the line edit's contents.

    This is useful for things that need to provide a default value but do not start out knowing what the default should be (perhaps it depends on other fields on the form). Start the line edit without the best default, and when the default is known, if modified() returns false (the user hasn't entered any text), insert the default value.

    Calling :meth:`PySide.QtGui.QLineEdit.setText` resets the modified flag to false.



.. method:: PySide.QtGui.QLineEdit.setPlaceholderText(arg__1)


    :param arg__1: unicode




    This property holds the line edit's placeholder text.

    Setting this property makes the line edit display a grayed-out placeholder text as long as the :meth:`PySide.QtGui.QLineEdit.text` is empty and the widget doesn't have focus.

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.text` 


.. method:: PySide.QtGui.QLineEdit.setReadOnly(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    This property holds whether the line edit is read only..

    In read-only mode, the user can still copy the text to the clipboard, or drag and drop the text (if :meth:`PySide.QtGui.QLineEdit.echoMode` is :attr:`Normal<QLineEdit.EchoMode>` ), but cannot edit it.

    :class:`PySide.QtGui.QLineEdit` does not show a cursor in read-only mode.

    By default, this property is false.

    .. seealso::  :meth:`PySide.QtGui.QWidget.setEnabled` 


.. method:: PySide.QtGui.QLineEdit.setSelection(arg__1, arg__2)


    :param arg__1: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.int`




    Selects text from position ``start`` and for ``length`` characters. Negative lengths are allowed.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.deselect`  :meth:`PySide.QtGui.QLineEdit.selectAll`  :meth:`PySide.QtGui.QLineEdit.selectedText` 


.. method:: PySide.QtGui.QLineEdit.setText(arg__1)


    :param arg__1: unicode




    This property holds the line edit's text.

    Setting this property clears the selection, clears the undo/redo history, moves the cursor to the end of the line and resets the :meth:`~PySide.QtGui.QLineEdit.modified` property to false. The text is not validated when inserted with :meth:`PySide.QtGui.QLineEdit.setText` .

    The text is truncated to :meth:`PySide.QtGui.QLineEdit.maxLength` length.

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.insert`  :meth:`PySide.QtGui.QLineEdit.clear` 


.. method:: PySide.QtGui.QLineEdit.setTextMargins(left, top, right, bottom)


    :param left: :class:`PySide.QtCore.int`
    :param top: :class:`PySide.QtCore.int`
    :param right: :class:`PySide.QtCore.int`
    :param bottom: :class:`PySide.QtCore.int`




    Sets the margins around the text inside the frame to have the sizes ``left`` , ``top`` , ``right`` , and ``bottom`` .

    See also :meth:`PySide.QtGui.QLineEdit.getTextMargins` .

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.textMargins` 


.. method:: PySide.QtGui.QLineEdit.setTextMargins(margins)


    :param margins: :class:`PySide.QtCore.QMargins`




    Sets the ``margins`` around the text inside the frame.

    See also :meth:`PySide.QtGui.QLineEdit.textMargins` .



.. method:: PySide.QtGui.QLineEdit.setValidator(arg__1)


    :param arg__1: :class:`PySide.QtGui.QValidator`




    Sets this line edit to only accept input that the validator, ``v`` , will accept. This allows you to place any arbitrary constraints on the text which may be entered.

    If ``v`` == 0, :meth:`PySide.QtGui.QLineEdit.setValidator` removes the current input validator. The initial setting is to have no input validator (i.e. any input is accepted up to :meth:`PySide.QtGui.QLineEdit.maxLength` ).

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.validator`  :class:`PySide.QtGui.QIntValidator`  :class:`PySide.QtGui.QDoubleValidator`  :class:`PySide.QtGui.QRegExpValidator` 


.. method:: PySide.QtGui.QLineEdit.text()


    :rtype: unicode




    This property holds the line edit's text.

    Setting this property clears the selection, clears the undo/redo history, moves the cursor to the end of the line and resets the :meth:`~PySide.QtGui.QLineEdit.modified` property to false. The text is not validated when inserted with :meth:`PySide.QtGui.QLineEdit.setText` .

    The text is truncated to :meth:`PySide.QtGui.QLineEdit.maxLength` length.

    By default, this property contains an empty string.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.insert`  :meth:`PySide.QtGui.QLineEdit.clear` 


.. method:: PySide.QtGui.QLineEdit.textChanged(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtGui.QLineEdit.textEdited(arg__1)


    :param arg__1: unicode






.. method:: PySide.QtGui.QLineEdit.textMargins()


    :rtype: :class:`PySide.QtCore.QMargins`




    Returns the widget's text margins.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setTextMargins` 


.. method:: PySide.QtGui.QLineEdit.undo()






    Undoes the last operation if undo is :meth:`available<PySide.QtGui.QLineEdit.undoAvailable>` . Deselects any current selection, and updates the selection start to the current cursor position.



.. method:: PySide.QtGui.QLineEdit.validator()


    :rtype: :class:`PySide.QtGui.QValidator`




    Returns a pointer to the current input validator, or 0 if no validator has been set.

    .. seealso::  :meth:`PySide.QtGui.QLineEdit.setValidator` 



