.. module:: PySide.QtGui
.. _QTreeWidgetItem:

QTreeWidgetItem
***************

.. inheritance-diagram:: QTreeWidgetItem
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addChild<PySide.QtGui.QTreeWidgetItem.addChild>` (child)
*    def :meth:`addChildren<PySide.QtGui.QTreeWidgetItem.addChildren>` (children)
*    def :meth:`background<PySide.QtGui.QTreeWidgetItem.background>` (column)
*    def :meth:`checkState<PySide.QtGui.QTreeWidgetItem.checkState>` (column)
*    def :meth:`child<PySide.QtGui.QTreeWidgetItem.child>` (index)
*    def :meth:`childCount<PySide.QtGui.QTreeWidgetItem.childCount>` ()
*    def :meth:`childIndicatorPolicy<PySide.QtGui.QTreeWidgetItem.childIndicatorPolicy>` ()
*    def :meth:`childrenCheckState<PySide.QtGui.QTreeWidgetItem.childrenCheckState>` (column)
*    def :meth:`columnCount<PySide.QtGui.QTreeWidgetItem.columnCount>` ()
*    def :meth:`emitDataChanged<PySide.QtGui.QTreeWidgetItem.emitDataChanged>` ()
*    def :meth:`executePendingSort<PySide.QtGui.QTreeWidgetItem.executePendingSort>` ()
*    def :meth:`flags<PySide.QtGui.QTreeWidgetItem.flags>` ()
*    def :meth:`font<PySide.QtGui.QTreeWidgetItem.font>` (column)
*    def :meth:`foreground<PySide.QtGui.QTreeWidgetItem.foreground>` (column)
*    def :meth:`icon<PySide.QtGui.QTreeWidgetItem.icon>` (column)
*    def :meth:`indexOfChild<PySide.QtGui.QTreeWidgetItem.indexOfChild>` (child)
*    def :meth:`insertChild<PySide.QtGui.QTreeWidgetItem.insertChild>` (index, child)
*    def :meth:`insertChildren<PySide.QtGui.QTreeWidgetItem.insertChildren>` (index, children)
*    def :meth:`isDisabled<PySide.QtGui.QTreeWidgetItem.isDisabled>` ()
*    def :meth:`isExpanded<PySide.QtGui.QTreeWidgetItem.isExpanded>` ()
*    def :meth:`isFirstColumnSpanned<PySide.QtGui.QTreeWidgetItem.isFirstColumnSpanned>` ()
*    def :meth:`isHidden<PySide.QtGui.QTreeWidgetItem.isHidden>` ()
*    def :meth:`isSelected<PySide.QtGui.QTreeWidgetItem.isSelected>` ()
*    def :meth:`itemChanged<PySide.QtGui.QTreeWidgetItem.itemChanged>` ()
*    def :meth:`parent<PySide.QtGui.QTreeWidgetItem.parent>` ()
*    def :meth:`removeChild<PySide.QtGui.QTreeWidgetItem.removeChild>` (child)
*    def :meth:`setBackground<PySide.QtGui.QTreeWidgetItem.setBackground>` (column, brush)
*    def :meth:`setCheckState<PySide.QtGui.QTreeWidgetItem.setCheckState>` (column, state)
*    def :meth:`setChildIndicatorPolicy<PySide.QtGui.QTreeWidgetItem.setChildIndicatorPolicy>` (policy)
*    def :meth:`setDisabled<PySide.QtGui.QTreeWidgetItem.setDisabled>` (disabled)
*    def :meth:`setExpanded<PySide.QtGui.QTreeWidgetItem.setExpanded>` (expand)
*    def :meth:`setFirstColumnSpanned<PySide.QtGui.QTreeWidgetItem.setFirstColumnSpanned>` (span)
*    def :meth:`setFlags<PySide.QtGui.QTreeWidgetItem.setFlags>` (flags)
*    def :meth:`setFont<PySide.QtGui.QTreeWidgetItem.setFont>` (column, font)
*    def :meth:`setForeground<PySide.QtGui.QTreeWidgetItem.setForeground>` (column, brush)
*    def :meth:`setHidden<PySide.QtGui.QTreeWidgetItem.setHidden>` (hide)
*    def :meth:`setIcon<PySide.QtGui.QTreeWidgetItem.setIcon>` (column, icon)
*    def :meth:`setSelected<PySide.QtGui.QTreeWidgetItem.setSelected>` (select)
*    def :meth:`setSizeHint<PySide.QtGui.QTreeWidgetItem.setSizeHint>` (column, size)
*    def :meth:`setStatusTip<PySide.QtGui.QTreeWidgetItem.setStatusTip>` (column, statusTip)
*    def :meth:`setText<PySide.QtGui.QTreeWidgetItem.setText>` (column, text)
*    def :meth:`setTextAlignment<PySide.QtGui.QTreeWidgetItem.setTextAlignment>` (column, alignment)
*    def :meth:`setToolTip<PySide.QtGui.QTreeWidgetItem.setToolTip>` (column, toolTip)
*    def :meth:`setWhatsThis<PySide.QtGui.QTreeWidgetItem.setWhatsThis>` (column, whatsThis)
*    def :meth:`sizeHint<PySide.QtGui.QTreeWidgetItem.sizeHint>` (column)
*    def :meth:`sortChildren<PySide.QtGui.QTreeWidgetItem.sortChildren>` (column, order)
*    def :meth:`sortChildren<PySide.QtGui.QTreeWidgetItem.sortChildren>` (column, order, climb)
*    def :meth:`statusTip<PySide.QtGui.QTreeWidgetItem.statusTip>` (column)
*    def :meth:`takeChild<PySide.QtGui.QTreeWidgetItem.takeChild>` (index)
*    def :meth:`takeChildren<PySide.QtGui.QTreeWidgetItem.takeChildren>` ()
*    def :meth:`text<PySide.QtGui.QTreeWidgetItem.text>` (column)
*    def :meth:`textAlignment<PySide.QtGui.QTreeWidgetItem.textAlignment>` (column)
*    def :meth:`toolTip<PySide.QtGui.QTreeWidgetItem.toolTip>` (column)
*    def :meth:`treeWidget<PySide.QtGui.QTreeWidgetItem.treeWidget>` ()
*    def :meth:`type<PySide.QtGui.QTreeWidgetItem.type>` ()
*    def :meth:`whatsThis<PySide.QtGui.QTreeWidgetItem.whatsThis>` (column)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`__lt__<PySide.QtGui.QTreeWidgetItem.__lt__>` (other)
*    def :meth:`clone<PySide.QtGui.QTreeWidgetItem.clone>` ()
*    def :meth:`data<PySide.QtGui.QTreeWidgetItem.data>` (column, role)
*    def :meth:`read<PySide.QtGui.QTreeWidgetItem.read>` (in)
*    def :meth:`setData<PySide.QtGui.QTreeWidgetItem.setData>` (column, role, value)
*    def :meth:`write<PySide.QtGui.QTreeWidgetItem.write>` (out)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTreeWidgetItem` class provides an item for use with the :class:`PySide.QtGui.QTreeWidget` convenience class.

    Tree widget items are used to hold rows of information for tree widgets. Rows usually contain several columns of data, each of which can contain a text label and an icon.

    The :class:`PySide.QtGui.QTreeWidgetItem` class is a convenience class that replaces the :class:`~PySide.QtGui.QListViewItem` class in Qt 3. It provides an item for use with the :class:`PySide.QtGui.QTreeWidget` class.

    Items are usually constructed with a parent that is either a :class:`PySide.QtGui.QTreeWidget` (for top-level items) or a :class:`PySide.QtGui.QTreeWidgetItem` (for items on lower levels of the tree). For example, the following code constructs a top-level item to represent cities of the world, and adds a entry for Oslo as a child item:

    ::

            cities =  QTreeWidgetItem(treeWidget)
            cities.setText(0, tr("Cities"))
            osloItem =  QTreeWidgetItem(cities)
            osloItem.setText(0, tr("Oslo"))
            osloItem.setText(1, tr("Yes"))


    Items can be added in a particular order by specifying the item they follow when they are constructed:

    ::

            planets =  QTreeWidgetItem(treeWidget, cities)

            planets.setText(0, tr("Planets"))


    Each column in an item can have its own background brush which is set with the :meth:`PySide.QtGui.QTreeWidgetItem.setBackground` function. The current background brush can be found with :meth:`PySide.QtGui.QTreeWidgetItem.background` . The text label for each column can be rendered with its own font and brush. These are specified with the :meth:`PySide.QtGui.QTreeWidgetItem.setFont` and :meth:`PySide.QtGui.QTreeWidgetItem.setForeground` functions, and read with :meth:`PySide.QtGui.QTreeWidgetItem.font` and :meth:`PySide.QtGui.QTreeWidgetItem.foreground` .

    The main difference between top-level items and those in lower levels of the tree is that a top-level item has no :meth:`PySide.QtGui.QTreeWidgetItem.parent` . This information can be used to tell the difference between items, and is useful to know when inserting and removing items from the tree. Children of an item can be removed with :meth:`PySide.QtGui.QTreeWidgetItem.takeChild` and inserted at a given index in the list of children with the :meth:`PySide.QtGui.QTreeWidgetItem.insertChild` function.

    By default, items are enabled, selectable, checkable, and can be the source of a drag and drop operation. Each item's flags can be changed by calling :meth:`PySide.QtGui.QTreeWidgetItem.setFlags` with the appropriate value (see :class:`Qt.ItemFlags` ). Checkable items can be checked and unchecked with the :meth:`PySide.QtGui.QTreeWidgetItem.setCheckState` function. The corresponding :meth:`PySide.QtGui.QTreeWidgetItem.checkState` function indicates whether the item is currently checked.

    .. _PySide.QtGui.QTreeWidgetItem_subclassing:



Subclassing
^^^^^^^^^^^

    When subclassing :class:`PySide.QtGui.QTreeWidgetItem` to provide custom items, it is possible to define new types for them so that they can be distinguished from standard items. The constructors for subclasses that require this feature need to call the base class constructor with a new type value equal to or greater than :attr:`UserType<QTreeWidgetItem.ItemType>` .

    .. seealso::  :class:`PySide.QtGui.QTreeWidget`  :class:`PySide.QtGui.QTreeWidgetItemIterator`  :ref:`Model/View Programming<model-view-programming.html>`  :class:`PySide.QtGui.QListWidgetItem`  :class:`PySide.QtGui.QTableWidgetItem` 

.. class:: QTreeWidgetItem(view, after[, type=Type])
           QTreeWidgetItem(view, strings[, type=Type])
           QTreeWidgetItem(view[, type=Type])
           QTreeWidgetItem(parent, after[, type=Type])
           QTreeWidgetItem(parent, strings[, type=Type])
           QTreeWidgetItem(parent[, type=Type])
           QTreeWidgetItem(strings[, type=Type])
           QTreeWidgetItem(other)
           QTreeWidgetItem([type=Type])

    :param view: :class:`PySide.QtGui.QTreeWidget`
    :param after: :class:`PySide.QtGui.QTreeWidgetItem`
    :param other: :class:`PySide.QtGui.QTreeWidgetItem`
    :param type: :class:`PySide.QtCore.int`
    :param parent: :class:`PySide.QtGui.QTreeWidgetItem`
    :param strings: list of strings

    Constructs a tree widget item of the specified ``type`` and inserts it into the given ``parent`` after the ``preceding`` item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

    Constructs a tree widget item of the specified ``type`` and appends it to the items in the given ``parent`` . The given list of ``strings`` will be set as the item text for each column in the item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

    Constructs a tree widget item of the specified ``type`` and appends it to the items in the given ``parent`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

    Constructs a tree widget item of the specified ``type`` that is inserted into the ``parent`` after the ``preceding`` child item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

    Constructs a tree widget item and append it to the given ``parent`` . The given list of ``strings`` will be set as the item text for each column in the item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

    Constructs a tree widget item and append it to the given ``parent`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

    Constructs a tree widget item of the specified ``type`` . The item must be inserted into a tree widget. The given list of ``strings`` will be set as the item text for each column in the item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

    Constructs a copy of ``other`` . Note that :meth:`PySide.QtGui.QTreeWidgetItem.type` and :meth:`PySide.QtGui.QTreeWidgetItem.treeWidget` are not copied.

    This function is useful when reimplementing :meth:`PySide.QtGui.QTreeWidgetItem.clone` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.data`  :meth:`PySide.QtGui.QTreeWidgetItem.flags` 

    Constructs a tree widget item of the specified ``type`` . The item must be inserted into a tree widget.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

.. attribute:: PySide.QtGui.QTreeWidgetItem.ItemType

    This enum describes the types that are used to describe tree widget items.

    +------------------------+---------------------------------------------------------------------------------------------------------------+
    |Constant                |Description                                                                                                    |
    +========================+===============================================================================================================+
    |QTreeWidgetItem.Type    |The default type for tree widget items.                                                                        |
    +------------------------+---------------------------------------------------------------------------------------------------------------+
    |QTreeWidgetItem.UserType|The minimum value for custom types. Values below :attr:`UserType<QTreeWidgetItem.ItemType>` are reserved by Qt.|
    +------------------------+---------------------------------------------------------------------------------------------------------------+

    You can define new user types in :class:`PySide.QtGui.QTreeWidgetItem` subclasses to ensure that custom items are treated specially; for example, when items are sorted.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.type` 

.. attribute:: PySide.QtGui.QTreeWidgetItem.ChildIndicatorPolicy

    +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |Constant                                      |Description                                                                                                                                                                   |
    +==============================================+==============================================================================================================================================================================+
    |QTreeWidgetItem.ShowIndicator                 |The controls for expanding and collapsing will be shown for this item even if there are no children.                                                                          |
    +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTreeWidgetItem.DontShowIndicator             |The controls for expanding and collapsing will never be shown even if there are children. If the node is forced open the user will not be able to expand or collapse the item.|
    +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    |QTreeWidgetItem.DontShowIndicatorWhenChildless|The controls for expanding and collapsing will be shown if the item contains children.                                                                                        |
    +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. method:: PySide.QtGui.QTreeWidgetItem.addChild(child)


    :param child: :class:`PySide.QtGui.QTreeWidgetItem`




    Appends the ``child`` item to the list of children.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.insertChild`  :meth:`PySide.QtGui.QTreeWidgetItem.takeChild` 


.. method:: PySide.QtGui.QTreeWidgetItem.addChildren(children)


    :param children: 







.. method:: PySide.QtGui.QTreeWidgetItem.background(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QBrush`




    Returns the brush used to render the background of the specified ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setBackground`  :meth:`PySide.QtGui.QTreeWidgetItem.foreground` 


.. method:: PySide.QtGui.QTreeWidgetItem.checkState(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :attr:`PySide.QtCore.Qt.CheckState`




    Returns the check state of the label in the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setCheckState`  :attr:`Qt.CheckState` 


.. method:: PySide.QtGui.QTreeWidgetItem.child(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the item at the given ``index`` in the list of the item's children.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.parent` 


.. method:: PySide.QtGui.QTreeWidgetItem.childCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of child items.



.. method:: PySide.QtGui.QTreeWidgetItem.childIndicatorPolicy()


    :rtype: :attr:`PySide.QtGui.QTreeWidgetItem.ChildIndicatorPolicy`




    Returns the item indicator policy. This policy decides when the tree branch expand/collapse indicator is shown.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setChildIndicatorPolicy` 


.. method:: PySide.QtGui.QTreeWidgetItem.childrenCheckState(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: object






.. method:: PySide.QtGui.QTreeWidgetItem.clone()


    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Creates a deep copy of the item and of its children.



.. method:: PySide.QtGui.QTreeWidgetItem.columnCount()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of columns in the item.



.. method:: PySide.QtGui.QTreeWidgetItem.data(column, role)


    :param column: :class:`PySide.QtCore.int`
    :param role: :class:`PySide.QtCore.int`
    :rtype: object




    Returns the value for the item's ``column`` and ``role`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setData` 


.. method:: PySide.QtGui.QTreeWidgetItem.emitDataChanged()






    Causes the model associated with this item to emit a :meth:`PySide.QtCore.QAbstractItemModel.dataChanged` () signal for this item.

    You normally only need to call this function if you have subclassed :class:`PySide.QtGui.QTreeWidgetItem` and reimplemented :meth:`PySide.QtGui.QTreeWidgetItem.data` and/or :meth:`PySide.QtGui.QTreeWidgetItem.setData` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setData` 


.. method:: PySide.QtGui.QTreeWidgetItem.executePendingSort()








.. method:: PySide.QtGui.QTreeWidgetItem.flags()


    :rtype: :class:`PySide.QtCore.Qt.ItemFlags`




    Returns the flags used to describe the item. These determine whether the item can be checked, edited, and selected.

    The default value for flags is :attr:`Qt.ItemIsSelectable<Qt.ItemFlag>` | :attr:`Qt.ItemIsUserCheckable<Qt.ItemFlag>` | :attr:`Qt.ItemIsEnabled<Qt.ItemFlag>` | :attr:`Qt.ItemIsDragEnabled<Qt.ItemFlag>` . If the item was constructed with a parent, flags will in addition contain :attr:`Qt.ItemIsDropEnabled<Qt.ItemFlag>` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setFlags` 


.. method:: PySide.QtGui.QTreeWidgetItem.font(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QFont`




    Returns the font used to render the text in the specified ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setFont` 


.. method:: PySide.QtGui.QTreeWidgetItem.foreground(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QBrush`




    Returns the brush used to render the foreground (e.g. text) of the specified ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setForeground`  :meth:`PySide.QtGui.QTreeWidgetItem.background` 


.. method:: PySide.QtGui.QTreeWidgetItem.icon(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QIcon`




    Returns the icon that is displayed in the specified ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setIcon`  :meth:`PySide.QtGui.QAbstractItemView.iconSize` 


.. method:: PySide.QtGui.QTreeWidgetItem.indexOfChild(child)


    :param child: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.int`




    Returns the index of the given ``child`` in the item's list of children.



.. method:: PySide.QtGui.QTreeWidgetItem.insertChild(index, child)


    :param index: :class:`PySide.QtCore.int`
    :param child: :class:`PySide.QtGui.QTreeWidgetItem`




    Inserts the ``child`` item at ``index`` in the list of children.

    If the child has already been inserted somewhere else it wont be inserted again.



.. method:: PySide.QtGui.QTreeWidgetItem.insertChildren(index, children)


    :param index: :class:`PySide.QtCore.int`
    :param children: 







.. method:: PySide.QtGui.QTreeWidgetItem.isDisabled()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item is disabled; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setFlags` 


.. method:: PySide.QtGui.QTreeWidgetItem.isExpanded()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item is expanded, otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setExpanded` 


.. method:: PySide.QtGui.QTreeWidgetItem.isFirstColumnSpanned()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item is spanning all the columns in a row; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setFirstColumnSpanned` 


.. method:: PySide.QtGui.QTreeWidgetItem.isHidden()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item is hidden, otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setHidden` 


.. method:: PySide.QtGui.QTreeWidgetItem.isSelected()


    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the item is selected, otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setSelected` 


.. method:: PySide.QtGui.QTreeWidgetItem.itemChanged()








.. method:: PySide.QtGui.QTreeWidgetItem.__lt__(other)


    :param other: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the text in the item is less than the text in the ``other`` item, otherwise returns false.



.. method:: PySide.QtGui.QTreeWidgetItem.parent()


    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the item's parent.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.child` 


.. method:: PySide.QtGui.QTreeWidgetItem.read(in)


    :param in: :class:`PySide.QtCore.QDataStream`




    Reads the item from stream ``in`` . This only reads data into a single item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.write` 


.. method:: PySide.QtGui.QTreeWidgetItem.removeChild(child)


    :param child: :class:`PySide.QtGui.QTreeWidgetItem`




    Removes the given item indicated by ``child`` . The removed item will not be deleted.



.. method:: PySide.QtGui.QTreeWidgetItem.setBackground(column, brush)


    :param column: :class:`PySide.QtCore.int`
    :param brush: :class:`PySide.QtGui.QBrush`




    Sets the background brush of the label in the given ``column`` to the specified ``brush`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.background`  :meth:`PySide.QtGui.QTreeWidgetItem.setForeground` 


.. method:: PySide.QtGui.QTreeWidgetItem.setCheckState(column, state)


    :param column: :class:`PySide.QtCore.int`
    :param state: :attr:`PySide.QtCore.Qt.CheckState`







.. method:: PySide.QtGui.QTreeWidgetItem.setChildIndicatorPolicy(policy)


    :param policy: :attr:`PySide.QtGui.QTreeWidgetItem.ChildIndicatorPolicy`







.. method:: PySide.QtGui.QTreeWidgetItem.setData(column, role, value)


    :param column: :class:`PySide.QtCore.int`
    :param role: :class:`PySide.QtCore.int`
    :param value: object




    Sets the value for the item's ``column`` and ``role`` to the given ``value`` .

    The ``role`` describes the type of data specified by ``value`` , and is defined by the :attr:`Qt.ItemDataRole` enum.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.data` 


.. method:: PySide.QtGui.QTreeWidgetItem.setDisabled(disabled)


    :param disabled: :class:`PySide.QtCore.bool`




    Disables the item if ``disabled`` is true; otherwise enables the item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.isDisabled`  :meth:`PySide.QtGui.QTreeWidgetItem.setFlags` 


.. method:: PySide.QtGui.QTreeWidgetItem.setExpanded(expand)


    :param expand: :class:`PySide.QtCore.bool`




    Expands the item if ``expand`` is true, otherwise collapses the item.

    .. warning::  The :class:`PySide.QtGui.QTreeWidgetItem` must be added to the :class:`PySide.QtGui.QTreeWidget` before calling this function.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.isExpanded` 


.. method:: PySide.QtGui.QTreeWidgetItem.setFirstColumnSpanned(span)


    :param span: :class:`PySide.QtCore.bool`




    Sets the first section to span all columns if ``span`` is true; otherwise all item sections are shown.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.isFirstColumnSpanned` 


.. method:: PySide.QtGui.QTreeWidgetItem.setFlags(flags)


    :param flags: :class:`PySide.QtCore.Qt.ItemFlags`







.. method:: PySide.QtGui.QTreeWidgetItem.setFont(column, font)


    :param column: :class:`PySide.QtCore.int`
    :param font: :class:`PySide.QtGui.QFont`




    Sets the font used to display the text in the given ``column`` to the given ``font`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.font`  :meth:`PySide.QtGui.QTreeWidgetItem.setText`  :meth:`PySide.QtGui.QTreeWidgetItem.setForeground` 


.. method:: PySide.QtGui.QTreeWidgetItem.setForeground(column, brush)


    :param column: :class:`PySide.QtCore.int`
    :param brush: :class:`PySide.QtGui.QBrush`




    Sets the foreground brush of the label in the given ``column`` to the specified ``brush`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.foreground`  :meth:`PySide.QtGui.QTreeWidgetItem.setBackground` 


.. method:: PySide.QtGui.QTreeWidgetItem.setHidden(hide)


    :param hide: :class:`PySide.QtCore.bool`




    Hides the item if ``hide`` is true, otherwise shows the item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.isHidden` 


.. method:: PySide.QtGui.QTreeWidgetItem.setIcon(column, icon)


    :param column: :class:`PySide.QtCore.int`
    :param icon: :class:`PySide.QtGui.QIcon`




    Sets the icon to be displayed in the given ``column`` to ``icon`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.icon`  :meth:`PySide.QtGui.QTreeWidgetItem.setText`  :meth:`PySide.QtGui.QAbstractItemView.iconSize` 


.. method:: PySide.QtGui.QTreeWidgetItem.setSelected(select)


    :param select: :class:`PySide.QtCore.bool`




    Sets the selected state of the item to ``select`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.isSelected` 


.. method:: PySide.QtGui.QTreeWidgetItem.setSizeHint(column, size)


    :param column: :class:`PySide.QtCore.int`
    :param size: :class:`PySide.QtCore.QSize`




    Sets the size hint for the tree item in the given ``column`` to be ``size`` . If no size hint is set, the item delegate will compute the size hint based on the item data.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.sizeHint` 


.. method:: PySide.QtGui.QTreeWidgetItem.setStatusTip(column, statusTip)


    :param column: :class:`PySide.QtCore.int`
    :param statusTip: unicode




    Sets the status tip for the given ``column`` to the given ``statusTip`` . :class:`PySide.QtGui.QTreeWidget` mouse tracking needs to be enabled for this feature to work.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.statusTip`  :meth:`PySide.QtGui.QTreeWidgetItem.setToolTip`  :meth:`PySide.QtGui.QTreeWidgetItem.setWhatsThis` 


.. method:: PySide.QtGui.QTreeWidgetItem.setText(column, text)


    :param column: :class:`PySide.QtCore.int`
    :param text: unicode




    Sets the text to be displayed in the given ``column`` to the given ``text`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.text`  :meth:`PySide.QtGui.QTreeWidgetItem.setFont`  :meth:`PySide.QtGui.QTreeWidgetItem.setForeground` 


.. method:: PySide.QtGui.QTreeWidgetItem.setTextAlignment(column, alignment)


    :param column: :class:`PySide.QtCore.int`
    :param alignment: :class:`PySide.QtCore.int`




    Sets the text alignment for the label in the given ``column`` to the ``alignment`` specified (see :attr:`Qt.AlignmentFlag` ).

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.textAlignment` 


.. method:: PySide.QtGui.QTreeWidgetItem.setToolTip(column, toolTip)


    :param column: :class:`PySide.QtCore.int`
    :param toolTip: unicode




    Sets the tooltip for the given ``column`` to ``toolTip`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.toolTip`  :meth:`PySide.QtGui.QTreeWidgetItem.setStatusTip`  :meth:`PySide.QtGui.QTreeWidgetItem.setWhatsThis` 


.. method:: PySide.QtGui.QTreeWidgetItem.setWhatsThis(column, whatsThis)


    :param column: :class:`PySide.QtCore.int`
    :param whatsThis: unicode




    Sets the "What's This?" help for the given ``column`` to ``whatsThis`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.whatsThis`  :meth:`PySide.QtGui.QTreeWidgetItem.setStatusTip`  :meth:`PySide.QtGui.QTreeWidgetItem.setToolTip` 


.. method:: PySide.QtGui.QTreeWidgetItem.sizeHint(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QSize`




    Returns the size hint set for the tree item in the given ``column`` (see :class:`PySide.QtCore.QSize` ).

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setSizeHint` 


.. method:: PySide.QtGui.QTreeWidgetItem.sortChildren(column, order)


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QTreeWidgetItem.sortChildren(column, order, climb)


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`
    :param climb: :class:`PySide.QtCore.bool`






.. method:: PySide.QtGui.QTreeWidgetItem.statusTip(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the status tip for the contents of the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setStatusTip` 


.. method:: PySide.QtGui.QTreeWidgetItem.takeChild(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Removes the item at ``index`` and returns it, otherwise return 0.



.. method:: PySide.QtGui.QTreeWidgetItem.takeChildren()


    :rtype: 




    Removes the list of children and returns it, otherwise returns an empty list.



.. method:: PySide.QtGui.QTreeWidgetItem.text(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the text in the specified ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setText` 


.. method:: PySide.QtGui.QTreeWidgetItem.textAlignment(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the text alignment for the label in the given ``column`` (see :attr:`Qt.AlignmentFlag` ).

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setTextAlignment` 


.. method:: PySide.QtGui.QTreeWidgetItem.toolTip(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the tool tip for the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setToolTip` 


.. method:: PySide.QtGui.QTreeWidgetItem.treeWidget()


    :rtype: :class:`PySide.QtGui.QTreeWidget`




    Returns the tree widget that contains the item.



.. method:: PySide.QtGui.QTreeWidgetItem.type()


    :rtype: :class:`PySide.QtCore.int`




    Returns the type passed to the :class:`PySide.QtGui.QTreeWidgetItem` constructor.



.. method:: PySide.QtGui.QTreeWidgetItem.whatsThis(column)


    :param column: :class:`PySide.QtCore.int`
    :rtype: unicode




    Returns the "What's This?" help for the contents of the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.setWhatsThis` 


.. method:: PySide.QtGui.QTreeWidgetItem.write(out)


    :param out: :class:`PySide.QtCore.QDataStream`




    Writes the item to stream ``out`` . This only writes data from one single item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidgetItem.read` 



