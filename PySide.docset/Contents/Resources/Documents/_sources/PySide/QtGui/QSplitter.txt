.. module:: PySide.QtGui
.. _QSplitter:

QSplitter
*********

.. inheritance-diagram:: QSplitter
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addWidget<PySide.QtGui.QSplitter.addWidget>` (widget)
*    def :meth:`childrenCollapsible<PySide.QtGui.QSplitter.childrenCollapsible>` ()
*    def :meth:`closestLegalPosition<PySide.QtGui.QSplitter.closestLegalPosition>` (arg__1, arg__2)
*    def :meth:`count<PySide.QtGui.QSplitter.count>` ()
*    def :meth:`getRange<PySide.QtGui.QSplitter.getRange>` (index)
*    def :meth:`handle<PySide.QtGui.QSplitter.handle>` (index)
*    def :meth:`handleWidth<PySide.QtGui.QSplitter.handleWidth>` ()
*    def :meth:`indexOf<PySide.QtGui.QSplitter.indexOf>` (w)
*    def :meth:`insertWidget<PySide.QtGui.QSplitter.insertWidget>` (index, widget)
*    def :meth:`isCollapsible<PySide.QtGui.QSplitter.isCollapsible>` (index)
*    def :meth:`moveSplitter<PySide.QtGui.QSplitter.moveSplitter>` (pos, index)
*    def :meth:`opaqueResize<PySide.QtGui.QSplitter.opaqueResize>` ()
*    def :meth:`orientation<PySide.QtGui.QSplitter.orientation>` ()
*    def :meth:`refresh<PySide.QtGui.QSplitter.refresh>` ()
*    def :meth:`restoreState<PySide.QtGui.QSplitter.restoreState>` (state)
*    def :meth:`saveState<PySide.QtGui.QSplitter.saveState>` ()
*    def :meth:`setChildrenCollapsible<PySide.QtGui.QSplitter.setChildrenCollapsible>` (arg__1)
*    def :meth:`setCollapsible<PySide.QtGui.QSplitter.setCollapsible>` (index, arg__2)
*    def :meth:`setHandleWidth<PySide.QtGui.QSplitter.setHandleWidth>` (arg__1)
*    def :meth:`setOpaqueResize<PySide.QtGui.QSplitter.setOpaqueResize>` ([opaque=true])
*    def :meth:`setOrientation<PySide.QtGui.QSplitter.setOrientation>` (arg__1)
*    def :meth:`setRubberBand<PySide.QtGui.QSplitter.setRubberBand>` (position)
*    def :meth:`setSizes<PySide.QtGui.QSplitter.setSizes>` (list)
*    def :meth:`setStretchFactor<PySide.QtGui.QSplitter.setStretchFactor>` (index, stretch)
*    def :meth:`sizes<PySide.QtGui.QSplitter.sizes>` ()
*    def :meth:`widget<PySide.QtGui.QSplitter.widget>` (index)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`createHandle<PySide.QtGui.QSplitter.createHandle>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`splitterMoved<PySide.QtGui.QSplitter.splitterMoved>` (pos, index)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QSplitter` class implements a splitter widget.

    A splitter lets the user control the size of child widgets by dragging the boundary between the children. Any number of widgets may be controlled by a single splitter. The typical use of a :class:`PySide.QtGui.QSplitter` is to create several widgets and add them using :meth:`PySide.QtGui.QSplitter.insertWidget` or :meth:`PySide.QtGui.QSplitter.addWidget` .

    The following example will show a :class:`PySide.QtGui.QListView` , :class:`PySide.QtGui.QTreeView` , and :class:`PySide.QtGui.QTextEdit` side by side, with two splitter handles:

    ::

            splitter =  QSplitter(parent)
            listview =  QListView()
            treeview =  QTreeView()
            textedit =  QTextEdit()
            splitter.addWidget(listview)
            splitter.addWidget(treeview)
            splitter.addWidget(textedit)


    If a widget is already inside a :class:`PySide.QtGui.QSplitter` when :meth:`PySide.QtGui.QSplitter.insertWidget` or :meth:`PySide.QtGui.QSplitter.addWidget` is called, it will move to the new position. This can be used to reorder widgets in the splitter later. You can use :meth:`PySide.QtGui.QSplitter.indexOf` , :meth:`PySide.QtGui.QSplitter.widget` , and :meth:`PySide.QtGui.QSplitter.count` to get access to the widgets inside the splitter.

    A default :class:`PySide.QtGui.QSplitter` lays out its children horizontally (side by side); you can use setOrientation( :attr:`Qt.Vertical<Qt.Orientation>` ) to lay its children out vertically.

    By default, all widgets can be as large or as small as the user wishes, between the :meth:`PySide.QtGui.QSplitter.minimumSizeHint` (or :meth:`PySide.QtGui.QWidget.minimumSize` ) and :meth:`PySide.QtGui.QWidget.maximumSize` of the widgets.

    :class:`PySide.QtGui.QSplitter` resizes its children dynamically by default. If you would rather have :class:`PySide.QtGui.QSplitter` resize the children only at the end of a resize operation, call setOpaqueResize(false).

    The initial distribution of size between the widgets is determined by multiplying the initial size with the stretch factor. You can also use :meth:`PySide.QtGui.QSplitter.setSizes` to set the sizes of all the widgets. The function :meth:`PySide.QtGui.QSplitter.sizes` returns the sizes set by the user. Alternatively, you can save and restore the sizes of the widgets from a :class:`PySide.QtCore.QByteArray` using :meth:`PySide.QtGui.QSplitter.saveState` and :meth:`PySide.QtGui.QSplitter.restoreState` respectively.

    When you :meth:`PySide.QtGui.QWidget.hide` a child its space will be distributed among the other children. It will be reinstated when you :meth:`PySide.QtGui.QWidget.show` it again.

    .. seealso::  :class:`PySide.QtGui.QSplitterHandle`  :class:`PySide.QtGui.QHBoxLayout`  :class:`PySide.QtGui.QVBoxLayout`  :class:`PySide.QtGui.QTabWidget` 

.. class:: QSplitter([parent=None])
           QSplitter(arg__1[, parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`
    :param arg__1: :attr:`PySide.QtCore.Qt.Orientation`

    Constructs a horizontal splitter with the ``parent`` arguments is passed on to the :class:`PySide.QtGui.QFrame` constructor.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.setOrientation` 



.. method:: PySide.QtGui.QSplitter.addWidget(widget)


    :param widget: :class:`PySide.QtGui.QWidget`




    Adds the given ``widget`` to the splitter's layout after all the other items.

    If ``widget`` is already in the splitter, it will be moved to the new position.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.insertWidget`  :meth:`PySide.QtGui.QSplitter.widget`  :meth:`PySide.QtGui.QSplitter.indexOf` 


.. method:: PySide.QtGui.QSplitter.childrenCollapsible()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether child widgets can be resized down to size 0 by the user.

    By default, children are collapsible. It is possible to enable and disable the collapsing of individual children using :meth:`PySide.QtGui.QSplitter.setCollapsible` .

    .. seealso::  :meth:`PySide.QtGui.QSplitter.setCollapsible` 


.. method:: PySide.QtGui.QSplitter.closestLegalPosition(arg__1, arg__2)


    :param arg__1: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`




    Returns the closest legal position to ``pos`` of the widget with index ``index`` .

    For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. Positions are then measured from the right edge of the widget.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.getRange` 


.. method:: PySide.QtGui.QSplitter.count()


    :rtype: :class:`PySide.QtCore.int`




    Returns the number of widgets contained in the splitter's layout.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.widget`  :meth:`PySide.QtGui.QSplitter.handle` 


.. method:: PySide.QtGui.QSplitter.createHandle()


    :rtype: :class:`PySide.QtGui.QSplitterHandle`




    Returns a new splitter handle as a child widget of this splitter. This function can be reimplemented in subclasses to provide support for custom handles.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.handle`  :meth:`PySide.QtGui.QSplitter.indexOf` 


.. method:: PySide.QtGui.QSplitter.getRange(index)


    :param index: :class:`PySide.QtCore.int`




    Returns the valid range of the splitter with index ``index`` in \*``min`` and \*``max`` if ``min`` and ``max`` are not 0.



.. method:: PySide.QtGui.QSplitter.handle(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QSplitterHandle`




    Returns the handle to the left (or above) for the item in the splitter's layout at the given ``index`` . The handle at index 0 is always hidden.

    For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. The handle will be to the right of the widget at ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QSplitter.count`  :meth:`PySide.QtGui.QSplitter.widget`  :meth:`PySide.QtGui.QSplitter.indexOf`  :meth:`PySide.QtGui.QSplitter.createHandle`  :meth:`PySide.QtGui.QSplitter.setHandleWidth` 


.. method:: PySide.QtGui.QSplitter.handleWidth()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the width of the splitter handles.

    By default, this property contains a value that depends on the user's platform and style preferences.

    If you set :meth:`PySide.QtGui.QSplitter.handleWidth` to 1, the actual grab area will grow to overlap a few pixels of it's respective widgets.



.. method:: PySide.QtGui.QSplitter.indexOf(w)


    :param w: :class:`PySide.QtGui.QWidget`
    :rtype: :class:`PySide.QtCore.int`




    Returns the index in the splitter's layout of the specified ``widget`` . This also works for handles.

    Handles are numbered from 0. There are as many handles as there are child widgets, but the handle at position 0 is always hidden.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.count`  :meth:`PySide.QtGui.QSplitter.widget` 


.. method:: PySide.QtGui.QSplitter.insertWidget(index, widget)


    :param index: :class:`PySide.QtCore.int`
    :param widget: :class:`PySide.QtGui.QWidget`




    Inserts the ``widget`` specified into the splitter's layout at the given ``index`` .

    If ``widget`` is already in the splitter, it will be moved to the new position.

    if ``index`` is an invalid index, then the widget will be inserted at the end.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.addWidget`  :meth:`PySide.QtGui.QSplitter.indexOf`  :meth:`PySide.QtGui.QSplitter.widget` 


.. method:: PySide.QtGui.QSplitter.isCollapsible(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the widget at ``index`` is collapsible, otherwise returns false



.. method:: PySide.QtGui.QSplitter.moveSplitter(pos, index)


    :param pos: :class:`PySide.QtCore.int`
    :param index: :class:`PySide.QtCore.int`




    Moves the left or top edge of the splitter handle at ``index`` as close as possible to position ``pos`` , which is the distance from the left or top edge of the widget.

    For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. ``pos`` is then the distance from the right edge of the widget.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.splitterMoved`  :meth:`PySide.QtGui.QSplitter.closestLegalPosition`  :meth:`PySide.QtGui.QSplitter.getRange` 


.. method:: PySide.QtGui.QSplitter.opaqueResize()


    :rtype: :class:`PySide.QtCore.bool`




    This property holds whether resizing is opaque.

    Opaque resizing is on by default.



.. method:: PySide.QtGui.QSplitter.orientation()


    :rtype: :attr:`PySide.QtCore.Qt.Orientation`




    This property holds the orientation of the splitter.

    By default the orientation is horizontal (i.e., the widgets are laid out side by side). The possible orientations are :attr:`Qt.Horizontal<Qt.Orientation>` and :attr:`Qt.Vertical<Qt.Orientation>` .

    .. seealso::  :meth:`QSplitterHandle.orientation()<PySide.QtGui.QSplitterHandle.orientation>` 


.. method:: PySide.QtGui.QSplitter.refresh()






    Updates the splitter's state. You should not need to call this function.



.. method:: PySide.QtGui.QSplitter.restoreState(state)


    :param state: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.bool`




    Restores the splitter's layout to the ``state`` specified. Returns true if the state is restored; otherwise returns false.

    Typically this is used in conjunction with :class:`PySide.QtCore.QSettings` to restore the size from a past session. Here is an example:

    Restore the splitters's state:

    ::

            settings = QSettings()
            splitter.restoreState(settings.value("splitterSizes").toByteArray())


    A failure to restore the splitter's layout may result from either invalid or out-of-date data in the supplied byte array.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.saveState` 


.. method:: PySide.QtGui.QSplitter.saveState()


    :rtype: :class:`PySide.QtCore.QByteArray`




    Saves the state of the splitter's layout.

    Typically this is used in conjunction with :class:`PySide.QtCore.QSettings` to remember the size for a future session. A version number is stored as part of the data. Here is an example:

    ::

            settings = QSettings()
            settings.setValue("splitterSizes", splitter.saveState())


    .. seealso::  :meth:`PySide.QtGui.QSplitter.restoreState` 


.. method:: PySide.QtGui.QSplitter.setChildrenCollapsible(arg__1)


    :param arg__1: :class:`PySide.QtCore.bool`




    This property holds whether child widgets can be resized down to size 0 by the user.

    By default, children are collapsible. It is possible to enable and disable the collapsing of individual children using :meth:`PySide.QtGui.QSplitter.setCollapsible` .

    .. seealso::  :meth:`PySide.QtGui.QSplitter.setCollapsible` 


.. method:: PySide.QtGui.QSplitter.setCollapsible(index, arg__2)


    :param index: :class:`PySide.QtCore.int`
    :param arg__2: :class:`PySide.QtCore.bool`




    Sets whether the child widget at index ``index`` is collapsible to ``collapse`` .

    By default, children are collapsible, meaning that the user can resize them down to size 0, even if they have a non-zero :meth:`PySide.QtGui.QWidget.minimumSize` or :meth:`PySide.QtGui.QSplitter.minimumSizeHint` . This behavior can be changed on a per-widget basis by calling this function, or globally for all the widgets in the splitter by setting the :meth:`PySide.QtGui.QSplitter.childrenCollapsible` property.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.isCollapsible`  :meth:`PySide.QtGui.QSplitter.childrenCollapsible` 


.. method:: PySide.QtGui.QSplitter.setHandleWidth(arg__1)


    :param arg__1: :class:`PySide.QtCore.int`




    This property holds the width of the splitter handles.

    By default, this property contains a value that depends on the user's platform and style preferences.

    If you set :meth:`PySide.QtGui.QSplitter.handleWidth` to 1, the actual grab area will grow to overlap a few pixels of it's respective widgets.



.. method:: PySide.QtGui.QSplitter.setOpaqueResize([opaque=true])


    :param opaque: :class:`PySide.QtCore.bool`




    This property holds whether resizing is opaque.

    Opaque resizing is on by default.



.. method:: PySide.QtGui.QSplitter.setOrientation(arg__1)


    :param arg__1: :attr:`PySide.QtCore.Qt.Orientation`




    This property holds the orientation of the splitter.

    By default the orientation is horizontal (i.e., the widgets are laid out side by side). The possible orientations are :attr:`Qt.Horizontal<Qt.Orientation>` and :attr:`Qt.Vertical<Qt.Orientation>` .

    .. seealso::  :meth:`QSplitterHandle.orientation()<PySide.QtGui.QSplitterHandle.orientation>` 


.. method:: PySide.QtGui.QSplitter.setRubberBand(position)


    :param position: :class:`PySide.QtCore.int`




    Displays a rubber band at position ``pos`` . If ``pos`` is negative, the rubber band is removed.



.. method:: PySide.QtGui.QSplitter.setSizes(list)


    :param list: 







.. method:: PySide.QtGui.QSplitter.setStretchFactor(index, stretch)


    :param index: :class:`PySide.QtCore.int`
    :param stretch: :class:`PySide.QtCore.int`




    Updates the size policy of the widget at position ``index`` to have a stretch factor of ``stretch`` .

    ``stretch`` is not the effective stretch factor; the effective stretch factor is calculated by taking the initial size of the widget and multiplying it with ``stretch`` .

    This function is provided for convenience. It is equivalent to

    ::

        widget = splitter.widget(index)
        policy = widget.sizePolicy()
        policy.setHorizontalStretch(stretch)
        policy.setVerticalStretch(stretch)
        widget.setSizePolicy(policy)


    .. seealso::  :meth:`PySide.QtGui.QSplitter.setSizes`  :meth:`PySide.QtGui.QSplitter.widget` 


.. method:: PySide.QtGui.QSplitter.sizes()


    :rtype: 




    Returns a list of the size parameters of all the widgets in this splitter.

    If the splitter's orientation is horizontal, the list contains the widgets width in pixels, from left to right; if the orientation is vertical, the list contains the widgets height in pixels, from top to bottom.

    Giving the values to another splitter's :meth:`PySide.QtGui.QSplitter.setSizes` function will produce a splitter with the same layout as this one.

    Note that invisible widgets have a size of 0.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.setSizes` 


.. method:: PySide.QtGui.QSplitter.splitterMoved(pos, index)


    :param pos: :class:`PySide.QtCore.int`
    :param index: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QSplitter.widget(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget at the given ``index`` in the splitter's layout.

    .. seealso::  :meth:`PySide.QtGui.QSplitter.count`  :meth:`PySide.QtGui.QSplitter.handle`  :meth:`PySide.QtGui.QSplitter.indexOf`  :meth:`PySide.QtGui.QSplitter.insertWidget` 



