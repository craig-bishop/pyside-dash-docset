.. module:: PySide.QtGui
.. _QMouseEventTransition:

QMouseEventTransition
*********************

.. inheritance-diagram:: QMouseEventTransition
    :parts: 2

.. note:: This class was introduced in Qt 4.6
Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`button<PySide.QtGui.QMouseEventTransition.button>` ()
*    def :meth:`hitTestPath<PySide.QtGui.QMouseEventTransition.hitTestPath>` ()
*    def :meth:`modifierMask<PySide.QtGui.QMouseEventTransition.modifierMask>` ()
*    def :meth:`setButton<PySide.QtGui.QMouseEventTransition.setButton>` (button)
*    def :meth:`setHitTestPath<PySide.QtGui.QMouseEventTransition.setHitTestPath>` (path)
*    def :meth:`setModifierMask<PySide.QtGui.QMouseEventTransition.setModifierMask>` (modifiers)


Detailed Description
--------------------



    The :class:`PySide.QtGui.QMouseEventTransition` class provides a transition for mouse events.

    :class:`PySide.QtGui.QMouseEventTransition` is part of :ref:`The State Machine Framework<statemachine-api.html>` .

    .. seealso::  :meth:`QState.addTransition()<PySide.QtCore.QState.addTransition>` 

.. class:: QMouseEventTransition(object, type, button[, sourceState=None])
           QMouseEventTransition([sourceState=None])

    :param button: :attr:`PySide.QtCore.Qt.MouseButton`
    :param sourceState: :class:`PySide.QtCore.QState`
    :param type: :attr:`PySide.QtCore.QEvent.Type`
    :param object: :class:`PySide.QtCore.QObject`



    Constructs a new mouse event transition with the given ``sourceState`` .


.. method:: PySide.QtGui.QMouseEventTransition.button()


    :rtype: :attr:`PySide.QtCore.Qt.MouseButton`




    This property holds the button that this mouse event transition is associated with.



.. method:: PySide.QtGui.QMouseEventTransition.hitTestPath()


    :rtype: :class:`PySide.QtGui.QPainterPath`




    Returns the hit test path for this mouse event transition.

    .. seealso::  :meth:`PySide.QtGui.QMouseEventTransition.setHitTestPath` 


.. method:: PySide.QtGui.QMouseEventTransition.modifierMask()


    :rtype: :class:`PySide.QtCore.Qt.KeyboardModifiers`




    This property holds the keyboard modifier mask that this mouse event transition checks for.



.. method:: PySide.QtGui.QMouseEventTransition.setButton(button)


    :param button: :attr:`PySide.QtCore.Qt.MouseButton`




    This property holds the button that this mouse event transition is associated with.



.. method:: PySide.QtGui.QMouseEventTransition.setHitTestPath(path)


    :param path: :class:`PySide.QtGui.QPainterPath`




    Sets the hit test path for this mouse event transition to ``path`` . If a valid path has been set, the transition will only trigger if the mouse event position ( :meth:`QMouseEvent.pos()<PySide.QtGui.QMouseEvent.pos>` ) is inside the path.

    .. seealso::  :meth:`PySide.QtGui.QMouseEventTransition.hitTestPath`  :meth:`QPainterPath.contains()<PySide.QtGui.QPainterPath.contains>` 


.. method:: PySide.QtGui.QMouseEventTransition.setModifierMask(modifiers)


    :param modifiers: :class:`PySide.QtCore.Qt.KeyboardModifiers`




    This property holds the keyboard modifier mask that this mouse event transition checks for.




