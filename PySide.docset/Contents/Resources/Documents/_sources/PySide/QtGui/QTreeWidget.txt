.. module:: PySide.QtGui
.. _QTreeWidget:

QTreeWidget
***********

.. inheritance-diagram:: QTreeWidget
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`addTopLevelItem<PySide.QtGui.QTreeWidget.addTopLevelItem>` (item)
*    def :meth:`addTopLevelItems<PySide.QtGui.QTreeWidget.addTopLevelItems>` (items)
*    def :meth:`closePersistentEditor<PySide.QtGui.QTreeWidget.closePersistentEditor>` (item[, column=0])
*    def :meth:`columnCount<PySide.QtGui.QTreeWidget.columnCount>` ()
*    def :meth:`currentColumn<PySide.QtGui.QTreeWidget.currentColumn>` ()
*    def :meth:`currentItem<PySide.QtGui.QTreeWidget.currentItem>` ()
*    def :meth:`editItem<PySide.QtGui.QTreeWidget.editItem>` (item[, column=0])
*    def :meth:`findItems<PySide.QtGui.QTreeWidget.findItems>` (text, flags[, column=0])
*    def :meth:`headerItem<PySide.QtGui.QTreeWidget.headerItem>` ()
*    def :meth:`indexFromItem<PySide.QtGui.QTreeWidget.indexFromItem>` (item[, column=0])
*    def :meth:`indexOfTopLevelItem<PySide.QtGui.QTreeWidget.indexOfTopLevelItem>` (item)
*    def :meth:`insertTopLevelItem<PySide.QtGui.QTreeWidget.insertTopLevelItem>` (index, item)
*    def :meth:`insertTopLevelItems<PySide.QtGui.QTreeWidget.insertTopLevelItems>` (index, items)
*    def :meth:`invisibleRootItem<PySide.QtGui.QTreeWidget.invisibleRootItem>` ()
*    def :meth:`isFirstItemColumnSpanned<PySide.QtGui.QTreeWidget.isFirstItemColumnSpanned>` (item)
*    def :meth:`isItemExpanded<PySide.QtGui.QTreeWidget.isItemExpanded>` (item)
*    def :meth:`isItemHidden<PySide.QtGui.QTreeWidget.isItemHidden>` (item)
*    def :meth:`isItemSelected<PySide.QtGui.QTreeWidget.isItemSelected>` (item)
*    def :meth:`itemAbove<PySide.QtGui.QTreeWidget.itemAbove>` (item)
*    def :meth:`itemAt<PySide.QtGui.QTreeWidget.itemAt>` (p)
*    def :meth:`itemAt<PySide.QtGui.QTreeWidget.itemAt>` (x, y)
*    def :meth:`itemBelow<PySide.QtGui.QTreeWidget.itemBelow>` (item)
*    def :meth:`itemFromIndex<PySide.QtGui.QTreeWidget.itemFromIndex>` (index)
*    def :meth:`itemWidget<PySide.QtGui.QTreeWidget.itemWidget>` (item, column)
*    def :meth:`openPersistentEditor<PySide.QtGui.QTreeWidget.openPersistentEditor>` (item[, column=0])
*    def :meth:`removeItemWidget<PySide.QtGui.QTreeWidget.removeItemWidget>` (item, column)
*    def :meth:`selectedItems<PySide.QtGui.QTreeWidget.selectedItems>` ()
*    def :meth:`setColumnCount<PySide.QtGui.QTreeWidget.setColumnCount>` (columns)
*    def :meth:`setCurrentItem<PySide.QtGui.QTreeWidget.setCurrentItem>` (item)
*    def :meth:`setCurrentItem<PySide.QtGui.QTreeWidget.setCurrentItem>` (item, column)
*    def :meth:`setCurrentItem<PySide.QtGui.QTreeWidget.setCurrentItem>` (item, column, command)
*    def :meth:`setFirstItemColumnSpanned<PySide.QtGui.QTreeWidget.setFirstItemColumnSpanned>` (item, span)
*    def :meth:`setHeaderItem<PySide.QtGui.QTreeWidget.setHeaderItem>` (item)
*    def :meth:`setHeaderLabel<PySide.QtGui.QTreeWidget.setHeaderLabel>` (label)
*    def :meth:`setHeaderLabels<PySide.QtGui.QTreeWidget.setHeaderLabels>` (labels)
*    def :meth:`setItemExpanded<PySide.QtGui.QTreeWidget.setItemExpanded>` (item, expand)
*    def :meth:`setItemHidden<PySide.QtGui.QTreeWidget.setItemHidden>` (item, hide)
*    def :meth:`setItemSelected<PySide.QtGui.QTreeWidget.setItemSelected>` (item, select)
*    def :meth:`setItemWidget<PySide.QtGui.QTreeWidget.setItemWidget>` (item, column, widget)
*    def :meth:`sortColumn<PySide.QtGui.QTreeWidget.sortColumn>` ()
*    def :meth:`sortItems<PySide.QtGui.QTreeWidget.sortItems>` (column, order)
*    def :meth:`takeTopLevelItem<PySide.QtGui.QTreeWidget.takeTopLevelItem>` (index)
*    def :meth:`topLevelItem<PySide.QtGui.QTreeWidget.topLevelItem>` (index)
*    def :meth:`topLevelItemCount<PySide.QtGui.QTreeWidget.topLevelItemCount>` ()
*    def :meth:`visualItemRect<PySide.QtGui.QTreeWidget.visualItemRect>` (item)


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`dropMimeData<PySide.QtGui.QTreeWidget.dropMimeData>` (parent, index, data, action)
*    def :meth:`mimeData<PySide.QtGui.QTreeWidget.mimeData>` (items)
*    def :meth:`mimeTypes<PySide.QtGui.QTreeWidget.mimeTypes>` ()
*    def :meth:`supportedDropActions<PySide.QtGui.QTreeWidget.supportedDropActions>` ()


Slots
^^^^^
.. container:: function_list

*    def :meth:`clear<PySide.QtGui.QTreeWidget.clear>` ()
*    def :meth:`collapseItem<PySide.QtGui.QTreeWidget.collapseItem>` (item)
*    def :meth:`expandItem<PySide.QtGui.QTreeWidget.expandItem>` (item)
*    def :meth:`scrollToItem<PySide.QtGui.QTreeWidget.scrollToItem>` (item[, hint=EnsureVisible])


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`currentItemChanged<PySide.QtGui.QTreeWidget.currentItemChanged>` (current, previous)
*    def :meth:`itemActivated<PySide.QtGui.QTreeWidget.itemActivated>` (item, column)
*    def :meth:`itemChanged<PySide.QtGui.QTreeWidget.itemChanged>` (item, column)
*    def :meth:`itemClicked<PySide.QtGui.QTreeWidget.itemClicked>` (item, column)
*    def :meth:`itemCollapsed<PySide.QtGui.QTreeWidget.itemCollapsed>` (item)
*    def :meth:`itemDoubleClicked<PySide.QtGui.QTreeWidget.itemDoubleClicked>` (item, column)
*    def :meth:`itemEntered<PySide.QtGui.QTreeWidget.itemEntered>` (item, column)
*    def :meth:`itemExpanded<PySide.QtGui.QTreeWidget.itemExpanded>` (item)
*    def :meth:`itemPressed<PySide.QtGui.QTreeWidget.itemPressed>` (item, column)
*    def :meth:`itemSelectionChanged<PySide.QtGui.QTreeWidget.itemSelectionChanged>` ()


Detailed Description
--------------------



    The :class:`PySide.QtGui.QTreeWidget` class provides a tree view that uses a predefined tree model.

    The :class:`PySide.QtGui.QTreeWidget` class is a convenience class that provides a standard tree widget with a classic item-based interface similar to that used by the :class:`PySide.QtGui.QListView` class in Qt 3. This class is based on Qt's Model/View architecture and uses a default model to hold items, each of which is a :class:`PySide.QtGui.QTreeWidgetItem` .

    Developers who do not need the flexibility of the Model/View framework can use this class to create simple hierarchical lists very easily. A more flexible approach involves combining a :class:`PySide.QtGui.QTreeView` with a standard item model. This allows the storage of data to be separated from its representation.

    In its simplest form, a tree widget can be constructed in the following way:

    ::

        treeWidget = QTreeWidget()
        treeWidget.setColumnCount(1)
        items = []
        for i in range(10):
            items.append(QTreeWidgetItem(None, QStringList(QString("item: %1").arg(i))))
        treeWidget.insertTopLevelItems(None, items)


    Before items can be added to the tree widget, the number of columns must be set with :meth:`PySide.QtGui.QTreeWidget.setColumnCount` . This allows each item to have one or more labels or other decorations. The number of columns in use can be found with the :meth:`PySide.QtGui.QTreeWidget.columnCount` function.

    The tree can have a header that contains a section for each column in the widget. It is easiest to set up the labels for each section by supplying a list of strings with :meth:`PySide.QtGui.QTreeWidget.setHeaderLabels` , but a custom header can be constructed with a :class:`PySide.QtGui.QTreeWidgetItem` and inserted into the tree with the :meth:`PySide.QtGui.QTreeWidget.setHeaderItem` function.

    The items in the tree can be sorted by column according to a predefined sort order. If sorting is enabled, the user can sort the items by clicking on a column header. Sorting can be enabled or disabled by calling :meth:`PySide.QtGui.QTreeView.setSortingEnabled` . The :meth:`PySide.QtGui.QTreeView.isSortingEnabled` function indicates whether sorting is enabled.

    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
    |.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/windowsxp-treeview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/macintosh-treeview.png|.. image:: ../../../../../../../src/qt-everywhere-opensource-src-4.7.2/doc/src/images/plastique-treeview.png|
    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
    |A :ref:`Windows XP style<gallery-windowsxp.html>` tree widget.                                              |A :ref:`Macintosh style<gallery-macintosh.html>` tree widget.                                               |A :ref:`Plastique style<gallery-plastique.html>` tree widget.                                               |
    +------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------+

    .. seealso::  :class:`PySide.QtGui.QTreeWidgetItem`  :class:`PySide.QtGui.QTreeWidgetItemIterator`  :class:`PySide.QtGui.QTreeView`  :ref:`Model/View Programming<model-view-programming.html>`  :ref:`Settings Editor Example<tools/settingseditor>` 

.. class:: QTreeWidget([parent=None])

    :param parent: :class:`PySide.QtGui.QWidget`

    Constructs a tree widget with the given ``parent`` .


.. method:: PySide.QtGui.QTreeWidget.addTopLevelItem(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`




    Appends the ``item`` as a top-level item in the widget.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.insertTopLevelItem` 


.. method:: PySide.QtGui.QTreeWidget.addTopLevelItems(items)


    :param items: 







.. method:: PySide.QtGui.QTreeWidget.clear()






    Clears the tree widget by removing all of its items and selections.

    .. note::  Since each item is removed from the tree widget before being deleted, the return value of :meth:`QTreeWidgetItem.treeWidget()<PySide.QtGui.QTreeWidgetItem.treeWidget>` will be invalid when called from an item's destructor.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.takeTopLevelItem`  :meth:`PySide.QtGui.QTreeWidget.topLevelItemCount`  :meth:`PySide.QtGui.QTreeWidget.columnCount` 


.. method:: PySide.QtGui.QTreeWidget.closePersistentEditor(item[, column=0])


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`




    Closes the persistent editor for the ``item`` in the given ``column`` .

    This function has no effect if no persistent editor is open for this combination of item and column.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.openPersistentEditor` 


.. method:: PySide.QtGui.QTreeWidget.collapseItem(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`




    Closes the ``item`` . This causes the tree containing the item's children to be collapsed.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.expandItem`  :meth:`PySide.QtGui.QTreeWidget.currentItem`  :meth:`PySide.QtGui.QTreeWidget.itemAt`  :meth:`PySide.QtGui.QTreeWidget.topLevelItem` 


.. method:: PySide.QtGui.QTreeWidget.columnCount()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of columns displayed in the tree widget.

    By default, this property has a value of 1.



.. method:: PySide.QtGui.QTreeWidget.currentColumn()


    :rtype: :class:`PySide.QtCore.int`




    Returns the current column in the tree widget.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.setCurrentItem`  :meth:`PySide.QtGui.QTreeWidget.columnCount` 


.. method:: PySide.QtGui.QTreeWidget.currentItem()


    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the current item in the tree widget.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.setCurrentItem`  :meth:`PySide.QtGui.QTreeWidget.currentItemChanged` 


.. method:: PySide.QtGui.QTreeWidget.currentItemChanged(current, previous)


    :param current: :class:`PySide.QtGui.QTreeWidgetItem`
    :param previous: :class:`PySide.QtGui.QTreeWidgetItem`






.. method:: PySide.QtGui.QTreeWidget.dropMimeData(parent, index, data, action)


    :param parent: :class:`PySide.QtGui.QTreeWidgetItem`
    :param index: :class:`PySide.QtCore.int`
    :param data: :class:`PySide.QtCore.QMimeData`
    :param action: :attr:`PySide.QtCore.Qt.DropAction`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtGui.QTreeWidget.editItem(item[, column=0])


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`




    Starts editing the ``item`` in the given ``column`` if it is editable.



.. method:: PySide.QtGui.QTreeWidget.expandItem(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`




    Expands the ``item`` . This causes the tree containing the item's children to be expanded.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.collapseItem`  :meth:`PySide.QtGui.QTreeWidget.currentItem`  :meth:`PySide.QtGui.QTreeWidget.itemAt`  :meth:`PySide.QtGui.QTreeWidget.topLevelItem`  :meth:`PySide.QtGui.QTreeWidget.itemExpanded` 


.. method:: PySide.QtGui.QTreeWidget.findItems(text, flags[, column=0])


    :param text: unicode
    :param flags: :class:`PySide.QtCore.Qt.MatchFlags`
    :param column: :class:`PySide.QtCore.int`
    :rtype: 







.. method:: PySide.QtGui.QTreeWidget.headerItem()


    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the item used for the tree widget's header.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.setHeaderItem` 


.. method:: PySide.QtGui.QTreeWidget.indexFromItem(item[, column=0])


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.QModelIndex`




    Returns the :class:`PySide.QtCore.QModelIndex` assocated with the given ``item`` in the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.itemFromIndex`  :meth:`PySide.QtGui.QTreeWidget.topLevelItem` 


.. method:: PySide.QtGui.QTreeWidget.indexOfTopLevelItem(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.int`




    Returns the index of the given top-level ``item`` , or -1 if the item cannot be found.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.sortItems`  :meth:`PySide.QtGui.QTreeWidget.topLevelItemCount` 


.. method:: PySide.QtGui.QTreeWidget.insertTopLevelItem(index, item)


    :param index: :class:`PySide.QtCore.int`
    :param item: :class:`PySide.QtGui.QTreeWidgetItem`




    Inserts the ``item`` at ``index`` in the top level in the view.

    If the item has already been inserted somewhere else it wont be inserted.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.addTopLevelItem`  :meth:`PySide.QtGui.QTreeWidget.columnCount` 


.. method:: PySide.QtGui.QTreeWidget.insertTopLevelItems(index, items)


    :param index: :class:`PySide.QtCore.int`
    :param items: 







.. method:: PySide.QtGui.QTreeWidget.invisibleRootItem()


    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the tree widget's invisible root item.

    The invisible root item provides access to the tree widget's top-level items through the :class:`PySide.QtGui.QTreeWidgetItem` API, making it possible to write functions that can treat top-level items and their children in a uniform way; for example, recursive functions.



.. method:: PySide.QtGui.QTreeWidget.isFirstItemColumnSpanned(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``item`` is set to show only one section over all columns; otherwise returns false.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.setFirstItemColumnSpanned` 


.. method:: PySide.QtGui.QTreeWidget.isItemExpanded(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the given ``item`` is open; otherwise returns false.

    This function is deprecated. Use :meth:`QTreeWidgetItem.isExpanded()<PySide.QtGui.QTreeWidgetItem.isExpanded>` instead.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.itemExpanded` 


.. method:: PySide.QtGui.QTreeWidget.isItemHidden(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the ``item`` is explicitly hidden, otherwise returns false.

    This function is deprecated. Use :meth:`QTreeWidgetItem.isHidden()<PySide.QtGui.QTreeWidgetItem.isHidden>` instead.



.. method:: PySide.QtGui.QTreeWidget.isItemSelected(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.bool`




    Returns true if the ``item`` is selected; otherwise returns false.

    This function is deprecated. Use :meth:`QTreeWidgetItem.isSelected()<PySide.QtGui.QTreeWidgetItem.isSelected>` instead.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.itemSelectionChanged` 


.. method:: PySide.QtGui.QTreeWidget.itemAbove(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the item above the given ``item`` .



.. method:: PySide.QtGui.QTreeWidget.itemActivated(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTreeWidget.itemAt(x, y)


    :param x: :class:`PySide.QtCore.int`
    :param y: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    This is an overloaded function.

    Returns a pointer to the item at the coordinates (``x`` , ``y`` ).



.. method:: PySide.QtGui.QTreeWidget.itemAt(p)


    :param p: :class:`PySide.QtCore.QPoint`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns a pointer to the item at the coordinates ``p`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.visualItemRect` 


.. method:: PySide.QtGui.QTreeWidget.itemBelow(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the item visually below the given ``item`` .



.. method:: PySide.QtGui.QTreeWidget.itemChanged(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTreeWidget.itemClicked(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTreeWidget.itemCollapsed(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`






.. method:: PySide.QtGui.QTreeWidget.itemDoubleClicked(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTreeWidget.itemEntered(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTreeWidget.itemExpanded(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`






.. method:: PySide.QtGui.QTreeWidget.itemFromIndex(index)


    :param index: :class:`PySide.QtCore.QModelIndex`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns a pointer to the :class:`PySide.QtGui.QTreeWidgetItem` assocated with the given ``index`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.indexFromItem` 


.. method:: PySide.QtGui.QTreeWidget.itemPressed(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`






.. method:: PySide.QtGui.QTreeWidget.itemSelectionChanged()








.. method:: PySide.QtGui.QTreeWidget.itemWidget(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QWidget`




    Returns the widget displayed in the cell specified by ``item`` and the given ``column`` .

    .. note::  The tree takes ownership of the widget.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.setItemWidget` 


.. method:: PySide.QtGui.QTreeWidget.mimeData(items)


    :param items: 
    :rtype: :class:`PySide.QtCore.QMimeData`







.. method:: PySide.QtGui.QTreeWidget.mimeTypes()


    :rtype: list of strings




    Returns a list of MIME types that can be used to describe a list of treewidget items.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.mimeData` 


.. method:: PySide.QtGui.QTreeWidget.openPersistentEditor(item[, column=0])


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`




    Opens a persistent editor for the ``item`` in the given ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.closePersistentEditor` 


.. method:: PySide.QtGui.QTreeWidget.removeItemWidget(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`




    Removes the widget set in the given ``item`` in the given ``column`` .



.. method:: PySide.QtGui.QTreeWidget.scrollToItem(item[, hint=EnsureVisible])


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param hint: :attr:`PySide.QtGui.QAbstractItemView.ScrollHint`







.. method:: PySide.QtGui.QTreeWidget.selectedItems()


    :rtype: 




    Returns a list of all selected non-hidden items.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.itemSelectionChanged` 


.. method:: PySide.QtGui.QTreeWidget.setColumnCount(columns)


    :param columns: :class:`PySide.QtCore.int`




    This property holds the number of columns displayed in the tree widget.

    By default, this property has a value of 1.



.. method:: PySide.QtGui.QTreeWidget.setCurrentItem(item, column)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`




    Sets the current ``item`` in the tree widget and the current column to ``column`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.currentItem` 


.. method:: PySide.QtGui.QTreeWidget.setCurrentItem(item, column, command)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`
    :param command: :class:`PySide.QtGui.QItemSelectionModel.SelectionFlags`







.. method:: PySide.QtGui.QTreeWidget.setCurrentItem(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`




    Sets the current ``item`` in the tree widget.

    Unless the selection mode is :attr:`NoSelection<QAbstractItemView.SelectionMode>` , the item is also be selected.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.currentItem`  :meth:`PySide.QtGui.QTreeWidget.currentItemChanged` 


.. method:: PySide.QtGui.QTreeWidget.setFirstItemColumnSpanned(item, span)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param span: :class:`PySide.QtCore.bool`




    Sets the given ``item`` to only show one section for all columns if ``span`` is true; otherwise the item will show one section per column.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.isFirstItemColumnSpanned` 


.. method:: PySide.QtGui.QTreeWidget.setHeaderItem(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`




    Sets the header ``item`` for the tree widget. The label for each column in the header is supplied by the corresponding label in the item.

    The tree widget takes ownership of the item.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.headerItem`  :meth:`PySide.QtGui.QTreeWidget.setHeaderLabels` 


.. method:: PySide.QtGui.QTreeWidget.setHeaderLabel(label)


    :param label: unicode




    Same as setHeaderLabels( :class:`PySide.QtCore.QStringList` (``label`` )).



.. method:: PySide.QtGui.QTreeWidget.setHeaderLabels(labels)


    :param labels: list of strings




    Adds a column in the header for each item in the ``labels`` list, and sets the label for each column.

    Note that :meth:`PySide.QtGui.QTreeWidget.setHeaderLabels` won't remove existing columns.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.setHeaderItem`  :meth:`PySide.QtGui.QTreeWidget.setHeaderLabel` 


.. method:: PySide.QtGui.QTreeWidget.setItemExpanded(item, expand)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param expand: :class:`PySide.QtCore.bool`




    Sets the item referred to by ``item`` to either closed or opened, depending on the value of ``expand`` .

    This function is deprecated. Use :meth:`QTreeWidgetItem.setExpanded()<PySide.QtGui.QTreeWidgetItem.setExpanded>` instead.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.expandItem`  :meth:`PySide.QtGui.QTreeWidget.collapseItem`  :meth:`PySide.QtGui.QTreeWidget.itemExpanded` 


.. method:: PySide.QtGui.QTreeWidget.setItemHidden(item, hide)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param hide: :class:`PySide.QtCore.bool`




    Hides the given ``item`` if ``hide`` is true; otherwise shows the item.

    This function is deprecated. Use :meth:`QTreeWidgetItem.setHidden()<PySide.QtGui.QTreeWidgetItem.setHidden>` instead.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.isItemHidden`  :meth:`PySide.QtGui.QTreeWidget.itemChanged` 


.. method:: PySide.QtGui.QTreeWidget.setItemSelected(item, select)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param select: :class:`PySide.QtCore.bool`




    If ``select`` is true, the given ``item`` is selected; otherwise it is deselected.

    This function is deprecated. Use :meth:`QTreeWidgetItem.setSelected()<PySide.QtGui.QTreeWidgetItem.setSelected>` instead.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.isItemSelected`  :meth:`PySide.QtGui.QTreeWidget.itemSelectionChanged` 


.. method:: PySide.QtGui.QTreeWidget.setItemWidget(item, column, widget)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :param column: :class:`PySide.QtCore.int`
    :param widget: :class:`PySide.QtGui.QWidget`




    Sets the given ``widget`` to be displayed in the cell specified by the given ``item`` and ``column`` .

    The given ``widget`` 's :meth:`PySide.QtGui.QWidget.autoFillBackground` property must be set to true, otherwise the widget's background will be transparent, showing both the model data and the tree widget item.

    This function should only be used to display static content in the place of a tree widget item. If you want to display custom dynamic content or implement a custom editor widget, use :class:`PySide.QtGui.QTreeView` and subclass :class:`PySide.QtGui.QItemDelegate` instead.

    This function cannot be called before the item hierarchy has been set up, i.e., the :class:`PySide.QtGui.QTreeWidgetItem` that will hold ``widget`` must have been added to the view before ``widget`` is set.

    .. note::  The tree takes ownership of the widget.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.itemWidget`  :ref:`Delegate Classes<model-view-programming.html>` 


.. method:: PySide.QtGui.QTreeWidget.sortColumn()


    :rtype: :class:`PySide.QtCore.int`




    Returns the column used to sort the contents of the widget.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.sortItems` 


.. method:: PySide.QtGui.QTreeWidget.sortItems(column, order)


    :param column: :class:`PySide.QtCore.int`
    :param order: :attr:`PySide.QtCore.Qt.SortOrder`







.. method:: PySide.QtGui.QTreeWidget.supportedDropActions()


    :rtype: :class:`PySide.QtCore.Qt.DropActions`




    Returns the drop actions supported by this view.

    .. seealso::  :class:`Qt.DropActions` 


.. method:: PySide.QtGui.QTreeWidget.takeTopLevelItem(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Removes the top-level item at the given ``index`` in the tree and returns it, otherwise returns 0;

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.insertTopLevelItem`  :meth:`PySide.QtGui.QTreeWidget.topLevelItem`  :meth:`PySide.QtGui.QTreeWidget.topLevelItemCount` 


.. method:: PySide.QtGui.QTreeWidget.topLevelItem(index)


    :param index: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtGui.QTreeWidgetItem`




    Returns the top level item at the given ``index`` , or 0 if the item does not exist.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.topLevelItemCount`  :meth:`PySide.QtGui.QTreeWidget.insertTopLevelItem` 


.. method:: PySide.QtGui.QTreeWidget.topLevelItemCount()


    :rtype: :class:`PySide.QtCore.int`




    This property holds the number of top-level items.

    By default, this property has a value of 0.

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.columnCount`  :meth:`PySide.QtGui.QTreeWidget.currentItem` 


.. method:: PySide.QtGui.QTreeWidget.visualItemRect(item)


    :param item: :class:`PySide.QtGui.QTreeWidgetItem`
    :rtype: :class:`PySide.QtCore.QRect`




    Returns the rectangle on the viewport occupied by the item at ``item`` .

    .. seealso::  :meth:`PySide.QtGui.QTreeWidget.itemAt` 



